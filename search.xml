<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络协议(四)-网络层</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E5%9B%9B-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E5%9B%9B-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IP协议"><a href="#1-IP协议" class="headerlink" title="1. IP协议"></a>1. IP协议</h1><pre><code>root@test:~# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether fa:16:3e:c7:79:75 brd ff:ff:ff:ff:ff:ff    inet 10.100.122.2/24 brd 10.100.122.255 scope global eth0       valid_lft forever preferred_lft forever    inet6 fe80::f816:3eff:fec7:7975/64 scope link        valid_lft forever preferred_lft forever</code></pre><p>10.100.122.2是一个IP地址，inet6 fe80::f816:3eff:fec7:7975/64是IPv6地址。IP地址分为五类： </p><p><img src="https://i.loli.net/2020/02/02/D9CGtkc5s1TKfN4.jpg" alt="fig1.jpg"></p><p>D类是组播地址，使用这一类地址，属于某个组的机器都能收到。</p><p>下面这个表展示了ABC三类地址所能包含的主机的数量：</p><p><img src="https://i.loli.net/2020/02/02/ztmCUuYxdwejnfS.jpg" alt="fig2.jpg"></p><p>C类地址只能包含254的主机，而B类地址又太大了，能包含65534个主机，因此采用了CIDR方式进行优化</p><h2 id="1-1-CIDR-无类型域间选路"><a href="#1-1-CIDR-无类型域间选路" class="headerlink" title="1.1 CIDR 无类型域间选路"></a>1.1 CIDR 无类型域间选路</h2><h3 id="1-1-1-CIDR的斜杆-数字的表示方式"><a href="#1-1-1-CIDR的斜杆-数字的表示方式" class="headerlink" title="1.1.1 CIDR的斜杆+数字的表示方式"></a>1.1.1 CIDR的斜杆+数字的表示方式</h3><p>这种方式打破了上述的分成几类地址的方式，将32位地址一分为二，前面是网络号，后面是主机号，例如：</p><pre><code>10.100.122.2/24</code></pre><p>斜杠和24表示对于这个32位地址而言，前24位是其网络号，后8位是其主机号。</p><h3 id="1-1-2-广播地址"><a href="#1-1-2-广播地址" class="headerlink" title="1.1.2 广播地址"></a>1.1.2 广播地址</h3><p>继续以上述的地址为例，其广播地址为</p><pre><code>10.100.122.255</code></pre><p>如果发送这个地址，所有10.100.122网络里的机器都可以收到</p><h3 id="1-1-3-子网掩码"><a href="#1-1-3-子网掩码" class="headerlink" title="1.1.3 子网掩码"></a>1.1.3 子网掩码</h3><p>继续以上述的地址为例，其子网掩码为</p><pre><code>255.255.255.0</code></pre><p>与IP地址按位与，就可以得到网络号</p><h2 id="1-2-公有IP地址和私有IP地址"><a href="#1-2-公有IP地址和私有IP地址" class="headerlink" title="1.2 公有IP地址和私有IP地址"></a>1.2 公有IP地址和私有IP地址</h2><p>这是按类对IP地址进行划分的时候的概念，私有地址，即允许组织内部的IT人员自己进行管理分配的地址。公有IP的资源有组织统一分配的，需要去买。</p><p><img src="https://i.loli.net/2020/02/02/KF8xGTD7mnwOBob.jpg" alt="fig3.jpg"></p><p>表格中就有我们很常见的<code>192.168.0.0</code>,一般来说，整个网络的第一个地址<code>192.168.0.1</code>就是你这个私有网络的出口地址，比如你家的路由器地址就是这个；而<code>192.1678.0.255</code>就是广播地址。</p><h2 id="1-3-动态主机配置协议-DHCP"><a href="#1-3-动态主机配置协议-DHCP" class="headerlink" title="1.3 动态主机配置协议(DHCP)"></a>1.3 动态主机配置协议(DHCP)</h2><p>网络管理员需要做的是，配置一段共享的IP地址，每一台新接入的机器都会通过DHCP协议，来这个共享的IP地址里申请，然后自动配置好。</p><h3 id="1-3-1-DHCP的工作方式"><a href="#1-3-1-DHCP的工作方式" class="headerlink" title="1.3.1 DHCP的工作方式"></a>1.3.1 DHCP的工作方式</h3><ol><li>新机器加入进网络 – DHCP discover</li></ol><p>新机器使用IP地址<code>0.0.0.0</code>发送一个广播包，目的IP地址是<code>255.255.255.255</code>. 广播包封装了UDP， UDP封装了BOOTP，DHCP是BOOTP的增强版。</p><p>在这个广播包里，新机器会说我是新来的(Boot Request), 我的MAC地址是blabla，我还没有IP地址，需要租一个！</p><p><img src="https://i.loli.net/2020/02/02/8U3bkmHJVsXzfgu.jpg" alt="fig4.jpg"></p><ol start="2"><li>DHCP offer</li></ol><p>DHCP server 为客户保留一个IP地址，不会再给别的客户用这个IP地址了。DHCP的offer的格式如下，里面有给新人分配的地址：</p><p><img src="https://i.loli.net/2020/02/02/JgBRu5WK9QvYFdG.jpg" alt="fig5.jpg"></p><p>这个时候仍然使用广播IP作为目的地址，因为此时新机器还没有IP地址呢。值得注意的是，有可能在配置的时候会有多个DHCP server，这个新机器可能收到多个DHCP Offer，新机器会选择一般是最近的一个，然后向网络发送一个告知信息的信息包，成为DHCP request</p><ol start="3"><li>DHCP request</li></ol><p>这个广播数据包里面包含客户端的MAC地址，接受的租约中的IP地址，提供此租约的DHCP服务器地址等信息。</p><p><img src="https://i.loli.net/2020/02/02/nzURpgrOsjeIJmd.jpg" alt="fig6.jpg"></p><p>注意这个时候新机器的IP还没有得到确认，所以客户端仍然使用0.0.0.0作为源地址</p><ol start="4"><li>DHCP ACK</li></ol><p>当DHCP server接收到客户机的DHCP request之后，会广播返回给客户机一个DHCP ACK消息，表示已经接受客户机的选择</p><p><img src="https://i.loli.net/2020/02/02/fYRICBnTgHGqF6c.jpg" alt="fig7.jpg"></p><h3 id="1-3-2-IP地址的收回和续租"><a href="#1-3-2-IP地址的收回和续租" class="headerlink" title="1.3.2 IP地址的收回和续租"></a>1.3.2 IP地址的收回和续租</h3><p>客户机会在租期过去 50% 的时候，直接向为其提供 IP 地址的 DHCP Server 发送 DHCP request 消息包。客户机接收到该服务器回应的 DHCP ACK 消息包，会根据包中所提供的新的租期以及其他已经更新的 TCP/IP 参数，更新自己的配置。这样，IP 租用更新就完成了。</p><h3 id="1-3-3-DHCP协议-自动安装操作系统-PXE-预启动执行环境"><a href="#1-3-3-DHCP协议-自动安装操作系统-PXE-预启动执行环境" class="headerlink" title="1.3.3 DHCP协议- 自动安装操作系统 - PXE(预启动执行环境)"></a>1.3.3 DHCP协议- 自动安装操作系统 - PXE(预启动执行环境)</h3><p>其实，这个过程和操作系统启动的过程有点儿像。首先，启动 BIOS。这是一个特别小的小系统，只能干特别小的一件事情。其实就是读取硬盘的 MBR 启动扇区，将 GRUB 启动起来；然后将权力交给 GRUB，GRUB 加载内核、加载作为根文件系统的 initramfs 文件；然后将权力交给内核；最后内核启动，初始化整个操作系统。那我们安装操作系统的过程，只能插在 BIOS 启动之后了。因为没安装系统之前，连启动扇区都没有。因而这个过程叫做<strong>预启动执行环境（Pre-boot Execution Environment）</strong></p><p>PXE协议会先把客户端放到BIOS里面，当计算机启动的时候，BIOS把PXE客户端调入内存里面，就可以连接到服务端做一些操作了。</p><p>首先，PXE 客户端自己也需要有个 IP 地址。因为 PXE 的客户端启动起来，就可以发送一个 DHCP 的请求，让 DHCP Server 给它分配一个地址。PXE 客户端有了自己的地址，那它怎么知道 PXE 服务器在哪里呢？对于其他的协议，都好办，要么人告诉他。例如，告诉浏览器要访问的 IP 地址，或者在配置中告诉它；例如，微服务之间的相互调用。</p><p>但是 PXE 客户端启动的时候，啥都没有。好在 DHCP Server 除了分配 IP 地址以外，还可以做一些其他的事情。这里有一个 DHCP Server 的一个样例配置：</p><pre><code>ddns-update-style interim;ignore client-updates;allow booting;allow bootp;subnet 192.168.1.0 netmask 255.255.255.0{option routers 192.168.1.1;option subnet-mask 255.255.255.0;option time-offset -18000;default-lease-time 21600;max-lease-time 43200;range dynamic-bootp 192.168.1.240 192.168.1.250;filename &quot;pxelinux.0&quot;;next-server 192.168.1.180;}</code></pre><p>按照上面的原理，默认的 DHCP Server 是需要配置的，无非是我们配置 IP 的时候所需要的 IP 地址段、子网掩码、网关地址、租期等。如果想使用 PXE，则需要配置 next-server，指向 PXE 服务器的地址，另外要配置初始启动文件 filename。</p><p><img src="https://i.loli.net/2020/02/02/jzfUBDdHvXFOorq.jpg" alt="fig8.jpg"></p><h1 id="2-ICMP协议"><a href="#2-ICMP协议" class="headerlink" title="2. ICMP协议"></a>2. ICMP协议</h1><p>ping的工作原理，ping是基于ICMP协议来工作的，ICMP全称为: Internet Control Message Protocol，就是互联网控制报文协议。</p><p>ICMP报文是封装在IP包里面的。如图所示</p><p><img src="https://i.loli.net/2020/02/02/msIXOvPpSal59h3.jpg" alt="fig9.jpg"></p><h2 id="2-1-查询报文类型"><a href="#2-1-查询报文类型" class="headerlink" title="2.1 查询报文类型"></a>2.1 查询报文类型</h2><p>ICMP主动发起的，对于ping的主动请求，进行网络抓包，称为ICMP ECHO REQUEST. 同理主动请求的回复称为ICMP ECHO REPLY. 比起原生的ICMP多了标识符和序号两个字段。</p><h2 id="2-2-差错报文类型"><a href="#2-2-差错报文类型" class="headerlink" title="2.2 差错报文类型"></a>2.2 差错报文类型</h2><ol><li>终点不可达 3</li></ol><ul><li>网络不可达 0</li><li>主机不可达 1</li><li>协议不可达 2</li><li>端口不可达 3</li><li>需要进行分片但设置了不分片</li></ul><ol start="2"><li>源抑制 4</li></ol><p>源站放慢了速度</p><ol start="3"><li>超时 11</li></ol><p>超过了网络包的生存时间，但是还没到</p><ol start="4"><li>重定向 5</li></ol><p>换下次发送使用的路由器</p><h2 id="2-3-Ping的使用-查询报文类型的使用"><a href="#2-3-Ping的使用-查询报文类型的使用" class="headerlink" title="2.3 Ping的使用 查询报文类型的使用"></a>2.3 Ping的使用 查询报文类型的使用</h2><p>下图描述了ping的整个发送和接收过程。<br><img src="https://i.loli.net/2020/02/02/myJlI8dY1rju3sw.jpg" alt="fig10.jpg"></p><p>假定主机 A 的 IP 地址是 192.168.1.1，主机 B 的 IP 地址是 192.168.1.2，它们都在同一个子网。那当你在主机 A 上运行“ping 192.168.1.2”后，会发生什么呢?</p><p>ping 命令执行的时候，源主机首先会构建一个 ICMP 请求数据包，ICMP 数据包内包含多个字段。最重要的是两个，第一个是类型字段，对于请求数据包而言该字段为 8；另外一个是顺序号，主要用于区分连续 ping 的时候发出的多个数据包。每发出一个请求数据包，顺序号会自动加 1。为了能够计算往返时间 RTT，它会在报文的数据部分插入发送时间。</p><p>然后，由 ICMP 协议将这个数据包连同地址 192.168.1.2 一起交给 IP 层。IP 层将以 192.168.1.2 作为目的地址，本机 IP 地址作为源地址，加上一些其他控制信息，构建一个 IP 数据包。</p><p>接下来，需要加入 MAC 头。如果在本节 ARP 映射表中查找出 IP 地址 192.168.1.2 所对应的 MAC 地址，则可以直接使用；如果没有，则需要发送 ARP 协议查询 MAC 地址，获得 MAC 地址后，由数据链路层构建一个数据帧，目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址；还要附加上一些控制信息，依据以太网的介质访问规则，将它们传送出去。</p><p>主机 B 收到这个数据帧后，先检查它的目的 MAC 地址，并和本机的 MAC 地址对比，如符合，则接收，否则就丢弃。接收后检查该数据帧，将 IP 数据包从帧中提取出来，交给本机的 IP 层。同样，IP 层检查后，将有用的信息提取后交给 ICMP 协议。</p><p>主机 B 会构建一个 ICMP 应答包，应答数据包的类型字段为 0，顺序号为接收到的请求数据包中的顺序号，然后再发送出去给主机 A。</p><p>在规定的时候间内，源主机如果没有接到 ICMP 的应答包，则说明目标主机不可达；如果接收到了 ICMP 应答包，则说明目标主机可达。此时，源主机会检查，用当前时刻减去该数据包最初从源主机上发出的时刻，就是 ICMP 数据包的时间延迟。</p><h2 id="2-4-traceroute-差错报文类型的使用"><a href="#2-4-traceroute-差错报文类型的使用" class="headerlink" title="2.4 traceroute 差错报文类型的使用"></a>2.4 traceroute 差错报文类型的使用</h2><p>traceroute会故意设置特殊的TTL，来追踪去往目的地沿途经过的路由器。Traceroute 的参数指向某个目的 IP 地址，它会发送一个 UDP 的数据包。将 TTL 设置成 1，也就是说一旦遇到一个路由器或者一个关卡，就表示它“牺牲”了。</p><p>如果中间的路由器不止一个，当然碰到第一个就“牺牲”。于是，返回一个 ICMP 包，也就是网络差错包，类型是时间超时。那大军前行就带一顿饭，试一试走多远会被饿死，然后找个哨探回来报告，那我就知道大军只带一顿饭能走多远了。接下来，将 TTL 设置为 2。第一关过了，第二关就“牺牲”了，那我就知道第二关有多远。如此反复，直到到达目的主机。这样，Traceroute 就拿到了所有的路由器 IP。当然，有的路由器压根不会回这个 ICMP。这也是 Traceroute 一个公网的地址，看不到中间路由的原因。</p><p>怎么知道 UDP 有没有到达目的主机呢？Traceroute 程序会发送一份 UDP 数据报给目的主机，但它会选择一个不可能的值作为 UDP 端口号（大于 30000）。当该数据报到达时，将使目的主机的 UDP 模块产生一份“端口不可达”错误 ICMP 报文。如果数据报没有到达，则可能是超时。</p><p>Traceroute 还有一个作用是故意设置不分片，从而确定路径的 MTU。</p><p>要做的工作首先是发送分组，并设置“不分片”标志。发送的第一个分组的长度正好与出口 MTU 相等。如果中间遇到窄的关口会被卡住，会发送 ICMP 网络差错包，类型为“需要进行分片但设置了不分片位”。其实，这是人家故意的好吧，每次收到 ICMP“不能分片”差错时就减小分组的长度，直到到达目标主机。</p><h1 id="3-跨网关访问"><a href="#3-跨网关访问" class="headerlink" title="3. 跨网关访问"></a>3. 跨网关访问</h1><p><img src="https://i.loli.net/2020/02/02/RY9W3aixfpqEtOc.jpg" alt="fig16.jpg"><br>一旦配置了IP地址和网关，往往就能够指定目标地址进行访问了。在跨网关访问的时候，会牵扯到MAC地址和IP地址的变化。</p><p>在 MAC 头里面，先是目标 MAC 地址，然后是源 MAC 地址，然后有一个协议类型，用来说明里面是 IP 协议。IP 头里面的版本号，目前主流的还是 IPv4，服务类型 TOS 在第三节讲 ip addr 命令的时候讲过，TTL 在第 7 节讲 ICMP 协议的时候讲过。另外，还有 8 位标识协议。这里到了下一层的协议，也就是，是 TCP 还是 UDP。最重要的就是源 IP 和目标 IP。先是源 IP 地址，然后是目标 IP 地址。</p><p>在任何一台机器上，当要访问另外一个IP地址的时候，都会先判断这个目标地址和当前机器的IP地址是否在同一个网段当中。使用CIDR和子网掩码来进行判断。</p><p>如果不是同一个网段的，就需要将请求发往默认网关gateway. Gateway的地址一定和源IP地址是一个网段的。例如192.168.1.0/24这个网段，Gateway往往是192.168.1.1/24或者192.168.1.2/24 </p><p>如何发往默认网关呢？网关不是和源 IP 地址是一个网段的么？这个过程就和发往同一个网段的其他机器是一样的：将源地址和目标 IP 地址放入 IP 头中，通过 ARP 获得网关的 MAC 地址，将源 MAC 和网关的 MAC 放入 MAC 头中，发送出去。网关所在的端口，例如 192.168.1.1/24 将网络包收进来，然后接下来怎么做，就完全看网关的了。</p><p>网关往往是一个<strong><em>路由器</em></strong>，是个三层转发设备（<strong><em>就是把MAC头和IP头都取下来，然后根据里面的内容，看看接下来把包往哪里转发的设备</em></strong>）</p><h2 id="3-1-静态路由"><a href="#3-1-静态路由" class="headerlink" title="3.1 静态路由"></a>3.1 静态路由</h2><p>在路由器上配置一条条规则，通过网关进行转发</p><h3 id="3-1-1-转发网关"><a href="#3-1-1-转发网关" class="headerlink" title="3.1.1 转发网关"></a>3.1.1 转发网关</h3><p>只改变MAC地址，不改变IP的网关</p><p><img src="https://i.loli.net/2020/02/02/QJE7CzFcOVjDuTp.jpg" alt="fig11.jpg"></p><p>服务器 A 要访问服务器 B。首先，服务器 A 会思考，192.168.4.101 和我不是一个网段的，因而需要先发给网关。那网关是谁呢？已经静态配置好了，网关是 192.168.1.1。网关的 MAC 地址是多少呢？发送 ARP 获取网关的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源MAC: server A MAC addr</li><li>目标MAC: 192.168.1.1 这个网口的MAC</li><li>源IP： 192.168.1.101</li><li>目标IP: 192.168.4.101 </li></ul><p>包到达 192.168.1.1 这个网口，发现 MAC 一致，将包收进来，开始思考往哪里转发。在路由器 A 中配置了静态路由之后，要想访问 192.168.4.0/24，要从 192.168.56.1 这个口出去，下一跳为 192.168.56.2。</p><p>于是，路由器 A 思考的时候，匹配上了这条路由，要从 192.168.56.1 这个口发出去，发给 192.168.56.2，那 192.168.56.2 的 MAC 地址是多少呢？路由器 A 发送 ARP 获取 192.168.56.2 的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源MAC: 192.168.56.1 MAC addr</li><li>目标MAC: 192.168.56.2 这个网口的MAC</li><li>源IP： 192.168.1.101</li><li>目标IP: 192.168.4.101 </li></ul><p>包到达 192.168.56.2 这个网口，发现 MAC 一致，将包收进来，开始思考往哪里转发。在路由器 B 中配置了静态路由，要想访问 192.168.4.0/24，要从 192.168.4.1 这个口出去，没有下一跳了。</p><p>于是，路由器 B 思考的时候，匹配上了这条路由，要从 192.168.4.1 这个口发出去，发给 192.168.4.101。那 192.168.4.101 的 MAC 地址是多少呢？路由器 B 发送 ARP 获取 192.168.4.101 的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源MAC: 192.168.4.1 MAC addr</li><li>目标MAC: 192.168.4.101 这个网口的MAC</li><li>源IP： 192.168.1.101</li><li>目标IP: 192.168.4.101 </li></ul><p>包到达服务器B，由上述过程可以看出，MAC地址一直都是变的，而IP地址一直都不会变。</p><h3 id="3-1-2-NAT网关-Network-Address-Translation"><a href="#3-1-2-NAT网关-Network-Address-Translation" class="headerlink" title="3.1.2 NAT网关 (Network Address Translation)"></a>3.1.2 NAT网关 (Network Address Translation)</h3><p>NAT网关出现的原因是IP冲突，如下图所示，各个局域网在设值的时候IP是一样的情况。</p><p><img src="https://i.loli.net/2020/02/02/tymIY6pk3iwNz1a.jpg" alt="fig12.jpg"></p><p>这里遇见的第一个问题是，局域网之间没有商量过，各定各的网段，因而 IP 段冲突了。最左面源地址是 192.168.1.101，最右面目标地址也是 192.168.1.101，如果单从 IP 地址上看，简直是自己访问自己，其实是源的 192.168.1.101 要访问目标的 192.168.1.101。</p><p>解决这个问题，就是在中间的局域网中使用另外的地址，来进行区分。有点像身份证和护照的关系。</p><p>首先，目标服务器 B 在国际上要有一个国际的身份，我们给它一个 192.168.56.2。在网关 B 上，我们记下来，国际身份 192.168.56.2 对应国内身份 192.168.1.101。凡是要访问 192.168.56.2，都转成 192.168.1.101。</p><p>于是，源服务器 A 要访问目标服务器 B，要指定的目标地址为 192.168.56.2。这是它的国际身份。服务器 A 想，192.168.56.2 和我不是一个网段的，因而需要发给网关，网关是谁？已经静态配置好了，网关是 192.168.1.1，网关的 MAC 地址是多少？发送 ARP 获取网关的 MAC 地址，然后发送包。包的内容是这样的：</p><ul><li>源MAC: 服务器A 的 MAC addr</li><li>目标MAC: 192.168.1.1 这个网口的MAC</li><li>源IP： 192.168.1.101</li><li>目标IP: 192.168.56.2</li></ul><p>包到达 192.168.1.1 这个网口，发现 MAC 一致，将包收进来，开始思考往哪里转发。</p><p>在路由器 A 中配置了静态路由：要想访问 192.168.56.2/24，要从 192.168.56.1 这个口出去，没有下一跳了。</p><p>于是，路由器 A 思考的时候，匹配上了这条路由，要从 192.168.56.1 这个口发出去，发给 192.168.56.2。那 192.168.56.2 的 MAC 地址是多少呢？路由器 A 发送 ARP 获取 192.168.56.2 的 MAC 地址。</p><p>当网络包发送到中间的局域网的时候，服务器 A 也需要有个国际身份，因而在国际上，源 IP 地址也不能用 192.168.1.101，需要改成 192.168.56.1。发送包的内容是这样的：</p><ul><li>源MAC: 192.168.1.1 MAC addr</li><li>目标MAC: 192.168.1.101 这个网口的MAC</li><li>源IP： 192.168.56.1</li><li>目标IP: 192.168.1.101</li></ul><p>从服务器B接收的包可以看出，源IP是服务器A的国际身份，发送包回去的时候，也是发给这个国际身份，由路由器A做NAT，转换为国内身份。</p><h2 id="3-2-动态路由"><a href="#3-2-动态路由" class="headerlink" title="3.2 动态路由"></a>3.2 动态路由</h2><h3 id="3-2-1-路由表"><a href="#3-2-1-路由表" class="headerlink" title="3.2.1 路由表"></a>3.2.1 路由表</h3><p>路由器是一台网络设备，有多张网卡，当一个入口的网络包送到路由器时，它会根据一个本地的转发信息库，来决定如何正确地转发流量。这个转发信息库通常被称为路由表。</p><p>一张路由表会有多个路由规则，每一天规则至少包含这三项信息： </p><ul><li>目的网络</li><li>出口设备</li><li>下一跳网关</li></ul><h3 id="3-2-2-策略路由"><a href="#3-2-2-策略路由" class="headerlink" title="3.2.2 策略路由"></a>3.2.2 策略路由</h3><p>根据多个参数来配置路由，这样来使得不同来源的包走不同的路由。</p><p>家里的网络呢，就是普通的家用网段 192.168.1.x/24。家里有两个租户，分别把线连到路由器上。IP 地址为 192.168.1.101/24 和 192.168.1.102/24，网关都是 192.168.1.1/24，网关在路由器上。两个运营商都要为这个网关配置一个公网的 IP 地址。如果你去查看你们家路由器里的网段，基本就是我图中画的样子。</p><p><img src="https://i.loli.net/2020/02/02/ZCbyHwg8prBSIz2.jpg" alt="fig13.jpg"></p><p>运行商里面也有一个 IP 地址，在运营商网络里面的网关。不同的运营商方法不一样，有的是 /32 的，也即一个一对一连接。例如，运营商 1 给路由器分配的地址是 183.134.189.34/32，而运营商网络里面的网关是 183.134.188.1/32。有的是 /30 的，也就是分了一个特别小的网段。运营商 2 给路由器分配的地址是 60.190.27.190/30，运营商网络里面的网关是 60.190.27.189/30。</p><pre><code>$ ip route list table main 60.190.27.189/30 dev eth3  proto kernel  scope link  src 60.190.27.190183.134.188.1 dev eth2  proto kernel  scope link  src 183.134.189.34192.168.1.0/24 dev eth1  proto kernel  scope link  src 192.168.1.1127.0.0.0/8 dev lo  scope linkdefault via 183.134.188.1 dev eth2</code></pre><ul><li>如果去运营商二，就走 eth3；</li><li>如果去运营商一呢，就走 eth2；</li><li>如果访问内网，就走 eth1；</li><li>如果所有的规则都匹配不上，默认走运营商一，也即走快的网络。</li></ul><p>如何让IP默认走运营商2？</p><p>添加一个新的table， chao</p><pre><code># echo 200 chao &gt;&gt; /etc/iproute2/rt_tables</code></pre><p>添加一条规则：</p><pre><code># ip rule add from 192.168.1.101 table chao# ip rule ls0:    from all lookup local 32765:    from 10.0.0.10 lookup chao32766:    from all lookup main 32767:    from all lookup default</code></pre><p>设定规则为：从 192.168.1.101 来的包都查看个 chao 这个新的路由表。<br>在chao路由表中添加规则： </p><pre><code># ip route add default via 60.190.27.189 dev eth3 table chao# ip route flush cache</code></pre><h3 id="3-2-3-动态路由算法"><a href="#3-2-3-动态路由算法" class="headerlink" title="3.2.3 动态路由算法"></a>3.2.3 动态路由算法</h3><p>寻找最短路径，主要使用Bellman-Ford算法和Dijkstra算法。</p><ol><li>距离矢量路由算法</li></ol><p>这种算法的基本思路是，每个路由器都保存一个路由表，包含多行，每行对应网络中的一个路由器，每一行包含两部分信息，一个是要到目标路由器，从那条线出去，另一个是到目标路由器的距离。</p><p>由此可以看出，每个路由器都是知道全局信息的。那这个信息如何更新呢？每个路由器都知道自己和邻居之间的距离，每过几秒，每个路由器都将自己所知的到达所有的路由器的距离告知邻居，每个路由器也能从邻居那里得到相似的信息。</p><p>每个路由器根据新收集的信息，计算和其他路由器的距离，比如自己的一个邻居距离目标路由器的距离是 M，而自己距离邻居是 x，则自己距离目标路由器是 x+M。</p><p>存在的问题1： <strong><em>好消息传得快，坏消息传得慢</em></strong> 如果有个路由器加入了这个网络，它的邻居就能很快发现它，然后将消息广播出去。要不了多久，整个网络就都知道了。但是一旦一个路由器挂了，挂的消息是没有广播的。当每个路由器发现原来的道路到不了这个路由器的时候，感觉不到它已经挂了，而是试图通过其他的路径访问，直到试过了所有的路径，才发现这个路由器是真的挂了。</p><p>原来的网络包括两个节点，B 和 C。A 加入了网络，它的邻居 B 很快就发现 A 启动起来了。于是它将自己和 A 的距离设为 1，同样 C 也发现 A 起来了，将自己和 A 的距离设置为 2。但是如果 A 挂掉，情况就不妙了。B 本来和 A 是邻居，发现连不上 A 了，但是 C 还是能够连上，只不过距离远了点，是 2，于是将自己的距离设置为 3。殊不知 C 的距离 2 其实是基于原来自己的距离为 1 计算出来的。C 发现自己也连不上 A，并且发现 B 设置为 3，于是自己改成距离 4。依次类推，数越来越大，直到超过一个阈值，我们才能判定 A 真的挂了。</p><p>存在的问题2： <strong><em>每次发送的时候，要发送整个全局路由表</em></strong> </p><p>当网络规模比较小的时候，全局路由表比较小（15跳以内）；如果网络规模比较大，就不适用了。</p><p>(不相关的分割线： 感觉很像区块链在做的事情，行为上的类似，目的上的不同)</p><ol start="2"><li>链路状态路由算法</li></ol><p>Link state routing </p><p>这种算法的基本思路是：当一个路由器启动的时候，首先是发现邻居，向邻居 say hello，邻居都回复。然后计算和邻居的距离，发送一个 echo，要求马上返回，除以二就是距离。然后将自己和邻居之间的链路状态包广播出去，发送到整个网络的每个路由器。这样每个路由器都能够收到它和邻居之间的关系的信息。因而，每个路由器都能在自己本地构建一个完整的图，然后针对这个图使用 Dijkstra 算法，找到两点之间的最短路径。</p><p>不像距离距离矢量路由协议那样，更新时发送整个路由表。链路状态路由协议只广播更新的或改变的网络拓扑，这使得更新信息更小，节省了带宽和 CPU 利用率。而且一旦一个路由器挂了，它的邻居都会广播这个消息，可以使得坏消息迅速收敛。</p><h3 id="3-2-4-动态路由协议"><a href="#3-2-4-动态路由协议" class="headerlink" title="3.2.4 动态路由协议"></a>3.2.4 动态路由协议</h3><ol><li>基于链路状态路由算法的OSPF</li></ol><p>OSPF - Open Shortest Path First 开放式最短路径优先）就是基于链路状态路由协议，广泛应用在数据中心中的协议。由于主要用在数据中心内部，用于路由决策，因而称为内部网关协议Interior Gateway Protocol </p><p>内部网关协议的重点就是找到最短的路径。在一个组织内部，路径最短往往最优。当然有时候 OSPF 可以发现多个最短的路径，可以在这多个路径中进行负载均衡，这常常被称为等价路由。</p><p><img src="https://i.loli.net/2020/02/02/tbrWjqNz2swxkVY.jpg" alt="fig14.jpg"></p><ol start="2"><li>基于距离矢量路由算法的BGP(Border Gateway Protocol)</li></ol><p>外部政策的问题，每个数据中心都会设值自己的Policy：</p><ul><li>哪些外部IP可以让内部知道</li><li>哪些内部IP可以让外部知道</li></ul><p>每个都为一个自治系统AS, Autonomous System,自治系统分为几种类型：</p><ul><li>Stub AS：对外只有一个连接。这类 AS 不会传输其他 AS 的包。例如，个人或者小公司的网络。</li><li>Multihomed AS：可能有多个连接连到其他的 AS，但是大多拒绝帮其他的 AS 传输包。例如一些大公司的网络。</li><li>Transit AS：有多个连接连到其他的 AS，并且可以帮助其他的 AS 传输包。例如主干网。</li></ul><p>每个自治系统都有<strong>* 边界路由器*</strong>，来和外界进行联系。</p><p><img src="https://i.loli.net/2020/02/02/2CgFAUMGohak7OJ.jpg" alt="fig15.jpg"></p><p>BGP协议使用的是路径矢量路由协议，（path-vector protocol）。它是距离矢量路由协议的升级版。</p><p>前面说了距离矢量路由协议的缺点。其中一个是收敛慢。在 BGP 里面，除了下一跳 hop 之外，还包括了自治系统 AS 的路径，从而可以避免坏消息传的慢的问题，也即上面所描述的，B 知道 C 原来能够到达 A，是因为通过自己，一旦自己都到达不了 A 了，就不用假设 C 还能到达 A 了。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> IP Protocol </tag>
            
            <tag> CIDR </tag>
            
            <tag> DHCP </tag>
            
            <tag> ICMP </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议(三)-链路层</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%B8%89-%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%B8%89-%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>MAC层是用来解决多路访问的堵车问题的，ARP通过在局域网大吼一声的方式来寻找目标MAC地址。交换机有MAC地址学习能力。 </p><h1 id="1-MAC层"><a href="#1-MAC层" class="headerlink" title="1. MAC层"></a>1. MAC层</h1><p>在物理层中，我们引入了Hub，集线器，这种设备可以将多个终端连起来，但是它会把所有自己收到的信息都复制到其他端口当中。</p><p>需要在数据链路层解决的问题有：</p><ol><li>包的发送方和接收方</li><li>多个包发送的时候的先后顺序的问题</li><li>发生错误了怎么办</li></ol><p>这些问题都是在数据链路层，也即MAC层(Medium Access Control)，要解决的问题.</p><p>做媒体访问控制，控制在往媒体上发数据的时候，谁先发谁后发的问题，防止发生混乱。—— 多路访问规则</p><p>下面针对三个问题的解决进行详细分析</p><h2 id="1-1-包的发送方接收方的确认"><a href="#1-1-包的发送方接收方的确认" class="headerlink" title="1.1 包的发送方接收方的确认"></a>1.1 包的发送方接收方的确认</h2><h3 id="1-1-1-知道目标和源MAC地址时"><a href="#1-1-1-知道目标和源MAC地址时" class="headerlink" title="1.1.1 知道目标和源MAC地址时"></a>1.1.1 知道目标和源MAC地址时</h3><p>用物理地址，——链路层地址，常被称为MAC地址</p><p><img src="https://i.loli.net/2020/02/02/apAPTkyrFx6vczW.jpg" alt="fig1.jpg"></p><h3 id="1-1-2-只知道目标IP地址时-——-ARP协议"><a href="#1-1-2-只知道目标IP地址时-——-ARP协议" class="headerlink" title="1.1.2 只知道目标IP地址时 —— ARP协议"></a>1.1.2 只知道目标IP地址时 —— ARP协议</h3><p>ARP协议，是已知IP地址，求MAC地址的协议。</p><p>在一个局域网内，知道IP，想获得对应的MAC，就是在局域网中大吼一声， 看回应，hhhh</p><p><img src="https://i.loli.net/2020/02/02/pS2vUbZIw638hGg.jpg" alt="fig2.jpg"></p><p>具体询问和回答的报文如下所示：</p><p><img src="https://i.loli.net/2020/02/02/TvSIZwFQf1tRWsy.jpg" alt="fig3.jpg"></p><h2 id="1-2-多路访问原则"><a href="#1-2-多路访问原则" class="headerlink" title="1.2 多路访问原则"></a>1.2 多路访问原则</h2><ol><li>信道划分：分成多个车道，各走各的</li><li>轮流协议：单双号限行</li><li>随机接入协议：错峰</li></ol><h2 id="1-3-错误处理-——-循环冗余检测"><a href="#1-3-错误处理-——-循环冗余检测" class="headerlink" title="1.3 错误处理 —— 循环冗余检测"></a>1.3 错误处理 —— 循环冗余检测</h2><p>看图1，整个数据包的最后四字节叫做CRC，这里是通过XOR算法计算整个包是否在发送的过程中出现了错误</p><h1 id="2-交换机"><a href="#2-交换机" class="headerlink" title="2.交换机"></a>2.交换机</h1><p>交换机比起集线器，有了记忆功能。通过学习得到对应的MAC地址。</p><p>一台 MAC1 电脑将一个包发送给另一台 MAC2 电脑，当这个包到达交换机的时候，一开始交换机也不知道 MAC2 的电脑在哪个口，所以没办法，它只能将包转发给除了来的那个口之外的其他所有的口。但是，这个时候，交换机会干一件非常聪明的事情，就是交换机会记住，MAC1 是来自一个明确的口。以后有包的目的地址是 MAC1 的，直接发送到这个口就可以了。</p><p>当交换机作为一个关卡一样，过了一段时间之后，就有了整个网络的一个结构了，这个时候，基本上不用广播了，全部可以准确转发。当然，每个机器的 IP 地址会变，所在的口也会变，因而交换机上的学习的结果，我们称为转发表。转发表是有过期时间的。</p><h2 id="2-1-办公室场景下的交换机使用"><a href="#2-1-办公室场景下的交换机使用" class="headerlink" title="2.1 办公室场景下的交换机使用"></a>2.1 办公室场景下的交换机使用</h2><p>可能有上百个网口需要联网，因此需要多个交换机，形成了一个稍微复杂一些的拓扑结构。</p><p><img src="https://i.loli.net/2020/02/02/A7OaPtoZLYSs8wi.jpg" alt="fig4.jpg"></p><p>先看看两台交换机的情形。两台交换机连接着三个局域网，每个局域网上都有多台机器。如果机器 1 只知道机器 4 的 IP 地址，当它想要访问机器 4，把包发出去的时候，它必须要知道机器 4 的 MAC 地址。</p><p>于是机器 1 发起广播，机器 2 收到这个广播，但是这不是找它的，所以没它什么事。交换机 A 一开始是不知道任何拓扑信息的，在它收到这个广播后，采取的策略是，<strong>除了广播包来的方向外，它还要转发给其他所有的网口</strong>。于是机器 3 也收到广播信息了，但是这和它也没什么关系。</p><p>当然，交换机 B 也是能够收到广播信息的，但是这时候它也是不知道任何拓扑信息的，因而也是进行广播的策略，将包转发到局域网三。这个时候，机器 4 和机器 5 都收到了广播信息。机器 4 主动响应说，这是找我的，这是我的 MAC 地址。于是一个 ARP 请求就成功完成了。</p><p>在上面的过程中，交换机 A 和交换机 B 都是能够学习到这样的信息：机器 1 是在左边这个网口的。当了解到这些拓扑信息之后，情况就好转起来。当机器 2 要访问机器 1 的时候，机器 2 并不知道机器 1 的 MAC 地址，所以机器 2 会发起一个 ARP 请求。这个广播消息会到达机器 1，也同时会到达交换机 A。这个时候交换机 A 已经知道机器 1 是不可能在右边的网口的，所以这个广播信息就不会广播到局域网二和局域网三。</p><p>当机器 3 要访问机器 1 的时候，也需要发起一个广播的 ARP 请求。这个时候交换机 A 和交换机 B 都能够收到这个广播请求。交换机 A 当然知道主机 A 是在左边这个网口的，所以会把广播消息转发到局域网一。同时，交换机 B 收到这个广播消息之后，由于它知道机器 1 是不在右边这个网口的，所以不会将消息广播到局域网三。</p><h3 id="2-1-1-环路问题"><a href="#2-1-1-环路问题" class="headerlink" title="2.1.1 环路问题"></a>2.1.1 环路问题</h3><p>当整个拓扑结构变复杂了以后，可能容易出现环路问题：</p><p><img src="https://i.loli.net/2020/02/02/OeXKUsIzw7J41Qa.jpg" alt="fig5.jpg"></p><p>我们来想象一下机器 1 访问机器 2 的过程。一开始，机器 1 并不知道机器 2 的 MAC 地址，所以它需要发起一个 ARP 的广播。广播到达机器 2，机器 2 会把 MAC 地址返回来，看起来没有这两个交换机什么事情。</p><p>但是问题来了，这两个交换机还是都能够收到广播包的。交换机 A 一开始是不知道机器 2 在哪个局域网的，所以它会把广播消息放到局域网二，在局域网二广播的时候，交换机 B 右边这个网口也是能够收到广播消息的。交换机 B 会将这个广播息信息发送到局域网一。局域网一的这个广播消息，又会到达交换机 A 左边的这个接口。交换机 A 这个时候还是不知道机器 2 在哪个局域网，于是将广播包又转发到局域网二。左转左转左转，好像是个圈哦。 </p><p>可能有人会说，当两台交换机都能够逐渐学习到拓扑结构之后，是不是就可以了？</p><p>然而当广播包从左边的局域网一广播的时候，两个交换机再次刷新三观，原来机器 1 是在左边的，过一会儿，又发现不对，是在右边的，过一会，又发现不对，是在左边的。</p><p>在计算机网络中，用最小生成树算法来解决交换机生成环的问题。简而言之，通过比较交换机之间的能力，给他们分不同等级，划分出一棵树。</p><h3 id="2-1-2-如何解决广播问题和安全问题？"><a href="#2-1-2-如何解决广播问题和安全问题？" class="headerlink" title="2.1.2 如何解决广播问题和安全问题？"></a>2.1.2 如何解决广播问题和安全问题？</h3><ol><li>物理隔离</li></ol><p>每个部门有自己的交换机，配置单独的子网</p><ol start="2"><li>虚拟隔离</li></ol><p>VLAN，虚拟局域网，一个交换机上会连属于多个局域网的机器。解决方案是在原来的二层的头上加一个TAG，里面有一个VLAN ID，一共12位，可以划分出4096个VLAN</p><p><img src="https://i.loli.net/2020/02/02/WtnOa3ToZG9FkpL.jpg" alt="fig6.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议(二)-物理层</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%BA%8C-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%BA%8C-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-物理层实现多个终端的交流"><a href="#1-物理层实现多个终端的交流" class="headerlink" title="1. 物理层实现多个终端的交流"></a>1. 物理层实现多个终端的交流</h1><p>网线的1-3, 2-6交叉接法，12，36脚分别起到收发信号的作用。IP层封装了MAC层，然后组成了几个局域网，LAN</p><p>HUB在物理层工作，会将自己收到的每一个字节，都复制到其他端口上去。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议(一) -- 框架</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%B8%80-%E6%A1%86%E6%9E%B6/"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%B8%80-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-协议"><a href="#1-协议" class="headerlink" title="1. 协议"></a>1. 协议</h1><p>协议是由语法，语义，顺序三部分构成。内容要符合一定的规则和格式。内容要代表某种意义，要有先做再做的先后顺序。</p><h1 id="2-框架"><a href="#2-框架" class="headerlink" title="2.框架"></a>2.框架</h1><h2 id="2-1-应用层"><a href="#2-1-应用层" class="headerlink" title="2.1 应用层"></a>2.1 应用层</h2><p>DHCP HTTP HTTPS RTMP P2P DNS GTP RPC </p><h2 id="2-2-传输层"><a href="#2-2-传输层" class="headerlink" title="2.2 传输层"></a>2.2 传输层</h2><p>UDP TCP</p><h2 id="2-3-网络层"><a href="#2-3-网络层" class="headerlink" title="2.3 网络层"></a>2.3 网络层</h2><p>ICMP IP OSPF BGP IPSec GRE</p><h2 id="2-4-链路层"><a href="#2-4-链路层" class="headerlink" title="2.4 链路层"></a>2.4 链路层</h2><p>ARP VLAN STP</p><h2 id="2-5-物理层"><a href="#2-5-物理层" class="headerlink" title="2.5 物理层"></a>2.5 物理层</h2><p>网络跳线</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat - 连接器</title>
      <link href="/Tomcat-%E8%BF%9E%E6%8E%A5%E5%99%A8/"/>
      <url>/Tomcat-%E8%BF%9E%E6%8E%A5%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Unix系统下的I/O模型共有5种: </p><ul><li>同步阻塞I/O </li><li>同步非阻塞I/O</li><li>I/O多路复用</li><li>信号驱动I/O</li><li>异步I/O</li></ul><p>关于连接器，我们将主要从Tomcat如何实现几种I/O手段来入手进行详解。</p><h1 id="1-Java-I-O-模型"><a href="#1-Java-I-O-模型" class="headerlink" title="1. Java I/O 模型"></a>1. Java I/O 模型</h1><p>I/O是指计算机内存与外部设备之间拷贝数据的过程。CPU是先把外部设备的数据读到内存里，然后再进行处理的。</p><p>Java I/O模型之间的不同之处在于在数据从外部设备拷贝到内存的过程当中，CPU闲置，是继续给当前进程使用，还是把CPU给其他进程使用呢。</p><p>在Java I/O模型当中，网络通信过程会涉及到两个对象：</p><ul><li>调用该I/O操作的用户线程<ul><li>用户线程等待内核将数据从网卡拷贝到内核空间</li><li>内核将数据从内核空间拷贝到用户空间</li></ul></li><li>操作系统内核</li></ul><p>各个I/O模型实现这两个步骤的方式是不一样的。</p><h2 id="1-1-同步阻塞I-O"><a href="#1-1-同步阻塞I-O" class="headerlink" title="1.1 同步阻塞I/O"></a>1.1 同步阻塞I/O</h2><p>用户线程发起read调用吼就阻塞了，让出CPU。内核等待网卡数据到来，把数据从网卡拷贝到内核空间，接着把数据拷贝到用户空间，再把用户线程叫醒。</p><p><img src="https://i.loli.net/2020/02/02/nPOsYLSymTGZKBf.jpg" alt="fig1.jpg"></p><h2 id="1-2-同步非阻塞I-O"><a href="#1-2-同步非阻塞I-O" class="headerlink" title="1.2 同步非阻塞I/O"></a>1.2 同步非阻塞I/O</h2><p>用户线程不断发起read调用，数据没到内核空间时，每次都返回失败，直到数据到了内核空间，这一次read调用后，在等待数据从内核空间拷贝到用户空间这段时间，线程还是阻塞的，等数据到了用户空间再把线程叫醒。 </p><p><img src="https://i.loli.net/2020/02/02/8eqioQx14zkZWjK.jpg" alt="fig2.jpg"></p><h2 id="1-3-I-O多路复用"><a href="#1-3-I-O多路复用" class="headerlink" title="1.3 I/O多路复用"></a>1.3 I/O多路复用</h2><p>用户线程的读取操作分为两步，线程首先发起select调用，目的是问内核数据准备好了没有，等内核把数据准备好，用户线程再发起read调用。在等待数据从内核空间拷贝到用户空间的这段时间里，线程还是阻塞的。</p><p>多路复用的意思是一次select调用会向内核查多个数据通道的状态，因此叫做多路复用。</p><p><img src="https://i.loli.net/2020/02/02/I3GH1PBRrwnfE9Q.jpg" alt="fig3.jpg"></p><h2 id="1-4-异步I-O"><a href="#1-4-异步I-O" class="headerlink" title="1.4 异步I/O"></a>1.4 异步I/O</h2><p>用户线程发起read调用的同时注册一个回调函数，read立即返回，等内核将数据准备好以后，再调用指定的回调函数完成处理。这个过程中，用户线程一直没有阻塞。</p><h1 id="2-NioEndpoint组件"><a href="#2-NioEndpoint组件" class="headerlink" title="2. NioEndpoint组件"></a>2. NioEndpoint组件</h1><p>Tomcat的NioEndpoint组件实现了I/O多路复用模型。</p><h2 id="2-1-总体工作流程"><a href="#2-1-总体工作流程" class="headerlink" title="2.1 总体工作流程"></a>2.1 总体工作流程</h2><ul><li>创建一个selector，注册各种事件，然后调用select方法，等待感兴趣的事情发生</li><li>感兴趣的事情发生了，就创建一个新的线程从Channel中读取数据。</li></ul><p><img src="https://i.loli.net/2020/02/02/8caQkFDGKJinjgy.jpg" alt="fig4.jpg"></p><p>NioEndpoint共有5个组件，分别是：</p><ul><li><p>LimitLatch</p><ul><li>连接控制器<ul><li>负责控制最大连接数</li><li>一般设定为10000</li></ul></li></ul></li><li><p>Acceptor</p><ul><li>跑在一个独立的线程当中</li><li>在一个死循环里调用accept方法来接收新连接，一旦有新的连接请求到来，accept方法返回一个Channel对象，接着把Channel对象交给Poller去处理</li></ul></li><li><p>Poller</p><ul><li>Poller本质上是一个selector, 也跑在单独线程里。Poller在内部维护一个Channel数组，在一个死循环里不断检测Channel的数据就绪状态，一旦有Channel可读，就生成一个SocketProcessor任务对象扔给Executor去处理 </li></ul></li><li><p>SocketProcessor</p><ul><li>run方法会调用Http11Processor来读取和解析请求数据 </li></ul></li><li><p>Executor </p><ul><li>线程池</li><li>负责运行SocketProcessor任务类</li></ul></li></ul><h2 id="2-2-LimitLatch"><a href="#2-2-LimitLatch" class="headerlink" title="2.2 LimitLatch"></a>2.2 LimitLatch</h2><p>用来控制连接个数，当连接数到达最大时阻塞线程，直到后续组件处理完一个连接后才将连接数减1.到达最大连接数以后操作系统底层还是会接收客户端连接，但用户层已经不再接收了。</p><pre><code>public class LimitLatch {// AbstractQueuedSynchronizer在内部维护一个状态和一个线程队列// 用来控制线程什么时候挂起，什么时候唤醒    private class Sync extends AbstractQueuedSynchronizer {        @Override        protected int tryAcquireShared() {            long newCount = count.incrementAndGet();            if (newCount &gt; limit) {                count.decrementAndGet();                return -1;            } else {                return 1;            }        }        // 定义合适唤醒被阻塞的用户线程        @Override        protected boolean tryReleaseShared(int arg) {            count.decrementAndGet();            return true;        }    }    private final Sync sync;    private final AtomicLong count;    private volatile long limit;    // 线程调用这个方法来获得接收新连接的许可，线程可能被阻塞     // AQS知道是否需要阻塞的逻辑在tryAcquireShared方法当中定义了    public void countUpOrAwait() throws InterruptedException {      sync.acquireSharedInterruptibly(1);    }    // 调用这个方法来释放一个连接许可，那么前面阻塞的线程可能被唤醒    //     public long countDown() {      sync.releaseShared(0);      long result = getCount();      return result;   }}</code></pre><h2 id="2-3-Acceptor"><a href="#2-3-Acceptor" class="headerlink" title="2.3 Acceptor"></a>2.3 Acceptor</h2><p>Acceptor实现了Runnable接口，一个端口号只能对应一个ServerSocketChannel，故而这个Channel是在多个Acceptor线程之间共享的。</p><pre><code>serverSock = ServerSocketChannel.open();serverSock.socket().bind(addr,getAcceptCount());serverSock.configureBlocking(true);</code></pre><ul><li>bind 方法的第二个参数表示操作系统的等待队列长度，我在上面提到，当应用层面的连接数到达最大值时，操作系统可以继续接收连接，那么操作系统能继续接收的最大连接数就是这个队列长度，可以通过 acceptCount 参数配置，默认是 100。</li><li>ServerSocketChannel 被设置成阻塞模式，也就是说它是以阻塞的方式接收连接的。</li></ul><p>ServerSocketChannel通过accept()接受新的连接，accept()方法返回获得SocketChannel对象，然后将SocketChannel对象封装在一个PollerEvent对象当中，并将PollerEvent对象压入Poller的Queue当中。</p><h2 id="2-4-Poller"><a href="#2-4-Poller" class="headerlink" title="2.4 Poller"></a>2.4 Poller</h2><p>本质是一个Selector，内部维护一个Queue </p><pre><code>private final SynchronizedQueue&lt;PollerEvent&gt; events = new SynchronizedQueue&lt;&gt;();</code></pre><p>使用synchronized关键字来保证在同一时刻只有一个Acceptor线程对Queue进行读写。</p><p>Poller不断通过内部的selector对象向内核查询Channel的状态，一旦可读就生成任务类SocketProcessor交给Executor去处理。Poller的另一个重要任务是循环遍历检查自己所管理的SocketChannel是否已经超时，若超时就关闭这个Channel。</p><h2 id="2-5-SocketProcessor"><a href="#2-5-SocketProcessor" class="headerlink" title="2.5 SocketProcessor"></a>2.5 SocketProcessor</h2><p>SocketProcessor任务类会被交给线程池去处理，processor内主要是调用Http11Processor组件来处理请求，http11Processor读取Channel的数据来生成ServletRequest对象</p><h2 id="2-6-NioEndpoint的高并发思路"><a href="#2-6-NioEndpoint的高并发思路" class="headerlink" title="2.6 NioEndpoint的高并发思路"></a>2.6 NioEndpoint的高并发思路</h2><p>对于三大方面的事情各自有一个线程组，可以配置线程数量。</p><ul><li>接受连接      Acceptor </li><li>检测I/O事件   Poller</li><li>处理请求      Executor </li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat - Servlet规范和Servlet容器</title>
      <link href="/Tomcat-Servlet%E8%A7%84%E8%8C%83%E5%92%8CServlet%E5%AE%B9%E5%99%A8/"/>
      <url>/Tomcat-Servlet%E8%A7%84%E8%8C%83%E5%92%8CServlet%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Servlet规范"><a href="#1-Servlet规范" class="headerlink" title="1. Servlet规范"></a>1. Servlet规范</h1><p>浏览器给服务端一个HTTP格式的请求，HTTP服务器收到这个请求之后，需要调用服务端程序来做处理。</p><p>为了解决耦合问题 -&gt; 采用面向接口编程，就定义了一个接口，各种业务类都必须实现这个接口，这个接口就叫Servlet接口。</p><p>为了实例化Servlet，出现了Servlet容器，Servlet容器用来加载和管理业务类。</p><p>HTTP服务器并不直接跟业务类打交道，而是将请求交给Servlet容器去处理，Servlet容器会将请求转发到具体的Servlet，如果这个Servlet还没有创建，就去加载并且实例化这个Servlet，然后调用这个Servlet的接口方法。</p><p>Servlet接口其实是Servlet容器跟具体业务类之间的接口。</p><p><img src="https://i.loli.net/2020/02/02/Gfnmrp9AFldWq1s.jpg" alt="fig1.jpg"></p><p>Servlet接口和Servlet容器这一整套规范就叫做Servlet规范。 Tomcat和Jetty都按照Servlet规范的要求实现了Servlet容器，同时它们也具有HTTP服务器的功能。</p><p>作为开发者，我们只需要实现一个Servlet，并将其注册到容器当中，剩下的事情就交由Tomcat来帮助我们解决了。</p><h1 id="2-Servlet接口"><a href="#2-Servlet接口" class="headerlink" title="2. Servlet接口"></a>2. Servlet接口</h1><p>Servlet接口定义了以下的方法：</p><pre><code>public interface Servlet {    void init(ServletConfig config) throws ServletException;    ServletConfig getServletConfig();    void service(ServletRequest req, ServletResponse res）throws ServletException, IOException;    String getServletInfo();    void destroy();}</code></pre><p>最重要的是Service方法，具体业务类在这个方法里实现处理逻辑。</p><ul><li>参数 - 本质上这两个参数是对通信协议的封装<ul><li>ServletRequest <ul><li>封装请求信息 </li><li>其中包含所有请求的相关信息<ul><li>请求路径</li><li>Cookie</li><li>HTTP头</li><li>请求参数</li><li>Session</li></ul></li></ul></li><li>ServletResponse<ul><li>封装响应信息 </li></ul></li></ul></li><li>Servlet容器在加载Servlet类的时候会调用init方法，卸载的时候会调用destroy方法。</li><li>ServletConfig的作用是封装Servlet的初始化参数，可以在web.xml中给Servlet配置参数，并在程序里通过getServletConfig方法拿到这些参数</li></ul><h1 id="3-Servlet容器"><a href="#3-Servlet容器" class="headerlink" title="3. Servlet容器"></a>3. Servlet容器</h1><h2 id="3-1-Servlet容器工作流程"><a href="#3-1-Servlet容器工作流程" class="headerlink" title="3.1 Servlet容器工作流程"></a>3.1 Servlet容器工作流程</h2><ul><li>客户请求某个资源的时候，</li><li>HTTP服务器会用一个ServletRequest对象将客户的请求信息封装起来</li><li>调用Servlet容器的Service方法</li><li>Servlet容器接到请求</li><li>根据请求的URL和Servlet的映射关系，找到响应的Servlet</li><li>如果Servlet还没有被加载，就用反射机制创建这个Servlet，并调用Servlet的init方法来完成初始化，接着调用Servlet的service方法处理请求</li><li>将ServletResponse对象返回给HTTP服务器</li><li>HTTP服务器将响应发送给客户端</li></ul><p><img src="https://i.loli.net/2020/02/02/jvc2pThotnA8J59.jpg" alt="fig2.jpg"></p><h2 id="3-2-Web应用的目录格式"><a href="#3-2-Web应用的目录格式" class="headerlink" title="3.2 Web应用的目录格式"></a>3.2 Web应用的目录格式</h2><p>Servlet是以Web应用程式的方式来进行部署的，而根据Servlet规范，WEB应用程序需要有一定的目录结构，在这个目录下放置了：</p><ul><li><p>Servlet的类文件</p></li><li><p>配置文件</p></li><li><p>静态资源</p><p>  | -  MyWebApp</p><pre><code>    | -  WEB-INF/web.xml        -- 配置文件，用来配置 Servlet 等    | -  WEB-INF/lib/           -- 存放 Web 应用所需各种 JAR 包    | -  WEB-INF/classes/       -- 存放你的应用类，比如 Servlet 类    | -  META-INF/              -- 目录存放工程的一些信息</code></pre></li></ul><p>Servlet容器通过读取配置文件，就能找到并加载Servlet。</p><p>ServletContext这个接口用来对应一个Web应用，web应用部署好之后，Servlet容器在启动时会加载web应用，并为每个Web应用创建唯一的ServletContext对象。</p><p>ServletContext是个全局对象，一个Web应用可能有多个Servlet，这些Servlet可以通过全局的ServletContext来共享数据，包括Web应用的初始化参数，应用目录下的文件资源等</p><h2 id="3-3-如何扩展和定制化Servlet容器的功能"><a href="#3-3-如何扩展和定制化Servlet容器的功能" class="headerlink" title="3.3 如何扩展和定制化Servlet容器的功能"></a>3.3 如何扩展和定制化Servlet容器的功能</h2><p>Servlet规范提供了两中扩展机制，Filter and Listener</p><h3 id="3-3-1-Filter"><a href="#3-3-1-Filter" class="headerlink" title="3.3.1 Filter"></a>3.3.1 Filter</h3><p>Filter干预过程，是过程的一部分，是基于过程来被触发的</p><p>过滤器。允许你对请求和响应做一些统一的定制化处理，比如你可以根据请求的频率限制访问，或者根据不同国家修改响应内容。</p><ul><li>WEB应用完成部署</li><li>Servlet容器实例化Filter</li><li>Filter会被链接成一个FilterChain</li><li>当请求进来，获取第一个Filter并调用doFilter方法</li><li>doFilter方法负责调用这个FilterChain中的下一个Filter</li></ul><h3 id="3-3-2-Listener"><a href="#3-3-2-Listener" class="headerlink" title="3.3.2 Listener"></a>3.3.2 Listener</h3><p>Listener是基于状态的，任何行为改变同一个状态，触发的事件是一致的。</p><ul><li>Servlet容器提供一些默认的监听器来监听事件<ul><li>web应用的启动停止</li><li>用户请求到达等</li></ul></li><li>事件发生，Servlet调动监听器的方法</li><li>可以定义自己的监听器去监听你感兴趣的事件</li><li>将监听器配置在web.xml中</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat - 什么是Web容器, cookie &amp; session</title>
      <link href="/Tomcat-%E4%BB%80%E4%B9%88%E6%98%AFWeb%E5%AE%B9%E5%99%A8-cookie-session/"/>
      <url>/Tomcat-%E4%BB%80%E4%B9%88%E6%98%AFWeb%E5%AE%B9%E5%99%A8-cookie-session/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是Web容器"><a href="#1-什么是Web容器" class="headerlink" title="1. 什么是Web容器"></a>1. 什么是Web容器</h1><p>早期的Web应用主要用于浏览新闻等静态页面，HTTP服务器(比如Apache、Nginx)向浏览器返回静态HTML，浏览器负责解析HTML，将结果呈现给用户。 </p><p>而后我们希望能够在页面上有一些交互操作，获取动态的结果，因此就需要一些扩展机制来使得HTTP服务器能够调用服务端的程序。于是Sun公司推出了Servlet技术，其没有main方法，需要被部署到Servlet容器当中，由容器来实例化并调用Servlet。</p><p>Tomcat和Jetty就是HTTP服务器 + Servlet容器，又称为Web容器。</p><h1 id="2-Cookie-amp-Session"><a href="#2-Cookie-amp-Session" class="headerlink" title="2. Cookie &amp; Session"></a>2. Cookie &amp; Session</h1><p>浏览器将请求打包成HTTP协议格式，当这个请求到达服务端的时候，会被Tomcat将HTTP请求数据字节流解析成一个Request对象，这个Request对象封装了HTTP所有的请求信息，接着Tomcat将这个请求交给Web应用去处理，处理完以后得到一个Response对象，Tomcat就会把这个Response对象转成HTTP格式的相应数据并发送给浏览器。</p><p>HTTP协议是无状态的，请求之间没有关系，为了让请求之间建立联系，设计出了Cookie还有Session技术。</p><h2 id="2-1-Cookie技术"><a href="#2-1-Cookie技术" class="headerlink" title="2.1 Cookie技术"></a>2.1 Cookie技术</h2><p>Cookie是HTTP报文的请求头，Web应用可以将用户的标识信息或者其他一些信息存储在Cookie中。用户通过验证之后，每次HTTP请求报文中都包含Cookie，这个服务器读取这个Cookie请求头就知道用户是谁了。</p><p>其本质上就是一份存储在用户本地的文件，里面包含了每次请求中都需要传递的信息。</p><h2 id="2-2-Session技术"><a href="#2-2-Session技术" class="headerlink" title="2.2 Session技术"></a>2.2 Session技术</h2><p>Cookie以明文的方式存储在本地，而Cookie中往往带有用户信息，Session就用来解决这个问题。是在服务端开辟的存储空间，里面保存了用户的状态。</p><p>用户信息以Session的形式存储在服务端，当用户请求到来时，服务端可以把用户的请求和用户的Session对应起来。</p><ul><li>服务器创建Session的时候，生成Session ID</li><li>当浏览器再次发送请求时，在Cookie里会带上Session ID</li><li>服务器根据SessionID找到对应的Session，并在Session当中获取或者添加内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat - 优化Tomcat启动速度</title>
      <link href="/Tomcat-%E4%BC%98%E5%8C%96Tomcat%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/"/>
      <url>/Tomcat-%E4%BC%98%E5%8C%96Tomcat%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>优化tomcat的启动速度，可以使得当你的service down掉，你做出修改的时候，能够更快的上线，这是个很可取，也很需要优化的方面了。</p><h1 id="1-清理Tomcat"><a href="#1-清理Tomcat" class="headerlink" title="1. 清理Tomcat"></a>1. 清理Tomcat</h1><h2 id="1-1-清理不必要的web应用"><a href="#1-1-清理不必要的web应用" class="headerlink" title="1.1 清理不必要的web应用"></a>1.1 清理不必要的web应用</h2><p>删除掉webapps文件夹下不需要的工程：</p><ul><li>host-manager </li><li>example</li><li>doc</li></ul><h2 id="1-2-清理XML配置文件"><a href="#1-2-清理XML配置文件" class="headerlink" title="1.2 清理XML配置文件"></a>1.2 清理XML配置文件</h2><p>Tomcat在启动的时候会解析所有的XML配置文件，但XML的解析的代价并不小，尽量保持XML配置文件的简洁。</p><h2 id="1-3-清理JAR文件"><a href="#1-3-清理JAR文件" class="headerlink" title="1.3 清理JAR文件"></a>1.3 清理JAR文件</h2><p>可以删除所有不需要的JAR文件。JVM的类加载器在加载类时，需要查找每一个JAR文件来找到所需要的类，删除不需要的JAR文件，就可以使得查找的速度变快一些。</p><p>Web应用当中的lib目录下不应该出现Servlet API或者Tomcat自身的JAR，这些是由Tomcat负责提供的。</p><h2 id="1-4-清理其他文件"><a href="#1-4-清理其他文件" class="headerlink" title="1.4 清理其他文件"></a>1.4 清理其他文件</h2><p>及时清理日志，删除掉logs文件夹下不需要的日志文件。Catalina文件夹是Tomcat将JSP转换成Class文件的工作目录。每次启动会重新生成的。</p><h1 id="2-禁止Tomcat-TLD扫描"><a href="#2-禁止Tomcat-TLD扫描" class="headerlink" title="2. 禁止Tomcat TLD扫描"></a>2. 禁止Tomcat TLD扫描</h1><p>TLD是对于标签库的定义，用来支持JSP的，如果你没有定义的话，那么就可以设置不去扫描这个JAR包 </p><ul><li>如果完全没有使用JSP作为页面模板，可以将TLD扫描禁掉</li></ul><pre><code>&lt;Context&gt;    &lt;JarScanner&gt;        &lt;JarScanFilter defaultTldScan = &quot;false&quot;/&gt;    &lt;/JarScanner&gt;&lt;/Context&gt;</code></pre><ul><li>如果使用JSP作为模板，那么我们可以通过配置告诉Tomcat只扫描那些包括TLD文件的JAR包。找到<code>conf/</code>下的   <code>catalina.properties</code>文件，在这个文件里的jarsToSkip配置项当中，加入JAR包</li></ul><pre><code>tomcat.util.scan.StandardJarScanFilter.jarsToSkip=xxx.jar</code></pre><h1 id="3-关闭WebSocket的支持"><a href="#3-关闭WebSocket的支持" class="headerlink" title="3. 关闭WebSocket的支持"></a>3. 关闭WebSocket的支持</h1><p>Tomcat 会扫描 WebSocket 注解的 API 实现，比如@ServerEndpoint注解的类。我们知道，注解扫描一般是比较慢的，如果不需要使用 WebSockets 就可以关闭它。具体方法是，找到 Tomcat 的conf/目录下的context.xml文件，给 Context 标签加一个containerSciFilter的属性。</p><pre><code>&lt;Context containerSciFilter=&quot;org.apache.jasper.servlet.JasperInitializer&quot;&gt;&lt;/Context&gt; </code></pre><h1 id="4-禁止Servlet注解的扫描"><a href="#4-禁止Servlet注解的扫描" class="headerlink" title="4. 禁止Servlet注解的扫描"></a>4. 禁止Servlet注解的扫描</h1><p>Tomcat会在web应用启动时扫描你的类文件，如果你没有使用servlet 注解，可以告诉Tomcat不要去扫描。具体配置方法：在你的 Web 应用的<code>web.xml</code>文件中，设置元素的属性<code>metadata-complete=&quot;true&quot;</code></p><h1 id="5-随机数熵源优化"><a href="#5-随机数熵源优化" class="headerlink" title="5. 随机数熵源优化"></a>5. 随机数熵源优化</h1><p>Tomcat7以上版本依赖Java的SecureRandom类来生成随机数，比如SessionID, JVM默认使用阻塞式熵源(<code>/dev/random</code>), 某些情况下会导致tomcat启动变慢。</p><p>可以通过设置，让JVM使用非阻塞式的熵源。</p><pre><code> -Djava.security.egd=file:/dev/./urandom</code></pre><h1 id="6-并行启动多个Web应用"><a href="#6-并行启动多个Web应用" class="headerlink" title="6. 并行启动多个Web应用"></a>6. 并行启动多个Web应用</h1><p>Tomcat启动的时候，默认情况下Web应用时一个一个启动的，等所有Web 应用启动完成Tomcat才算启动完成。如果在一个Tomcat下我们有多个web应用，可以配置多个应用并行启动，通过修改server.xml文件当中的host元素的startStopThreads属性来完成。startStopThreads 的值表示你想用多少个线程来启动你的 Web 应用，如果设成 0 表示你要并行启动 Web 应用。</p><pre><code>&lt;Engine startStopThreads=&quot;0&quot;&gt;    &lt;Host startStopThreads=&quot;0&quot;&gt;    ...    &lt;/Host&gt;&lt;/Engine&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat - 运行第一个 Servlet</title>
      <link href="/Tomcat-%E8%BF%90%E8%A1%8C%E7%AC%AC%E4%B8%80%E4%B8%AA-Servlet/"/>
      <url>/Tomcat-%E8%BF%90%E8%A1%8C%E7%AC%AC%E4%B8%80%E4%B8%AA-Servlet/</url>
      
        <content type="html"><![CDATA[<p>这篇文章会带着大家从下载安装Tomcat开始，编写自己的servlet，并且将其在Tomcat （Servlet 容器）当中进行运行，展现这整个过程。</p><h1 id="1-安装Tomcat"><a href="#1-安装Tomcat" class="headerlink" title="1. 安装Tomcat"></a>1. 安装Tomcat</h1><p> <a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">官网链接</a></p><p> 解压以后的目录结构如下：</p><ul><li>bin<ul><li>存放在各个平台上启动和关闭Tomcat的脚本文件 </li></ul></li><li>conf<ul><li>存放Tomcat的全局配置文件，其中最重要的是server.xml  </li></ul></li><li>lib<ul><li>存放Tomcat以及所有Web应用都可以访问的JAR文件 </li></ul></li><li>logs<ul><li>存放Tomcat执行时产生的日志文件 </li></ul></li><li>work<ul><li>存放JSP编译后产生的Class文件 </li></ul></li><li>webapps<ul><li>Tomcat的web应用目录，默认情况下把Web应用放在这个目录下 </li></ul></li></ul><h1 id="2-Servlet类编写"><a href="#2-Servlet类编写" class="headerlink" title="2. Servlet类编写"></a>2. Servlet类编写</h1><pre><code>import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class MyServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        System.out.println(&quot;MyServlet 在处理 get（）请求...&quot;);        PrintWriter out = response.getWriter();        response.setContentType(&quot;text/html;charset=utf-8&quot;);        out.println(&quot;&lt;strong&gt;My Servlet!&lt;/strong&gt;&lt;br&gt;&quot;);    }    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        System.out.println(&quot;MyServlet 在处理 post（）请求...&quot;);        PrintWriter out = response.getWriter();        response.setContentType(&quot;text/html;charset=utf-8&quot;);        out.println(&quot;&lt;strong&gt;My Servlet!&lt;/strong&gt;&lt;br&gt;&quot;);    }}</code></pre><p>将编写好的类编译成.class文件</p><pre><code>javac -cp ./servlet-api.jar MyServlet.java</code></pre><h1 id="3-建立Web应用目录结构"><a href="#3-建立Web应用目录结构" class="headerlink" title="3. 建立Web应用目录结构"></a>3. 建立Web应用目录结构</h1><pre><code>WebApp/WEB-INF/web.xmlWebApp/WEB-INF/classes/MyServlet.class</code></pre><p>然后在web.xml里面配置Servlet</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;  version=&quot;4.0&quot;  metadata-complete=&quot;true&quot;&gt;    &lt;description&gt; Servlet Example. &lt;/description&gt;    &lt;display-name&gt; MyServlet Example &lt;/display-name&gt;    &lt;request-character-encoding&gt;UTF-8&lt;/request-character-encoding&gt;    &lt;servlet&gt;      &lt;servlet-name&gt;myServlet&lt;/servlet-name&gt;      &lt;servlet-class&gt;MyServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;      &lt;servlet-name&gt;myServlet&lt;/servlet-name&gt;      &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><h1 id="4-运行"><a href="#4-运行" class="headerlink" title="4. 运行"></a>4. 运行</h1><p>将WebApp放到Tomcat的安装目录下的webapps目录里</p><p>在bin目录下，启动脚本 </p><ul><li>mac/ linux<ul><li>startup.sh</li></ul></li><li>windows<ul><li>startup.bat</li></ul></li></ul><p>而后我们可以在浏览器看到结果</p><pre><code>http://localhost:8080/WebApp/myServlet</code></pre><h1 id="5-查看日志"><a href="#5-查看日志" class="headerlink" title="5. 查看日志"></a>5. 查看日志</h1><ul><li>catalina.***.log<ul><li>主要记录Tomcat的启动过程</li><li>可以看到启动的JVM参数以及操作系统等日志信息</li></ul></li><li>catalina.out<ul><li>是Tomcat的标准输出和标准错误</li></ul></li><li>localhost.***.log<ul><li>主要记录Web应用在初始化过程中遇到的未处理的异常，会被Tomcat捕获而输出到这个日志文件当中</li></ul></li><li>localhost_access_log.***.txt<ul><li>存放访问Tomcat 请求的日志</li><li>包括<ul><li>IP地址</li><li>请求路径</li><li>请求时间</li><li>请求协议</li><li>状态码</li></ul></li></ul></li><li>manager.<strong><em>.log/host-manager.</em></strong>.log<ul><li>存放Tomcat自带的Manager项目的日志信息 </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat - 整体架构</title>
      <link href="/Tomcat-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
      <url>/Tomcat-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1. 整体架构"></a>1. 整体架构</h1><ul><li>Tomcat的核心功能<ul><li>处理Socket连接，负责网络字节流与Request，Response对象的转化</li><li>加载和管理Servlet，以及具体的处理Request请求</li></ul></li><li>socket <ul><li>连接器 Connector </li><li>支持大量不同的I/O模型<ul><li>NIO<ul><li>非阻塞I/O</li></ul></li><li>NIO.2<ul><li>异步I/O </li></ul></li><li>APR<ul><li>采用Apache可移植运行库数显 </li></ul></li></ul></li><li>支持不同的应用层协议<ul><li>HTTP/1.1</li><li>AJP<ul><li>用于和Web服务器集成 </li></ul></li><li>HTTP/2</li></ul></li></ul></li><li>servlet管理<ul><li>容器 Container  <ul><li>一个容器可能对接多个连接器  – 为了实现对于多种I/O和应用层协议的支持</li><li>连接器和容器的组合叫做Service组件</li><li>Tomcat内可能有多个Service，通过这种配置，可以实现通过不同的端口号来访问同一个机器上部署的不同应用。</li></ul></li></ul></li></ul><p><img src="https://i.loli.net/2020/02/02/DQSx67LbjXzVANW.jpg" alt="fig1.jpg"></p><h1 id="2-连接器"><a href="#2-连接器" class="headerlink" title="2. 连接器"></a>2. 连接器</h1><p>连接器对Servlet容器屏蔽了协议以及I/O模型，无论是何种协议，在容器中获取的都是一个标准的ServletRequest对象。</p><p>细化连接器的功能：</p><ul><li>监听网络端口</li><li>接收网络连接请求</li><li>读取网络请求字节流</li><li>根据应用层协议，解析字节流，生成统一的Tomcat Request对象</li><li>将Tomcat Request对象转成标准的ServletRequest</li><li>调用Servlet容器，得到ServletResponse</li><li>将ServletResponse转成Tomcat Response对象</li><li>将Tomcat Response转成网络字节流</li><li>将相应字节流写回浏览器</li></ul><p>为了实现一个高内聚低耦合的系统，连接器需要在几个方面做针对性的设置</p><ul><li>网络通信</li><li>应用层协议解析</li><li>Tomcat Request/ Response 与 ServletRequest/ Response的转化</li></ul><p><img src="https://i.loli.net/2020/02/02/9aqpn2lF5UZs184.jpg" alt="fig2.jpg"></p><h2 id="2-1-Endpoint-part-of-protocal-handler"><a href="#2-1-Endpoint-part-of-protocal-handler" class="headerlink" title="2.1 Endpoint (part of protocal handler)"></a>2.1 Endpoint (part of protocal handler)</h2><p>ProtocalHandler是用来处理网络连接和应用层协议的</p><p>提供字节流给Processor</p><p>Endpoint是通信端点，即通信监听的接口，是具体的Socket接收和发送的处理器，是对传输层的抽象，因此Endpoint是用来实现TCP/IP协议的。</p><p>Endpoint是一个接口，对应的抽象实现类是AbstractEndpoint</p><ul><li>AbstractEndpoint <ul><li>Acceptor <ul><li>用于监听Socket连接请求 </li></ul></li><li>SocketProcessor<ul><li>用于处理接收到的Socket请求，实现Runnable接口，在run方法里调用协议处理组件Processor进行处理 </li></ul></li></ul></li></ul><h2 id="2-2-Processor-part-of-protocal-handler"><a href="#2-2-Processor-part-of-protocal-handler" class="headerlink" title="2.2 Processor (part of protocal handler)"></a>2.2 Processor (part of protocal handler)</h2><p>提供Tomcat Request对象给Adapter，在这里Processor接收来自Endpoint的Socket，读取字节流解析成Tomcat Request和Response对象，并通过Adapter将其提交到容器处理，Processor是对应用层协议的抽象。</p><p>一个定义了请求的处理方法的接口，其抽象实现类AbstractProcessor对协议共有的属性进行封装，没有对方法进行实现。这些具体的实现有AjpProcessor  Http11Processor等，具体的实现类实现了特定协议的解析方法和请求处理方式。</p><p><img src="https://i.loli.net/2020/02/02/QuqNCEvhrJInGSL.jpg" alt="fig3.jpg"></p><p>Endpoint接收Socket连接，生成一个SocketProcessor任务，提交到线程池去处理，SocketProcessor的run方法会调用Processor组件去解析应用层协议，Processor通过解析生成request对象之后，会调用Adapter的Service方法。</p><h2 id="2-3-Adapter"><a href="#2-3-Adapter" class="headerlink" title="2.3 Adapter"></a>2.3 Adapter</h2><p>由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来存放这些请求信息。ProtocolHandler接口负责解析请求并生成TomcatRequest类。将传入的Tomcat Request对象转成ServletRequest，再调用容器的service方法。</p><p>Adapter负责提供ServletRequest对象给容器</p><h1 id="3-容器"><a href="#3-容器" class="headerlink" title="3. 容器"></a>3. 容器</h1><p>Tomcat当中，容器是用来装载Servlet的。</p><h2 id="3-1-容器的层次结构"><a href="#3-1-容器的层次结构" class="headerlink" title="3.1 容器的层次结构"></a>3.1 容器的层次结构</h2><p>Tomcat设计了4种容器，分别是Engine, Host, Context, Wrapper。通过这种分层的架构来增加Servlet容器的灵活性。</p><p><img src="https://i.loli.net/2020/02/02/nopbJmwXEx2KM5a.jpg" alt="fig4.jpg"></p><ul><li>Engine<ul><li>表示引擎</li><li>用来管理多个虚拟站点</li><li>一个Service最多只能有一个Engine</li></ul></li><li>Host<ul><li>虚拟主机 - 站点</li><li>给Tomcat配置多个虚拟主机地址</li><li>一个虚拟主机啊下又可以部署多个Web应用程序</li></ul></li><li>Context <ul><li>表示一个Web应用程序 </li><li>一个Context(Web应用程序)里可以有多个Servlet</li></ul></li><li>Wrapper <ul><li>表示一个Servlet </li></ul></li></ul><p>Tomcat的server.xml配置文件<br><img src="https://i.loli.net/2020/02/02/ED2SiGWfKzevJ7c.jpg" alt="fig5.jpg"></p><p>Tomcat通过组合模式来管理这些容器，所有容器组件都会实现Container接口，因此组合模式可以使得用户对但容器对象和组合容器对象的使用具有高度一致性。</p><pre><code>public interface Container extends Lifecycle {    public void setName(String name);    public Container getParent();    public void setParent(Container container);    public void addChild(Container child);    public void removeChild(Container child);    public Container findChild(String name);}</code></pre><h2 id="3-2-请求是如何定位Servlet的-Mapper"><a href="#3-2-请求是如何定位Servlet的-Mapper" class="headerlink" title="3.2 请求是如何定位Servlet的 - Mapper"></a>3.2 请求是如何定位Servlet的 - Mapper</h2><p>Tomcat使用Mapper组件来完成这个任务。</p><ul><li>Mapper功能<ul><li>将用户请求的URL定位到一个Servlet</li></ul></li><li>Mapper工作原理<ul><li>Mapper组件保存web应用的配置信息 - 容器组件与访问路径的映射关系<ul><li>host容器里配置的域名</li><li>Context容器里的Web应用路径</li><li>Wrapper容器里Servlet映射的路径</li></ul></li></ul></li><li>Mapper工作过程<ul><li>请求到来</li><li>Mapper组件解析请求URL里的域名和路径</li><li>到自己保存的Map里面去查找</li><li>定位到一个Servlet</li><li>一个URL最终只会定位到一个Wrapper容器，即一个Servlet</li></ul></li></ul><ul><li>E.g<ul><li>背景<ul><li>网购系统<ul><li>后台管理系统</li><li>在线购物系统</li></ul></li><li>两个系统在同一个Tomcat上，为了隔离其访问域名，配置虚拟域名</li></ul></li><li>Tomcat的功能<ul><li>创建一个Service组件和一个Engine容器组件</li><li>在Engine容器下创建两个Host子容器</li><li>每个Host下创建多个Context子容器</li></ul></li></ul></li></ul><p><img src="https://i.loli.net/2020/02/02/yo2IVCkzvsY5gjw.jpg" alt="fig6.jpg"></p><p>接着上面的例子，当用户访问一个URL，比如 <code>user.shopping.com:8080/order/buy</code>，Tomcat将这个URL定位到一个Servlet的过程如下：</p><ul><li>根据协议和端口号选定Service和Engine<ul><li>HTTP或者AJP连接器都是由自己的默认端口号的</li></ul></li><li>根据域名选定Host<ul><li>Mapper组件通过URL中的域名去查找响应的Host容器</li></ul></li><li>根据URL路径找到Context组件<ul><li>根据URL的路径来匹配相应的Web应用的路径</li></ul></li><li>根据URL路径找到Wrapper - Servlet<ul><li>Context确定后，Mapper再根据web.xml中配置的Servlet映射路径来找到具体的Wrapper和Servlet</li></ul></li></ul><h2 id="3-3-Pipeline-valve"><a href="#3-3-Pipeline-valve" class="headerlink" title="3.3 Pipeline - valve"></a>3.3 Pipeline - valve</h2><p>这整个层层递进的调用过程使用的是Pipeline-Value管道。</p><ul><li>Pipeline-valve<ul><li>责任链模式</li><li>在请求处理过程中有很多处理者依次对请求进行处理，每个处理着负责做自己的相应的处理，然后一个个传递给下一个处理者</li></ul></li></ul><p><img src="https://i.loli.net/2020/02/02/IMyaJTVZlbgmWEc.jpg" alt="fig7.jpg"></p><pre><code>public interface Valve {  public Valve getNext();  public void setNext(Valve valve);  public void invoke(Request request, Response response)}public interface Pipeline extends Container {  public void addValve(Valve valve);  public Valve getBasic();  public void setBasic(Valve valve);  public Valve getFirst();}</code></pre><p>Pipelin中维护了Valve的链表，整个调用链的执行是被valve来完成的，valve完成自己的处理以后，就会调用getNext.invoke来触发下一个Valve调用</p><p>不同的容器的pipeline之间的触发，上一层的最后一个valve负责调用下一层的第一个valve，整个流程如下：</p><p>Wrapper容器的最后一个Valve会创建一个Filter链，并调用doFilter方法，最终会调用Servlet的service方法。</p><ul><li>Valve和Filter<ul><li>valve是tomcat的私有机制</li><li>Filter是在servlet级别的，是公有标准</li><li>valve工作在web容器级别，拦截所有应用的请求</li><li>Servlet Filter工作在应用级别，只能拦截某个Web应用的所有请求。</li></ul></li></ul><h1 id="4-Tomcat一键启停"><a href="#4-Tomcat一键启停" class="headerlink" title="4. Tomcat一键启停"></a>4. Tomcat一键启停</h1><p>首先复习下Tomcat各个组件之间的关系。</p><p><img src="https://i.loli.net/2020/02/02/qaU4DIjHgezVodv.png" alt="fig8.png"></p><ul><li>为了使得一个系统能够对外提供服务，我们需要创建、组装并启动这些组件</li><li>在服务停止的时候，还需要释放资源，销毁这些组件</li><li>Tomcat需要动态地管理这些组件的生命周期</li></ul><ul><li>大组件管理小组件<ul><li>需要先启动子组件，再启动父组件，子组件需要被注入到父组件当中去</li></ul></li><li>请求的处理过程是由外层组件来驱动的<ul><li>先创建内层组件，再创建外层组件，内层组件需要被注入到外层组件当中</li></ul></li></ul><h2 id="4-1-LifeCycle接口"><a href="#4-1-LifeCycle接口" class="headerlink" title="4.1 LifeCycle接口"></a>4.1 LifeCycle接口</h2><ul><li>不变的点<ul><li>每个组件都要经历创建、初始化、启动这几个过程</li><li>创建Lifecycle接口<ul><li>init</li><li>start </li><li>stop</li><li>destroy</li></ul></li></ul></li><li>变化的点<ul><li>每个具体组件的初始化方法 </li><li>addLifecycleListener</li><li>removeLifecycleListner</li></ul></li></ul><p><img src="https://i.loli.net/2020/02/02/hBfJx9GELY1NWgq.png" alt="fig9.png"></p><ul><li>将公有逻辑抽象出来，放到抽象类当中，所以UML图就变成了图10的样子</li></ul><p><img src="https://i.loli.net/2020/02/02/vMpFBLw6mrQASa5.png" alt="fig10.png"></p><p>基类的具体实现如下: </p><pre><code>@Overridepublic final synchronized void init() throws LifecycleException {    //1. 状态检查    if (!state.equals(LifecycleState.NEW)) {        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);    }    try {        //2. 触发 INITIALIZING 事件的监听器        setStateInternal(LifecycleState.INITIALIZING, null, false);        //3. 调用具体子类的初始化方法        initInternal();        //4. 触发 INITIALIZED 事件的监听器        setStateInternal(LifecycleState.INITIALIZED, null, false);    } catch (Throwable t) {      ...    }}</code></pre><h2 id="4-2-生命周期管理总体类图"><a href="#4-2-生命周期管理总体类图" class="headerlink" title="4.2 生命周期管理总体类图"></a>4.2 生命周期管理总体类图</h2><p><img src="https://i.loli.net/2020/02/02/4r7yVeiPqAzhYFI.png" alt="fig11.png"></p><h1 id="5-Tomcat运行过程"><a href="#5-Tomcat运行过程" class="headerlink" title="5. Tomcat运行过程"></a>5. Tomcat运行过程</h1><p>我们可以通过Tomcat的/bin目录下的脚本startup.sh来启动Tomcat，整个流程如下: </p><p><img src="https://i.loli.net/2020/02/02/Par89z2MyQj7KYH.png" alt="fig12.png"></p><ul><li>启动JVM，运行Tomcat启动类Bootstrap</li><li>Bootstrap类会初始化Tomcat的类加载器，并且创建Catalina</li><li>Catalina是一个启动类，通过解析server.xml，会创建相应的组件，并调用Server的start方法</li><li>server组件被用来管理Service组件，会负责调用Service的start方法</li><li>Service组件被用来管理连接器和顶层容器Engine，因此其会调用连接器和Engine的start方法</li></ul><h2 id="5-1-Catalina"><a href="#5-1-Catalina" class="headerlink" title="5.1 Catalina"></a>5.1 Catalina</h2><p>主要任务是创建Server，通过解析server.xml文件，将server.xml里配置的各种组件一一创建出来，接着调用Server组件的init方法和start方法，以此启动整个Tomcat。</p><p>Tomcat还需要处理各种异常情况，比如强制关闭的处理，Catalina在JVM当中注册了一个关闭钩子。</p><pre><code>public void start() {    //1. 如果持有的 Server 实例为空，就解析 server.xml 创建出来    if (getServer() == null) {        load();    }    //2. 如果创建失败，报错退出    if (getServer() == null) {        log.fatal(sm.getString(&quot;catalina.noServer&quot;));        return;    }    //3. 启动 Server    try {        getServer().start();    } catch (LifecycleException e) {        return;    }    // 创建并注册关闭钩子    if (useShutdownHook) {        if (shutdownHook == null) {            shutdownHook = new CatalinaShutdownHook();        }        Runtime.getRuntime().addShutdownHook(shutdownHook);    }    // 用 await 方法监听停止请求    if (await) {        await();        stop();    }}// catalina的关闭钩子执行了Server的stop方法，会释放和清理所有的资源。protected class CatalinaShutdownHook extends Thread {    @Override    public void run() {        try {            if (getServer() != null) {                Catalina.this.stop();            }        } catch (Throwable ex) {           ...        }    }}</code></pre><h2 id="5-2-Server组件"><a href="#5-2-Server组件" class="headerlink" title="5.2 Server组件"></a>5.2 Server组件</h2><p>其具体实现类是StandardServer，继承了LifecycleBase，生命周期被统一管理，子组件是Service，因此还需要管理Service的生命周期，在启动时调用Service组件的启动方法，在停止时调用其停止方法</p><p>Server维护多个Service组件，以数组来保存</p><pre><code>@Overridepublic void addService(Service service) {    service.setServer(this);    synchronized (servicesLock) {        // 创建一个长度 +1 的新数组        Service results[] = new Service[services.length + 1];        // 将老的数据复制过去        System.arraycopy(services, 0, results, 0, services.length);        results[services.length] = service;        services = results;        // 启动 Service 组件        if (getState().isAvailable()) {            try {                service.start();            } catch (LifecycleException e) {                // Ignore            }        }        // 触发监听事件        support.firePropertyChange(&quot;service&quot;, null, service);    }}</code></pre><p>节省内存空间的一种方式</p><p>Server组件会启动一个Socket来监听停止端口，在Catalina启动的时候，会调用Server的await方法，这个地方实际上是创建了一个Socket来监听一个端口，并在这个死循环里接收Socket的连接请求，如果有新的连接到来就建立连接，然后从Socket中读取数据；如果读到的数据是停止命令SHUTDOWN，就退出循环，进入stop流程</p><h2 id="5-3-Service组件"><a href="#5-3-Service组件" class="headerlink" title="5.3 Service组件"></a>5.3 Service组件</h2><p>具体实现类是StandardService</p><pre><code>public class StandardService extends LifecycleBase implements Service {    // 名字    private String name = null;    //Server 实例    private Server server = null;    // 连接器数组    protected Connector connectors[] = new Connector[0];    private final Object connectorsLock = new Object();    // 对应的 Engine 容器    private Engine engine = null;    // 映射器及其监听器    protected final Mapper mapper = new Mapper();    protected final MapperListener mapperListener = new MapperListener(this);</code></pre><p>MapperListener 是为了支持热部署，当Web应用的部署发生变化时，Mapper中的映射信息也要跟着变化，MapperListener是一个监听器，它监听容器的变化，并将信息更新到Mapper当中。</p><pre><code>protected void startInternal() throws LifecycleException {    //1. 触发启动监听器    setState(LifecycleState.STARTING);    //2. 先启动 Engine，Engine 会启动它子容器    if (engine != null) {        synchronized (engine) {            engine.start();        }    }    //3. 再启动 Mapper 监听器    mapperListener.start();    //4. 最后启动连接器，连接器会启动它子组件，比如 Endpoint    synchronized (connectorsLock) {        for (Connector connector: connectors) {            if (connector.getState() != LifecycleState.FAILED) {                connector.start();            }        }    }}</code></pre><h2 id="5-4-Engine"><a href="#5-4-Engine" class="headerlink" title="5.4 Engine"></a>5.4 Engine</h2><pre><code>public class StandardEngine extends ContainerBase implements Engine {}</code></pre><p>Engine子容器是Host，其持有一个Host容器数组</p><pre><code>protected final HashMap&lt;String, Container&gt; children = new HashMap&lt;&gt;();</code></pre><p>ContainerBase用HashMap保存了它的子容器，并且ContainerBase还实现了子容器的增删改查</p><pre><code>for (int i = 0; i &lt; children.length; i++) {   results.add(startStopExecutor.submit(new StartChild(children[i])));}</code></pre><p>Engine通过将请求转发给某一个Host子容器来对请求进行处理，Engine的基础阀定义如下：</p><pre><code>final class StandardEngineValve extends ValveBase {    public final void invoke(Request request, Response response)      throws IOException, ServletException {      // 拿到请求中的 Host 容器      Host host = request.getHost();      if (host == null) {          return;      }      // 调用 Host 容器中的 Pipeline 中的第一个 Valve      host.getPipeline().getFirst().invoke(request, response);  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 浏览器是如何构成的(四)</title>
      <link href="/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E5%9B%9B/"/>
      <url>/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章我们一起研究了渲染过程，并且初步接触了排版器。本篇文章当中，我们会一起研究下排版器(Compositor)是如何实现当用户输入内容时顺滑的进行交互的。</p><h1 id="1-从浏览器的角度看输入事件"><a href="#1-从浏览器的角度看输入事件" class="headerlink" title="1. 从浏览器的角度看输入事件"></a>1. 从浏览器的角度看输入事件</h1><p>当你听到输入事件的时候，你可能只想到在textbox里面输入或者鼠标的点击，但是从浏览器的角度来说，输入代表的是用户任何行为。滚动鼠标滑轮是个输入事件，碰触或者将鼠标悬在某个事件上面也是一个输入事件。</p><p>当用户的某种行为发生的时候，浏览器进程是第一个收到这行为的。但是浏览器进程只是获取这个动作，而真正的处理还是交由渲染进程来做的。因此浏览器进程会将事件类型以及其坐标发送给渲染进程。渲染进程会通过找到事件目标，运行其相应的监听者来对事件进行处理。</p><h1 id="2-理解non-fast-scrollable-区域"><a href="#2-理解non-fast-scrollable-区域" class="headerlink" title="2. 理解non-fast scrollable 区域"></a>2. 理解non-fast scrollable 区域</h1><p>运行JavaScript是主线程的任务，当对一个页面进行拼装的时候，拼装线程标注页面的有事件监听器的部分，标注为Non-fast scrollable region. 通过这种标注来确保党事件在该区域发生的时候，拼装线程可以将这个时间发送给主线程。如果输入事件来自不同的地方，那么拼装线程就会创建一个新的frame来装配这块区域，而不会等待主线程了。</p><h1 id="3-Tips-关于写event-handlers"><a href="#3-Tips-关于写event-handlers" class="headerlink" title="3. Tips 关于写event handlers"></a>3. Tips 关于写event handlers</h1><p>一般写event handling的pattern是事件代理。当事件发生的时候，你可以在最顶层的组件上加一个event handler 然后根据具体的事件目标来分配任务。代码可能会像下面这样子: </p><pre><code>document.body.addEventListener(&#39;touchstart&#39;, event =&gt; {    if (event.target === area) {        event.preventDefault();    }});</code></pre><p>从开发者的角度当时是个好事情，你只需要写一个event handler就可以了。但是从浏览器的角度意味着整个页面都被标注成non-fast scrollable region了，这意味着即使整个页面不在意页面某个部分的输入，拼装线程仍然需要和主线程沟通，并且每次有输入的时候就要等在那里。因此，拼装线程的轮转能力就失效了。</p><p>为了解决这个问题，你可以加上<code>passive:true</code>选项在你的事件监听器当中。这提示了浏览器你仍然想听主线程的事件，但是compositor, 即拼装线程可以自己做自己的事情，然后生成新的frame. 一篇很棒的讲<code>passive</code>的<a href="https://medium.com/@devlucky/about-passive-event-listeners-224ff620e68c" target="_blank" rel="noopener">文章</a>. </p><h1 id="4-检查一个事件是否是cancelable"><a href="#4-检查一个事件是否是cancelable" class="headerlink" title="4. 检查一个事件是否是cancelable"></a>4. 检查一个事件是否是cancelable</h1><p>假定你现在在页面中有个box，你想限制其滚动方向，只能横向的滚动。</p><p>这个时候使用<code>passive:true</code>只是保证页面的滚动可以足够顺滑，但是你还需要使用<code>preventDefault</code>来限制滚动的方向。</p><pre><code>document.body.addEventListener(&#39;pointermove&#39;, event =&gt; {    if (event.cancelable) {        event.preventDefault(); // block the native scroll        /*        *  do what you want the application to do here        */    }}, {passive: true});</code></pre><h1 id="5-减少派送到主线程的事件"><a href="#5-减少派送到主线程的事件" class="headerlink" title="5. 减少派送到主线程的事件"></a>5. 减少派送到主线程的事件</h1><p>对于输入来说，一个触屏设备可以每秒钟发布60-120次碰触事件，而鼠标的移动可以每秒触发100次。如果像触碰的移动这种事件每秒发给主线程120次，那么他会再触发大量的点击测试和js的执行，这样子会导致整个页面的更新非常慢。</p><p>Chrome合并了连续时间，比如滚动，鼠标的滑动，光标移动等，然后延迟分发知道下一次请求渲染的时候。</p><p>如果想知道轨迹的这种信息，可以使用<code>getCoalescedEvents</code>来获取</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part1</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part2</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part3</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part4</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Browser </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 浏览器是如何构成的(三)</title>
      <link href="/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E4%B8%89/"/>
      <url>/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>在前面的两篇文章当中，我们覆盖了木偶进程的架构以及点击输入框以后发生的事情。在本文中，我们会深入去看看渲染进程当中发生了一些什么。</p><p>渲染进程影响网络表现的很多方面。本文还是起到给一个大致脉络的作用，如果想更深入了解，可以看 <a href="https://developers.google.com/web/fundamentals/performance/why-performance-matters/" target="_blank" rel="noopener">Performance Section</a>.</p><h1 id="1-渲染进程处理web内容"><a href="#1-渲染进程处理web内容" class="headerlink" title="1. 渲染进程处理web内容"></a>1. 渲染进程处理web内容</h1><p>渲染进程负责发生在tab当中的所有事情，主线程会处理你发送给用户的大部分代码。一些时候一部分你的js代码会被worker线程来处理(如果你使用web worker或者service worker的话)。Compositor 和 raster线程也是在渲染进程当中运行，使得整个渲染过程更加高效顺滑。</p><p>渲染进程的核心工作就是将HTML，CSS以及JavaScript转换成用户可以进行交互的页面。</p><h1 id="2-Parsing"><a href="#2-Parsing" class="headerlink" title="2. Parsing"></a>2. Parsing</h1><h2 id="2-1-DOM的构建"><a href="#2-1-DOM的构建" class="headerlink" title="2.1 DOM的构建"></a>2.1 DOM的构建</h2><p>当渲染进程收到一个commit信息，开始接受HTML的数据的时候，主线程就开始parseHTML，并且将其转化成Document Object Model了(DOM). </p><p>DOM是浏览器内部的对一个页面，数据结构以及JS构成的API的表示。parse的规则则是由<a href="https://html.spec.whatwg.org/" target="_blank" rel="noopener">HTML Standard</a>来进行定义的。Parser有很强的鲁棒性，因为他基本上可以处理绝大部分html本身写得时候的问题，比如忘记<code>&lt;/b&gt;</code>。都可以很优雅的进行解决。<a href="https://html.spec.whatwg.org/multipage/parsing.html#an-introduction-to-error-handling-and-strange-cases-in-the-parser" target="_blank" rel="noopener">Introduction to error handling</a></p><h2 id="2-2-子资源的加载"><a href="#2-2-子资源的加载" class="headerlink" title="2.2 子资源的加载"></a>2.2 子资源的加载</h2><p>一个网站经常会使用外部资源比如图像，CSS还有JavaScript. 这些文件需要从网络或者Cache里面加载出来。主线程可以在构建DOM树的时候依次去请求他们，但是为了加快整个过程，preload scanner 会同步运行这种加载任务。</p><p>如果遇到像<code>&lt;img&gt; &lt;link&gt;</code>这种tag，preload scanner就会看一下HTML parser转化来的tiken，然后向浏览器进程里的网络线程提交请求。  </p><p>当HTML parser发现一个<code>&lt;script&gt;</code>tag的时候，它会停止对于HTML文件的转译，然后必须要先去加载转译执行javascript代码。这样做的原因是JavaScript是可以去改变整个DOM树的结构的。需要先等其执行完以后再继续向下进行。</p><h2 id="3-自定义加载资源的方式"><a href="#3-自定义加载资源的方式" class="headerlink" title="3. 自定义加载资源的方式"></a>3. 自定义加载资源的方式</h2><ul><li>如果你的JS文件不包含document.write()这类指令，那么你就可以在script tag当中加上<code>async</code> or <code>defer</code> 属性。通过这种提示，浏览器在进行转译的时候就会异步执行js代码，不会阻止parsing的继续进行了。</li><li><code>&lt;link rel=&quot;preload&quot;&gt;</code>会告知浏览器这个资源对于当前的页面导览是必需的，浏览器需要尽快将其下载下来。</li></ul><h2 id="4-样式的处理"><a href="#4-样式的处理" class="headerlink" title="4. 样式的处理"></a>4. 样式的处理</h2><p>只有DOM是远远不够描述页面会是什么样子的。因为我们可以使用CSS来处理页面的各部分的样式。主线程会转译CSS文件，并且决定计算过得各个DOM节点的样式。这种判断取决于CSS选择器给出的各部分需要的样式。</p><p>而且即便你没有提供任何的CSS，每个DOM节点都会有一个计算过的本身的样式。<a href="https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/html/resources/html.css" target="_blank" rel="noopener">Chrome默认样式文件</a></p><h1 id="5-布局"><a href="#5-布局" class="headerlink" title="5. 布局"></a>5. 布局</h1><p>当前的渲染进程已经知道了整个文件的结构，以及每个节点的样式了。但是很可能这还不足以去渲染一个页面。因为除了各部分的分别的大小以外，我们还需要知道他们的相对位置，是如何布局，最终构成整个页面的。</p><p>主线程会遍览DOM树和计算过的样式，然后创建布局样式树，包含了x,y坐标信息和包围的box的大小。注意布局树和DOM树非常相似，但是对于<code>display:none</code>具有这种属性的节点，就完全不会在布局树里出现了。然而，<code>visibility:hidden</code>依然会出现在布局树当中。</p><h1 id="6-上色"><a href="#6-上色" class="headerlink" title="6. 上色"></a>6. 上色</h1><p>主线程会遍历样式树，去创建上色记录。这个记录里面包含了整个上色所需的过程，比如先背景，再文字，blabla </p><h1 id="7-更新渲染的管道消耗很大"><a href="#7-更新渲染的管道消耗很大" class="headerlink" title="7. 更新渲染的管道消耗很大"></a>7. 更新渲染的管道消耗很大</h1><p>在前面所叙述的过程当中，你会发现上一步的结果会成为下一步的输入。换句话说，假设你现在在html里面加了一个节点，那么整个过程基本上就要完全重来一遍了。强烈建议访问<a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3#updating_rendering_pipeline_is_costly" target="_blank" rel="noopener">link</a>，里面有整个过程的动图，很有助于理解。</p><h1 id="8-拼合-Compositing"><a href="#8-拼合-Compositing" class="headerlink" title="8. 拼合 (Compositing)"></a>8. 拼合 (Compositing)</h1><p>现在浏览器获得了整个文件的结构，每个成分的样式，整个页面的布局，上色的顺序。接下来就是拼接额过程了，这个将信息转化成像素的过程叫做rasterizing </p><p>最最开始的时候采取的拼接方案就是随着下滑一点点来渲染的，但是现在方案变得越来越复杂了。</p><p>首先会对整个页面做分层处理，然后分别对其进行渲染，像素化。<a href="https://blog.logrocket.com/eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752/?gi=cd6271834cea" target="_blank" rel="noopener">Layer 详解</a></p><p>为了知道每个成分都在哪一层，主线程会遍历布局树，去创建一个层级树。</p><p>一旦层级树被创建出来，主线程会将这些信息交给拼接线程。拼接线程接下来就会对每一层做像素化的处理。每一层可能都和整个页面一样大，相互之间是有重叠的，接下来拼接线程就会将他们分开，然后交给不同的像素化线程。像素化线程是在GPU下执行的，拼接线程会对像素胡线程进行优化，让相近的部分先一起像素化完。</p><p>一旦像素化完，拼接线程就会聚集这一部分信息，去创建拼接片。拼接片中包含了内存地址，还有在整个页面当中应处的位置。</p><p>拼接片然后会通过IPC被提交到浏览器进程当中。用拼合线程的好处是主线程不用参与，这样的话在主线程继续计算样式，执行javascript的时候拼接线程已经可以开始工作了。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part1</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part2</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part3</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part4</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Browser </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 浏览器是如何构成的(二)</title>
      <link href="/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E4%BA%8C/"/>
      <url>/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章我们一个看了进程以及线程是如何来处理一个浏览器的不同部分的，在本篇文章中，我们会一起研究下进程与线程之间是怎么进行交流，来最终展示出页面的。</p><p>本篇文章我们将聚焦于一个简单的应用场景:即用户在浏览器的输入框输入网址，回车。让我们看看浏览器是如何从互联网中拿出数据，渲染页面，最终展示出整个网页的。</p><p>正如第一讲中所说的那样，所有在tab之外的内容都是被浏览器进程来进行处理的。浏览器进程有多个线程来处理不同的事务:</p><ul><li>UI线程<ul><li>绘制所有的按钮</li><li>输入框</li></ul></li><li>网络线程<ul><li>解决网络通信问题</li></ul></li><li>存储线程<ul><li>控制对文件的访问</li></ul></li></ul><p>因此，当你在输入框输入网址的时候，请求会被浏览器进程进行处理。</p><h1 id="1-处理请求"><a href="#1-处理请求" class="headerlink" title="1. 处理请求"></a>1. 处理请求</h1><p>首先浏览器要判断你输入的是个query还是个网址。因为在Chrome当中，输入框既可以用来直接进行搜索，也可以去到各个网站。因此UI 线程就需要做parsing，然后判断输入的属性 query/ url，然后将你送到搜索引擎还是到网址。</p><h1 id="2-开启导览-navigation"><a href="#2-开启导览-navigation" class="headerlink" title="2. 开启导览 navigation"></a>2. 开启导览 navigation</h1><p>当你敲击Enter以后，UI 线程就会开始一个网络请求，去拿网站的内容，网络线程就会经由各种协议，DNS搜寻，创建TLS连接等。一些时候，网络线程会受到服务器的重定向header，比如HTTP301。这个时候网络线程就会通知UI线程请求重定向，然后另外一个URL请求会被创建出来。关于输入url以后都发生了什么，写过一篇博，比较详细 - <a href="https://llchen60.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E4%BB%A5%E5%90%8E%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">浏览器输入url以后都发生了什么</a></p><h1 id="3-读取Response"><a href="#3-读取Response" class="headerlink" title="3. 读取Response"></a>3. 读取Response</h1><p>一旦得到返回结果的主体(body)，网络线程就会看字节流的前几个字节。Content-Type header会包含返回的数据类型的信息。而后需要看返回的是什么类型的文件，如果是html，那么就交给render进程去进行渲染，如果是zip等文件，那么就意味着这是个下载请求，因此需要将这个请求转到下载管理器处。</p><h1 id="4-寻找一个渲染的进程"><a href="#4-寻找一个渲染的进程" class="headerlink" title="4. 寻找一个渲染的进程"></a>4. 寻找一个渲染的进程</h1><p>在做过各种安全检查以后，网络线程会通知UI线程数据传输完毕，UI线程会去找一个渲染进程来对页面做渲染。</p><p>这里做的一个小优化是在发起请求获取要渲染的页面的同时，UI线程会尝试着提前去找一个渲染进程待命。</p><h1 id="5-渲染页面"><a href="#5-渲染页面" class="headerlink" title="5. 渲染页面"></a>5. 渲染页面</h1><p>现在数据和渲染进程都已经准备好了，一个进程间的通信信息(IPC)就会从浏览器进程发送到渲染进程，告知其可以开始渲染了。同时它也会通过数据流来传递数据，这样渲染进程就可以持续得到数据了。这个时候就开始逐渐加载页面。</p><p>与此同时的，地址栏会得到更新，安全提示，和网站设置UI等都会得到更新。Session的信息，也会更新。</p><h1 id="6-渲染结束"><a href="#6-渲染结束" class="headerlink" title="6. 渲染结束"></a>6. 渲染结束</h1><p>渲染结束以后，渲染进程会送一个IPC回到浏览器进程。这个时候UI<br>线程就会停止显示tab上那个表示加载的旋转小圈圈。</p><h1 id="7-跳转到不同网站"><a href="#7-跳转到不同网站" class="headerlink" title="7. 跳转到不同网站"></a>7. 跳转到不同网站</h1><p>很类似于前面所叙述的过程，唯一不同的是在离开当前页面之前，如果开发者渲染了beforeunload事件，那么会先执行他，一般来说是像那种“你确定要离开当前页面”之类的信息。使用这个事件还是需要谨慎些的，首先技术角度上会让整个运行变慢，因为这个事件的运行和加载新页面需要线性执行；从产品角度上来说，这样的做法对于留存率的提升表现的作用也是有限的… </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part1</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part2</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part3</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part4</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Browser </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 浏览器是如何构成的(一)</title>
      <link href="/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E4%B8%80/"/>
      <url>/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E7%9A%84-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>这一个小系列是看到了developers.google.com上的一系列讲inside look of modern web browser的文章，觉得写得很有意思，里面叙述了浏览器是如何一步一步将你的代码进行渲染的整个过程，并且提及了各种语言在浏览器当中表现不同的原因。就在这里翻译下，和大家一起分享。</p><h1 id="1-CPU-GPU"><a href="#1-CPU-GPU" class="headerlink" title="1. CPU, GPU"></a>1. CPU, GPU</h1><p>首先是CPU与GPU的说明：</p><ul><li>CPU<ul><li>中央处理单元</li><li>计算机大脑</li><li>可以处理多种不同的任务</li></ul></li><li>GPU<ul><li>图像处理单元</li><li>擅长解决简单的任务，但是需要跨多核心来进行处理</li></ul></li></ul><p>当你在电脑或者浏览器当中运行一个应用的时候，CPU或者GPU就是实际运行程序的东西，而如何运行 - 这种机制是由操作系统来定义的。</p><h1 id="2-进程与线程，-多进程架构"><a href="#2-进程与线程，-多进程架构" class="headerlink" title="2. 进程与线程， 多进程架构"></a>2. 进程与线程， 多进程架构</h1><p>进程可以成为一个应用的执行程序，一个线程是进程的一部分，执行进程程序的任意一部分。</p><p><img src="https://i.loli.net/2020/02/02/nBacm7IHfkLe6MQ.png" alt="fig1.png"></p><p>当你打开一个应用，一个进程就被创建了出来。程序有可能会建立多个线程来帮助进程进行工作（可选择的）。操作系统给进程一部分的内存空间使用，所用的应用内的状态都会存储在这一部分私人的内存空间当中。当你关闭应用，进程就会结束，操作系统也会将内存空间释放掉。</p><p>一个进程可以要求操作系统去开另外一个进程来跑其他的一些任务。当这发生时，另外的一部分内存就会被分配给新的进程使用。两个进程之间可以进行进程间通信。使用进程间通信的好处是如果一个进程不工作了，那么操作系统只需要重启这个进程就好，不会影响到其他的进程。</p><h1 id="3-浏览器架构"><a href="#3-浏览器架构" class="headerlink" title="3. 浏览器架构"></a>3. 浏览器架构</h1><p>浏览器是如何使用进程和线程的呢？ 两种方式，但并无好坏之分，完全是不同的浏览器内核选择了不同的实现方式。</p><ul><li>一个进程，内含多个线程</li><li>多个进程，少量线程负责进程间的通信</li></ul><p><img src="https://i.loli.net/2020/02/02/1TRsOX2fBFN3DEg.png" alt="fig2.png"></p><h2 id="3-1-Chrome的架构"><a href="#3-1-Chrome的架构" class="headerlink" title="3.1 Chrome的架构"></a>3.1 Chrome的架构</h2><p><img src="https://i.loli.net/2020/02/02/Z6f4QiHO1FJCjeL.png" alt="fig3.png"></p><p>如图所示，最上层是浏览器进程和其他进程合作来管理应用的不同部分。对于渲染进程，多个进程会被创建，并分配给每个tab。</p><h2 id="3-2-进程控制体系"><a href="#3-2-进程控制体系" class="headerlink" title="3.2 进程控制体系"></a>3.2 进程控制体系</h2><ul><li>浏览器进程<ul><li>控制浏览器本身的一些功能<ul><li>书签，收藏</li><li>前进，后退</li></ul></li><li>处理看不到的权限处理，网络请求的部分</li></ul></li><li>Renderer<ul><li>处理tab以内的网址展示的部分</li></ul></li><li>Plugin<ul><li>控制plugins</li></ul></li><li>GPU<ul><li>专门用来解决GPU相关的任务，和其他的进程分开。这样做是因为GPU是将从不同app来的请求放到一块进行处理的，然后放在一个界面上。 </li></ul></li></ul><p><img src="https://i.loli.net/2020/02/02/1BkHY7NX85uPhyI.png" alt="fig4.png"></p><h2 id="3-3-多进程架构的优势劣势"><a href="#3-3-多进程架构的优势劣势" class="headerlink" title="3.3 多进程架构的优势劣势"></a>3.3 多进程架构的优势劣势</h2><ul><li>互不影响，可以只崩一个tab，但是如果是同一个进程，所有tab就都崩掉了</li><li>安全，沙盒  可以实现tab/ process级别的控制</li><li>因为每个进程都有自己的内存空间，所以chrome会使用更多的内存(相比于友商们). 但是当chrome到达限制以后，其会让多个tab使用同一个进程来缓解这个问题的。</li><li>Chrome当前正在做的是，通过检测硬件的状态来决定是否将每个微服务放到一个单独的进程上来运行，或者全放到一块。</li></ul><h2 id="3-4-组件隔离-site-isolation"><a href="#3-4-组件隔离-site-isolation" class="headerlink" title="3.4 组件隔离 (site isolation)"></a>3.4 组件隔离 (site isolation)</h2><p>Chrome会运行一个单独的渲染进程对于来自不同的网站的请求（对于组件的渲染）。一个tab一个进程的方式可能会使得同一个页面内来自不同的网址的组件在同一个进程内分享同一个内存空间中的东西，这是很不安全的。我们需要确保一个网站不可以不经过同意就去访问另外一个网站携带/获取的数据。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part1</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part2</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part3</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part4</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Browser </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于5G</title>
      <link href="/%E5%85%B3%E4%BA%8E5G/"/>
      <url>/%E5%85%B3%E4%BA%8E5G/</url>
      
        <content type="html"><![CDATA[<p>关于5G本身，无须赘述，有太多太多文章or博客详细说了它的特征与改变，20GB/s的下载速度，10GB/s的上传速度， 低至4ms的延时, etc. 即高速，极低延时。</p><p>乍一听这个概念，很难想象有什么应用场景是非他不可的（向后看），又有什么新的应用场景是因为5G的兴盛将逐渐铺展开来的（向前看）。</p><p>BrainStorm  -&gt; 什么地方很需要高速？ 低延时？ 高带宽？ -&gt; 讲求实时性的应用场景 -&gt; 自动驾驶，物联网，VR虚拟现实。</p><p>疯狂畅想一下，当5G真的普及以后，整个社会会变成的样子。</p><h1 id="1-终端的配置还重要么？"><a href="#1-终端的配置还重要么？" class="headerlink" title="1. 终端的配置还重要么？"></a>1. 终端的配置还重要么？</h1><p>在3G， 4G时代我们对于终端的要求非常高，为了能够在终端中存储我们需要使用的app，获取我们想要获取的所有信息。但是如果有一天，我们直接从云端运行游戏和本机上有几乎一样的体验的时候，你还需要很高的配置么？ </p><p>我们现在所使用的手机，可以想象成一个巨大的缓存层，需要他是因为和服务器的交互有比较高的延时，我们在用各种方式去限制和服务器交流的次数，还有每次交流的大小；为了加快速度，还把很多东西都存到了本地。</p><p>那么，当5G成熟的时候，当我们和服务器的交互的延时几乎可以忽略不计的时候，为什么我们的终端还需要那么大的存储，那么强的性能呢？ 为什么我们还需要将app提前安装在自己的终端呢？ 这个时候可能变成，我们只需要一个屏幕，一个网卡，对于配置的要求几乎为零，就可以完成我们现在正在做需要做的所有事情了。</p><p>继续延伸，如果终端某种程度上演化为只需要一块屏幕，那么其成本要比现在低非常多，而5G网络本身的成本(基站，运维)，其边际成本几乎为零。那么会不会有一天真的能实现电影里描述的那种，身边全是屏幕，所有东西都可以进行点击，可以非常迅捷的完成各种操作呢？ </p><h1 id="2-物联网？智能家居？"><a href="#2-物联网？智能家居？" class="headerlink" title="2. 物联网？智能家居？"></a>2. 物联网？智能家居？</h1><p>如果有去过什么演唱会，现场球赛之类的，那你一定会察觉到现场网速非常慢… 可以这样简化下，这是因为每个部署的基站有着最大可以提供服务的连接数的限制，因此当人多了以后，连接数太大，互相之间就会开始抢占有限的资源，导致速度越来越慢。</p><p>这也是在3G, 4G时代，虽然我们喊了那么多年的物联网，万物互联，但实际上并没有太发展起来的原因。而5G，能够支持同时接入更多的设备。这也扫除了物联网发展的一大障碍。</p><h1 id="3-无人驾驶？-无人机？"><a href="#3-无人驾驶？-无人机？" class="headerlink" title="3. 无人驾驶？ 无人机？"></a>3. 无人驾驶？ 无人机？</h1><p>现在的无人驾驶方案都是在汽车上部署大量传感器和高性能计算机，传感器传输信息，高性能计算机实时进行分析和反馈。这带来了一些问题，首先是运算能力的不足，即在有限的空间和不稳定的环境(温度，震动等)需要有稳定的计算速度；相对较高的成本，每辆车都需要装高性能计算机，给后期的运维也造成了不小的困难。而当延时降低到可以忽略不计的程度的时候，我们可以将数据实时发送回云端，数据处理完以后再实时传送回来。云端服务器往往有更好的性能，后期维护成本也会低非常多。同理对无人机也适用。 </p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> 5G </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API-重新认识RESTFUL</title>
      <link href="/API-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86RESTFUL/"/>
      <url>/API-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86RESTFUL/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲如何对接口进行设计，让URL更为合理，指定合理的数据格式，处理错误码的方式</p><h1 id="1-API-概念"><a href="#1-API-概念" class="headerlink" title="1. API 概念"></a>1. API 概念</h1><p>广义的API（Application Programming Interface）是指应用程序编程接口，包括在操作系统中的动态链接库文件例如dll\so，或者基于TCP层的socket连接，用来提供预定义的方法和函数，调用者无需访问源码和理解内部原理便可实现相应功能。而当前通常指通过<strong>HTTP协议传输的web service技术</strong>。</p><p>API和语言无关，理论上具有网络操作能力的编程语言都可以通过相应HTTP请求并构造HTTP包来完成API的架构。API和Json，xml等媒体类型没有太大的关系，它们知识一种传输或媒体的格式，便于计算机解析和读取数据。</p><blockquote><p>基于以上，API设计的目的是为了让程序可读，应当遵从简单、易用、无状态等特性，这也是为什么Restful风格流行的原因。</p></blockquote><h1 id="2-Restful-API"><a href="#2-Restful-API" class="headerlink" title="2. Restful API"></a>2. Restful API</h1><blockquote><p>Restful = 有意义的URL + 合适的HTTP动词</p></blockquote><p><img src="https://i.loli.net/2020/02/01/1q85H4orvdW9KBG.png" alt="fig1.png"></p><p>REST（英文：Representational State Transfer，简称REST），RESTful是一种对基于HTTP的应用设计风格，只是提供了一组设计原则和约束条件，而不是一种标准。网络上有大量对RESTful风格的解读，简单来说Restful定义URI和HTTP状态码，让你的API设计变得更简洁、清晰和富有层次，对缓存等实现更有帮助。</p><p>HTTP包处于网络应用层，因此HTTP包为平台无关的字符串表示，如果尽可能的使用HTTP的包特征而不是大量在body定义自己的规则，可以用更简洁、清晰、高效的方式实现同样的需求。</p><p><img src="https://i.loli.net/2020/02/01/lCmurw9Z3hVDH8G.png" alt="fig2.png"></p><p>例子中使用路径参数构建URL和HTTP动词来区分我们需要对服务所做出的操作，而不是使用URL上的接口名称，例如 getProducts等；使用HTTP状态码，而不是在body中自定义一个状态码字段；URL需要有层次的设计，例如/catetory/{category_id}/products 便于获取path参数，在以后例如<strong>负载均衡和缓存的路由</strong>非常有好处。</p><p>RESTful的本质是基于HTTP协议对资源的增删改查操作做出定义。理解HTTP协议非常简单，HTTP是通过网络socket发送一段字符串，这个字符串由键值对组成的header部分和纯文本的body部分组成。Url、Cookie、Method都在header中。</p><h1 id="3-JSON-API"><a href="#3-JSON-API" class="headerlink" title="3. JSON API"></a>3. JSON API</h1><p>因为RESTFUL风格仅仅规定了URL和HTTP Method的使用，并没有定义body中数据的格式。那么问题来了：</p><blockquote><p>如何定义请求或者返回对象的结构，该如何针对不同的情况返回不同的HTTP状态码呢？ </p></blockquote><p>JSON已经是最主流的网络传输格式，因此本文默认JSON作为传输格式来讨论后面的话题。JSONAPI尝试去提供一个非常通用的描述数据资源的格式，关于记录的创建、更新和删除，因此要求在前后端均容易实现，并包含了基本的关系类型。</p><h2 id="3-1-MIME类型"><a href="#3-1-MIME类型" class="headerlink" title="3.1 MIME类型"></a>3.1 MIME类型</h2><p>JSON API数据格式已经被IANA机构接受了注册，因此必须使用<strong>application/vnd.api+json</strong>类型。客户端请求头中Content-Type应该为<strong>application/vnd.api+json</strong>，并且在Accept中也必须包含<strong>application/vnd.api+json</strong>。如果指定错误服务器应该返回415或406状态码。</p><h2 id="3-2-JSON文档结构"><a href="#3-2-JSON文档结构" class="headerlink" title="3.2 JSON文档结构"></a>3.2 JSON文档结构</h2><p>在顶级节点使用data、errors、meta，来描述数据、错误信息、元信息，<strong>注意data和errors应该互斥</strong>，不能再一个文档中同时存在，meta在项目实际上用的很少，只有特别情况才需要用到，比如返回服务器的一些信息。</p><p><img src="https://i.loli.net/2020/02/01/qAyxgkXnQfeELjS.png" alt="fig3.png"></p><h3 id="3-2-1-data-属性"><a href="#3-2-1-data-属性" class="headerlink" title="3.2.1 data 属性"></a>3.2.1 data 属性</h3><p>一个典型的data对象格式，我们的有效信息一般都放在attributes当中。</p><p><img src="https://i.loli.net/2020/02/01/DbLVQE2Gy184MqK.png" alt="fig4.png"></p><h3 id="3-2-2-errors属性"><a href="#3-2-2-errors属性" class="headerlink" title="3.2.2 errors属性"></a>3.2.2 errors属性</h3><p>这里的errors和data有一点不同，一般来说返回值中errors作为列表存在，因为针对每个资源可能出现多个错误信息。最典型的例子为，我们请求的对象中某些字段不符合验证要求，这里需要返回验证信息，但是HTTP状态码会使用一个通用的401，然后把具体的验证信息在errors给出来。</p><p><img src="https://i.loli.net/2020/02/01/wiKpC8Q9ngItRJr.png" alt="fig5.png"></p><h1 id="4-常用返回码"><a href="#4-常用返回码" class="headerlink" title="4. 常用返回码"></a>4. 常用返回码</h1><ul><li>200 OK</li><li>201 created </li></ul><p>如果客户端发起一个POST请求，在RESTful部分我们提到，POST为创建资源，如果服务器处理成功应该返回一个创建成功的标志，在HTTP协议中，201为新建成功的状态。文档规定，服务器必须在data中返回id和type。</p><ul><li>401 Unauthorized</li></ul><p>如果服务器在检查用户输入的时候，需要传入的参数不能满足条件，服务器可以给出401错误，标记客户端错误，需要客户端自查。</p><ul><li>415 Unsupported Media Type</li></ul><p>当服务器媒体类型Content-Type和Accept指定错误的时候，应该返回415。</p><ul><li>403 Forbidden </li></ul><p>当客户端访问未授权的资源时，服务器返回403要求用户授权信息。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTFul </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thoughts on web accessibility(信息无障碍)</title>
      <link href="/Thoughts-on-web-accessibility-%E4%BF%A1%E6%81%AF%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
      <url>/Thoughts-on-web-accessibility-%E4%BF%A1%E6%81%AF%E6%97%A0%E9%9A%9C%E7%A2%8D/</url>
      
        <content type="html"><![CDATA[<p>我们在做前端的时候，实质上信息无障碍是很多工程师很容易忽视但又着实很重要的一部分，要知道在这个世界上是有很多人因为一些原因无法像正常人一样去浏览网页的，诸如色盲，盲人，老花等等，我们需要适配设计的网页，使其尽量对于各种人都是信息无障碍的。总觉得这是件大部分人都没有想到的事情，但是一旦想到了，那么就应该做点什么，来使这部分相对边缘的人也可以正常的去看我们设计的网页。</p><p>以下是Wiki给出的定义: </p><blockquote><p>“ Web accessibility refers to the inclusive practice of removing barriers that prevent interaction with, or access to websites, by people with disabilities. When sites are correctly designed, developed and edited, all users have equal access to information and functionality.”</p></blockquote><h1 id="1-Accessibility-标准"><a href="#1-Accessibility-标准" class="headerlink" title="1. Accessibility 标准"></a>1. Accessibility 标准</h1><ul><li>可感知<ul><li>如果只提供凭借一种感官才能让用户感知到内容，无形中会失去很多用户</li></ul></li><li>可操作<ul><li>能否正常使用每一个组件的功能<ul><li>E.G 下拉菜单，很多网站设计的时候hover over的时候就有下拉效果，但是无法点击。 如果我们的用户无法看到这些东西，那很可能就无法继续交互下去了。</li></ul></li></ul></li><li>可理解<ul><li>用户能否很好地理解呢？<ul><li>需要考虑读屏软件的适用性</li></ul></li></ul></li><li>强健性<ul><li>能否被多种User Agent使用<ul><li>屏幕阅读器</li><li>IE</li></ul></li></ul></li></ul><p>WebAIM (web accessibility in mind) <a href="https://webaim.org/standards/wcag/checklist" target="_blank" rel="noopener">Checklist</a> </p><h1 id="2-Tips-一些我们可以follow的东西"><a href="#2-Tips-一些我们可以follow的东西" class="headerlink" title="2. Tips 一些我们可以follow的东西"></a>2. Tips 一些我们可以follow的东西</h1><ul><li>标题 段落 列表 保持良好的结构<ul><li>屏幕阅读器在读到结构相对良好的标签的时候，会帮助用户更容易理解我们网站的内容</li></ul></li><li>尽可能使用语义化标签<ul><li>浏览器的调试工具当中有<strong>Accessibility tree</strong>,浏览器会获取DOM树，浏览器会获取DOM树，然后将其修改成适用于辅助技术的形式(无障碍树)，所以良好的使用语义化标签，能让辅助设备更合理地将我们网站的内容转化成Accessibility tree，从而解读给用户，确保页面中的重要的元素有正确的无障碍角色、状态和属性。</li></ul></li><li>为所有非文本内容提供文本替代项<ul><li>所有的图片都应当有alt属性，重要的图片应使用描述性替代文本简洁说明图像内容。</li></ul></li><li>DOM顺序与Tab键顺序保持一致</li><li>不要做<code>a {outline: none}</code>这种操作，因为这样的话这个小组件就是Unfocusable的了，对于不懂的人完全没法继续搞了</li><li>对比度 最低要求 4.5:1 </li><li>我们可以使用chrome浏览器的Audits找到自己的网站存在的所有无障碍问题，然后针对性的进行修改</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://insights.thoughtworks.cn/about-web-accessibility/" target="_blank" rel="noopener">https://insights.thoughtworks.cn/about-web-accessibility/</a></li><li><a href="https://webaim.org/standards/wcag/checklist" target="_blank" rel="noopener">https://webaim.org/standards/wcag/checklist</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> Web Accessibility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC协议</title>
      <link href="/RPC%E5%8D%8F%E8%AE%AE/"/>
      <url>/RPC%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是远程过程调用"><a href="#1-什么是远程过程调用" class="headerlink" title="1. 什么是远程过程调用"></a>1. 什么是远程过程调用</h1><p>RPC是指计算机A上的进程，调用另外一台计算机B上的进程，其中A上的调用进程被挂起，而B上的被调用进程开始执行，当值返回给A时，A进程继续执行。</p><p>注意这中间，AB都经历了内核态和用户态之间的转变。</p><p>整个流程如图所示：</p><p><img src="https://i.loli.net/2020/02/01/tqlp2wST4KBcgyn.jpg" alt="fig1.jpg"></p><h1 id="2-痛点"><a href="#2-痛点" class="headerlink" title="2. 痛点"></a>2. 痛点</h1><p>那远程过程调用到底解决了什么问题呢？</p><p>由于各服务部署在不同机器上，要想再服务间进行远程调用免不了网络通信过程，服务消费方每调用一个服务都要写大量和网络通信相关的代码，RPC框架实际上完成了对网络通信的细节的封装，让消费方能够像调用本地服务一样调用远程服务。</p><h1 id="3-RPC框架入门"><a href="#3-RPC框架入门" class="headerlink" title="3. RPC框架入门"></a>3. RPC框架入门</h1><p>RPC框架中主要有三个角色，</p><ul><li>Provider 服务提供方</li><li>Consumer 服务消费方</li><li>Registry 服务注册中心</li></ul><p>使用服务注册中心的原因是，在SOA框架中，往往Provider和Consumer的数量不唯一，通过注册中心注册服务，可以做负载均衡。</p><p><img src="https://i.loli.net/2020/02/01/mYIbBUGoSEPTvu5.jpg" alt="fig2.jpg"></p><p><img src="https://i.loli.net/2020/02/01/HqPaDVrWStugIf6.jpg" alt="fig3.jpg"></p><p>服务提供者启动后主动向注册中心注册机器ip, port以及提供的服务列表；服务消费者启动时向注册中心获取服务提供方地址列表，可实现软负载均衡和Failover.<br>RPC框架当中需要使用很多技术，以下列出来主要的一部分： (do match internal amazon c***** framework!)</p><h2 id="3-1-动态代理"><a href="#3-1-动态代理" class="headerlink" title="3.1 动态代理"></a>3.1 动态代理</h2><h2 id="3-2-序列化"><a href="#3-2-序列化" class="headerlink" title="3.2 序列化"></a>3.2 序列化</h2><p>为了能在网络上传输和接收Java对象，需要进行序列化和反序列化的操作</p><h2 id="3-3-NIO"><a href="#3-3-NIO" class="headerlink" title="3.3 NIO"></a>3.3 NIO</h2><p>基于Netty这一IO通信框架</p><p><a href="https://blog.csdn.net/suifeng3051/article/details/23348587" target="_blank" rel="noopener">Netty4详解</a></p><h2 id="3-4-服务注册中心"><a href="#3-4-服务注册中心" class="headerlink" title="3.4 服务注册中心"></a>3.4 服务注册中心</h2><p>Redis/ ZooKeeper/ Consul/ Etcd</p><h1 id="4-RPC-vs-REST"><a href="#4-RPC-vs-REST" class="headerlink" title="4. RPC vs REST"></a>4. RPC vs REST</h1><p>是理念的不同，REST是一种设计风格，REST的URL主体是资源，是名词，而且也仅支持HTTP协议，规定了使用HTTP Method来表达本次要做的动作，类型个位数… 这些动作表达了对资源仅有的几种转换方式。</p><p>而RPC的思想，是把本地函数映射到API，也就是说一个API对应的是一个函数，本地有什么函数，远程也可以调用这个函数；是建立在采用的协议之上的。</p><p>可以参考<a href="https://www.zhihu.com/question/28570307" target="_blank" rel="noopener">WEB开发中，使用JSON-RPC好，还是RESTful API好？</a>获取更多细节。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful vs RPC</title>
      <link href="/RESTful-vs-RPC/"/>
      <url>/RESTful-vs-RPC/</url>
      
        <content type="html"><![CDATA[<p>本文主要想分析二者的不同，以及为什么要采用RPC远程调用的方式，关于RPC协议本身，可以看这篇文章<a href="https://www.llchen60.com/2018/12/15/RPC%E5%8D%8F%E8%AE%AE/">RPC协议</a></p><h1 id="1-REST详解"><a href="#1-REST详解" class="headerlink" title="1. REST详解"></a>1. REST详解</h1><p>REST 代表 representational state transfer, 即表现层状态转移，划重点，状态的转移。 REST本身是不包含动作的，用一个个名词来划定资源，再通过定义的Get/Post/Put/delete等操作来做资源的交换。用Roy Fielding在其论文里的话来说： <strong>REST is all about a client-server relationship, where server-side data are made available through representations of data in simple formats, often JSON and XML.</strong><br>REST是来论述client和server之间的关系的，其中server端的数据是通过简单类型的数据(representation of data)来进行表示的，通常是JSON和XML.</p><p>这种数据的表现是可以进行修改的，我们可以通过方法以及多媒体(链接)来赋予动作和关系，然后进行各个状态的转移。相当于说，链接以及方法给予了状态转移的渠道和方式。</p><p>REST自身有一些限制：</p><ul><li>REST是无状态的，请求之间没有持久的会话信息</li><li>响应需要声明成可缓存的</li><li>REST关注一致性，如果使用HTTP，需要尽可能使用HTTP的特性，而不是去发明新的公约</li></ul><p>REST之美体现在从任何状态向任何状态转移的合法的行为总是被server所控制的，与client的关系比较小；client是运行时候发出的请求。而对于RPC而言，它的行为会更加固定一些。对比二者之间的区别，你可以想象你通过不停点击链接从淘宝首页最终转到产品详情页的整个过程，和输入一个名词，通过一个API call直接到详情页的过程。</p><p>在上述第一个例子里，只要对server端的url链接做各种变化就可以了，让他能接受各种参数；但是对于第二种情况而言，我们需要在client端实现这个API call，然后从client向server发出一个请求，是需要在client和server端都进行修改的。</p><p>其实这里可以稍微加一点和RPC相比的“优势”，相对而言，RPC给工程师更多的操作空间，即你可以写出有着超强限定的API，但这样往往适用性会很低，然后随着时间，会出现N多API call，这对于后期的维护，开发都会造成不太好的影响。</p><h1 id="2-What’s-RPC"><a href="#2-What’s-RPC" class="headerlink" title="2. What’s RPC"></a>2. What’s RPC</h1><p>RPC，远程过程调用，前面写过一篇博文来讲它，大家可以<a href="https://www.llchen60.com/2018/12/15/RPC%E5%8D%8F%E8%AE%AE/">点击</a>去看详情。这里说说它的发展的过程，起先的时候大家都用XML-RPC，奈何不怎么好用啊…因为XML对于各种类型的支持不是很好，大部分都只能当成String处理，这就尴尬了，你只能再附上metadata告诉别人这个到底是什么类型的。后面有了Json就好一些了。 </p><p>采用RPC比较难搞的还是你的API的精细度，解释一下，用REST的时候你可以通过query来询问不同的东西，这个时候实际上都是面对一个API的嘛，但是对于<br>RPC而言，我们是需要构建一个API专门来解决一个问题的。需要对其精细度（细化程度）做考量的。</p><h1 id="3-对比"><a href="#3-对比" class="headerlink" title="3. 对比"></a>3. 对比</h1><p>其实二者没有孰优孰劣，甚至某种程度上这种比较是有点神奇的。因为实质上他们是可以相套的，比如从client看是个REST的API，但是从Server来看，在这个URL之下，实际上是用了RPC协议，从远程调用了另外一个服务的某个API，来使用。</p><p>REST更多的是面向状态，如果全都用REST来写API的话，你会发现他给出的几种预制的行为有些时候是无法很切实的描述出这个动作的；而RPC则可以很好的解决这一点，其主体就是个动作。</p><p>[1]. <a href="https://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/" target="_blank" rel="noopener">https://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/</a></p><p>[2] Roy Fielding’s dissertation <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm</a> </p><p>[3]. <a href="https://www.smashingmagazine.com/2016/09/understanding-rest-and-rpc-for-http-apis/" target="_blank" rel="noopener">https://www.smashingmagazine.com/2016/09/understanding-rest-and-rpc-for-http-apis/</a></p><p>[4]. <a href="https://zhuanlan.zhihu.com/p/34440779" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34440779</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTFul </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LDAP Intro</title>
      <link href="/LDAP-Intro/"/>
      <url>/LDAP-Intro/</url>
      
        <content type="html"><![CDATA[<h1 id="1-What’s-LDAP"><a href="#1-What’s-LDAP" class="headerlink" title="1. What’s LDAP?"></a>1. What’s LDAP?</h1><p>LDAP stands for <strong><em>Lightweight Directory Access Protocol</em></strong>. It is a lightweight client-server protocol for accessing directory services. It runs over <strong>TCP/IP or other connection oriented transfer services</strong>. </p><h1 id="2-What’s-directory"><a href="#2-What’s-directory" class="headerlink" title="2. What’s directory?"></a>2. What’s directory?</h1><p>Similar to database, but contain more <strong>descriptive, attibute-based information</strong>. It has some features:</p><ol><li>Read much more often than it is written. </li><li>Directories are tuned to give quick response to high volume look up or search operations.</li><li>Have the ability to replicate information widely in order to increase availability and reliability</li></ol><h1 id="3-How-does-LDAP-work"><a href="#3-How-does-LDAP-work" class="headerlink" title="3. How does LDAP work?"></a>3. How does LDAP work?</h1><p>LDAP directory serice base on a client-server model. One or more LDAP servers contain the data making up the LDAP directory tree or LDAP backend database. An LDAP client connects to an LDAP server and asks it a question. The server responds with the answer, or with a pointer to where the client can get more information (typically, another LDAP server). No matter what LDAP server a client connects to, it sees the same view of the directory; a name presented to one LDAP server references the same entry it would at another LDAP server. This is an important feature of a global directory service, like LDAP.</p><h1 id="4-Directory-Structure"><a href="#4-Directory-Structure" class="headerlink" title="4. Directory Structure"></a>4. Directory Structure</h1><p>The protocol provides an interface with directories that follow the x.500 model:</p><ul><li><p>An entry consists of a set of attributes</p></li><li><p>An attribute has a name(an attribute type or attribute description) and one or more values. Attrs are defined in a schema. </p></li><li><p>Each entry has a unique identifier - distinguished Name(DN).This consists of its Relative Distinguished Name (RDN), constructed from some attribute(s) in the entry, followed by the parent entry’s DN.</p><p>   dn: cn=John Doe,dc=example,dc=com<br>   cn: John Doe<br>   givenName: John<br>   sn: Doe<br>   telephoneNumber: +1 888 555 6789<br>   telephoneNumber: +1 888 555 1232<br>   mail: <a href="mailto:john@example.com">john@example.com</a><br>   manager: cn=Barbara Doe,dc=example,dc=com<br>   objectClass: inetOrgPerson<br>   objectClass: organizationalPerson<br>   objectClass: person<br>   objectClass: top</p></li></ul><p><code>&quot;dn&quot;</code> is the distinguished name of the entry; it is neither an attribute nor a part of the entry. <code>&quot;cn=John Doe&quot;</code> is the entry’s RDN (Relative Distinguished Name), and <code>&quot;dc=example,dc=com&quot;</code> is the DN of the parent entry, where <code>&quot;dc&quot;</code> denotes <code>&#39;Domain Component&#39;</code>. The other lines show the attributes in the entry. Attribute names are typically mnemonic strings, like <code>&quot;cn&quot;</code> for common name, <code>&quot;dc&quot;</code> for domain component, <code>&quot;mail&quot;</code> for e-mail address, and <code>&quot;sn&quot;</code> for surname.</p><p>A server holds a subtree starting from a specific entry, e.g. <code>&quot;dc=example,dc=com&quot;</code> and its children. Servers may also hold references to other servers, so an attempt to access <code>&quot;ou=department,dc=example,dc=com&quot;</code> could return a referral or continuation reference to a server that holds that part of the directory tree. The client can then contact the other server. Some servers also support chaining, which means the server contacts the other server and returns the results to the client.</p><p>LDAP rarely defines any ordering: The server may return the values of an attribute, the attributes in an entry, and the entries found by a search operation in any order. This follows from the formal definitions - an entry is defined as a set of attributes, and an attribute is a set of values, and sets need not be ordered. </p><h1 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5. Reference"></a>5. Reference</h1><p>1.<a href="https://segmentfault.com/a/1190000002607140" target="_blank" rel="noopener">LDAP服务器的概念和原理简单介绍</a><br>2.<a href="https://www.tldp.org/HOWTO/LDAP-HOWTO/whatisldap.html" target="_blank" rel="noopener">What’s LDAP</a><br>3.<a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol" target="_blank" rel="noopener">Wiki: Lightweight_Directory_Access_Protocol</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> LDAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API认证与授权(七) - OAuth 2.0</title>
      <link href="/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%B8%83-OAuth-2-0/"/>
      <url>/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%B8%83-OAuth-2-0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><p>在前面，我们可以看到，从Digest Access， 到AppID+HMAC，再到JWT，再到OAuth 1.0，这些个API认证都是要向Client发一个密钥（或是用密码）然后用HASH或是RSA来签HTTP的请求，这其中有个主要的原因是，以前的HTTP是明文传输，所以，在传输过程中很容易被篡改，于是才搞出来一套的安全签名机制，所以，这些认证方法都是可以在HTTP明文协议下使用的。</p><p>这种使用签名方式大家可以看到是比较复杂的，所以，对于开发者来说，也是很不友好的，在组织签名的那些HTTP报文的时候，各种，URLEncode和Base64，还要对Query的参数进行排序，然后有的方法还要层层签名，非常容易出错，另外，这种认证的安全粒度比较粗，授权也比较单一，对于有终端用户参与的移动端来说也有点不够。所以，在2012年的时候，OAuth 2.0 的 RFC 6749 正式放出。</p><p>OAuth 2.0依赖于TLS/SSL的链路加密技术（HTTPS），完全放弃了签名的方式，认证服务器再也不返回什么 token secret 的密钥了，所以，OAuth 2.0是完全不同于1.0 的，也是不兼容的。</p><p>两个主要Flow</p><ul><li>Authorization Code Flow </li><li>Client Credential Flow </li></ul><h1 id="2-流程"><a href="#2-流程" class="headerlink" title="2. 流程"></a>2. 流程</h1><h2 id="2-1-名词定义"><a href="#2-1-名词定义" class="headerlink" title="2.1 名词定义"></a>2.1 名词定义</h2><ul><li>Third party application: 第三方应用程序</li><li>HTTP Service: HTTP服务提供商</li><li>Resource Owner: 资源所有者</li><li>User Agent: 用户代理</li><li>Authorization server: 认证服务器</li><li>Resource server: 资源服务器 </li></ul><h2 id="2-2-general-idea"><a href="#2-2-general-idea" class="headerlink" title="2.2 general idea"></a>2.2 general idea</h2><p>在客户端和服务提供商之间设置一个授权层，客户端只能通过授权层来到服务提供商那里获取信息。整个流程变成用户用用户名密码登录客户端，用户给客户端带有特定权限的token。客户端登录授权层以后，服务提供商根据token的权限范围和有效期，向客户端开放用户存储的资料。</p><h2 id="2-3-运行流程"><a href="#2-3-运行流程" class="headerlink" title="2.3 运行流程"></a>2.3 运行流程</h2><p><img src="https://i.loli.net/2020/02/01/Wdat63GcDsKT9mf.png" alt="fig1.png"></p><ul><li>A: 用户打开客户端以后，客户端要求用户给予授权</li><li>B: 用户同意给客户端授权</li><li>C: 客户端使用得到的授权，向认证服务器申请令牌</li><li>D: 认证服务器对客户端进行认证以后，确认无误，同意发放令牌</li><li>E: 客户端使用令牌，向资源服务器申请获取资源</li><li>F: 资源服务器确认令牌无误，同意向客户端开放资源</li></ul><h1 id="3-客户端授权模式"><a href="#3-客户端授权模式" class="headerlink" title="3 客户端授权模式"></a>3 客户端授权模式</h1><p>客户端必须要获得用户的授权才能获得令牌，授权方式有以下几种：</p><ul><li>授权码模式 (authorization code)</li><li>简化模式 (implicit)</li><li>密码模式 (resource owner password credentials)</li><li>客户端模式 (client credentials)</li></ul><h2 id="3-1-授权码模式"><a href="#3-1-授权码模式" class="headerlink" title="3.1 授权码模式"></a>3.1 授权码模式</h2><p>通过客户端的后台服务器，与服务提供商的认证服务器进行交流。</p><p><img src="https://i.loli.net/2020/02/01/BTpKrmRWw9Ju2aE.png" alt="fig2.png"></p><ul><li>A: 用户访问客户端，后者将前者导向认证服务器</li><li>B: 用户选择是否给予客户端授权</li><li>C: 假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。</li><li>D: 客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</li><li>E: 认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）</li></ul><p>A步骤，客户端申请认证的URI，包含以下参数：</p><ul><li>response_type: 表示授权类型 值固定为code</li><li>client_id</li><li>redirect_uri</li><li>scope</li><li>state</li></ul><pre><code>GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz        &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1Host: server.example.com</code></pre><p>C步骤，服务器回应客户端的URI，包含以下参数</p><ul><li>code: 授权码 一般设为10分钟的有效时间 且只能使用一次</li><li>state: 如果客户端的请求中包含这个参数，认证服务器的回应也需要包含同样的</li></ul><pre><code>HTTP/1.1 302 FoundLocation: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA          &amp;state=xyz</code></pre><p>D步骤，客户端向认证服务器申请令牌的HTTP请求当中，包含如下参数：</p><ul><li>grant_type: 使用的授权模式 authrization_code</li><li>code: 上一步获得的授权码</li><li>redirect_uri: 重定向URI，与A中参数需一致</li><li>client_id: 表示客户端ID</li></ul><pre><code>POST /token HTTP/1.1Host: server.example.comAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JWContent-Type: application/x-www-form-urlencodedgrant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</code></pre><p>E步骤: 认证服务器发送的HTTP回复，包含以下参数</p><ul><li>access_token: 表示访问令牌</li><li>token_type: 令牌类型</li><li>expires_in: 表示过期时间</li><li>refresh_token: 表示更新令牌，用来获取下一次的访问令牌</li><li>scope: 权限范围</li></ul><pre><code> HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache {   &quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,   &quot;token_type&quot;:&quot;example&quot;,   &quot;expires_in&quot;:3600,   &quot;refresh_token&quot;:&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;,   &quot;example_parameter&quot;:&quot;example_value&quot; }</code></pre><h2 id="3-2-简化模式"><a href="#3-2-简化模式" class="headerlink" title="3.2 简化模式"></a>3.2 简化模式</h2><p>不通过第三方的应用程序的服务器，直接在浏览器当中向认证服务器申请令牌，跳过授权码这个步骤。所有步骤在浏览器当中完成，令牌对访问者可见，且客户端不需要认证。</p><p><img src="https://i.loli.net/2020/02/01/6zt3Sjg4iMYoQn8.png" alt="fig3.png"></p><p>（A）客户端将用户导向认证服务器。</p><p>（B）用户决定是否给于客户端授权。</p><p>（C）假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌。</p><p>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</p><p>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</p><p>（F）浏览器执行上一步获得的脚本，提取出令牌。</p><p>（G）浏览器将令牌发给客户端。</p><p>A步骤，客户端发出HTTP请求，包含以下参数: </p><ul><li>response_type：表示授权类型，此处的值固定为”token”，必选项。</li><li>client_id：表示客户端的ID，必选项。</li><li>redirect_uri：表示重定向的URI，可选项。</li><li>scope：表示权限范围，可选项。</li><li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值</li></ul><pre><code>GET /authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;state=xyz    &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1Host: server.example.com</code></pre><p>C步骤，认证服务器回应客户端的URL，包含：</p><ul><li>access_token </li><li>token_type</li><li>expires_in</li><li>scope</li><li>state</li></ul><pre><code>HTTP/1.1 302 Found Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA           &amp;state=xyz&amp;token_type=example&amp;expires_in=3600</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API认证与授权(六) - OAuth 1.0</title>
      <link href="/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E5%85%AD-OAuth-1-0/"/>
      <url>/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E5%85%AD-OAuth-1-0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><p>API认证协议，主要是为了做委托授权的。应用场景，比如用户想用第三方服务商来打印照片，访问其云存储，但是不想把用户名密码给这家第三方公司。</p><p>在这个模型当中，client可以代表资源的拥有者去做一些事情，也就是说，OAuth需要不仅能够确认证实资源拥有者得到授权认证，并且需要能够识别出提出请求的客户端的身份。</p><p>为了让客户端去访问资源：</p><ol><li>得到资源拥有者的许可 - 终端用户授权给客户端去访问服务器资源的流程 </li><li>去服务器访问资源 - 利用两个证书（用于识别客户端生成的请求和用于识别请求所代表的资源拥有者）来生成已认证的Http请求。</li></ol><p>三个角色</p><ul><li>User  照片所有者 - 用户</li><li>Consumer 第三方照片打印服务</li><li>Service Provider 照片存储服务</li></ul><p>协议的三个阶段</p><ul><li>Consumer 获取Request Token</li><li>Service Provider认证用户并且授权Consumer</li><li>Consumer获取Access Token调用API访问用户的照片</li></ul><p>整个授权流程： </p><ul><li>Consumer（第三方照片打印服务）需要先上Service Provider获得开发的 Consumer Key 和 Consumer Secret</li><li>当 User 访问 Consumer 时，Consumer 向 Service Provider 发起请求请求Request Token （需要对HTTP请求签名）</li><li>Service Provider 验明 Consumer 是注册过的第三方服务商后，返回 Request Token（oauth_token）和 Request Token Secret （oauth_token_secret）</li><li>Consumer 收到 Request Token 后，使用HTTP GET 请求把 User 切到 Service Provider 的认证页上（其中带上Request Token），让用户输入他的用户和口令。</li><li>Service Provider 认证 User 成功后，跳回 Consumer，并返回 Request Token （oauth_token）和 Verification Code（oauth_verifier）</li><li>接下来就是签名请求，用Request Token 和 Verification Code 换取 Access Token （oauth_token）和 Access Token Secret (oauth_token_secret)</li><li>最后使用Access Token访问用户授权访问的资源</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://blog.csdn.net/turkeyzhou/article/details/7628399" target="_blank" rel="noopener">https://blog.csdn.net/turkeyzhou/article/details/7628399</a></li><li><a href="https://oauth.net/1/" target="_blank" rel="noopener">https://oauth.net/1/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API认证与授权(五) - JWT</title>
      <link href="/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%BA%94-JWT/"/>
      <url>/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%BA%94-JWT/</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么选择JWT？"><a href="#1-为什么选择JWT？" class="headerlink" title="1. 为什么选择JWT？"></a>1. 为什么选择JWT？</h1><p>JWT也是一种Message Authentication Code的方法，选择使用JWT的好处是它可以将认证的逻辑交给第三方的服务器。而认证服务器和应用服务器之间也不需要有任何的直接连接。这样子做的好处就是应用服务器可以变成完全无状态的服务器了，不需要去存储token。</p><h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a>2. 步骤</h1><ol><li>用户使用用户名和口令到认证服务器请求认证</li><li>认证服务器验证以后，以服务器端生成JWT Token</li></ol><ul><li>认证服务器生成一个Secret Key</li><li>对JWT Header和JWT Payload分别求Base64</li><li>用秘钥对JWT签名</li></ul><ol start="3"><li>将base64(header).base64(payload).signature作为JWT token返回客户端</li><li>客户端使用JWT Token向应用服务器发送相关的请求。这个JWT Token就像一个临时用户权证一样。</li></ol><p>当应用服务器收到请求之后：</p><ol><li>检查JWT Token, 确认签名正确</li><li>因为只有认证服务器有这个用户的Secret Key，所以应用服务器要将其传给认证服务器</li><li>认证服务器通过JWT Payload解出用户的抽象ID，然后通过抽象ID查到登录时生成的Secret Key，然后再检查签名</li><li>认证服务器检查通过后，应用服务就可以认为这是合法请求了</li></ol><p>我们可以看以，上面的这个过程，是在认证服务器上为用户动态生成 Secret Key的，应用服务在验签的时候，需要到认证服务器上去签，这个过程增加了一些网络调用，所以，JWT除了支持HMAC-SHA256的算法外，还支持RSA的非对称加密的算法。</p><p>使用RSA非对称算法，在认证服务器这边放一个私钥，在应用服务器那边放一个公钥，认证服务器使用私钥加密，应用服务器使用公钥解密，这样一来，就不需要应用服务器向认证服务器请求了，但是，RSA是一个很慢的算法，所以，虽然你省了网络调用，但是却费了CPU，尤其是Header和Payload比较长的时候。所以，一种比较好的玩法是，如果我们把header 和 payload简单地做SHA256，这会很快，然后，我们用RSA加密这个SHA256出来的字符串，这样一来，RSA算法就比较快了，而我们也做到了使用RSA签名的目的。</p><h1 id="3-技术细节"><a href="#3-技术细节" class="headerlink" title="3. 技术细节"></a>3. 技术细节</h1><h2 id="3-1-构成"><a href="#3-1-构成" class="headerlink" title="3.1 构成"></a>3.1 构成</h2><p>JWT有三部分组成：</p><ul><li>header</li><li>payload</li><li>signature</li></ul><h3 id="3-1-1-payload"><a href="#3-1-1-payload" class="headerlink" title="3.1.1 payload"></a>3.1.1 payload</h3><p>payload里可以包含任何信息的，没有给任何限制。值得注意的是token并没有进行编码，所以当token被拦截的时候，里面的信息是可以被看到的</p><h3 id="3-1-2-header"><a href="#3-1-2-header" class="headerlink" title="3.1.2 header"></a>3.1.2 header</h3><p>payload的内容在接收方是通过检查签名来进行验证的，而签名会有很多种。header里面就携带有不同签名的元数据(metadata).</p><h3 id="3-1-3-签名"><a href="#3-1-3-签名" class="headerlink" title="3.1.3 签名"></a>3.1.3 签名</h3><p>这一部分是一个Message Authentication Code, JWT的签名只有在获取了payload, header,还有被给予秘钥以后才可以生成。是三者的组合。</p><p>签名有很多种类，比如HS256，以及RS256. </p><h4 id="3-1-3-1-HS256"><a href="#3-1-3-1-HS256" class="headerlink" title="3.1.3.1 HS256"></a>3.1.3.1 HS256</h4><p>使用HS256， 我们会用到Header， payload以及密码， 然后我们将其组合起来做哈希。想要生成同样的哈希值，你必须保证三个信息你都有才可以的(header, payload, password)，否则不可能得到，而且也无法通过碰撞逐渐趋近结果，因为hs256可以保证哪怕仅仅改变了一个数字，最终出来的结果也会有将近一半是不一样的。</p><h4 id="3-1-3-1-RS256"><a href="#3-1-3-1-RS256" class="headerlink" title="3.1.3.1 RS256"></a>3.1.3.1 RS256</h4><p>使用RS256比使用HS256效率高很多，这是因为：</p><ol><li>HS256可以被暴力破解的，如果输入的秘钥很简单</li><li>其需要server和client端有提前沟通好的一样的密码。这就意味着如果我们要换密码，我们就要提前传输到每个网络节点当中供其使用。</li></ol><p>而使用RS256，我们仍要生成一个MAC码，目标仍然是创建一个数字签名来证明JWT是有效的。在这种签名当中，我们将会将创建token和验证token的能力分开。</p><p>实现这种目的的方式就是创建两个key而不是一个。</p><ul><li>一个私钥，只被认证服务器拥有，只被用来生成JWT</li><li>私钥只能用来生成，不能用来证明</li><li>公钥，用在应用服务器端，来认证JWT的</li><li>公钥不需要当成隐私。可以随意让人使用的</li></ul><p>使用RSA算法，RSA使用RSA keys。RSA算法可以用一个key来加密，另一个key来解密。但是RSA算法有个问题就是运行的比较慢。</p><p>这里采用的方法就是先把header和payload拿过来一起做一个hash，然后我们用私钥来对其进行加密，通过这种方式我们就能够得到RS256 的signature。</p><p>到了接收端，做的事情就是：</p><ol><li>拿到header和payload，然后用SHA-256做哈希，拿到真实数据</li><li>用公钥进行解码，并且拿到签名的signature</li><li>然后接收端比较两个哈希值，看是否相同</li></ol><h2 id="3-2-为什么使用JWT？-为了解决什么问题而创建？"><a href="#3-2-为什么使用JWT？-为了解决什么问题而创建？" class="headerlink" title="3.2 为什么使用JWT？ 为了解决什么问题而创建？"></a>3.2 为什么使用JWT？ 为了解决什么问题而创建？</h2><p>JWT使得认证服务器和应用服务器可以成为两个不同的服务器。这样的好处是使得应用服务器可以运行的更快，认证的功能都可以集中到认证服务器当中，然后再整个应用里面去复用。</p><h2 id="3-3-JWT-实例"><a href="#3-3-JWT-实例" class="headerlink" title="3.3 JWT 实例"></a>3.3 JWT 实例</h2><pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</code></pre><p>分成了三个部分，第一部分是JWT Header:</p><pre><code>JWT Header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></pre><p>第二部分是JWT Payload:</p><pre><code>JWT Payload: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code></pre><p>第三部分是JWT Signature:</p><pre><code>JWT Signature: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</code></pre><p>这里我们做了Base64编码，原因是各个电脑对于String有不同的处理方式，比如UTF-8, ISO 8859-1等等。使用Base64编码就可以解决这个问题了。</p><p>Base64和Base64url基本上是一样的，Base64url比起Base64，对在url中的展示做了一些优化。</p><h2 id="3-4-JWT的用户Session管理"><a href="#3-4-JWT的用户Session管理" class="headerlink" title="3.4 JWT的用户Session管理"></a>3.4 JWT的用户Session管理</h2><p>一般常用的payload有</p><ul><li><p>user identification </p></li><li><p>session expiration</p><p>  {</p><pre><code>  // 给出JWT的实体- 这里是我们的认证服务器  &quot;iss&quot;: &quot;Identifier of our Authentication Server&quot;,  // JWT的创建时间的时间戳  &quot;iat&quot;: 1504699136,   // 用户的id  &quot;sub&quot;: &quot;github|353454354354353453&quot;,  // token expiration  &quot;exp&quot;: 1504699256</code></pre><p>  }</p></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://blog.angular-university.io/angular-jwt/" target="_blank" rel="noopener">https://blog.angular-university.io/angular-jwt/</a></li><li><a href="https://coolshell.cn/articles/19395.html" target="_blank" rel="noopener">https://coolshell.cn/articles/19395.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API认证与授权(四) - App Secret Key, HMAC</title>
      <link href="/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E5%9B%9B-App-Secret-Key-HMAC/"/>
      <url>/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E5%9B%9B-App-Secret-Key-HMAC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HMAC"><a href="#1-HMAC" class="headerlink" title="1. HMAC"></a>1. HMAC</h1><p>HMAC,指Hash based message authentication code。用哈希给消息来进行签名，因为我们怕消息在传递的过程中被修改，所以我们对消息进行一个MAC算法，得到一个摘要字串；接收方在收到了信息以后，会进行同样的运算，然后来比较这个MAC字符串。如果一致，则表示没有被修改过。</p><p><img src="https://i.loli.net/2020/02/01/8ewgJ24qbQYjT7I.png" alt="fig1.png"></p><h1 id="2-App-Id-amp-App-Secret-Key"><a href="#2-App-Id-amp-App-Secret-Key" class="headerlink" title="2. App Id &amp; App Secret Key"></a>2. App Id &amp; App Secret Key</h1><p>App ID和验证无关，只是用来区分，是谁来调用API的，就像我们每个人的身份证一样，只是用来标注不同的人，不是用来做身份认证的。与前面的不同之处是，这里，我们需要用App ID 来映射一个用于加密的密钥，这样一来，我们就可以在服务器端进行相关的管理，我们可以生成若干个密钥对（AppID, AppSecret），并可以有更细粒度的操作权限管理。</p><h2 id="2-1-S3-API-请求范例"><a href="#2-1-S3-API-请求范例" class="headerlink" title="2.1 S3 API 请求范例"></a>2.1 S3 API 请求范例</h2><ol><li>把HTTP的请求（方法、URI、查询字串、头、签名头，body）打个包叫 CanonicalRequest，作个SHA-256的签名，然后再做一个base16的编码</li><li>把上面的这个签名和签名算法 AWS4-HMAC-SHA256、时间戳、Scop，再打一个包，叫 StringToSign。</li><li>准备签名，用 AWSSecretAccessKey来对日期签一个 DataKey，再用 DataKey 对要操作的Region签一个 DataRegionKey ，再对相关的服务签一个DataRegionServiceKey ，最后得到 SigningKey.</li><li>用第三步的 SigningKey来对第二步的 StringToSign 签名。</li></ol><p><img src="https://i.loli.net/2020/02/01/5I6qCO1NBF9aQm3.png" alt="fig2.png"></p><p>这种认证的方式好处在于，AppID和AppSecretKey，是由服务器的系统开出的，所以，是可以被管理的，AWS的IAM就是相关的管理，其管理了用户、权限和其对应的AppID和AppSecretKey。但是不好的地方在于，这个东西没有标准 ，所以，各家的实现很不一致。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://en.wikipedia.org/wiki/HMAC" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/HMAC</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API认证与授权(三) - Digest Access</title>
      <link href="/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%B8%89-Digest-Access/"/>
      <url>/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%B8%89-Digest-Access/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><p>HTTP 摘要认证.这种方式可以在发送各种敏感信息之前先确认用户的身份。其会先给用户名密码加一个哈希函数；而HTTP basic方式与之相对的是直接使用了简单可逆的Base64编码技术而不是任何加密技术，使得整个过程非常不安全，除非是在HTTPS的条件下。 (Transport Layer Security)</p><p>划重点: </p><ul><li>MD5 加密哈希</li><li>使用nonce(随机数) 避免重复攻击</li></ul><h1 id="2-流程"><a href="#2-流程" class="headerlink" title="2. 流程"></a>2. 流程</h1><ul><li>请求方将用户名口令和域做一个MD5哈希<code>MD5(username:realm:password)</code> 然后发给服务器</li><li>问题是用户名口令不怎么变的话那这个字符串也会不改变</li><li>因此在认证过程当中加入了nonce和qop</li></ul><h2 id="2-1-Client发起请求-无认证"><a href="#2-1-Client发起请求-无认证" class="headerlink" title="2.1 Client发起请求(无认证)"></a>2.1 Client发起请求(无认证)</h2><p>发生在Client直接进入一个需要认证的网页，此时并没有携带用户名和密码的信息</p><pre><code>GET /dir/index.html HTTP/1.0Host: localhost</code></pre><h2 id="2-2-Server返回错误信息401"><a href="#2-2-Server返回错误信息401" class="headerlink" title="2.2 Server返回错误信息401"></a>2.2 Server返回错误信息401</h2><p>401代表的是未认证，服务器会返回401信息，并且在Response Header里携带<code>WWW-Authenticate</code>域,含有认证的realm的信息，以及一个随机生成的nonce</p><pre><code>HTTP/1.0 401 UnauthorizedServer: HTTPd/0.9Date: Sun, 10 Apr 2014 20:26:47 GMTWWW-Authenticate: Digest realm=&quot;testrealm@host.com&quot;,                        qop=&quot;auth,auth-int&quot;,                        nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;,                        opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;Content-Type: text/htmlContent-Length: 153&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;title&gt;Error&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;401 Unauthorized.&lt;/h1&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="2-3-Client输入信息，发送新请求"><a href="#2-3-Client输入信息，发送新请求" class="headerlink" title="2.3 Client输入信息，发送新请求"></a>2.3 Client输入信息，发送新请求</h2><pre><code>GET /dir/index.html HTTP/1.0Host: localhostAuthorization: Digest username=&quot;Mufasa&quot;,                     realm=&quot;testrealm@host.com&quot;,                     nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;,                     uri=&quot;/dir/index.html&quot;,                     qop=auth,                     nc=00000001,                     cnonce=&quot;0a4f113b&quot;,                     response=&quot;6629fae49393a05397450978507c4ef1&quot;,                     opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</code></pre><p>这里的计算方式如下:</p><pre><code>HA1 = MD5(username:realm:password)HA2 = MD5(method:digestURI)// 这一步可以有更多的值一起做hash，比如 server nonce, request counter, client nonce, qop (quality of protection code)response = MD5(HA1:nonce:HA2)</code></pre><p>值得注意的是nonce需要隔一段时间就失效，request counter要累加，以此尽量使其更加安全</p><h2 id="2-4-Server返回认证成功的信息"><a href="#2-4-Server返回认证成功的信息" class="headerlink" title="2.4 Server返回认证成功的信息"></a>2.4 Server返回认证成功的信息</h2><pre><code>HTTP/1.0 200 OKServer: HTTPd/0.9Date: Sun, 10 Apr 2005 20:27:03 GMTContent-Type: text/htmlContent-Length: 7984</code></pre><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>摘要认证这个方式会比之前的方式要好一些，因为没有在网上传递用户的密码，而只是把密码的MD5传送过去，相对会比较安全，而且，其并不需要是否TLS/SSL的安全链接。但是，别看这个算法这么复杂，最后你可以发现，整个过程其实关键是用户的password，这个password如果不够得杂，其实是可以被暴力破解的，而且，整个过程是非常容易受到中间人攻击——比如一个中间人告诉客户端需要一个。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://en.wikipedia.org/wiki/Digest_access_authentication" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Digest_access_authentication</a></li><li><a href="https://tools.ietf.org/html/rfc2617" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2617</a></li><li><a href="https://tools.ietf.org/html/rfc2069" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2069</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API认证与授权(二) - HTTP Basic</title>
      <link href="/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%BA%8C-HTTP-Basic/"/>
      <url>/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%BA%8C-HTTP-Basic/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HTTP-Basic-Intro"><a href="#1-HTTP-Basic-Intro" class="headerlink" title="1. HTTP Basic Intro"></a>1. HTTP Basic Intro</h1><p>传统的API认证技术，使用username和password来进行登录。</p><p>整个流程是：</p><ul><li>用户发送一个不带认证信息的请求</li><li>服务器返回401(unauthorized)状态，然后会在header里面包含一个<code>WWW-authenticate</code>域</li><li>用户如果想认证自己，就需要发一个携带有认证请求header的请求，其中包含了credentials的信息。</li><li>通常会让用户输入密码，然后将这些信息放到Authorization的header当中去</li></ul><p><img src="https://i.loli.net/2020/02/01/NE6ihK9GQpjrw7P.png" alt="fig1.png"></p><p>在上述的整个流程当中，因为相当于明文传输了，所以这整个过程必须发生在HTTPS(TLS)连接当中。</p><h1 id="2-技术原理"><a href="#2-技术原理" class="headerlink" title="2.技术原理"></a>2.技术原理</h1><ul><li>进行Base64编码<ul><li>Base64编码是为了处理特殊字符，方便在不同平台用不同方式进行传递的，其编码方式是可逆的，即可以很顺畅地被破解掉。 </li></ul></li><li>将编码后的字段放到HTTP头的Authorization字段中，发到服务端</li><li>服务端进行认证，成功则返回200；失败则返回401报错</li></ul><p>使用Base64是为了消除特殊字符带来的影响，这种传递方式最大的问题是将用户名和口令放到了网络上进行传递，因此一般需要配合TLS/ SSL的安全加密来使用。这种同时将用户名和密码进行明文传输的协议并不是很好，尽管有HTTPS作为安全保护，但还是很有风险的。 </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://en.wikipedia.org/wiki/Basic_access_authentication" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Basic_access_authentication</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API认证与授权(一) - general</title>
      <link href="/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%B8%80-general/"/>
      <url>/HTTP-API%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83-%E4%B8%80-general/</url>
      
        <content type="html"><![CDATA[<p>HTTP本身是无状态的，但我们常常需要检查用户的登录状态。一般来说，用户登录成功之后，服务器会发一个登录凭证(Token)。在计算机的世界当中，这个Token的相关数据会放到两个地方，一个在用户端，以Cookie的方式，另一个是放在服务器端，以Session的方式。</p><p>现实世界中验证登录会更为复杂一些，因为除了用户访问，还有用户委托的第三方的应用，还有企业之间的调用。</p><p>很多很有意思的问题： </p><ul><li>认证与授权各自指的是什么？ </li><li>在我们没有TLS/ SSL的时候我们是如何实现登录验证，并且对在网络中传递的信息进行加密的呢？ </li><li>HTTPS给整个认证与授权的过程带来了怎样的改变？ </li><li>我们常看到的通过微信/ google/ facebook/ amazon登录是如何实现的？<br>这一系列的博客会依次逐个解决上面描述的问题，inspired by <a href="https://coolshell.cn/articles/19395.html" target="_blank" rel="noopener">CoolShell-HTTP API 认证授权术</a>. 是对这篇博客的针对自己现有认知水平（啥都不懂）的有效扩充，希望通过这一系列的整理彻底搞懂整个API认证与授权的机制，敏感信息在client和server之间的传递。</li></ul><p>本系列的博客会大致上分为6部分，分别为：</p><ul><li>HTTP Basic </li><li>Digest Access</li><li>App Secret Key + HMAC</li><li>JWT</li><li>OAuth 1.0</li><li>OAuth 2.0 </li></ul><p>希望能对大家有所裨益。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://coolshell.cn/articles/19395.html" target="_blank" rel="noopener">https://coolshell.cn/articles/19395.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络知识必知必会</title>
      <link href="/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
      <url>/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>这里希望将大部分网络知识做个总结，redirect到各篇博文当中去。</p><p>首先当我们谈及整个网络的时候，我们讨论的到底是什么呢？ 我想大家想要了解网络知识往往开始于遇到Server, Client端的交互问题，遇到Tomcat, Socket编程这类东西。关于如何了解网络学习网络知识，势必需要先有个宏观的view，而后再分到各个部分去了解更多的细节。整个体系应该就是这样慢慢建立起来的，这里做个索引，带一些我认为最最关键的知识点们。</p><h1 id="1-网络层级模型"><a href="#1-网络层级模型" class="headerlink" title="1. 网络层级模型"></a>1. 网络层级模型</h1><ul><li><a href="https://llchen60.com/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%BA%8C-%E7%89%A9%E7%90%86%E5%B1%82/" target="_blank" rel="noopener">物理层</a><ul><li>LAN, WAN </li></ul></li><li><a href="https://llchen60.com/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%B8%89-%E9%93%BE%E8%B7%AF%E5%B1%82/" target="_blank" rel="noopener">链路层</a><ul><li>MAC - Medium Access Control  </li><li>ARP协议 - 已知目标IP地址，寻求MAC地址 </li><li>交换机 - 带有记忆功能的集线器 - 记录MAC地址<ul><li>转发表 - 过期时间 </li></ul></li></ul></li><li><a href="https://llchen60.com/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E5%9B%9B-%E7%BD%91%E7%BB%9C%E5%B1%82/" target="_blank" rel="noopener">网络层</a><ul><li>IP协议<ul><li>CIDR无类型域间选路   <ul><li>网络号 + 主机号 </li></ul></li><li>DHCP动态主机配置协议</li></ul></li><li>ICMP协议 Inernet Control Message Protocol<ul><li>互联网控制报文协议</li></ul></li><li>跨网关访问 </li></ul></li><li><a href="https://llchen60.com/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E4%BA%94-%E4%BC%A0%E8%BE%93%E5%B1%82/" target="_blank" rel="noopener">传输层</a><ul><li>UDP协议</li><li>TCP协议</li><li>套接字Socket</li></ul></li><li><a href="https://llchen60.com/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-%E5%85%AD-%E5%BA%94%E7%94%A8%E5%B1%82/" target="_blank" rel="noopener">应用层</a><ul><li>HTTP协议 </li><li>HTTPS</li><li>QUIC</li></ul></li></ul><h1 id="2-网络相关的应用"><a href="#2-网络相关的应用" class="headerlink" title="2. 网络相关的应用"></a>2. 网络相关的应用</h1><ul><li>流媒体协议</li><li>数据中心</li><li>VPN</li><li>移动网络</li><li>云</li><li>RPC SOAP RESTFul</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><p>Composed of simple characters, or a combination of simple and special characters. </p><h1 id="2-Using-simple-patterns"><a href="#2-Using-simple-patterns" class="headerlink" title="2. Using simple patterns"></a>2. Using simple patterns</h1><p>constructed of characters for which you want to find a <strong><em>direct match</em></strong>. For example, the pattern /abc/ matches character combinations in strings only when exactly the characters ‘abc’ occur together and in that order. Such a match would succeed in the strings “Hi, do you know your abc’s?” and “The latest airplane designs evolved from slabcraft.” In both cases the match is with the substring ‘abc’. There is no match in the string ‘Grab crab’ because while it contains the substring ‘ab c’, it does not contain the exact substring ‘abc’.</p><h1 id="3-Using-special-characters"><a href="#3-Using-special-characters" class="headerlink" title="3. Using special characters"></a>3. Using special characters</h1><p>Whne your search need more than a direct match. Now detailing special characters in regular expressions: </p><h2 id="3-1-–-gt-Indicate-next-character-is-special"><a href="#3-1-–-gt-Indicate-next-character-is-special" class="headerlink" title="3.1 \  –&gt; Indicate next character is special"></a>3.1 \  –&gt; Indicate next character is special</h2><ol><li>A backslash that precedes a non-special character indicates that <strong>the next character is special</strong> and <strong>is not to be interpreted literally</strong>.</li></ol><h2 id="3-2-–-gt-Matches-beginning-of-input"><a href="#3-2-–-gt-Matches-beginning-of-input" class="headerlink" title="3.2 ^  –&gt; Matches beginning of input"></a>3.2 ^  –&gt; Matches beginning of input</h2><p>For example, <code>/^A/</code> does not match the ‘A’ in “an A”, but does match the ‘A’ in “An E”.</p><h2 id="3-3-–-gt-matches-end-of-input"><a href="#3-3-–-gt-matches-end-of-input" class="headerlink" title="3.3 $ –&gt; matches end of input"></a>3.3 $ –&gt; matches end of input</h2><p>For example, <code>/t$/</code> does not match the ‘t’ in “eater”, but does match it in “eat”.</p><h2 id="3-4-–-gt-matches-the-preceding-expression-0-or-more-times-Equal-to-0"><a href="#3-4-–-gt-matches-the-preceding-expression-0-or-more-times-Equal-to-0" class="headerlink" title="3.4 * –&gt; matches the preceding expression 0 or more times. Equal to {0,}"></a>3.4 * –&gt; matches the preceding expression 0 or more times. Equal to {0,}</h2><p>For example, /bo*/ matches ‘boooo’ in “A ghost booooed” and ‘b’ in “A bird warbled” but nothing in “A goat grunted”.</p><h2 id="3-5-–-gt-matches-the-preceding-expression-1-or-more-times-Equals-t0-1"><a href="#3-5-–-gt-matches-the-preceding-expression-1-or-more-times-Equals-t0-1" class="headerlink" title="3.5 + –&gt; matches the preceding expression 1 or more times. Equals t0 {1,}"></a>3.5 + –&gt; matches the preceding expression 1 or more times. Equals t0 {1,}</h2><p>For example, <code>/a+/</code> matches the ‘a’ in “candy” and all the a’s in “caaaaaaandy”, but nothing in “cndy”.</p><h2 id="3-6-–-gt-matches-the-preceding-expression-0-or-1-time-Equivalent-to-0-1"><a href="#3-6-–-gt-matches-the-preceding-expression-0-or-1-time-Equivalent-to-0-1" class="headerlink" title="3.6 ? –&gt; matches the preceding expression 0 or 1 time. Equivalent to {0,1}"></a>3.6 ? –&gt; matches the preceding expression 0 or 1 time. Equivalent to {0,1}</h2><p>For example, /e?le?/ matches the ‘el’ in “angel” and the ‘le’ in “angle” and also the ‘l’ in “oslo”.</p><p>If used immediately after any of the quantifiers <em>, +, ?, or {}, makes the quantifier *</em>non-greedy** (matching the fewest possible characters), as opposed to the default, which is greedy (matching as many characters as possible). For example, applying /\d+/ to “123abc” matches “123”. But applying /\d+?/ to that same string matches only the “1”.</p><h2 id="3-7-–-gt-matches-any-single-character-except-the-newline-character"><a href="#3-7-–-gt-matches-any-single-character-except-the-newline-character" class="headerlink" title="3.7 . –&gt; matches any single character except the newline character"></a>3.7 . –&gt; matches any single character except the newline character</h2><p>For example, /.n/ matches ‘an’ and ‘on’ in “nay, an apple is on the tree”, but not ‘nay’.</p><h2 id="3-8-x-–-gt-Matches-‘x’-and-remembers-the-match-as-the-following-example-shows"><a href="#3-8-x-–-gt-Matches-‘x’-and-remembers-the-match-as-the-following-example-shows" class="headerlink" title="3.8 (x) –&gt; Matches ‘x’ and remembers the match, as the following example shows."></a>3.8 (x) –&gt; Matches ‘x’ and remembers the match, as the following example shows.</h2><p>The parentheses are called capturing parentheses. </p><p>The ‘(foo)’ and ‘(bar)’ in the pattern /(foo) (bar) \1 \2/ match and remember the first two words in the string “foo bar foo bar”. The \1 and \2  denote the first and second parenthesized substring matches - foo and bar, matching the string’s last two words. Note that \1, \2, …, \n are used in the matching part of the regex, for more information, see \n below. In the replacement part of a regex the syntax $1, $2, …, $n must be used, e.g.: ‘bar foo’.replace(/(…) (…)/, ‘$2 $1’).  $&amp; means the whole matched string.</p><h2 id="3-9-x-–-gt-Matches-‘x’-but-does-not-remember-the-match"><a href="#3-9-x-–-gt-Matches-‘x’-but-does-not-remember-the-match" class="headerlink" title="!!! 3.9 (?:x) –&gt; Matches ‘x’ but does not remember the match"></a>!!! 3.9 (?:x) –&gt; Matches ‘x’ but does not remember the match</h2><p>The parentheses are called non-capturing parentheses, and let you define subexpressions for regular expression operators to work with. </p><p>Matches ‘x’ but does not remember the match. The parentheses are called non-capturing parentheses, and let you define subexpressions for regular expression operators to work with. Consider the sample expression /(?:foo){1,2}/. If the expression was /foo{1,2}/, the {1,2} characters would apply only to the last ‘o’ in ‘foo’. With the non-capturing parentheses, the {1,2} applies to the entire word ‘foo’.</p><h2 id="3-10-x-y-–-gt-matches-‘x’-only-id-‘x’-is-followed-by-‘y’"><a href="#3-10-x-y-–-gt-matches-‘x’-only-id-‘x’-is-followed-by-‘y’" class="headerlink" title="3.10 x(?=y) –&gt; matches ‘x’ only id ‘x’ is followed by ‘y’"></a>3.10 x(?=y) –&gt; matches ‘x’ only id ‘x’ is followed by ‘y’</h2><p>For example, /Jack(?=Sprat)/ matches ‘Jack’ only if it is followed by ‘Sprat’. /Jack(?=Sprat|Frost)/ matches ‘Jack’ only if it is followed by ‘Sprat’ or ‘Frost’. However, neither ‘Sprat’ nor ‘Frost’ is part of the match results.</p><h2 id="3-11-x-y-–-gt-matches-‘x’-only-if-‘x’-is-not-followed-by-‘y’"><a href="#3-11-x-y-–-gt-matches-‘x’-only-if-‘x’-is-not-followed-by-‘y’" class="headerlink" title="3.11  x(?!y) –&gt; matches ‘x’ only if ‘x’ is not followed by ‘y’"></a>3.11  x(?!y) –&gt; matches ‘x’ only if ‘x’ is not followed by ‘y’</h2><p>For example, <code>/\d+(?!\.)/</code> matches a number only if it is not followed by a decimal point. The regular expression <code>/\d+(?!\.)/.exec(&quot;3.141&quot;)</code> matches ‘141’ but not ‘3.141’.</p><h2 id="3-12-x-y-–-gt-matches-x-or-y-if-there-is-no-match-for-‘x’"><a href="#3-12-x-y-–-gt-matches-x-or-y-if-there-is-no-match-for-‘x’" class="headerlink" title="3.12 x|y –&gt; matches x or y(if there is no match for ‘x’)"></a>3.12 x|y –&gt; matches x or y(if there is no match for ‘x’)</h2><p>For example, /green|red/ matches ‘green’ in “green apple” and ‘red’ in “red apple.” The order of ‘x’ and ‘y’ matters. For example a<em>|b matches the empty string in “b”, but b|a</em> matches “b” in the same string.</p><h2 id="3-13-n-–-gt-matches-exactly-n-occurences-of-the-preceding-expression"><a href="#3-13-n-–-gt-matches-exactly-n-occurences-of-the-preceding-expression" class="headerlink" title="3.13 {n} –&gt; matches exactly n occurences of the preceding expression."></a>3.13 {n} –&gt; matches exactly n occurences of the preceding expression.</h2><p>For example, /a{2}/ doesn’t match the ‘a’ in “candy,” but it does match all of the a’s in “caandy,” and the first two a’s in “caaandy.”</p><h2 id="3-14-n-–-gt-matches-at-least-n-occurrences-of-the-preceding-expression"><a href="#3-14-n-–-gt-matches-at-least-n-occurrences-of-the-preceding-expression" class="headerlink" title="3.14 {n,} –&gt; matches at least n occurrences of the preceding expression."></a>3.14 {n,} –&gt; matches at least n occurrences of the preceding expression.</h2><p>For example, /a{2,}/ will match “aa”, “aaaa” and “aaaaa” but not “a”</p><h2 id="3-15-n-m-–-gt-matches-at-least-n-and-at-more-m-occurrences-of-the-preceding-expression"><a href="#3-15-n-m-–-gt-matches-at-least-n-and-at-more-m-occurrences-of-the-preceding-expression" class="headerlink" title="3.15 {n,m} –&gt; matches at least n and at more m occurrences of the preceding expression."></a>3.15 {n,m} –&gt; matches at least n and at more m occurrences of the preceding expression.</h2><p>For example, /a{1,3}/ matches nothing in “cndy”, the ‘a’ in “candy,” the first two a’s in “caandy,” and the first three a’s in “caaaaaaandy”. Notice that when matching “caaaaaaandy”, the match is “aaa”, even though the original string had more a’s in it.</p><h2 id="3-16-xyz-–-gt-matches-any-one-of-the-characters-in-the-brackets"><a href="#3-16-xyz-–-gt-matches-any-one-of-the-characters-in-the-brackets" class="headerlink" title="3.16 [xyz] –&gt; matches any one of the characters in the brackets"></a>3.16 [xyz] –&gt; matches any one of the characters in the brackets</h2><p>The pattern [a-d], which performs the same match as [abcd], matches the ‘b’ in “brisket” and the ‘c’ in “city”. The patterns /[a-z.]+/ and /[\w.]+/ match the entire string “test.i.ng”.</p><h2 id="3-17-xyz-–-gt-matches-anything-that-is-not-enclosed-in-the-brackets"><a href="#3-17-xyz-–-gt-matches-anything-that-is-not-enclosed-in-the-brackets" class="headerlink" title="3.17 [^xyz] –&gt; matches anything that is not enclosed in the brackets"></a>3.17 [^xyz] –&gt; matches anything that is not enclosed in the brackets</h2><p>For example, [^abc] is the same as [^a-c]. They initially match ‘r’ in “brisket” and ‘h’ in “chop.”</p><h2 id="3-18-b-–-gt-matches-a-backspace"><a href="#3-18-b-–-gt-matches-a-backspace" class="headerlink" title="3.18 [\b] –&gt; matches a backspace"></a>3.18 [\b] –&gt; matches a backspace</h2><p>You need to use square brackets if you want to match a literal backspace character. (Not to be confused with \b.)</p><h2 id="3-19-b-–-gt-matches-a-word-boundary"><a href="#3-19-b-–-gt-matches-a-word-boundary" class="headerlink" title="3.19 \b –&gt; matches a word boundary"></a>3.19 \b –&gt; matches a word boundary</h2><p><strong><em>A word boundary matches the position between a word character followed by a non-word character</em></strong></p><p>Examples using the input string “moon”:<br>/\bm/ matches, because the <code>\b</code> is at the beginning of the string;<br>the ‘\b’ in /oo\b/ does not match, because the ‘\b’ is both preceded and followed by word characters;<br>the ‘\b’ in /oon\b/ matches, because it appears at the end of the string;<br>the ‘\b\ in /\w\b\w/ will never match anything, because it is both preceded and followed by a word character..</p><h2 id="3-20-B-–-gt-matches-a-non-word-boundary"><a href="#3-20-B-–-gt-matches-a-non-word-boundary" class="headerlink" title="3.20 \B –&gt; matches a non-word boundary"></a>3.20 \B –&gt; matches a non-word boundary</h2><p>matches the following case: </p><ul><li>Before the first character of the string.</li><li>After the last character of the string,.</li><li>Between two word characters</li><li>Between two non-word characters</li><li>The empty string</li></ul><h2 id="3-21-d-–-gt-matches-a-digit-chracter"><a href="#3-21-d-–-gt-matches-a-digit-chracter" class="headerlink" title="3.21 \d –&gt; matches a digit chracter"></a>3.21 \d –&gt; matches a digit chracter</h2><p>Equal to [0-9]</p><p>For example, /\d/ or /[0-9]/ matches ‘2’ in “B2 is the suite number.”</p><h2 id="3-22-D-–-gt-matches-a-non-digit-character"><a href="#3-22-D-–-gt-matches-a-non-digit-character" class="headerlink" title="3.22 \D –&gt; matches a non digit character"></a>3.22 \D –&gt; matches a non digit character</h2><p>Equivalent to [^0-9].</p><p>For example, /\D/ or /[^0-9]/ matches ‘B’ in “B2 is the suite number.”</p><h2 id="3-23-s-–-gt-matches-a-white-space-chracter"><a href="#3-23-s-–-gt-matches-a-white-space-chracter" class="headerlink" title="3.23 \s –&gt; matches a white space chracter"></a>3.23 \s –&gt; matches a white space chracter</h2><p>can be space, tab, form feed, line feed </p><h2 id="3-24-S-–-gt-matches-a-character-other-than-white-space"><a href="#3-24-S-–-gt-matches-a-character-other-than-white-space" class="headerlink" title="3.24 \S –&gt; matches a character other than white space"></a>3.24 \S –&gt; matches a character other than white space</h2><h2 id="3-25-w-–-gt-matches-any-apphanumeric-character-including-the-underscore"><a href="#3-25-w-–-gt-matches-any-apphanumeric-character-including-the-underscore" class="headerlink" title="3.25 \w –&gt; matches any apphanumeric character including the underscore"></a>3.25 \w –&gt; matches any apphanumeric character including the underscore</h2><p>Equivalent to <code>[A-Za-z0-9_]</code></p><p>For example, /\w/ matches ‘a’ in “apple,” ‘5’ in “$5.28,” and ‘3’ in “3D.”</p><h2 id="3-26-W-matches-any-non-word-character"><a href="#3-26-W-matches-any-non-word-character" class="headerlink" title="3.26 \W matches any non word character"></a>3.26 \W matches any non word character</h2><p>Equivalent to [^A-Za-z0-9_].</p><p>For example, /\W/ or /[^A-Za-z0-9_]/ matches ‘%’ in “50%.”</p><h2 id="3-27-n-–-gt-Where-n-is-a-positive-integer-a-back-reference-to-the-last-substring-matching-the-n-parenthetical-in-the-regular-expression-counting-left-parentheses"><a href="#3-27-n-–-gt-Where-n-is-a-positive-integer-a-back-reference-to-the-last-substring-matching-the-n-parenthetical-in-the-regular-expression-counting-left-parentheses" class="headerlink" title="3.27 \n –&gt; Where n is a positive integer, a back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses)."></a>3.27 \n –&gt; Where n is a positive integer, a back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses).</h2><p>For example, /apple(,)\sorange\1/ matches ‘apple, orange,’ in “apple, orange, cherry, peach.”</p><h1 id="4-Rethink-for-some-cool-things"><a href="#4-Rethink-for-some-cool-things" class="headerlink" title="4. Rethink for some cool things"></a>4. Rethink for some cool things</h1><h2 id="4-1-n"><a href="#4-1-n" class="headerlink" title="4.1 \n"></a>4.1 \n</h2><p>选择器<br>(a|b)\1  —&gt; aa or bb</p><p>(1|2)(3|4)\1\2 –&gt; 1313  or 1414 or 2323  or 2424 </p><h2 id="4-2-x"><a href="#4-2-x" class="headerlink" title="4.2 (x)"></a>4.2 (x)</h2><p>给分组用的，然后用$0, $1, $2 来进行分别的表示</p><h1 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5. Reference"></a>5. Reference</h1><p>1.<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">Regular Expressions</a></p><p>2.<a href="https://juejin.im/post/5b5db5b8e51d4519155720d2" target="_blank" rel="noopener">掘金正则总结</a></p><p>3.<a href="https://stackoverflow.com/questions/8624345/whats-the-meaning-of-a-number-after-a-backslash-in-a-regular-expression" target="_blank" rel="noopener">Stackoverflow: what’s the meaning of a number after a backslash in a regular expression?</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> Regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scaling webapps</title>
      <link href="/Scaling-webapps/"/>
      <url>/Scaling-webapps/</url>
      
        <content type="html"><![CDATA[<h1 id="1-How-scaling-works"><a href="#1-How-scaling-works" class="headerlink" title="1. How scaling works"></a>1. How scaling works</h1><h2 id="1-1-Vertical-scaling"><a href="#1-1-Vertical-scaling" class="headerlink" title="1.1 Vertical scaling"></a>1.1 Vertical scaling</h2><p>Run same things on a more powerful computer</p><h2 id="1-2-Horizontal-scaling"><a href="#1-2-Horizontal-scaling" class="headerlink" title="1.2 Horizontal scaling"></a>1.2 Horizontal scaling</h2><p>Means run many processes in parallel. </p><p>Nowadays, mostly we use horizontal scaling, since every computer internally have multi processors, we could do parallel programming to make whole thing work faster by nature.</p><h1 id="2-Scaling-process"><a href="#2-Scaling-process" class="headerlink" title="2. Scaling process"></a>2. Scaling process</h1><h2 id="2-1-Initialization-single-server-and-database"><a href="#2-1-Initialization-single-server-and-database" class="headerlink" title="2.1 Initialization: single server and database"></a>2.1 Initialization: single server and database</h2><p><img src="https://i.loli.net/2020/01/31/klA2HgITCiwtRPc.png" alt="fig1.png"></p><h2 id="2-2-Reverse-proxy"><a href="#2-2-Reverse-proxy" class="headerlink" title="2.2 Reverse proxy"></a>2.2 Reverse proxy</h2><p><img src="https://i.loli.net/2020/01/31/CgBvyKAW938H1Un.png" alt="fig2.png"></p><ul><li>Check if guests are allowed to enter </li><li>A proxy is a process that receives and forwards requests </li><li>Reverse means reqeust comes from teh internet and needs to be routed to our server </li></ul><p>Reverse proxy does following tasks: </p><ul><li>health check<ul><li>make sure actual server is still up and running </li></ul></li><li>routing <ul><li>forward a request to the right endpoint </li></ul></li><li>authentication <ul><li>make sure that a user is actually permitted to access the server </li></ul></li><li>firewall<ul><li>ensure users only have access to the parts they are allowed to use </li></ul></li></ul><h2 id="2-3-Load-balancer"><a href="#2-3-Load-balancer" class="headerlink" title="2.3 Load balancer"></a>2.3 Load balancer</h2><p><img src="https://i.loli.net/2020/01/31/YR6kcGwTFC8JQf3.png" alt="fig3.png"></p><p>Most reverse proxy can also act as load balancers. Load balancer’s job is to split incoming requests among those servers</p><h2 id="2-4-Grow-database"><a href="#2-4-Grow-database" class="headerlink" title="2.4 Grow database"></a>2.4 Grow database</h2><p><img src="https://i.loli.net/2020/01/31/LVqBUhFscRAgt9w.png" alt="fig4.png"></p><ul><li>Scaling database needs to deal with consistency </li><li>Master - slace setup or write with read-replicas <ul><li>one part is exclusively responsible for receiving data and storing it </li><li>all other parts are responsible for retrieving the stored data </li></ul></li></ul><h2 id="2-5-Microservices"><a href="#2-5-Microservices" class="headerlink" title="2.5 Microservices"></a>2.5 Microservices</h2><p><img src="https://i.loli.net/2020/01/31/Qj5ibmHAzLSWeqJ.png" alt="fig5.png"></p><ul><li><p>why we need microservices? </p><ul><li>different part use server to different extends </li><li>development - might have more overlaps in singe service </li></ul></li><li><p>break server down into functional units and deploy them as individual, inter connected mini servers </p></li></ul><h2 id="2-6-Caching-amp-Content-Delivery-Networks"><a href="#2-6-Caching-amp-Content-Delivery-Networks" class="headerlink" title="2.6 Caching &amp; Content Delivery Networks"></a>2.6 Caching &amp; Content Delivery Networks</h2><p><img src="https://i.loli.net/2020/01/31/NRO6oguPe8JHMWb.png" alt="fig6.png"></p><ul><li>Large portion of our web app consists of static assets - almost never change <ul><li>use cache to speed it up </li></ul></li></ul><h2 id="2-7-Message-Queues"><a href="#2-7-Message-Queues" class="headerlink" title="2.7 Message Queues"></a>2.7 Message Queues</h2><p><img src="https://i.loli.net/2020/01/31/yXA4rKHbvw7cfuF.png" alt="fig7.png"></p><ul><li>deal with the waiting E.G fackbook deal with uploaded images <ul><li>store the raw, unprocessed image </li><li>confirm the upload to users </li><li>add to queue to process in the near future (async)</li></ul></li><li>benefits <ul><li>decouple tasks and processors </li><li>scale on demand </li></ul></li></ul><h2 id="2-8-sharding"><a href="#2-8-sharding" class="headerlink" title="2.8 sharding"></a>2.8 sharding</h2><p><img src="https://i.loli.net/2020/01/31/dXanh3b217s4Miq.png" alt="fig8.png"></p><ul><li>A technique of parallelizing an application’s stacks by separating them into multiple units, each responsible for a certain key or namespace </li><li>shard based on location, use frequency and so on</li></ul><h2 id="2-9-load-balancer"><a href="#2-9-load-balancer" class="headerlink" title="2.9 load balancer"></a>2.9 load balancer</h2><p><img src="https://i.loli.net/2020/01/31/4FblrsEOeP6982U.png" alt="fig9.png"></p><p>Load balancer has hard limit of how many requests they can handle</p><ul><li>DNS<ul><li>free load balancers </li><li>registry allows you to specify multiple IPs per domain name, each leading to a different load balancer </li></ul></li></ul><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://arcentry.com/blog/scaling-webapps-for-newbs-and-non-techies/" target="_blank" rel="noopener">https://arcentry.com/blog/scaling-webapps-for-newbs-and-non-techies/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Scalibility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - capture click outside component</title>
      <link href="/React-capture-click-outside-component/"/>
      <url>/React-capture-click-outside-component/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Use-case"><a href="#1-Use-case" class="headerlink" title="1. Use case"></a>1. Use case</h1><p>Suppose you create your own pop up modal, or you invent your own dropdown, you will need to deal/ capture with click outside of the component. This blog will illustrate how to do so. </p><h1 id="2-Handy-instructions"><a href="#2-Handy-instructions" class="headerlink" title="2. Handy instructions"></a>2. Handy instructions</h1><h2 id="2-1-Create-a-ref-to-div"><a href="#2-1-Create-a-ref-to-div" class="headerlink" title="2.1 Create a ref to div"></a>2.1 Create a ref to div</h2><pre><code>render() {    return (        &lt;div ref = {node =&gt; this.node = node}&gt; &lt;/div&gt;    );}</code></pre><h2 id="2-2-Add-event-listener"><a href="#2-2-Add-event-listener" class="headerlink" title="2.2 Add event listener"></a>2.2 Add event listener</h2><pre><code>componentWillMount() {    document.addEventListener(&#39;mousedown&#39;, this.handleClick, false);}componentWillUnmount() {    document.removeEventListener(&#39;mousedown&#39;, this.handleClick, false);}handleClick = (e) =&gt; {    if (this.node.contains(e.target)) {        // inside this component, do whatever you want        return;    }    // handle outside click    this.handleOutsideClick();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Run your first Puppeteer with recorder</title>
      <link href="/Run-your-first-Puppeteer-with-recorder/"/>
      <url>/Run-your-first-Puppeteer-with-recorder/</url>
      
        <content type="html"><![CDATA[<p>This blog wanna give you some introduction on how to write and run your first puppeteer script. </p><p>I love puppeteer over selenium cause it could use js to interact with browser in almost all ways. It’s super easy to write some scripts to free you from repetive browser work (click, save, blabla…). I learnt this merely cause I don’t want to waste too much of my time on ops work. I believe you guys have the thought with me :) </p><h1 id="1-Install-puppeteer"><a href="#1-Install-puppeteer" class="headerlink" title="1. Install puppeteer"></a>1. Install puppeteer</h1><p>In your command line tool, run </p><pre><code>npm i puppeteer </code></pre><p>It will show you if you have succeeded install puppeteer there. </p><h1 id="2-Write-some-basic-script"><a href="#2-Write-some-basic-script" class="headerlink" title="2. Write some basic script"></a>2. Write some basic script</h1><p>Let’s write some basic code to interact with one page: </p><pre><code>&gt; vim firstPuppeteer.js// in the js file, input // Require the node module, our pre installed puppeteer const puppeteer = require(&#39;puppeteer&#39;);(async () =&gt; {  // launch a browser   const browser = await puppeteer.launch();  // launch a page   const page = await browser.newPage();  // Go to some link you wanna go  await page.goto(&#39;https://www.llchen60.com&#39;);  // Get the &quot;viewport&quot; of the page, as reported by the page.  const dimensions = await page.evaluate(() =&gt; {    return {      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,      deviceScaleFactor: window.devicePixelRatio    };  });  console.log(&#39;Dimensions:&#39;, dimensions);  await browser.close();})();</code></pre><p>Well, this start script could get the dimension of the page you want. To execute it, run command <code>node firstPuppeteer.js</code></p><p>The output would be : <code>Dimensions: { width: 800, height: 600, deviceScaleFactor: 1 }</code></p><h1 id="3-Write-your-own-interaction-with-Puppeteer-Recorder"><a href="#3-Write-your-own-interaction-with-Puppeteer-Recorder" class="headerlink" title="3. Write your own interaction with Puppeteer Recorder"></a>3. Write your own interaction with Puppeteer Recorder</h1><p>Here, I wanna introduce you a chrome extension named: <strong>Puppeteer Recorder</strong>. Basically, you could start your interaction with browser and this extension can record all your behavior. </p><ul><li>It uses ES6 syntax to await for your selected component to be available</li><li>With recorder, it comes to be super easy to write puppeteer scripts, no more need to inspect all elements in browser and tracing down one by one! </li></ul><p>Still using my blog as an example, I start record when I’m at the home page, and look around, click on the puppeteer turorial link and then try to leave some comments there, the auto generated script are shown below: </p><pre><code>const puppeteer = require(&#39;puppeteer&#39;);(async () =&gt; {  const browser = await puppeteer.launch()  const page = await browser.newPage()  let frames = await page.frames()  const frame_35 = frames.find(f =&gt; f.url() === &#39;https://disqus.com/embed/comments/?base=default&amp;f=leilei-blog&amp;t_u=https%3A%2F%2Fwww.llchen60.com%2FPupperteer-Tutorial%2F&amp;t_d=Pupperteer%20Tutorial%20-%20Leilei%20%7C%20%E7%A3%8A%E7%A3%8A%E7%9A%84%E5%8D%9A%E5%AE%A2&amp;t_t=Pupperteer%20Tutorial%20-%20Leilei%20%7C%20%E7%A3%8A%E7%A3%8A%E7%9A%84%E5%8D%9A%E5%AE%A2&amp;s_o=default#version=50739766d3d12616cb0b6361b7b2fd85&#39;)  const navigationPromise = page.waitForNavigation()  await page.goto(&#39;https://llchen60.com/&#39;)  await page.setViewport({ width: 1080, height: 1809 })  await page.waitForSelector(&#39;.row &gt; .col-lg-8 &gt; .post-preview:nth-child(17) &gt; a &gt; .post-title&#39;)  await page.click(&#39;.row &gt; .col-lg-8 &gt; .post-preview:nth-child(17) &gt; a &gt; .post-title&#39;)  await navigationPromise  await frame_35.waitForSelector(&#39;.postbox &gt; .textarea-outer-wrapper &gt; .textarea-wrapper &gt; div &gt; .placeholder&#39;)  await frame_35.click(&#39;.postbox &gt; .textarea-outer-wrapper &gt; .textarea-wrapper &gt; div &gt; .placeholder&#39;)  await frame_35.waitForSelector(&#39;div #view27_display_name&#39;)  await frame_35.click(&#39;div #view27_display_name&#39;)  await browser.close()})();</code></pre><p>As you see, it auto generates the code we need, usually we could some modifications and put it on our existing scripts. </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://llchen60.com/Pupperteer-Tutorial/" target="_blank" rel="noopener">https://llchen60.com/Pupperteer-Tutorial/</a></li><li><a href="https://chrome.google.com/webstore/search/puppeteer?hl=en-US" target="_blank" rel="noopener">https://chrome.google.com/webstore/search/puppeteer?hl=en-US</a></li><li><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> UI Test </tag>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Advanced(4)</title>
      <link href="/React-Advanced-4/"/>
      <url>/React-Advanced-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-The-component-lifecycle"><a href="#1-The-component-lifecycle" class="headerlink" title="1. The component lifecycle"></a>1. The component lifecycle</h1><p>Each component has several lifecycle methods that you can override to run code at perticular times in the process. </p><h2 id="1-1-Mounting"><a href="#1-1-Mounting" class="headerlink" title="1.1 Mounting"></a>1.1 Mounting</h2><p>Methods are called <strong>in this order</strong> when an instance of a component is being created and inserted into the DOM. </p><ol><li>constructor()</li><li>static getDerivedStateFromProps(): exists for use cases where the state depends on changes in props over time </li><li>render()</li><li>componentDidMount()</li></ol><h2 id="1-2-Updating"><a href="#1-2-Updating" class="headerlink" title="1.2 Updating"></a>1.2 Updating</h2><ol><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate(): judge if a component’s output is not affected by the current change in state or props</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate() </li></ol><h2 id="1-3-Unmounting"><a href="#1-3-Unmounting" class="headerlink" title="1.3 Unmounting"></a>1.3 Unmounting</h2><ol><li>ComponentWillUnmount()</li></ol><h2 id="1-4-Error-Handling"><a href="#1-4-Error-Handling" class="headerlink" title="1.4 Error Handling"></a>1.4 Error Handling</h2><ol><li>static getDerivedStateFromError()</li><li>componentDidCatch() </li></ol><h1 id="2-JSX-in-Depth"><a href="#2-JSX-in-Depth" class="headerlink" title="2. JSX in Depth"></a>2. JSX in Depth</h1><h2 id="2-1-Specifying-the-react-element-type"><a href="#2-1-Specifying-the-react-element-type" class="headerlink" title="2.1 Specifying the react element type"></a>2.1 Specifying the react element type</h2><p>Capitalized types indicate that the JSX tag is <strong>referring to a React component</strong>. These tages get compiled into a direct reference to the named variable, so if you use the JSX <code>&lt;Foo/&gt;</code> expression, Foo must be in scope. </p><p>E.G Here: </p><pre><code>import React from &#39;react&#39;;import CustomButton from &#39;./CustomButton&#39;;function WarningButton() {  // return React.createElement(CustomButton, {color: &#39;red&#39;}, null);  return &lt;CustomButton color=&quot;red&quot; /&gt;;}</code></pre><p>Need to import those things before truly use it in function scope. </p><h2 id="2-2-User-defined-components-must-be-capitalized"><a href="#2-2-User-defined-components-must-be-capitalized" class="headerlink" title="2.2 User defined components must be capitalized"></a>2.2 User defined components must be capitalized</h2><p>When an element type starts with a lowercase letter, it refers to a build-in component like <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> passed to React.createElement.  </p><p>***Types that start with a capital letter like <code>&lt;Foo/&gt;</code> compile to React.createElement(Foo) and correspond to a component defined or imported in your js file. </p><h2 id="2-3-Spread-Attributes"><a href="#2-3-Spread-Attributes" class="headerlink" title="2.3 Spread Attributes"></a>2.3 Spread Attributes</h2><p>If you already have props as an object, and you want to pass it in JSX, you can use <code>...</code> as a spread operator to pass the whole props object. </p><p>Equivalent expressions: </p><pre><code>function App1() {  return &lt;Greeting firstName=&quot;Ben&quot; lastName=&quot;Hector&quot; /&gt;;}function App2() {  const props = {firstName: &#39;Ben&#39;, lastName: &#39;Hector&#39;};  return &lt;Greeting {...props} /&gt;;}</code></pre><h2 id="2-4-Children-in-JSX"><a href="#2-4-Children-in-JSX" class="headerlink" title="2.4 Children in JSX"></a>2.4 Children in JSX</h2><p>In JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed as a special prop: <code>props.children</code>. Several different ways to pass children: </p><ol><li>String literals </li></ol><p><code>&lt;div&gt;Hello World!&lt;/div&gt;</code></p><ol start="2"><li><p>JSX children</p></li><li><p>JS Expressions as Children</p></li></ol><p>Wrap it within <code>{}</code></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Advanced(3)</title>
      <link href="/React-Advanced-3/"/>
      <url>/React-Advanced-3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Error-Boundaries"><a href="#1-Error-Boundaries" class="headerlink" title="1. Error Boundaries"></a>1. Error Boundaries</h1><h2 id="1-1-Why-need-error-boundaries"><a href="#1-1-Why-need-error-boundaries" class="headerlink" title="1.1 Why need error boundaries"></a>1.1 Why need error boundaries</h2><p>In the past, JavaScript errors inside components used to corrupt React’s internal state and cause it to emit cryptic errors on next renders. These errors were always caused by an earlier error in the application code,** but React did not provide a way to handle them gracefully in components, and could not recover from them**.</p><h2 id="1-2-Intro"><a href="#1-2-Intro" class="headerlink" title="1.2 Intro"></a>1.2 Intro</h2><p>A js error in a part of the UI shouldn’t break the whole app. </p><blockquote><p>Error boundaries are React components that catch JS errors anywhere in their child component tree,log these errors, and display a fallback UI instead of the component tree, log those errors, and display a fallback UI instead of the component tree that crashed. </p></blockquote><p>Notice: Error boundaries do not catch errors for: </p><ol><li>Event handler</li><li>Asynchrounous code </li><li>server side rendering </li><li>errors thrown in the error boundary itself </li></ol><p>A class component becomes an error boundary if it defines either (or both) of the lifecycle methods <code>static getDerivedStateFromError()</code> or <code>componentDidCatch()</code>. Use <code>static getDerivedStateFromError()</code> to render a fallback UI after an error has been thrown. Use <code>componentDidCatch()</code> to log error information.</p><pre><code>class ErrorBoundary extends React.Component {  constructor(props) {    super(props);    this.state = { hasError: false };  }  static getDerivedStateFromError(error) {    // Update state so the next render will show the fallback UI.    return { hasError: true };  }  componentDidCatch(error, info) {    // You can also log the error to an error reporting service    logErrorToMyService(error, info);  }  render() {    if (this.state.hasError) {      // You can render any custom fallback UI      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;    }    return this.props.children;   }}</code></pre><p>We can use it as a regular component: </p><pre><code>&lt;ErrorBoundary&gt;  &lt;MyWidget /&gt;&lt;/ErrorBoundary&gt;</code></pre><h2 id="1-3-Notifications"><a href="#1-3-Notifications" class="headerlink" title="1.3 Notifications"></a>1.3 Notifications</h2><ol><li>Error boundaries work like a JS <code>catch {}</code> block, but for components. </li><li>Only calss components can be error boundaries.</li><li>Error boundaries only catch errors in the components below them in the tree. </li><li>It cannot catch an error within itself.</li></ol><h1 id="2-Forwarding-Refs"><a href="#2-Forwarding-Refs" class="headerlink" title="2. Forwarding Refs"></a>2. Forwarding Refs</h1><p>Ref forwarding is a tech for <strong><em>automatically passing a ref through a component to one of its children</em></strong></p><h2 id="2-1-Forwarding-Refs-to-DOM-components"><a href="#2-1-Forwarding-Refs-to-DOM-components" class="headerlink" title="2.1 Forwarding Refs to DOM components"></a>2.1 Forwarding Refs to DOM components</h2><pre><code>function FancyButton(props) {  return (    &lt;button className=&quot;FancyButton&quot;&gt;      {props.children}    &lt;/button&gt;  );}</code></pre><p>In this example, FancyButton wrap a button, and we can reuse in our dev work. But the problem is FancyButton is expected to be used in a similar manner as a regular DOM button. We might need to access their DOM nodes for <strong><em>managing focus, selection, or animations</em></strong>.</p><blockquote><p>Ref forwarding is an opt-in feature that lets some components take a ref they receive, and pass it further down to a child. </p></blockquote><pre><code>const FancyButton = React.forwardRef((props, ref) =&gt; (  &lt;button ref={ref} className=&quot;FancyButton&quot;&gt;    {props.children}  &lt;/button&gt;));// You can now get a ref directly to the DOM button:const ref = React.createRef();&lt;FancyButton ref={ref}&gt;Click me!&lt;/FancyButton&gt;;</code></pre><p>Here, use <code>React.forwardRef()</code> to obtain the ref passed to it, and then forward it to the DOM button that it renders. </p><p>Here is a step-by-step explanation of what happens in the above example:</p><ol><li>We create a React ref by calling <code>React.createRef</code> and assign it to a ref variable.</li><li>We pass our ref down to <code>&lt;FancyButton ref={ref}&gt;</code> by specifying it as a JSX attribute.</li><li>React passes the ref to the <code>(props, ref) =&gt; ...</code> function inside forwardRef as a second argument.</li><li>We forward this ref argument down to <code>&lt;button ref={ref}&gt;</code> by specifying it as a JSX attribute.</li><li>When the ref is attached, <code>ref.current</code> will point to the <button> DOM node.</li></ol><h1 id="3-Higher-Order-Components-KEY-FACTOR"><a href="#3-Higher-Order-Components-KEY-FACTOR" class="headerlink" title="3. Higher-Order Components (KEY FACTOR)"></a>3. Higher-Order Components (KEY FACTOR)</h1><blockquote><p>A higher order component(HOC) is an advanced technique in React for reusing component logic. It’s a pattern that emerges from React’s compositional nature. </p></blockquote><blockquote><p>Concretely, <strong><em>a higher order component is a function that takes a component and returns a new component</em></strong></p></blockquote><p>Whereas a component transforms props into UI, a higher-order component transforms a component into another component.</p><h2 id="3-1-Use-HOCs-For-cross-cutting-concerns"><a href="#3-1-Use-HOCs-For-cross-cutting-concerns" class="headerlink" title="3.1 Use HOCs For cross cutting concerns"></a>3.1 Use HOCs For cross cutting concerns</h2><p>CommentList component that subscribes to an external data source to render a list of comments: </p><pre><code>class CommentList extends React.Component {  constructor(props) {    super(props);    this.handleChange = this.handleChange.bind(this);    this.state = {      // &quot;DataSource&quot; is some global data source      comments: DataSource.getComments()    };  }  componentDidMount() {    // Subscribe to changes    DataSource.addChangeListener(this.handleChange);  }  componentWillUnmount() {    // Clean up listener    DataSource.removeChangeListener(this.handleChange);  }  handleChange() {    // Update component state whenever the data source changes    this.setState({      comments: DataSource.getComments()    });  }  render() {    return (      &lt;div&gt;        {this.state.comments.map((comment) =&gt; (          &lt;Comment comment={comment} key={comment.id} /&gt;        ))}      &lt;/div&gt;    );  }}</code></pre><p>A component for subscribing to a single blog post:</p><pre><code>class BlogPost extends React.Component {  constructor(props) {    super(props);    this.handleChange = this.handleChange.bind(this);    this.state = {      blogPost: DataSource.getBlogPost(props.id)    };  }  componentDidMount() {    DataSource.addChangeListener(this.handleChange);  }  componentWillUnmount() {    DataSource.removeChangeListener(this.handleChange);  }  handleChange() {    this.setState({      blogPost: DataSource.getBlogPost(this.props.id)    });  }  render() {    return &lt;TextBlock text={this.state.blogPost} /&gt;;  }}</code></pre><p>Much of those two component are similar, need an abstraction that allows us to define the logic in a single place and share it across many components.</p><p>Write a function that creates components, like CommentList and BlogList, that subscribe to DataSourse. </p><pre><code>const CommentListWithSubscription = withSubscription(  CommentList,  (DataSource) =&gt; DataSource.getComments());const BlogPostWithSubscription = withSubscription(  BlogPost,  (DataSource, props) =&gt; DataSource.getBlogPost(props.id));</code></pre><p>When CommentListWithSubscription and BlogPostWithSubscription are rendered, <strong>CommentList and BlogPost will be passed a data prop with the most current data retrieved from DataSource</strong>:</p><pre><code>// This function takes a component...function withSubscription(WrappedComponent, selectData) {  // ...and returns another component...  return class extends React.Component {    constructor(props) {      super(props);      this.handleChange = this.handleChange.bind(this);      this.state = {        data: selectData(DataSource, props)      };    }    componentDidMount() {      // ... that takes care of the subscription...      DataSource.addChangeListener(this.handleChange);    }    componentWillUnmount() {      DataSource.removeChangeListener(this.handleChange);    }    handleChange() {      this.setState({        data: selectData(DataSource, this.props)      });    }    render() {      // ... and renders the wrapped component with the fresh data!      // Notice that we pass through any additional props      return &lt;WrappedComponent data={this.state.data} {...this.props} /&gt;;    }  };}</code></pre><p>Note that a HOC doesn’t modify the input component, nor does it use inheritance to copy its behavior. Rather, a HOC composes the original component by wrapping it in a container component. A HOC is a pure function with zero side-effects.</p><p>The wrapped component receives all the props of the container, along with a new prop, data, which it uses to render its output. The HOC isn’t concerned with how or why the data is used, and the wrapped component isn’t concerned with where the data came from. </p><h1 id="4-Fragments"><a href="#4-Fragments" class="headerlink" title="4. Fragments"></a>4. Fragments</h1><p>Fragments let you group a list of children without adding extra nodes to the DOM. </p><pre><code>render() {  return (    &lt;React.Fragment&gt;      &lt;ChildA /&gt;      &lt;ChildB /&gt;      &lt;ChildC /&gt;    &lt;/React.Fragment&gt;  );}</code></pre><h2 id="4-1-Why-introduce-Fragments"><a href="#4-1-Why-introduce-Fragments" class="headerlink" title="4.1 Why introduce Fragments"></a>4.1 Why introduce <code>Fragments</code></h2><pre><code>&lt;table&gt;  &lt;tr&gt;    &lt;div&gt;      &lt;td&gt;Hello&lt;/td&gt;      &lt;td&gt;World&lt;/td&gt;    &lt;/div&gt;  &lt;/tr&gt;&lt;/table&gt;</code></pre><p>In this example, if there are two components, and we want to seperate it, and make <code>&lt;div&gt;</code> doesn’t work(group elements inside, but keep table format works), we can modify it to: </p><pre><code>class Columns extends React.Component {  render() {    return (      &lt;React.Fragment&gt;        &lt;td&gt;Hello&lt;/td&gt;        &lt;td&gt;World&lt;/td&gt;      &lt;/React.Fragment&gt;    );  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Advanced(2)</title>
      <link href="/React-Advanced-2/"/>
      <url>/React-Advanced-2/</url>
      
        <content type="html"><![CDATA[<p>In this part, dive deeper into React. In the previous post, found a lot of new things. Though I can write some jsx code, but I have to admit it’s really ugly…wihout reuse, with some useless states for no reasons, duplicate, boring. That’s why try to write some articles following authoritive docs. There are some of my thoughts inside, hope it can help you. :) </p><h1 id="1-Accessibility"><a href="#1-Accessibility" class="headerlink" title="1. Accessibility"></a>1. Accessibility</h1><p>Also known as a11y, is the design and creation of websites that can be used by everyone. </p><h2 id="1-1-Semantic-HTML"><a href="#1-1-Semantic-HTML" class="headerlink" title="1.1 Semantic HTML"></a>1.1 Semantic HTML</h2><p>Sometimes, we break HTML sementics when we add <code>&lt;div&gt;</code> elements to our JSX to make our React code work, especially working with lists and table. In these case, we should use <strong><em>React Fragments</em></strong> to group together multiple elements. </p><pre><code>import React, { Fragment } from &#39;react&#39;;function ListItem({ item }) {  return (    &lt;Fragment&gt;      &lt;dt&gt;{item.term}&lt;/dt&gt;      &lt;dd&gt;{item.description}&lt;/dd&gt;    &lt;/Fragment&gt;  );}function Glossary(props) {  return (    &lt;dl&gt;      {props.items.map(item =&gt; (        &lt;ListItem item={item} key={item.id} /&gt;      ))}    &lt;/dl&gt;  );}</code></pre><p>Map a collection of items to an array of fragments as you would any other type of elements as well: </p><pre><code>function Glossary(props) {  return (    &lt;dl&gt;      {props.items.map(item =&gt; (        // Fragments should also have a `key` prop when mapping collections        &lt;Fragment key={item.id}&gt;          &lt;dt&gt;{item.term}&lt;/dt&gt;          &lt;dd&gt;{item.description}&lt;/dd&gt;        &lt;/Fragment&gt;      ))}    &lt;/dl&gt;  );}</code></pre><h1 id="2-Refs-and-the-DOM"><a href="#2-Refs-and-the-DOM" class="headerlink" title="2 Refs and the DOM"></a>2 Refs and the DOM</h1><blockquote><p>Refs provide a way to access DOM nodes or React elements created in the render method. </p></blockquote><p>Refs offer another way to change a child outside of the typical dataflow - use props from parent to child. <strong>The child to be modified could be an instance of a React Component, or it could be a DOM element.</strong> </p><h2 id="2-1-When-to-use-Refs"><a href="#2-1-When-to-use-Refs" class="headerlink" title="2.1 When to use Refs"></a>2.1 When to use Refs</h2><ol><li>Managing focus, text selection, media playback </li><li>triggering imperative animations</li><li>integrating with third party DOM libraries </li></ol><h2 id="2-2-How-to-use-Refs"><a href="#2-2-How-to-use-Refs" class="headerlink" title="2.2 How to use Refs"></a>2.2 How to use Refs</h2><p>Use by <code>React.createRef()</code>, to create a ref</p><pre><code>class MyComponent extends React.Component {  constructor(props) {    super(props);    this.myRef = React.createRef();  }  render() {    return &lt;div ref={this.myRef} /&gt;;  }}</code></pre><p>When a ref is passed to an element in render, a reference to the node becomes accessible at the <strong><em>current</em></strong> attribute of the ref</p><pre><code>const node = this.myRef.current;</code></pre><h2 id="2-3-Value-of-the-ref"><a href="#2-3-Value-of-the-ref" class="headerlink" title="2.3 Value of the ref"></a>2.3 Value of the ref</h2><ol><li><p>When the ref attribute is used on an HTML element, the ref created in the constructor with React.createRef() receives the underlying DOM element as its current property.</p></li><li><p>When the ref attribute is used on a custom class component, the ref object receives the mounted instance of the component as its current.</p><p> class CustomTextInput extends React.Component {<br>   constructor(props) {</p><pre><code> super(props); // create a ref to store the textInput DOM element this.textInput = React.createRef(); this.focusTextInput = this.focusTextInput.bind(this);</code></pre><p>   }</p><p>   focusTextInput() {</p><pre><code> // Explicitly focus the text input using the raw DOM API // Note: we&#39;re accessing &quot;current&quot; to get the DOM node this.textInput.current.focus();</code></pre><p>   }</p><p>   render() {</p><pre><code> // tell React that we want to associate the &lt;input&gt; ref // with the `textInput` that we created in the constructor return (   &lt;div&gt;     &lt;input       type=&quot;text&quot;       ref={this.textInput} /&gt;     &lt;input       type=&quot;button&quot;       value=&quot;Focus the text input&quot;       onClick={this.focusTextInput}     /&gt;   &lt;/div&gt; );</code></pre><p>   }<br> }</p></li></ol><p>Here, React will assign the current property with the DOM element when the component mounts, and assign it back to null when it unmounts. Ref updates happen before componentDidMount or componentDidUpdate lifecycle methods. </p><p><strong>*!!! We cannot use ref attribute on function componnets because they don’t have instances. *</strong></p><h1 id="3-Code-Splitting"><a href="#3-Code-Splitting" class="headerlink" title="3. Code Splitting"></a>3. Code Splitting</h1><h2 id="3-1-Bundling"><a href="#3-1-Bundling" class="headerlink" title="3.1 Bundling"></a>3.1 Bundling</h2><p>Most React Apps will have their files bundles using tools like webpack or browserify. Bundling is the process of following imported files and merging them into a single file. This file can then be included on a webpage to load an entire app at once. </p><h2 id="3-2-Code-splitting"><a href="#3-2-Code-splitting" class="headerlink" title="3.2 Code splitting"></a>3.2 Code splitting</h2><p>Bundling is great, but as your app grows, bundle will grow too. Especially if you are including large third party libraries. </p><p>To void winding up with a large bundle, it’s good to get ahead of the problkem and start splitting your bundle. </p><p>Code-splitting your app can help you “lazy-load” just the things that are currently needed by the user, which can dramatically improve the performance of your app. While you haven’t reduced the overall amount of code in your app, you’ve avoided loading code that the user may never need, and reduced the amount of code needed during the initial load.</p><h2 id="3-3-Dynamic-import"><a href="#3-3-Dynamic-import" class="headerlink" title="3.3 Dynamic import()"></a>3.3 Dynamic <code>import()</code></h2><p>The beast way to introduce code-splitting into app is through the dynamic import() syntax. </p><pre><code>import { add } from &#39;./math&#39;;console.log(add(16, 26));</code></pre><p>Before, now with dynamic import: </p><pre><code>import(&quot;./math&quot;).then(math =&gt; {  console.log(math.add(16, 26));});</code></pre><h2 id="3-4-React-lazy"><a href="#3-4-React-lazy" class="headerlink" title="3.4 React.lazy"></a>3.4 React.lazy</h2><p>lets you render a dynamic import as a regular component. </p><pre><code>import OtherComponent from &#39;./OtherComponent&#39;;function MyComponent() {  return (    &lt;div&gt;      &lt;OtherComponent /&gt;    &lt;/div&gt;  );}</code></pre><p>Switch to: </p><pre><code>const OtherComponent = React.lazy(() =&gt; import(&#39;./OtherComponent&#39;));function MyComponent() {  return (    &lt;div&gt;      &lt;OtherComponent /&gt;    &lt;/div&gt;  );}</code></pre><h2 id="3-5-Suspense"><a href="#3-5-Suspense" class="headerlink" title="3.5 Suspense"></a>3.5 Suspense</h2><p>If the modile containing other component is not yet loaded by the time current one renders, we must <strong>show some fallback content</strong> while we are waiting for it to load. </p><pre><code>const OtherComponent = React.lazy(() =&gt; import(&#39;./OtherComponent&#39;));function MyComponent() {  return (    &lt;div&gt;      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;        &lt;OtherComponent /&gt;      &lt;/Suspense&gt;    &lt;/div&gt;  );}</code></pre><p>The fallback prop accepts any React elements that you want to render while waiting for the component to load. </p><h1 id="4-Context"><a href="#4-Context" class="headerlink" title="4. Context"></a>4. Context</h1><p>Context provides a way to pass data through the component tree without having to pass props down manually at every level. </p><p>some props, like locale preference, UI theme, that are required by many components within an application. <strong>Context provides a way to share values like these between components without having to explicitly pass a prop throught every level of the tree.</strong></p><h2 id="4-1-When-to-use-Context"><a href="#4-1-When-to-use-Context" class="headerlink" title="4.1 When to use Context"></a>4.1 When to use Context</h2><pre><code>class App extends React.Component {  render() {    return &lt;Toolbar theme=&quot;dark&quot; /&gt;;  }}function Toolbar(props) {  // The Toolbar component must take an extra &quot;theme&quot; prop  // and pass it to the ThemedButton. This can become painful  // if every single button in the app needs to know the theme  // because it would have to be passed through all components.  return (    &lt;div&gt;      &lt;ThemedButton theme={props.theme} /&gt;    &lt;/div&gt;  );}class ThemedButton extends React.Component {  render() {    return &lt;Button theme={this.props.theme} /&gt;;  }}</code></pre><p>With context, we can avoid passing props through intermidiate elements: </p><pre><code>// Context lets us pass a value deep into the component tree// without explicitly threading it through every component.// Create a context for the current theme (with &quot;light&quot; as the default).const ThemeContext = React.createContext(&#39;light&#39;);class App extends React.Component {  render() {    // Use a Provider to pass the current theme to the tree below.    // Any component can read it, no matter how deep it is.    // In this example, we&#39;re passing &quot;dark&quot; as the current value.    return (      &lt;ThemeContext.Provider value=&quot;dark&quot;&gt;        &lt;Toolbar /&gt;      &lt;/ThemeContext.Provider&gt;    );  }}// A component in the middle doesn&#39;t have to// pass the theme down explicitly anymore.function Toolbar(props) {  return (    &lt;div&gt;      &lt;ThemedButton /&gt;    &lt;/div&gt;  );}class ThemedButton extends React.Component {  // Assign a contextType to read the current theme context.  // React will find the closest theme Provider above and use its value.  // In this example, the current theme is &quot;dark&quot;.  static contextType = ThemeContext;  render() {    return &lt;Button theme={this.context} /&gt;;  }}</code></pre><p>Notice: </p><ol><li><code>contextType</code></li><li><code>context.provider</code></li></ol><h2 id="4-2-Before-using-context"><a href="#4-2-Before-using-context" class="headerlink" title="4.2 Before using context"></a>4.2 Before using context</h2><p>Context is primarily used when some data needs to be accessible by many components at different nesting levels. </p><p>Multiple other choices can be used to resolve similar problems. </p><ol><li>Pass down the combined component itself </li></ol><pre><code>&lt;Page user={user} avatarSize={avatarSize} /&gt;// ... which renders ...&lt;PageLayout user={user} avatarSize={avatarSize} /&gt;// ... which renders ...&lt;NavigationBar user={user} avatarSize={avatarSize} /&gt;// ... which renders ...&lt;Link href={user.permalink}&gt;  &lt;Avatar user={user} size={avatarSize} /&gt;&lt;/Link&gt;function Page(props) {  const user = props.user;  const userLink = (    &lt;Link href={user.permalink}&gt;      &lt;Avatar user={user} size={props.avatarSize} /&gt;    &lt;/Link&gt;  );  return &lt;PageLayout userLink={userLink} /&gt;;}// Now, we have:&lt;Page user={user} /&gt;// ... which renders ...&lt;PageLayout userLink={...} /&gt;// ... which renders ...&lt;NavigationBar userLink={...} /&gt;// ... which renders ...{props.userLink}</code></pre><h2 id="4-3-API"><a href="#4-3-API" class="headerlink" title="4.3 API"></a>4.3 API</h2><ol><li><p><code>React.createContext</code></p><p> const MyContext = React.createContext(defaultValue);</p></li></ol><p>Create a context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree. <strong>Read context value from provider!</strong></p><p>The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.</p><ol start="2"><li><p><code>Context.Provider</code></p><p> &lt;MyContext.Provider value={/* some value */}&gt;</p></li></ol><p>Every Context object comes with a Provider React Component that allows consuming components to subscribe to context changes. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree. All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes. The propagation from Provider to its descendant consumers is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component bails out of the update.</p><ol start="3"><li><code>Class.contextType</code></li></ol><p>contextType property on a class can be assigned a context object created by <code>React.createContext()</code>. This lets you consume the nearest current value of that Context type using this.context. You can reference this in any of the lifecycle methods including the render function.</p><ol start="4"><li><code>Context.consumer</code></li></ol><pre><code>&lt;MyContext.Consumer&gt;  {value =&gt; /* render something based on the context value */}&lt;/MyContext.Consumer&gt;</code></pre><p>A react component that subscribes to context changes. This lets you subscribe to a context within a function component.</p><h2 id="4-4-Example"><a href="#4-4-Example" class="headerlink" title="4.4 Example"></a>4.4 Example</h2><p>theme-context.js </p><pre><code>export const themes = {  light: {    foreground: &#39;#000000&#39;,    background: &#39;#eeeeee&#39;,  },  dark: {    foreground: &#39;#ffffff&#39;,    background: &#39;#222222&#39;,  },};export const ThemeContext = React.createContext(  themes.dark // default value);</code></pre><p>theme-button.js</p><pre><code>import {ThemeContext} from &#39;./theme-context&#39;;class ThemedButton extends React.Component {  render() {    let props = this.props;    let theme = this.context;    return (      &lt;button        {...props}        style={{backgroundColor: theme.background}}      /&gt;    );  }}ThemedButton.contextType = ThemeContext;export default ThemedButton;</code></pre><p>app.js</p><pre><code>import {ThemeContext, themes} from &#39;./theme-context&#39;;import ThemedButton from &#39;./themed-button&#39;;// An intermediate component that uses the ThemedButtonfunction Toolbar(props) {  return (    &lt;ThemedButton onClick={props.changeTheme}&gt;      Change Theme    &lt;/ThemedButton&gt;  );}class App extends React.Component {  constructor(props) {    super(props);    this.state = {      theme: themes.light,    };    this.toggleTheme = () =&gt; {      this.setState(state =&gt; ({        theme:          state.theme === themes.dark            ? themes.light            : themes.dark,      }));    };  }  render() {    // The ThemedButton button inside the ThemeProvider    // uses the theme from state while the one outside uses    // the default dark theme    return (      &lt;Page&gt;        &lt;ThemeContext.Provider value={this.state.theme}&gt;          &lt;Toolbar changeTheme={this.toggleTheme} /&gt;        &lt;/ThemeContext.Provider&gt;        &lt;Section&gt;          &lt;ThemedButton /&gt;        &lt;/Section&gt;      &lt;/Page&gt;    );  }}ReactDOM.render(&lt;App /&gt;, document.root);</code></pre><h1 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5. Reference"></a>5. Reference</h1><ol><li><a href="https://reactjs.org/docs/context.html" target="_blank" rel="noopener">React Doc</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Advanced(1)</title>
      <link href="/React-Advanced-1/"/>
      <url>/React-Advanced-1/</url>
      
        <content type="html"><![CDATA[<p>For this part, aim to know all the necessary react knowledge to better do the development work. Start from the very beginning, and try to grab all the basic and advanced knowledge follow the authoritive doc. </p><h1 id="1-Main-Concepts"><a href="#1-Main-Concepts" class="headerlink" title="1. Main Concepts"></a>1. Main Concepts</h1><h2 id="1-1-JSX"><a href="#1-1-JSX" class="headerlink" title="1.1 JSX"></a>1.1 JSX</h2><pre><code>const element = &lt;h1&gt;Hello World!&lt;/h1&gt;</code></pre><p>JSX, syntax extension to JS. JSX produces <strong>React Elements</strong>. And then we try to render them to the DOM. </p><p>JSX out logic and markup together, react separates concerns with loosely coupled units called components that contain both. </p><h3 id="1-1-1-Embedding-expressions-in-JSX"><a href="#1-1-1-Embedding-expressions-in-JSX" class="headerlink" title="1.1.1 Embedding expressions in JSX"></a>1.1.1 Embedding expressions in JSX</h3><pre><code>const name = &#39;Josh Perez&#39;;const element = &lt;h1&gt;Hello, {name}&lt;/h1&gt;;ReactDOM.render(  element,  document.getElementById(&#39;root&#39;));</code></pre><p>Here, by wrapping name in curly braces, we call a variable. </p><blockquote><p>Inside the curly brace, we can put any valid <strong><em>JS expression</em></strong>.  </p></blockquote><h3 id="1-1-2-JSX-is-an-Expression"><a href="#1-1-2-JSX-is-an-Expression" class="headerlink" title="1.1.2 JSX is an Expression"></a>1.1.2 JSX is an Expression</h3><p>After compilation, JSX expressions become regular <strong>JS function calls</strong> and evaluate to <strong>JS objects</strong>. React DOM uses camelCase property naming convention </p><p>JSX represents Object, Babel will help JSX to compile to React.createElement() call. </p><h2 id="1-2-Rendering-Elements"><a href="#1-2-Rendering-Elements" class="headerlink" title="1.2 Rendering Elements"></a>1.2 Rendering Elements</h2><h3 id="1-2-1-Element"><a href="#1-2-1-Element" class="headerlink" title="1.2.1 Element"></a>1.2.1 Element</h3><p>An element describes what you want to see on the screen. </p><pre><code>const element = &lt;h1&gt;Hello world!&lt;/h1&gt;</code></pre><p>Components are made of elements. </p><blockquote><p>Applications built with React usually have a <strong><em>single root DOM node</em></strong>. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like. </p></blockquote><h3 id="1-2-2-Updating-the-rendered-element"><a href="#1-2-2-Updating-the-rendered-element" class="headerlink" title="1.2.2 Updating the rendered element"></a>1.2.2 Updating the rendered element</h3><blockquote><p><strong><em>React elements are immutable</em></strong></p></blockquote><p>Once you create an element, you cannot change its children or attributes</p><h3 id="1-2-3-Only-updates-what’s-necessary"><a href="#1-2-3-Only-updates-what’s-necessary" class="headerlink" title="1.2.3 Only updates what’s necessary"></a>1.2.3 Only updates what’s necessary</h3><p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state. </p><blockquote><p>In this way, we can spend more time thinking how the UI should look like rather than how to change it over time eliminates a whole class of bugs. </p></blockquote><h2 id="1-3-Components-and-Props"><a href="#1-3-Components-and-Props" class="headerlink" title="1.3 Components and Props"></a>1.3 Components and Props</h2><h3 id="1-3-1-Components"><a href="#1-3-1-Components" class="headerlink" title="1.3.1 Components"></a>1.3.1 Components</h3><p>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. They accept arbitrary inputs(named props) and return React elements describing what should appear on the screen. </p><p>When React sees an element representing a user-defined component, it <strong>passes JSX attributes to this component</strong> as a single object. We call this object “props”.</p><pre><code>function Welcome(props) {  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;}const element = &lt;Welcome name=&quot;Sara&quot; /&gt;;ReactDOM.render(  element,  document.getElementById(&#39;root&#39;));</code></pre><h3 id="1-3-2-Extract-Components"><a href="#1-3-2-Extract-Components" class="headerlink" title="1.3.2 Extract Components"></a>1.3.2 Extract Components</h3><p>To make them better reusable. </p><h3 id="1-3-3-Props-are-Read-only"><a href="#1-3-3-Props-are-Read-only" class="headerlink" title="1.3.3 Props are Read only"></a>1.3.3 Props are <strong><em>Read only</em></strong></h3><p>All React Components must act like pure functions with respect to their props. </p><h2 id="1-4-State-and-Lifecycle"><a href="#1-4-State-and-Lifecycle" class="headerlink" title="1.4 State and Lifecycle"></a>1.4 State and Lifecycle</h2><h3 id="1-4-1-State"><a href="#1-4-1-State" class="headerlink" title="1.4.1 State"></a>1.4.1 State</h3><p>State is private, and fully controlled by the component. </p><h3 id="1-4-2-Adding-lifecycle-methods-to-a-Class"><a href="#1-4-2-Adding-lifecycle-methods-to-a-Class" class="headerlink" title="1.4.2 Adding lifecycle methods to a Class"></a>1.4.2 Adding lifecycle methods to a Class</h3><p>In applications with many components, it’s very important to free up resources taken by the components when they are destroyed. </p><ol><li><p>componentDidMount()<br>It runs after the component output has been rendered to the DOM</p></li><li><p>componentWillUnmount() </p></li><li><p>Runs when the DOM need to be removed </p></li></ol><h3 id="1-4-3-State-Using-tips"><a href="#1-4-3-State-Using-tips" class="headerlink" title="1.4.3 State Using tips"></a>1.4.3 State Using tips</h3><ol><li>Do not modify state directly, instead, use setState</li><li>state updates may be asynchronous , props and state may be updated asynchronously, should not rely on their values for calculating the next state. </li></ol><pre><code>// Correctthis.setState((state, props) =&gt; ({  counter: state.counter + props.increment}));</code></pre><p>In this way, That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument</p><ol start="3"><li>State updates are merged </li></ol><h3 id="1-4-4-The-data-flow-down"><a href="#1-4-4-The-data-flow-down" class="headerlink" title="1.4.4 The data flow down"></a>1.4.4 The data flow down</h3><p>This is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.</p><blockquote><p>If you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.</p></blockquote><h2 id="1-5-Handling-Events"><a href="#1-5-Handling-Events" class="headerlink" title="1.5 Handling Events"></a>1.5 Handling Events</h2><p>Quite similar to handling methods in DOM, some differences: </p><ol><li><p>Syntax: </p> <button onClick={activateLasers}>   Activate Lasers </button></li></ol><p>Use {}, <code>activateLasers</code> here means a function name</p><ol start="2"><li>use <code>e.preventDefault()</code> to block the default behavior</li><li>when using React, you should generally not need to call <code>addEventListener</code> to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered. </li></ol><pre><code>class Toggle extends React.Component {  constructor(props) {    super(props);    this.state = {isToggleOn: true};    // This binding is necessary to make `this` work in the callback    this.handleClick = this.handleClick.bind(this);  }  handleClick() {    this.setState(state =&gt; ({      isToggleOn: !state.isToggleOn    }));  }  render() {    return (      &lt;button onClick={this.handleClick}&gt;        {this.state.isToggleOn ? &#39;ON&#39; : &#39;OFF&#39;}      &lt;/button&gt;    );  }}ReactDOM.render(  &lt;Toggle /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><blockquote><p> Be careful of <code>this</code>, since class methods are not bound by default. Need to bind this.handleClick. </p></blockquote><ol start="4"><li>You can try to not bind this if you declare the method in such way!</li></ol><pre><code>class LoggingButton extends React.Component {  // This syntax ensures `this` is bound within handleClick.  // Warning: this is *experimental* syntax.  handleClick = () =&gt; {    console.log(&#39;this is:&#39;, this);  }  render() {    return (      &lt;button onClick={this.handleClick}&gt;        Click me      &lt;/button&gt;    );  }}</code></pre><p>Let’s figure out what’s <code>() =&gt; {}</code> means here: </p><p><strong><em>() contains some variables, used in an arrow function to return an object</em></strong></p><p><strong><em>{} contains some statement, actually, it’s a special syntax in JSX. It contains a JS expression, can be a variable</em></strong></p><h2 id="1-6-Conditional-Rendering"><a href="#1-6-Conditional-Rendering" class="headerlink" title="1.6  Conditional Rendering"></a>1.6  Conditional Rendering</h2><p>User can create distinct components that encapsulate behavior you need, ANd we can <strong>render only some of them</strong>. </p><ol><li>Using if to do conditional rendering</li><li>Inline if with Logical &amp;&amp; Operator </li></ol><pre><code>function Mailbox(props) {  const unreadMessages = props.unreadMessages;  return (    &lt;div&gt;      &lt;h1&gt;Hello!&lt;/h1&gt;      {unreadMessages.length &gt; 0 &amp;&amp;        &lt;h2&gt;          You have {unreadMessages.length} unread messages.        &lt;/h2&gt;      }    &lt;/div&gt;  );}const messages = [&#39;React&#39;, &#39;Re: React&#39;, &#39;Re:Re: React&#39;];ReactDOM.render(  &lt;Mailbox unreadMessages={messages} /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><p>It works because in JS, <code>true &amp;&amp; expression</code> always evaluateds to <code>expression</code>, and <code>false &amp;&amp; expression</code> always evaluates to <code>false</code>. </p><ol start="3"><li><p>Inline if-else with conditional operator </p><p> <code>condition ? true : false</code></p></li><li><p>Return null will prevent a component from render, but it will not affect the component’s lifecycle methods. </p></li></ol><h2 id="1-7-Lists-and-Keys"><a href="#1-7-Lists-and-Keys" class="headerlink" title="1.7 Lists and Keys"></a>1.7 Lists and Keys</h2><h3 id="1-7-1-Rendering-Multiple-Components"><a href="#1-7-1-Rendering-Multiple-Components" class="headerlink" title="1.7.1 Rendering Multiple Components"></a>1.7.1 Rendering Multiple Components</h3><pre><code>const numbers = [1, 2, 3, 4, 5];const listItems = numbers.map((number) =&gt;  &lt;li&gt;{number}&lt;/li&gt;);// warning will be shown indicating you need provide key     function NumberList(props) {  const numbers = props.numbers;  const listItems = numbers.map((number) =&gt;    &lt;li&gt;{number}&lt;/li&gt;  );  return (    &lt;ul&gt;{listItems}&lt;/ul&gt;  );}const numbers = [1, 2, 3, 4, 5];ReactDOM.render(  &lt;NumberList numbers={numbers} /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><p>A “key” is a special string attribute you need to include when creating lists of elements. </p><pre><code>function NumberList(props) {  const numbers = props.numbers;  const listItems = numbers.map((number) =&gt;    &lt;li key={number.toString()}&gt;      {number}    &lt;/li&gt;  );  return (    &lt;ul&gt;{listItems}&lt;/ul&gt;  );}const numbers = [1, 2, 3, 4, 5];ReactDOM.render(  &lt;NumberList numbers={numbers} /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><h2 id="1-7-2-Keys"><a href="#1-7-2-Keys" class="headerlink" title="1.7.2 Keys"></a>1.7.2 Keys</h2><p>It helps React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. </p><pre><code>const todoItems = todos.map((todo, index) =&gt;  // Only do this if items have no stable IDs  &lt;li key={index}&gt;    {todo.text}  &lt;/li&gt;);</code></pre><p>Using index as key might have some negative influence, thus we’d better find some other specific string as the key. </p><p>!!! Keys only make sense in the context of the surrounding array. </p><pre><code>function ListItem(props) {  const value = props.value;  return (    // Wrong! There is no need to specify the key here:    &lt;li key={value.toString()}&gt;      {value}    &lt;/li&gt;  );}function NumberList(props) {  const numbers = props.numbers;  const listItems = numbers.map((number) =&gt;    // Wrong! The key should have been specified here:    &lt;ListItem value={number} /&gt;  );  return (    &lt;ul&gt;      {listItems}    &lt;/ul&gt;  );}const numbers = [1, 2, 3, 4, 5];ReactDOM.render(  &lt;NumberList numbers={numbers} /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><p>Correct Version: </p><pre><code>function ListItem(props) {  // Correct! There is no need to specify the key here:  return &lt;li&gt;{props.value}&lt;/li&gt;;}function NumberList(props) {  const numbers = props.numbers;  const listItems = numbers.map((number) =&gt;    // Correct! Key should be specified inside the array.    &lt;ListItem key={number.toString()}              value={number} /&gt;  );  return (    &lt;ul&gt;      {listItems}    &lt;/ul&gt;  );}const numbers = [1, 2, 3, 4, 5];ReactDOM.render(  &lt;NumberList numbers={numbers} /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><h2 id="1-7-3-Embedding-map-in-JSX"><a href="#1-7-3-Embedding-map-in-JSX" class="headerlink" title="1.7.3 Embedding map() in JSX"></a>1.7.3 Embedding map() in JSX</h2><pre><code>function NumberList(props) {  const numbers = props.numbers;  const listItems = numbers.map((number) =&gt;    &lt;ListItem key={number.toString()}              value={number} /&gt;  );  return (    &lt;ul&gt;      {listItems}    &lt;/ul&gt;  );}</code></pre><p>After map:</p><pre><code>    function NumberList(props) {  const numbers = props.numbers;  return (    &lt;ul&gt;      {numbers.map((number) =&gt;        &lt;ListItem key={number.toString()}                  value={number} /&gt;      )}    &lt;/ul&gt;  );}</code></pre><h2 id="1-8-Forms"><a href="#1-8-Forms" class="headerlink" title="1.8 Forms"></a>1.8 Forms</h2><p>Form elements natuarlly keep some internal state.</p><pre><code>&lt;form&gt;  &lt;label&gt;    Name:    &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;  &lt;/label&gt;  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt;</code></pre><p>React can use controlled components to achieve this. </p><h3 id="1-8-1-Controlled-Components-–-Form"><a href="#1-8-1-Controlled-Components-–-Form" class="headerlink" title="1.8.1 Controlled Components – Form"></a>1.8.1 Controlled Components – Form</h3><p>In HTML, input, textaream select typically <strong>maintain their own state and update it based on user input</strong>. In React, mutable state is typically kept in the state property of components, and only updated with <code>setState()</code>.</p><pre><code>class NameForm extends React.Component {  constructor(props) {    super(props);    this.state = {value: &#39;&#39;};    this.handleChange = this.handleChange.bind(this);    this.handleSubmit = this.handleSubmit.bind(this);  }  handleChange(event) {    this.setState({value: event.target.value});  }  handleSubmit(event) {    alert(&#39;A name was submitted: &#39; + this.state.value);    event.preventDefault();  }  render() {    return (      &lt;form onSubmit={this.handleSubmit}&gt;        &lt;label&gt;          Name:          &lt;input type=&quot;text&quot; value={this.state.value} onChange={this.handleChange} /&gt;        &lt;/label&gt;        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;      &lt;/form&gt;    );  }}</code></pre><p>Controlled Component, in this way, use <code>state</code> in React to control the change of text. With a controlled component, <strong><em>every state mutaion will have an associated handler function</em></strong>, This makes it straightforward to modify or validate user input. </p><h3 id="1-8-2-Controlled-Components-–-textarea"><a href="#1-8-2-Controlled-Components-–-textarea" class="headerlink" title="1.8.2 Controlled Components – textarea"></a>1.8.2 Controlled Components – textarea</h3><pre><code>class EssayForm extends React.Component {  constructor(props) {    super(props);    this.state = {      value: &#39;Please write an essay about your favorite DOM element.&#39;    };    this.handleChange = this.handleChange.bind(this);    this.handleSubmit = this.handleSubmit.bind(this);  }  handleChange(event) {    this.setState({value: event.target.value});  }  handleSubmit(event) {    alert(&#39;An essay was submitted: &#39; + this.state.value);    event.preventDefault();  }  render() {    return (      &lt;form onSubmit={this.handleSubmit}&gt;        &lt;label&gt;          Essay:          &lt;textarea value={this.state.value} onChange={this.handleChange} /&gt;        &lt;/label&gt;        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;      &lt;/form&gt;    );  }}</code></pre><p>Have the value property, and associate it with state. change it by handler function, and deal with it with a chain of handlers. </p><h3 id="1-8-3-Controlled-Components-–-select"><a href="#1-8-3-Controlled-Components-–-select" class="headerlink" title="1.8.3 Controlled Components – select"></a>1.8.3 Controlled Components – select</h3><pre><code>&lt;select&gt;  &lt;option value=&quot;grapefruit&quot;&gt;Grapefruit&lt;/option&gt;  &lt;option value=&quot;lime&quot;&gt;Lime&lt;/option&gt;  &lt;option selected value=&quot;coconut&quot;&gt;Coconut&lt;/option&gt;  &lt;option value=&quot;mango&quot;&gt;Mango&lt;/option&gt;&lt;/select&gt;</code></pre><p>coconut has been selected with the selected property </p><pre><code>class FlavorForm extends React.Component {  constructor(props) {    super(props);    this.state = {value: &#39;coconut&#39;};    this.handleChange = this.handleChange.bind(this);    this.handleSubmit = this.handleSubmit.bind(this);  }  handleChange(event) {    this.setState({value: event.target.value});  }  handleSubmit(event) {    alert(&#39;Your favorite flavor is: &#39; + this.state.value);    event.preventDefault();  }  render() {    return (      &lt;form onSubmit={this.handleSubmit}&gt;        &lt;label&gt;          Pick your favorite flavor:          &lt;select value={this.state.value} onChange={this.handleChange}&gt;            &lt;option value=&quot;grapefruit&quot;&gt;Grapefruit&lt;/option&gt;            &lt;option value=&quot;lime&quot;&gt;Lime&lt;/option&gt;            &lt;option value=&quot;coconut&quot;&gt;Coconut&lt;/option&gt;            &lt;option value=&quot;mango&quot;&gt;Mango&lt;/option&gt;          &lt;/select&gt;        &lt;/label&gt;        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;      &lt;/form&gt;    );  }}</code></pre><p>By setting the start state as cconut, we realize the same function as you see in the HTML part. But come to be more extenable since when we want to change its states, we only need to change this component’s state. </p><h3 id="1-8-4-Handling-multiple-inputs"><a href="#1-8-4-Handling-multiple-inputs" class="headerlink" title="1.8.4 Handling multiple inputs"></a>1.8.4 Handling multiple inputs</h3><p>when need to handle multiple controlled input elements, you can add a name attribute to each element and let the handler function choose what to do based on the value of <code>event.target.name</code>.</p><pre><code>class Reservation extends React.Component {  constructor(props) {    super(props);    this.state = {      isGoing: true,      numberOfGuests: 2    };    this.handleInputChange = this.handleInputChange.bind(this);  }  handleInputChange(event) {    const target = event.target;    const value = target.type === &#39;checkbox&#39; ? target.checked : target.value;    const name = target.name;    this.setState({      [name]: value    });  }  render() {    return (      &lt;form&gt;        &lt;label&gt;          Is going:          &lt;input            name=&quot;isGoing&quot;            type=&quot;checkbox&quot;            checked={this.state.isGoing}            onChange={this.handleInputChange} /&gt;        &lt;/label&gt;        &lt;br /&gt;        &lt;label&gt;          Number of guests:          &lt;input            name=&quot;numberOfGuests&quot;            type=&quot;number&quot;            value={this.state.numberOfGuests}            onChange={this.handleInputChange} /&gt;        &lt;/label&gt;      &lt;/form&gt;    );  }}</code></pre><p><code>handleInputChange</code> here controls two input, one is a checkbox, another is a scrolled banner. That’s the reason we need to judge target type in function. However, I do think there is no need to combine those two sub component, and use one handler function, at least in this example. </p><blockquote><p>Notice: in <code>setState</code>, we use <code>[name] : value</code>. It’s because <strong><em>name is a computed property, [] means need to compute here</em></strong>. </p></blockquote><h2 id="1-9-Lifting-state-up"><a href="#1-9-Lifting-state-up" class="headerlink" title="1.9 Lifting state up"></a>1.9 Lifting state up</h2><p>Happen when several components need to reflext the same changing data. Need to lifting the shared state up to their closest common ancestor. </p><pre><code>const scaleNames = {  c: &#39;Celsius&#39;,  f: &#39;Fahrenheit&#39;};function toCelsius(fahrenheit) {  return (fahrenheit - 32) * 5 / 9;}function toFahrenheit(celsius) {  return (celsius * 9 / 5) + 32;}function tryConvert(temperature, convert) {  const input = parseFloat(temperature);  if (Number.isNaN(input)) {    return &#39;&#39;;  }  const output = convert(input);  const rounded = Math.round(output * 1000) / 1000;  return rounded.toString();}function BoilingVerdict(props) {  if (props.celsius &gt;= 100) {    return &lt;p&gt;The water would boil.&lt;/p&gt;;  }  return &lt;p&gt;The water would not boil.&lt;/p&gt;;}class TemperatureInput extends React.Component {  constructor(props) {    super(props);    this.handleChange = this.handleChange.bind(this);  }  handleChange(e) {    this.props.onTemperatureChange(e.target.value);  }  render() {    const temperature = this.props.temperature;    const scale = this.props.scale;    return (      &lt;fieldset&gt;        &lt;legend&gt;Enter temperature in {scaleNames[scale]}:&lt;/legend&gt;        &lt;input value={temperature}               onChange={this.handleChange} /&gt;      &lt;/fieldset&gt;    );  }}class Calculator extends React.Component {  constructor(props) {    super(props);    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);    this.state = {temperature: &#39;&#39;, scale: &#39;c&#39;};  }  handleCelsiusChange(temperature) {    this.setState({scale: &#39;c&#39;, temperature});  }  handleFahrenheitChange(temperature) {    this.setState({scale: &#39;f&#39;, temperature});  }  render() {    const scale = this.state.scale;    const temperature = this.state.temperature;    const celsius = scale === &#39;f&#39; ? tryConvert(temperature, toCelsius) : temperature;    const fahrenheit = scale === &#39;c&#39; ? tryConvert(temperature, toFahrenheit) : temperature;    return (      &lt;div&gt;        &lt;TemperatureInput          scale=&quot;c&quot;          temperature={celsius}          onTemperatureChange={this.handleCelsiusChange} /&gt;        &lt;TemperatureInput          scale=&quot;f&quot;          temperature={fahrenheit}          onTemperatureChange={this.handleFahrenheitChange} /&gt;        &lt;BoilingVerdict          celsius={parseFloat(celsius)} /&gt;      &lt;/div&gt;    );  }}ReactDOM.render(  &lt;Calculator /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><ol><li>Lifting state, React calls the function specified as onChange on the DOM <input>. In our case, this is the handleChange method in the TemperatureInput component.</li><li>The handleChange method in the TemperatureInput component calls <strong>this.props.onTemperatureChange()</strong> with the new desired value. Its props, including onTemperatureChange, were provided by its parent component, the Calculator.</li><li>When it previously rendered, the Calculator has specified that onTemperatureChange of the Celsius TemperatureInput is the Calculator’s handleCelsiusChange method, and onTemperatureChange of the Fahrenheit TemperatureInput is the Calculator’s handleFahrenheitChange method. So either of these two Calculator methods gets called depending on which input we edited.</li><li>Inside these methods, the Calculator component asks React to re-render itself by calling this.setState() with the new input value and the current scale of the input we just edited.</li><li>React calls the Calculator component’s render method to learn what the UI should look like. The values of both inputs are recomputed based on the current temperature and the active scale. The temperature conversion is performed here.</li><li>React calls the render methods of the individual TemperatureInput components with their new props specified by the Calculator. It learns what their UI should look like.</li><li>React calls the render method of the BoilingVerdict component, passing the temperature in Celsius as its props.</li><li>React DOM updates the DOM with the boiling verdict and to match the desired input values. The input we just edited receives its current value, and the other input is updated to the temperature after conversion.</li></ol><p>Usually, the state is first added to the component that needs it for rendering, Then it other components also need it, you can lift it up to their closest common ancestor. </p><h2 id="1-10-Compisition-vs-Inheritance"><a href="#1-10-Compisition-vs-Inheritance" class="headerlink" title="1.10 Compisition vs Inheritance"></a>1.10 Compisition vs Inheritance</h2><p>React has a powerful composition model, and we recommend <strong>using composition</strong> instead of inheritance to <strong>reuse code</strong> between components. </p><h3 id="1-10-1-Containment"><a href="#1-10-1-Containment" class="headerlink" title="1.10.1 Containment"></a>1.10.1 Containment</h3><p>Some component don’t know their children ahead of time. This is especially common for components like SideBar or Dialog that represent generic boxes. </p><p>We can use <code>children</code> props to pass children elements derectly into their output. </p><pre><code>function FancyBorder(props) {  return (    &lt;div className={&#39;FancyBorder FancyBorder-&#39; + props.color}&gt;      {props.children}    &lt;/div&gt;  );}function WelcomeDialog() {  return (    &lt;FancyBorder color=&quot;blue&quot;&gt;      &lt;h1 className=&quot;Dialog-title&quot;&gt;        Welcome      &lt;/h1&gt;      &lt;p className=&quot;Dialog-message&quot;&gt;        Thank you for visiting our spacecraft!      &lt;/p&gt;    &lt;/FancyBorder&gt;  );}</code></pre><p>Anything inside the <code>&lt;FancyBorder&gt;</code> JSX tag gets passed into the FancyBorder component as a children prop. Since FancyBorder renders <code>{props.children}</code> inside a <code>&lt;div&gt;</code>, then passed elements appear in the final output. </p><p>And also, we can use your own props and pass it inside. </p><pre><code>function SplitPane(props) {  return (    &lt;div className=&quot;SplitPane&quot;&gt;      &lt;div className=&quot;SplitPane-left&quot;&gt;        {props.left}      &lt;/div&gt;      &lt;div className=&quot;SplitPane-right&quot;&gt;        {props.right}      &lt;/div&gt;    &lt;/div&gt;  );}function App() {  return (    &lt;SplitPane      left={        &lt;Contacts /&gt;      }      right={        &lt;Chat /&gt;      } /&gt;  );}</code></pre><h3 id="1-10-2-Specialization"><a href="#1-10-2-Specialization" class="headerlink" title="1.10.2 Specialization"></a>1.10.2 Specialization</h3><p>A more specific component renders a more generic one and configures it with props: </p><pre><code>function Dialog(props) {  return (    &lt;FancyBorder color=&quot;blue&quot;&gt;      &lt;h1 className=&quot;Dialog-title&quot;&gt;        {props.title}      &lt;/h1&gt;      &lt;p className=&quot;Dialog-message&quot;&gt;        {props.message}      &lt;/p&gt;    &lt;/FancyBorder&gt;  );}function WelcomeDialog() {  return (    &lt;Dialog      title=&quot;Welcome&quot;      message=&quot;Thank you for visiting our spacecraft!&quot; /&gt;  );</code></pre><h3 id="1-10-3-Example"><a href="#1-10-3-Example" class="headerlink" title="1.10.3 Example"></a>1.10.3 Example</h3><pre><code>function Dialog(props) {  return (    &lt;FancyBorder color=&quot;blue&quot;&gt;      &lt;h1 className=&quot;Dialog-title&quot;&gt;        {props.title}      &lt;/h1&gt;      &lt;p className=&quot;Dialog-message&quot;&gt;        {props.message}      &lt;/p&gt;      {props.children}    &lt;/FancyBorder&gt;  );}class SignUpDialog extends React.Component {  constructor(props) {    super(props);    this.handleChange = this.handleChange.bind(this);    this.handleSignUp = this.handleSignUp.bind(this);        this.state = {login: &#39;&#39;};      }      render() {        return (          &lt;Dialog title=&quot;Mars Exploration Program&quot;                  message=&quot;How should we refer to you?&quot;&gt;            &lt;input value={this.state.login}                   onChange={this.handleChange} /&gt;            &lt;button onClick={this.handleSignUp}&gt;              Sign Me Up!            &lt;/button&gt;          &lt;/Dialog&gt;        );      }      handleChange(e) {        this.setState({login: e.target.value});      }      handleSignUp() {        alert(`Welcome aboard, ${this.state.login}!`);      }    }</code></pre><h1 id="2-Thinking-How-to-build-an-product-from-scratch"><a href="#2-Thinking-How-to-build-an-product-from-scratch" class="headerlink" title="2. Thinking - How to build an product from scratch"></a>2. Thinking - How to build an product from scratch</h1><ol><li><p>Start with a mock: UI + Json API</p></li><li><p>Break the UI into a Component Hierarchy </p></li><li><p>Separate to different components, following <strong><em>single responsibility principle</em></strong>. A component should ideally only do one thing. </p></li><li><p>Build a static version in react </p><ul><li>decouple styling and interactivity </li><li>static version always use props, since state is reserved only for interactivity </li><li>Larger project, easier bottom up. </li><li>Don’t repeat yourself</li></ul></li><li><p>Identify the minimal representation of UI state</p><ul><li>Is it passed in from a parent via props? If so, it probably isn’t state.</li><li>Does it remain unchanged over time? If so, it probably isn’t state.</li><li>Can you compute it based on any other state or props in your component? If so, it isn’t state.</li></ul></li><li><p>Idenfify where your state should live </p></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://reactjs.org/docs/hello-world.html" target="_blank" rel="noopener">REACT DOC</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pupperteer Tutorial</title>
      <link href="/Pupperteer-Tutorial/"/>
      <url>/Pupperteer-Tutorial/</url>
      
        <content type="html"><![CDATA[<p>This post is merely some notes when I learnt pupperteer, basically contain similar info from google developer webpage. Try to organize those info in a personal understandable way here. </p><h1 id="1-What-is-Pupperteer"><a href="#1-What-is-Pupperteer" class="headerlink" title="1. What is Pupperteer"></a>1. What is Pupperteer</h1><p>Most thins you can do manually in the browser now can be done with puppeteer. </p><h1 id="2-Usage"><a href="#2-Usage" class="headerlink" title="2. Usage"></a>2. Usage</h1><h2 id="2-1-General"><a href="#2-1-General" class="headerlink" title="2.1 General"></a>2.1 General</h2><ul><li>Create an instance of Browser </li><li>Open pages </li><li>manipulate them with Puppeteer’s API </li></ul><h1 id="3-Learn-by-doing"><a href="#3-Learn-by-doing" class="headerlink" title="3. Learn by doing"></a>3. Learn by doing</h1><h2 id="3-1-See-an-example-to-learn-how-the-thing-works"><a href="#3-1-See-an-example-to-learn-how-the-thing-works" class="headerlink" title="3.1 See an example to learn how the thing works"></a>3.1 See an example to learn how the thing works</h2><pre><code>/** * Copyright 2018 Google Inc. All rights reserved. * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * @author ebidel@ (Eric Bidelman) *//** * Takes a screenshot of the latest tweet in a user&#39;s timeline and creates a * PDF of it. Shows how to use Puppeteer to: * *   1. screenshot a DOM element *   2. craft an HTML page on-the-fly *   3. produce an image of the element and PDF of the page with the image embedded * * Usage: *   node element-to-pdf.js *   USERNAME=ChromiumDev node element-to-pdf.js * *   --searchable makes &quot;find in page&quot; work: *   node element-to-pdf.js --searchable * * Output: *   tweet.png and tweet.pdf */// Include modules that exist in separate files, basically it reads a js file, executes the // file and then proceed to return the exports object const puppeteer = require(&#39;puppeteer&#39;);// process.env is a global variable, injected by node at runtime // represent the state of the system environment application // it will try to get from process env, if cannot get there, will fallback to default// here, means fallback to &#39;ebidel&#39;const username = process.env.USERNAME || &#39;ebidel&#39;;const searchable = process.argv.includes(&#39;--searchable&#39;);(async() =&gt; {// launch a chromium instance const browser = await puppeteer.launch();// launch a new page const page = await browser.newPage();// set a screen size await page.setViewport({width: 1200, height: 800, deviceScaleFactor: 2});await page.goto(`https://twitter.com/${username}`);// Can&#39;t use elementHandle.click() because it clicks the center of the element// with the mouse. On tweets like https://twitter.com/ebidel/status/915996563234631680// there is an embedded card link to another tweet that it clicks.// find the component, and do some function thereawait page.$eval(`.tweet[data-screen-name=&quot;${username}&quot;]`, tweet =&gt; tweet.click());// wait for it to be availableawait page.waitForSelector(&#39;.tweet.permalink-tweet&#39;, {visible: true});// run document.querySelector within the page. If no element matches the selector, return // value will be resolved to nullconst overlay = await page.$(&#39;.tweet.permalink-tweet&#39;);const screenshot = await overlay.screenshot({path: &#39;tweet.png&#39;});if (searchable) {  await page.evaluate(tweet =&gt; {    const width = getComputedStyle(tweet).width;    tweet = tweet.cloneNode(true);    tweet.style.width = width;    document.body.innerHTML = `      &lt;div style=&quot;display:flex;justify-content:center;align-items:center;height:100vh;&quot;&gt;;        ${tweet.outerHTML}      &lt;/div&gt;    `;  }, overlay);} else {  await page.setContent(`    &lt;!DOCTYPE html&gt;    &lt;html&gt;      &lt;head&gt;        &lt;style&gt;          html, body {            height: 100vh;            margin: 0;            display: flex;            justify-content: center;            align-items: center;            background: #fafafa;          }          img {            max-width: 60%;            box-shadow: 3px 3px 6px #eee;            border-radius: 6px;          }        &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;img src=&quot;data:img/png;base64,${screenshot.toString(&#39;base64&#39;)}&quot;&gt;      &lt;/body&gt;    &lt;/html&gt;  `);}await page.pdf({path: &#39;tweet.pdf&#39;, printBackground: true});await browser.close();})();</code></pre><h2 id="3-2-crawlsite-js"><a href="#3-2-crawlsite-js" class="headerlink" title="3.2 crawlsite.js"></a>3.2 crawlsite.js</h2><pre><code>/** * Copyright 2018 Google Inc. All rights reserved. * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * @author ebidel@ (Eric Bidelman) */ /**  * Discovers all the pages in site or single page app (SPA) and creates  * a tree of the result in ./output/&lt;site slug/crawl.json. Optionally  * takes screenshots of each page as it is visited.  *  * Usage:  *   node crawlsite.js  *   URL=https://yourspa.com node crawlsite.js  *   URL=https://yourspa.com node crawlsite.js --screenshots  *  * Then open the visualizer in a browser:  *   http://localhost:8080/html/d3tree.html  *   http://localhost:8080/html/d3tree.html?url=../output/https___yourspa.com/crawl.json  *  *Start Server:  *   node server.js  *  */// provides an API for interacting with the file system const fs = require(&#39;fs&#39;);// delete files const del = require(&#39;del&#39;);// nodeJS util moduleconst util = require(&#39;util&#39;);const puppeteer = require(&#39;puppeteer&#39;);// high performance Node.js image proccessing, fastest module to resize JPEG, PNG, etc. const sharp = require(&#39;sharp&#39;);const URL = process.env.URL || &#39;https://news.polymer-project.org/&#39;;const SCREENSHOTS = process.argv.includes(&#39;--screenshots&#39;);const DEPTH = parseInt(process.env.DEPTH) || 2;const VIEWPORT = SCREENSHOTS ? {width: 1028, height: 800, deviceScaleFactor: 2} : null;const OUT_DIR = process.env.OUTDIR || `output/${slugify(URL)}`;const crawledPages = new Map();const maxDepth = DEPTH; // Subpage depth to crawl site.function slugify(str) {  return str.replace(/[\/:]/g, &#39;_&#39;);}function mkdirSync(dirPath) {  try {    dirPath.split(&#39;/&#39;).reduce((parentPath, dirName) =&gt; {      const currentPath = parentPath + dirName;      if (!fs.existsSync(currentPath)) {        fs.mkdirSync(currentPath);      }      return currentPath + &#39;/&#39;;    }, &#39;&#39;);  } catch (err) {    if (err.code !== &#39;EEXIST&#39;) {      throw err;    }  }}/** * Finds all anchors on the page, inclusive of those within shadow roots. * Note: Intended to be run in the context of the page. * @param {boolean=} sameOrigin When true, only considers links from the same origin as the app. * @return {!Array&lt;string&gt;} List of anchor hrefs. */function collectAllSameOriginAnchorsDeep(sameOrigin = true) {  const allElements = [];  const findAllElements = function(nodes) {    for (let i = 0, el; el = nodes[i]; ++i) {      allElements.push(el);      // If the element has a shadow root, dig deeper.      if (el.shadowRoot) {        findAllElements(el.shadowRoot.querySelectorAll(&#39;*&#39;));      }    }  };  findAllElements(document.querySelectorAll(&#39;*&#39;));  const filtered = allElements    .filter(el =&gt; el.localName === &#39;a&#39; &amp;&amp; el.href) // element is an anchor with an href.    .filter(el =&gt; el.href !== location.href) // link doesn&#39;t point to page&#39;s own URL.    .filter(el =&gt; {      if (sameOrigin) {        return new URL(location).origin === new URL(el.href).origin;      }      return true;    })    .map(a =&gt; a.href);  return Array.from(new Set(filtered));}/** * Crawls a URL by visiting an url, then recursively visiting any child subpages. * @param {!Browser} browser * @param {{url: string, title: string, img?: string, children: !Array<!Object>}} page Current page. * @param {number=} depth Current subtree depth of crawl. */async function crawl(browser, page, depth = 0) {  if (depth &gt; maxDepth) {    return;  }  // If we&#39;ve already crawled the URL, we know its children.  if (crawledPages.has(page.url)) {    console.log(`Reusing route: ${page.url}`);    const item = crawledPages.get(page.url);    page.title = item.title;    page.img = item.img;    page.children = item.children;    // Fill in the children with details (if they already exist).    page.children.forEach(c =&gt; {      const item = crawledPages.get(c.url);      c.title = item ? item.title : &#39;&#39;;      c.img = item ? item.img : null;    });    return;  } else {    console.log(`Loading: ${page.url}`);    const newPage = await browser.newPage();    await newPage.goto(page.url, {waitUntil: &#39;networkidle2&#39;});    let anchors = await newPage.evaluate(collectAllSameOriginAnchorsDeep);    anchors = anchors.filter(a =&gt; a !== URL) // link doesn&#39;t point to start url of crawl.    page.title = await newPage.evaluate(&#39;document.title&#39;);    page.children = anchors.map(url =&gt; ({url}));    if (SCREENSHOTS) {      const path = `./${OUT_DIR}/${slugify(page.url)}.png`;      let imgBuff = await newPage.screenshot({fullPage: false});      imgBuff = await sharp(imgBuff).resize(null, 150).toBuffer(); // resize image to 150 x auto.      util.promisify(fs.writeFile)(path, imgBuff); // async      page.img = `data:img/png;base64,${imgBuff.toString(&#39;base64&#39;)}`;    }    crawledPages.set(page.url, page); // cache it.    await newPage.close();  }  // Crawl subpages.  for (const childPage of page.children) {    await crawl(browser, childPage, depth + 1);  }}(async() =&gt; {mkdirSync(OUT_DIR); // create output dir if it doesn&#39;t exist.await del([`${OUT_DIR}/*`]); // cleanup after last run.const browser = await puppeteer.launch();const page = await browser.newPage();if (VIEWPORT) {  await page.setViewport(VIEWPORT);}const root = {url: URL};await crawl(browser, root);await util.promisify(fs.writeFile)(`./${OUT_DIR}/crawl.json`, JSON.stringify(root, null, &#39; &#39;));await browser.close();})();</code></pre>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> UI Test </tag>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NightWatch JavaScript Tutorial</title>
      <link href="/NightWatch-JavaScript-Tutorial/"/>
      <url>/NightWatch-JavaScript-Tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><ul><li>Complete end-to-end testing solition </li><li>written in nodejs and using the WebDriver </li><li>WebDriver <ul><li>Library for automating web browsers  </li><li>A remote control interface that enables intrpspection and controls of user agents. Provides a platform and a restful HTTP api as a way for web browsers to be remotely controlled. </li></ul></li></ul><h1 id="2-How-to-use"><a href="#2-How-to-use" class="headerlink" title="2. How to use"></a>2. How to use</h1><h2 id="2-1-Writing-tests-in-general-way"><a href="#2-1-Writing-tests-in-general-way" class="headerlink" title="2.1 Writing tests in general way"></a>2.1 Writing tests in general way</h2><ul><li>use the preferred CSS selector model to locate elements on a page</li><li>create a separate folder for tests in the project </li></ul><p>E.G we could set couple different steps to interact with the page in multiple ways. </p><pre><code>module.exports = {  &#39;step 1&#39; : function (browser) {    browser      .url(&#39;https://www.google.com&#39;)      .waitForElementVisible(&#39;body&#39;)      .setValue(&#39;input[type=text]&#39;, &#39;nightwatch&#39;)      .waitForElementVisible(&#39;input[name=btnK]&#39;)      .click(&#39;input[name=btnK]&#39;)      .pause(1000)      .assert.containsText(&#39;#main&#39;, &#39;Night Watch&#39;)      .end();  },       &#39;step 2&#39; : function (browser) {        browser          .click(&#39;input[name=btnK]&#39;)          .pause(1000)          .assert.containsText(&#39;#main&#39;, &#39;Night Watch&#39;)          .end();      }};</code></pre><h2 id="2-2-Writing-tests-in-ES6-with-async-await"><a href="#2-2-Writing-tests-in-ES6-with-async-await" class="headerlink" title="2.2 Writing tests in ES6 with async/ await"></a>2.2 Writing tests in ES6 with async/ await</h2><ul><li>improves the readability and ease of writing of tests</li><li>no longer be available to chain the API commands when using an async function </li></ul><pre><code>module.exports = {  &#39;demo test async&#39;: async function (browser) {    // get the available window handles    const result = await browser.windowHandles();    console.log(&#39;result&#39;, result);    // switch to the second window    // await is not necessary here since we&#39;re not interested in the result    browser.switchWindow(result.value[1]);  }};</code></pre><h2 id="2-3-Expect-Assertions"><a href="#2-3-Expect-Assertions" class="headerlink" title="2.3 Expect Assertions"></a>2.3 Expect Assertions</h2><pre><code>module.exports = {  &#39;Demo test Google&#39; : function (browser) {    browser      .url(&#39;https://google.no&#39;)      .pause(1000);    // expect element &lt;body&gt; to be present in 1000ms    browser.expect.element(&#39;body&#39;).to.be.present.before(1000);    // expect element &lt;#lst-ib&gt; to have css property &#39;display&#39;    browser.expect.element(&#39;#lst-ib&#39;).to.have.css(&#39;display&#39;);    // expect element &lt;body&gt; to have attribute &#39;class&#39; which contains text &#39;vasq&#39;    browser.expect.element(&#39;body&#39;).to.have.attribute(&#39;class&#39;).which.contains(&#39;vasq&#39;);    // expect element &lt;#lst-ib&gt; to be an input tag    browser.expect.element(&#39;#lst-ib&#39;).to.be.an(&#39;input&#39;);    // expect element &lt;#lst-ib&gt; to be visible    browser.expect.element(&#39;#lst-ib&#39;).to.be.visible;    browser.end();  }};</code></pre><h2 id="2-4-before-after-beforeEach-afterEach"><a href="#2-4-before-after-beforeEach-afterEach" class="headerlink" title="2.4 before, after, beforeEach, afterEach"></a>2.4 before, after, beforeEach, afterEach</h2><ul><li>standard hook </li><li>before and after will run before and after the test suite</li><li>beforeEach and afterEach will run before and after each test case </li></ul><pre><code>module.exports = {  before : function(browser) {    console.log(&#39;Setting up...&#39;);  },  after : function(browser) {    console.log(&#39;Closing down...&#39;);  },  beforeEach : function(browser) {  },  afterEach : function(browser) {  },  &#39;step one&#39; : function (browser) {    browser     // ...  },  &#39;step two&#39; : function (browser) {    browser    // ...      .end();  }};</code></pre><h2 id="2-5-Controlling-the-done-invocation-timeout"><a href="#2-5-Controlling-the-done-invocation-timeout" class="headerlink" title="2.5 Controlling the done invocation timeout"></a>2.5 Controlling the done invocation timeout</h2><p>Increase the timeout by defining an <code>ayncHootTimeout</code> property in the external globals file. We should set a global module somewhere for all to use </p><p><a href="https://github.com/nightwatchjs/nightwatch/blob/master/examples/globalsModule.js#L20" target="_blank" rel="noopener">globalModule</a></p><h2 id="2-6-Test-Env"><a href="#2-6-Test-Env" class="headerlink" title="2.6 Test Env"></a>2.6 Test Env</h2><ul><li>we could define multiple sections of test settings so you could overwrite specific values per env. </li></ul><pre><code>{  ...  &quot;test_settings&quot; : {    &quot;default&quot; : {      &quot;launch_url&quot; : &quot;http://localhost&quot;,      &quot;globals&quot; : {        &quot;myGlobalVar&quot; : &quot;some value&quot;,        &quot;otherGlobal&quot; : &quot;some other value&quot;      }    },    &quot;integration&quot; : {      &quot;launch_url&quot; : &quot;http://staging.host&quot;,      &quot;globals&quot; : {        &quot;myGlobalVar&quot; : &quot;other value&quot;      }    }  }}</code></pre><h2 id="2-7-Test-Groups"><a href="#2-7-Test-Groups" class="headerlink" title="2.7 Test Groups"></a>2.7 Test Groups</h2><ul><li>we could organize test into groups and run tem as needed.</li><li>just place them in sub-folders if you want to run them together.</li></ul><h2 id="2-8-Using-Page-Objects"><a href="#2-8-Using-Page-Objects" class="headerlink" title="2.8 Using Page Objects"></a>2.8 Using Page Objects</h2><ul><li>Wrap the pages or page fragments of a web app into objects. </li><li>Allow a software client to do anything and see anything that a human can be abstracting away the underlying html actions needed to access and manipulate the page </li><li>page objects are read from the folder specified in the <code>page_objects_path</code> configuration property</li></ul><h2 id="2-9-Define-Elements"><a href="#2-9-Define-Elements" class="headerlink" title="2.9 Define Elements"></a>2.9 Define Elements</h2><pre><code>module.exports = {  elements: {    searchBar: {      selector: &#39;input[type=text]&#39;    },    submit: {      selector: &#39;//[@name=&quot;q&quot;]&#39;,      locateStrategy: &#39;xpath&#39;    }  }};</code></pre><ul><li>allow you to refer to the element by its name with an “@” prefix, rather than selector</li></ul><h3 id="2-9-1-Element-Properties"><a href="#2-9-1-Element-Properties" class="headerlink" title="2.9.1 Element Properties"></a>2.9.1 Element Properties</h3><p>An element can be specified as an object with <code>selector</code> property</p><ul><li>selector  </li><li>localeStrategy  ‘css’</li><li>index <ul><li>used to target a specific element in a query that results in multiple elements returned</li></ul></li><li>abortOnFailure</li><li>timeout </li><li>retryInterval </li><li>suppressNotFoundErrors </li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://nightwatchjs.org/api/#expect-api" target="_blank" rel="noopener">https://nightwatchjs.org/api/#expect-api</a></li><li><a href="https://nightwatchjs.org/guide" target="_blank" rel="noopener">https://nightwatchjs.org/guide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> JavaScript </tag>
            
            <tag> NightWatch </tag>
            
            <tag> UI Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript Tutorial</title>
      <link href="/Typescript-Tutorial/"/>
      <url>/Typescript-Tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><ul><li>A typed superset of JavaScript that compiles to plain JavaScript</li><li>Pure object oriented with classes, interfaces </li><li>for application scale development </li><li>benefits<ul><li>provides the error checking feature </li><li>will compile the code and generate compilation errors </li><li>strong static typing </li><li>supports type definitions for existing JS libraries<ul><li>TS definition file (with <code>.d.ts</code> extension) provides definition for external JS libraries</li></ul></li></ul></li><li>components<ul><li>language <ul><li>comprises of <ul><li>syntax</li><li>keywords</li><li>type annotations</li></ul></li></ul></li><li>the typeScript Compiler <ul><li>The TypeScript Comiler converts the instructions written in TypeScript to its JavaScript equivalent </li></ul></li><li>the typeScript Language Service<ul><li>expose an additional layer around the core compiler pipeline that are editor-like applications</li><li>language service supports <ul><li>statement completions</li><li>signature help</li><li>code formatting and outlining</li><li>colorization </li></ul></li></ul></li></ul></li><li>declaration files <ul><li>declaration file <ul><li>interface to the components in the compiled javaScript</li><li>analogous to the header files </li></ul></li></ul></li></ul><h1 id="2-Basic-Syntax"><a href="#2-Basic-Syntax" class="headerlink" title="2. Basic Syntax"></a>2. Basic Syntax</h1><ul><li>composed of <ul><li>module </li><li>fucntions </li><li>variables</li><li>statements and expressions</li><li>comments</li></ul></li><li>tsc will translate ts file to js </li><li>ts and oop<ul><li>object <ul><li>state </li><li>behavior </li><li>identity </li></ul></li><li>class</li><li>method</li></ul></li></ul><pre><code>class Greeting {    greet():void {       console.log(&quot;Hello World!!!&quot;)    } } var obj = new Greeting(); obj.greet();</code></pre><h2 id="2-1-Types"><a href="#2-1-Types" class="headerlink" title="2.1 Types"></a>2.1 Types</h2><p>Represents the different types of values supported by the language, The type system checks the validity of the supplied values, before they are stored or manipulated by the program. </p><p>The type system further allows for <strong>richer code hinting</strong> and <strong>automated documentation</strong> too. </p><ul><li>any type<ul><li>super type of all types in TS </li><li>denotes a dynamic type </li><li>use the any type is equivalent to opting out of type checking for a variable </li></ul></li><li>built-in types<ul><li>Number <ul><li>double precision 64 bit floating point values </li></ul></li><li>String <ul><li>a sequence of Unicode characters </li></ul></li><li>Boolean <ul><li>logical values </li></ul></li><li>Void <ul><li>used on function return types to represent non-returning functions </li></ul></li><li>Null <ul><li>represents an intentional absense of an object value </li></ul></li><li>Undefined <ul><li>denotes value given to all uninitialized variables </li></ul></li></ul></li></ul><h2 id="2-2-Variables"><a href="#2-2-Variables" class="headerlink" title="2.2 Variables"></a>2.2 Variables</h2><ul><li>Variable - name space in the memory that stores values.</li><li>acts as a container for values in a program </li><li>use the <code>var</code> keyword to declare variables </li></ul><pre><code>var [identifier] : [type-annotation] = value;</code></pre><h3 id="2-2-1-Type-assertion"><a href="#2-2-1-Type-assertion" class="headerlink" title="2.2.1 Type assertion"></a>2.2.1 Type assertion</h3><ul><li>to change a variable from one type to another </li></ul><pre><code>var str = &#39;1&#39;;var str:number = &lt;number&gt; str;</code></pre><ul><li>if you doesn’t add type for variables, ts will determine the type of the variable on the basis of the value assigned to it</li></ul><h3 id="2-2-2-Variable-Scope"><a href="#2-2-2-Variable-Scope" class="headerlink" title="2.2.2 Variable Scope"></a>2.2.2 Variable Scope</h3><ul><li>global scope<ul><li>declare outside the programming constructs</li><li>can be accessed from anywhere within code</li></ul></li><li>class scope<ul><li>called fields </li><li>are declared within the class but outside the methods </li><li>can be accessed using the object of the class </li></ul></li></ul><pre><code>var global_num = 12          //global variable class Numbers {    num_val = 13;             //class variable    static sval = 10;         //static field    storeNum():void {       var local_num = 14;    //local variable    } } console.log(&quot;Global num: &quot;+global_num)  console.log(Numbers.sval)   //static variable  var obj = new Numbers(); console.log(&quot;Global num: &quot;+obj.num_val) </code></pre><h2 id="2-3-Operators"><a href="#2-3-Operators" class="headerlink" title="2.3 Operators"></a>2.3 Operators</h2><ul><li>Defines some function that will be performed on the data <ul><li>arithmetic operators </li><li>relational operators </li><li>logical operators </li><li>bitwise operators </li><li>assignment operators </li><li>type operators<ul><li>typeof <ul><li>return the type of variable</li></ul></li><li>instance of <ul><li>return the class of an object  </li></ul></li></ul></li></ul></li></ul><h2 id="2-4-Functions"><a href="#2-4-Functions" class="headerlink" title="2.4 Functions"></a>2.4 Functions</h2><ul><li>building blocks of readable, maintainable and reusable code </li><li>organize the program into logical blocks of code </li><li>function declaration tells the compiler about a function’s name, return type, and parameters </li></ul><h3 id="2-4-1-Optional-Parameters"><a href="#2-4-1-Optional-Parameters" class="headerlink" title="2.4.1 Optional Parameters"></a>2.4.1 Optional Parameters</h3><ul><li>Add a question mark to its name indicating as optional </li><li>should be set as the last argument in a function </li></ul><pre><code>function disp_details(id:number,name:string,mail_id?:string) {    console.log(&quot;ID:&quot;, id);    console.log(&quot;Name&quot;,name);    if(mail_id!=undefined)     console.log(&quot;Email Id&quot;,mail_id); }disp_details(123,&quot;John&quot;);disp_details(111,&quot;mary&quot;,&quot;mary@xyz.com&quot;);</code></pre><h3 id="2-4-2-Rest-Parameters"><a href="#2-4-2-Rest-Parameters" class="headerlink" title="2.4.2 Rest Parameters"></a>2.4.2 Rest Parameters</h3><ul><li>not restrict the number of values that you can pass to a function </li><li>values passed in mush be the same type </li><li>parameter is prefixed with three periods , non rest parameters should come before the rest parameter </li><li>a function can have at most one rest parameter </li></ul><pre><code>function addNumbers(...nums:number[]) {    var i;    var sum:number = 0;    for (i = 0; i &lt; nums.length; i++) {        sum += nums[i];    }    console.log(&quot;sum of numbers&quot;, sum);}</code></pre><h3 id="2-4-3-Default-Parameters"><a href="#2-4-3-Default-Parameters" class="headerlink" title="2.4.3 Default Parameters"></a>2.4.3 Default Parameters</h3><ul><li>you could assign paramters with default values  </li></ul><pre><code>function calculate_discount(price:number,rate:number = 0.50) {    var discount = price * rate;    console.log(&quot;Discount Amount: &quot;,discount); } calculate_discount(1000) calculate_discount(1000,0.30)</code></pre><h3 id="2-4-4-Function-Overloads"><a href="#2-4-4-Function-Overloads" class="headerlink" title="2.4.4 Function Overloads"></a>2.4.4 Function Overloads</h3><ul><li>have different data type </li><li>have different number of parameters </li></ul><pre><code>function disp(string):void; function disp(number):void;function disp(n1:number):void; function disp(x:number,y:number):void;function disp(n1:number,s1:string):void; function disp(s:string,n:number):void;</code></pre><h2 id="2-5-Numbers"><a href="#2-5-Numbers" class="headerlink" title="2.5 Numbers"></a>2.5 Numbers</h2><ul><li>Number class acts as a wrapper and enables manipulation of numeric literals as they are objects </li><li><code>var var_name = new Number(value)</code></li><li>property <ul><li>MAX_VALUE</li><li>MIN_VALUE</li><li>NaN</li><li>NEGATIVE_INFINITY</li><li>POSITIVE_INFINITY</li><li>prototype <ul><li>a static property of the Number object </li><li>use the prototype property to assign new properties and methods to the Number object in the current document </li></ul></li><li>constructor <ul><li>returns the function that created this object’s instance</li></ul></li></ul></li><li>method <ul><li>toExponential()</li><li>toFixed()<ul><li>formats a number with a specific number of digits to the right of the decimal </li></ul></li><li>toLocaleString()</li><li>toPrecision()</li><li>toString()</li><li>valueOf() </li></ul></li></ul><h2 id="2-6-Strings"><a href="#2-6-Strings" class="headerlink" title="2.6 Strings"></a>2.6 Strings</h2><ul><li>String objects lets you work with a series of characters.</li><li>Wraps the string primitive data type with a number of helper methods </li><li><code>var var_name = new String(string)</code></li><li>property <ul><li>constructor </li><li>length</li><li>prototype <ul><li>allow you to add properties and methods to an object </li></ul></li></ul></li><li>method<ul><li>charAt()</li><li>charCodeAt()</li><li>concat()</li><li>indexOf()</li><li>lastIndexOf()</li><li>localeCompare()</li><li>match()<ul><li>use to match a regular expression against a string </li></ul></li><li>replace()</li><li>search()</li><li>slice()</li><li>split()</li><li>substr()</li><li>substring()</li><li>toLocaleLowerCase()</li><li>toLocaleUpperCase()</li><li>toString()</li><li>toUpperCase()</li><li>valueOf()</li></ul></li></ul><h2 id="2-7-Arrays"><a href="#2-7-Arrays" class="headerlink" title="2.7 Arrays"></a>2.7 Arrays</h2><ul><li>array is a collection of values of the <strong>same</strong> data type </li><li>features <ul><li>allocates sequential memory blocks </li><li>arrays are static, once initialized cannot be resized </li><li>each memory block represents an array element </li><li>array elements are identified by a unique integer called as the subscript/ index of the element </li><li>should be declared before they are used with <code>var</code></li><li>array element values can be updated or modified but cannot be deleted </li></ul></li></ul><pre><code>var arr_name:number[] = [2,4,6];var arr_name:number[] = new Array(4);</code></pre><ul><li><p>methods</p><ul><li>concat() </li><li>every()<ul><li>return true if every element in this array satisfies the provided testing function </li></ul></li><li>filter()</li><li>forEach()</li><li>indexOf()</li><li>join()</li><li>lastIndexOf()</li><li>map()</li><li>pop()</li><li>push()</li><li>reduce()<ul><li>apply a function simultaneously against two values of the array as to reduce it to a single value - from left to right</li></ul></li><li>reduceRight()<ul><li>from right to left</li></ul></li><li>reverse()</li><li>shift()<ul><li>removes the first element from an array and returns the element </li></ul></li><li>slice()</li><li>some()<ul><li>Returns true if at least one element in this array satisfies the provided testing function </li></ul></li><li>sort()</li><li>splice()<ul><li>add or remove elements from an array </li></ul></li><li>toString()</li><li>unshift()<h2 id="2-8-Tuples"><a href="#2-8-Tuples" class="headerlink" title="2.8 Tuples"></a>2.8 Tuples</h2></li></ul></li><li><p>To store a collection of values of varied types </p></li><li><p>represents a heterogeneous collection of values </p></li></ul><pre><code>// accessing var tuple1 = [10, &quot;hello&quot;];</code></pre><h2 id="2-9-Union"><a href="#2-9-Union" class="headerlink" title="2.9 Union"></a>2.9 Union</h2><ul><li>Give program the ability to combine one or two types </li><li>Union can be used to express a value that can be one of the several types </li><li>two or more types are combined with <code>|</code></li></ul><h1 id="3-OOP-related"><a href="#3-OOP-related" class="headerlink" title="3. OOP related"></a>3. OOP related</h1><h2 id="3-1-Interfaces"><a href="#3-1-Interfaces" class="headerlink" title="3.1 Interfaces"></a>3.1 Interfaces</h2><p>An interface defines the syntex that any entity must adhere to.</p><ul><li>Interface define properties, methods and events</li><li>only contain the decalration of the members </li><li>responsibility of the deriving class to define the members </li></ul><pre><code>interface IPerson {    firstName:string,    lastName:string,    sayHi: ()=&gt;string } var customer:IPerson = {    firstName:&quot;Tom&quot;,   lastName:&quot;Hanks&quot;,    sayHi: ():string =&gt;{return &quot;Hi there&quot;} } console.log(&quot;Customer Object &quot;) console.log(customer.firstName) console.log(customer.lastName) console.log(customer.sayHi())  var employee:IPerson = {    firstName:&quot;Jim&quot;,   lastName:&quot;Blakes&quot;,    sayHi: ():string =&gt;{return &quot;Hello!!!&quot;} } console.log(&quot;Employee  Object &quot;) console.log(employee.firstName);console.log(employee.lastName);</code></pre><ul><li>An interface can be extended by other interfaces </li><li>an interface can inherit from other interface </li></ul><pre><code>interface Person {    age:number } interface Musician extends Person {    instrument:string } var drummer = &lt;Musician&gt;{}; drummer.age = 27 drummer.instrument = &quot;Drums&quot; console.log(&quot;Age:  &quot;+drummer.age) console.log(&quot;Instrument:  &quot;+drummer.instrument)</code></pre><h2 id="3-2-Classes"><a href="#3-2-Classes" class="headerlink" title="3.2 Classes"></a>3.2 Classes</h2><ul><li>Object oriented JavaScript </li><li>class can contain<ul><li>fields</li><li>constructors </li><li>functions </li></ul></li><li>class Inheritance <ul><li>create new class from an existing one </li><li>the class that is extended to create newer classes is called the parent class/ super class </li><li>child class inherit all properties and methods except private members and constructors from the parent class </li></ul></li><li>data hiding <ul><li>public </li><li>private <ul><li>only accessible within the class that defines these members  </li></ul></li><li>protected <ul><li>A protected data member is accessible by the members within the same class as that of the former and also by the members of the child classes.</li></ul></li></ul></li></ul><h2 id="3-3-Objects"><a href="#3-3-Objects" class="headerlink" title="3.3 Objects"></a>3.3 Objects</h2><ul><li>Object is an instance which contains set of key value pairs</li><li>the values can be scalar values or functions or even array of other objects </li></ul><h2 id="3-4-namespace"><a href="#3-4-namespace" class="headerlink" title="3.4 namespace"></a>3.4 namespace</h2><ul><li>a way to logically group related code </li><li>resolve the possibility of overwriting or miscontrucing the same variables </li></ul><pre><code>namespace SomeNameSpaceName {    export interface ISomeInterfaceName {      }     export class SomeClassName {      }  } </code></pre><ul><li>marked classes or interfaces with keyword export to indicate they should be accessed outside the namespace </li></ul><h2 id="3-5-Modules"><a href="#3-5-Modules" class="headerlink" title="3.5 Modules"></a>3.5 Modules</h2><p>Module is designed to organize code written in typeScript. Divided into Internal Modules and External Modules. </p><ul><li>Internal Modules<ul><li>logically group classes, interfaces, functions into one unit and can be exported in another module </li><li>now it names namespace in new version of ts</li></ul></li><li>External Module <ul><li>exist to specify and load dependencies between multiple external js files  </li></ul></li></ul><h3 id="3-5-1-Selecting-a-Module-Loader"><a href="#3-5-1-Selecting-a-Module-Loader" class="headerlink" title="3.5.1 Selecting a Module Loader"></a>3.5.1 Selecting a Module Loader</h3><ul><li>for browser <ul><li>RequireJS <ul><li>an implementation of AMD (asynchronous module definition) specification </li><li>AMD can load js files all separately </li></ul></li></ul></li></ul><h3 id="3-5-2-Defining-external-Module"><a href="#3-5-2-Defining-external-Module" class="headerlink" title="3.5.2 Defining external Module"></a>3.5.2 Defining external Module</h3><p>syntax for declaring an external module is using keyword export and import </p><h2 id="3-6-Ambient"><a href="#3-6-Ambient" class="headerlink" title="3.6 Ambient"></a>3.6 Ambient</h2><ul><li>tell the TS compiler that the actual source code exists elsewhere </li><li>kept in extension <code>d.ts</code></li><li>When you are consuming a bunch of third party js libraries like jquery/angularjs/nodejs you can’t rewrite it in TypeScript.</li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 教程 - part 3</title>
      <link href="/JavaScript-%E6%95%99%E7%A8%8B-part-3/"/>
      <url>/JavaScript-%E6%95%99%E7%A8%8B-part-3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-事件"><a href="#1-事件" class="headerlink" title="1. 事件"></a>1. 事件</h1><h2 id="1-1-EventTarget-接口"><a href="#1-1-EventTarget-接口" class="headerlink" title="1.1 EventTarget 接口"></a>1.1 EventTarget 接口</h2><p>事件本质是程序各个组成部分之间的一种通信方式。DOM的事件触发都定义在EventTarget接口当中，所有节点对象都部署了这个接口 </p><p>该接口主要提供了三个实例方法: </p><ul><li>addEventListener  绑定事件的监听函数</li><li>removeEventListener 移除事件的监听函数</li><li>dispatchEvent  触发事件</li></ul><h3 id="1-1-1-EventTarget-addEventListener"><a href="#1-1-1-EventTarget-addEventListener" class="headerlink" title="1.1.1 EventTarget.addEventListener()"></a>1.1.1 EventTarget.addEventListener()</h3><ul><li>用于在当前节点或对象上，定义一个特定的时间的监听函数，一旦这个事件发生，就会执行监听函数</li><li>没有返回值</li><li><code>target.addEventListener(type, listener, [useCapture])</code><ul><li>type 事件名称</li><li>listener  监听函数  事件发生，就调用这个监听函数</li><li>useCapture  表示监听函数是否在捕获阶段触发，默认为false (只在冒泡阶段被触发)<ul><li>捕获指的是事件从最外层开始发生，直到最具体的元素</li><li>冒泡指从最内层开始发生</li></ul></li><li>第三个参数 – 是个属性配置对象，即除了useCapture 你还可以配置很多其他属性的<ul><li>capture  是否在捕获阶段触发监听函数</li><li>once  是否只触发一次，然后就自动移除</li><li>passive  表示监听函数不会调用事件的preventDefault方法，如果监听函数调用了，浏览器就会忽略这个要求，并在监控台上输出一行警告</li></ul></li></ul></li></ul><pre><code>function hello() {  console.log(&#39;Hello world&#39;);}var button = document.getElementById(&#39;btn&#39;);button.addEventListener(&#39;click&#39;, hello, false);</code></pre><h3 id="1-1-2-EventTarget-removeEventListener"><a href="#1-1-2-EventTarget-removeEventListener" class="headerlink" title="1.1.2 EventTarget.removeEventListener()"></a>1.1.2 EventTarget.removeEventListener()</h3><p>用来移除addEventListener方法添加的事件监听函数，该方法没有返回值。</p><ul><li>removeEnventListener方法移除的监听函数必须是addEventListener方法已经添加过得，而且必须在同一个元素节点上，否则无效</li></ul><h3 id="1-1-3-EventTarget-dispatchEvent"><a href="#1-1-3-EventTarget-dispatchEvent" class="headerlink" title="1.1.3 EventTarget.dispatchEvent()"></a>1.1.3 EventTarget.dispatchEvent()</h3><ul><li>在当前节点触发指定事件，从而触发监听函数的执行  返回一个布尔值</li><li>只要有一个监听函数调用了<code>Event.preventDefault()</code>,返回值为false，否则为true</li></ul><pre><code>para.addEventListener(&#39;click&#39;, hello, false);var event = new Event(&#39;click&#39;);para.dispatchEvent(event);</code></pre><h2 id="1-2-事件模型"><a href="#1-2-事件模型" class="headerlink" title="1.2 事件模型"></a>1.2 事件模型</h2><p>这一部分想要解决的问题是JS作为使用事件驱动编程模式(event-driven)的编程语言，是怎么样给事件绑定监听函数的。</p><h3 id="1-2-1-绑定监听函数"><a href="#1-2-1-绑定监听函数" class="headerlink" title="1.2.1 绑定监听函数"></a>1.2.1 绑定监听函数</h3><h4 id="1-2-1-1-使用html-on属性"><a href="#1-2-1-1-使用html-on属性" class="headerlink" title="1.2.1.1 使用html on属性"></a>1.2.1.1 使用html on属性</h4><p>HTML允许在元素属性当中，直接定义某些事件的监听代码</p><pre><code>&lt;body onload=&quot;doSomething()&quot;&gt;</code></pre><ul><li>元素的监听属性，都是on加上事件名</li><li>属性的值为将要执行的代码，单单函数名是不被允许的</li><li>该种方式的监听代码，只会在<strong>冒泡阶段被触发</strong></li></ul><pre><code>// 先输出1 再输出2&lt;div onClick=&quot;console.log(2)&quot;&gt;  &lt;button onClick=&quot;console.log(1)&quot;&gt;点击&lt;/button&gt;&lt;/div&gt;</code></pre><h4 id="1-2-1-2-使用元素节点的事件属性"><a href="#1-2-1-2-使用元素节点的事件属性" class="headerlink" title="1.2.1.2 使用元素节点的事件属性"></a>1.2.1.2 使用元素节点的事件属性</h4><ul><li>也是只可以在冒泡阶段进行触发</li></ul><pre><code>window.onload = doSomething;div.onclick = function (event) {  console.log(&#39;触发事件&#39;);};</code></pre><h4 id="1-2-1-3-使用addEventListener"><a href="#1-2-1-3-使用addEventListener" class="headerlink" title="1.2.1.3 使用addEventListener()"></a>1.2.1.3 使用addEventListener()</h4><p>用来为该节点定义事件的监听函数</p><h3 id="1-2-2-事件的传播"><a href="#1-2-2-事件的传播" class="headerlink" title="1.2.2 事件的传播"></a>1.2.2 事件的传播</h3><p>事件发生后，会在子元素和父元素之间进行传播，分为以下几个阶段:</p><ol><li>从window对象传导到目标节点(上层传到底层)，成为捕获阶段(capture phase)</li><li>在目标节点上触发，称为目标阶段</li><li>从目标节点传导会window对象，称为冒泡阶段 - bubbling phase</li></ol><p>这种三阶段的传播模型，使得同一个事件会在多个节点上触发。</p><pre><code>&lt;div&gt;  &lt;p&gt;点击&lt;/p&gt;&lt;/div&gt;var phases = {  1: &#39;capture&#39;,  2: &#39;target&#39;,  3: &#39;bubble&#39;};var div = document.querySelector(&#39;div&#39;);var p = document.querySelector(&#39;p&#39;);div.addEventListener(&#39;click&#39;, callback, true);p.addEventListener(&#39;click&#39;, callback, true);div.addEventListener(&#39;click&#39;, callback, false);p.addEventListener(&#39;click&#39;, callback, false);function callback(event) {  var tag = event.currentTarget.tagName;  var phase = phases[event.eventPhase];  console.log(&quot;Tag: &#39;&quot; + tag + &quot;&#39;. EventPhase: &#39;&quot; + phase + &quot;&#39;&quot;);}// 点击以后的结果// Tag: &#39;DIV&#39;. EventPhase: &#39;capture&#39;// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;// Tag: &#39;DIV&#39;. EventPhase: &#39;bubble&#39;</code></pre><h3 id="1-2-3-事件的代理"><a href="#1-2-3-事件的代理" class="headerlink" title="1.2.3 事件的代理"></a>1.2.3 事件的代理</h3><p>因为事件会在冒泡阶段向上传播到父节点，因此可以将子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件的代理</p><pre><code>var ul = document.querySelector(&#39;ul&#39;);ul.addEventListener(&#39;click&#39;, function (event) {  if (event.target.tagName.toLowerCase() === &#39;li&#39;) {    // some code  }});</code></pre><p>上面代码中，click事件的监听函数定义在<code>&lt;ul&gt;</code>节点，但是实际上，它处理的是子节点<code>&lt;li&gt;</code>的click事件。这样做的好处是，只要定义一个监听函数，就能处理多个子节点的事件，而不用在每个<code>&lt;li&gt;</code>节点上定义监听函数。而且以后再添加子节点，监听函数依然有效。</p><p>另外，我们可以使用<code>stopPorpagation</code>方法来使事件传播到某个节点就停下来，不再传播</p><pre><code>// stopPropagation不会停止在同一个element上的其他事件的执行p.addEventListener(&#39;click&#39;, function (event) {  event.stopPropagation();  console.log(1);});p.addEventListener(&#39;click&#39;, function(event) {  // 会触发  console.log(2);});</code></pre><ul><li>如果我们想不触发同一个element上的其他监听函数，可以使用<code>stopImmediatePropogation()</code>方法</li></ul><h2 id="1-3-事件对象"><a href="#1-3-事件对象" class="headerlink" title="1.3 事件对象"></a>1.3 事件对象</h2><p>事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有事件都是这个对象的实例，即继承了Event.prototype</p><ul><li>Event构造函数: <code>event = new Event(type, option);</code><ul><li>type 一个字符串，表示事件的名称</li><li>options 一个对象，表示事件对象的配置<ul><li>bubbles  boolean  <ul><li>default to false</li><li>表示对象是否冒泡</li></ul></li><li>cancelable boolean <ul><li>default to false</li><li>表示事情能否被取消，即能否用event.preventDefault()取消这个时间</li></ul></li></ul></li></ul></li></ul><h3 id="1-3-1-实例属性"><a href="#1-3-1-实例属性" class="headerlink" title="1.3.1 实例属性"></a>1.3.1 实例属性</h3><ul><li>Event.bubbles <ul><li>boolean</li><li>表示当前事件是否会冒泡</li><li>只读属性，用于了解Event实例是否可以冒泡</li></ul></li><li>Event.eventPhase <ul><li>返回当前事件所处的阶段，该属性只读<ul><li>0 还没有发生</li><li>1 捕获阶段  处于从祖先节点向目标节点的传播过程当中</li><li>2 事件到达目标节点</li><li>3 事件处于冒泡阶段</li></ul></li></ul></li><li>Event.currentTarget<ul><li>正在通过的节点</li></ul></li><li>Event.target <ul><li>事件的原始触发节点</li></ul></li><li>Event.timeStamp</li><li>Event.isTrusted<ul><li>表示该事件是否由一个真实的用户行为产生</li></ul></li><li>Event.detail<ul><li>只有浏览器的UI事件才具有</li><li>返回一个数值表示事件的某种信息</li><li>具体含义与事件类型相关<ul><li>点击 次数</li><li>鼠标滚轮 距离</li></ul></li></ul></li></ul><h3 id="1-3-2-实例方法"><a href="#1-3-2-实例方法" class="headerlink" title="1.3.2 实例方法"></a>1.3.2 实例方法</h3><ul><li>event.preventDefault()<ul><li>取消浏览器对当前事件的默认行为</li><li>生效的前提是事件对象的cancelable属性为true</li></ul></li></ul><pre><code>// HTML 代码为// &lt;input type=&quot;text&quot; id=&quot;my-input&quot; /&gt;// 实现只接受小写的功能var input = document.getElementById(&#39;my-input&#39;);input.addEventListener(&#39;keypress&#39;, checkName, false);function checkName(e) {  if (e.charCode &lt; 97 || e.charCode &gt; 122) {    e.preventDefault();  }}</code></pre><ul><li>event.stopPropagation()<ul><li>阻止事件在DOM中继续传播，防止再触发定义在别的节点上的监听函数，但是不包括在当前节点上其他的事件监听函数</li></ul></li><li>event.stopImmediatePropogation()<ul><li>阻止同一个事件的其他监听函数被调用</li><li>更彻底的阻止事件的传播</li></ul></li><li>event.composedPath() <ul><li>返回一个数组</li><li>成员是事件的最底层节点和依次冒泡经过的所有上层节点</li></ul></li></ul><pre><code>// HTML 代码如下// &lt;div&gt;//   &lt;p&gt;Hello&lt;/p&gt;// &lt;/div&gt;var div = document.querySelector(&#39;div&#39;);var p = document.querySelector(&#39;p&#39;);div.addEventListener(&#39;click&#39;, function (e) {  console.log(e.composedPath());}, false);// [p, div, body, html, document, Window]</code></pre><h2 id="1-4-各类事件的描述"><a href="#1-4-各类事件的描述" class="headerlink" title="1.4 各类事件的描述"></a>1.4 各类事件的描述</h2><h3 id="1-4-1-鼠标事件"><a href="#1-4-1-鼠标事件" class="headerlink" title="1.4.1 鼠标事件"></a>1.4.1 <a href="https://wangdoc.com/javascript/events/mouse.html" target="_blank" rel="noopener">鼠标事件</a></h3><ul><li>继承MouseEvent接口<ul><li>click<ul><li>mouseDown + mouseUp </li></ul></li><li>dblclick 在用一个元素上双击鼠标时触发<ul><li>mouseDown + mouseUp + click  </li></ul></li><li>mousedown 按下鼠标键时触发</li><li>mouseup 释放按下的鼠标键的时候触发</li><li>mousemove <ul><li>当鼠标在一个结点内部移动的时候触发</li><li>当鼠标持续移动时，就会持续触发</li><li>应当对该事件的监听函数做一些限定，比如一定时间内只能运行一次</li></ul></li><li>mouseenter <ul><li>进入一个节点时触发</li></ul></li><li>mouseover<ul><li>鼠标进入一个节点时触发，进入子节点会再一次触发这个事件</li></ul></li><li>mouseout<ul><li>鼠标离开一个节点的时候触发，离开父节点也会触发</li></ul></li><li>mouseleave<ul><li>鼠标离开一个节点时触发，离开父节点不会触发这个事件 </li></ul></li><li>contextmenu<ul><li>按下鼠标右键时触发的</li></ul></li><li>wheel<ul><li>滚动鼠标的滚轮时触发的，该事件继承的是WheelEvent接口 </li></ul></li></ul></li><li>mouseEvent<ul><li>浏览器提供一个MouseEvent构造函数，用于新建一个MouseEvent实例</li><li><code>var event = new MouseEvent(type, options);</code></li><li>第一个参数为字符串，表示事件名称</li><li>第二个参数是一个事件配置对象，可以配一些不同的属性<ul><li>screenX</li><li>screenY</li><li>clientX<ul><li>相对于程序窗口的水平位置</li></ul></li><li>clientY<ul><li>相对于程序窗口的垂直位置</li></ul></li><li>ctrlKey</li><li>shiftKey</li><li>altKey</li><li>metaKey </li><li>button <ul><li>0 按下主键</li><li>1 按下辅助键</li><li>2 按下次要键</li></ul></li><li>buttons</li></ul></li></ul></li></ul><h3 id="1-4-2-键盘事件"><a href="#1-4-2-键盘事件" class="headerlink" title="1.4.2 键盘事件"></a>1.4.2 键盘事件</h3><ul><li><p>键盘事件的种类</p><ul><li><p>keydown</p><ul><li>按下键盘的时候触发</li></ul></li><li><p>keypress</p><ul><li>按下有值的键再触发，即按下Ctrl, Alt, Shift, Meta这样的无值的键不会触发 </li><li>对于有值的键，还是会先触发keydown事件，再触发这个事件</li></ul></li><li><p>keyup</p><ul><li>松开键盘的时候触发该事件</li><li>如果一直不松开按键，那么就会连续触发键盘事件<ul><li>触发顺序：<ul><li>keydown</li><li>keypress</li><li>keydown</li><li>keypress</li><li>….</li><li>放开 -&gt; keyup</li></ul></li></ul></li></ul></li></ul></li><li><p>KeyboardEvent 接口概述</p><ul><li>描述用户与键盘的互动</li><li>继承了Event接口，并且定义了自己的实例属性和实例方法</li><li>浏览器原生提供KeyboardEvent构造函数，用来新建键盘事件的实例</li><li><code>new KeyboardEvent(type, options)</code></li><li>第一个参数为字符串，表示事件类型</li><li>第二个参数为一个事件配置对象，参数可选<ul><li>key</li><li>code<ul><li>0-9   digital0-digital9</li><li>A-Z   KeyA - KeyZ</li><li>F1 - F12</li><li>方向键<ul><li>ArrowDown</li><li>ArrowUp</li><li>ArrowLeft</li><li>ArrowRight</li></ul></li><li>Alt<ul><li>AltLeft/ AltRight</li><li>similar to shift, ctrl</li></ul></li></ul></li><li>location<ul><li>返回键盘的区域 </li></ul></li><li>ctrlKey</li><li>shiftKey</li><li>altKey</li><li>metaKey</li><li>repeat <ul><li>看该案件是否被按着不放，以便判断是否重复这个键</li></ul></li></ul></li></ul></li><li><p>KeyboardEvent实例方法</p><ul><li>getModifierState() <ul><li>返回一个布尔值，表示是否按下或激活指定的功能键<ul><li>alt</li><li>capslock</li><li>control</li><li>meta</li><li>numlock</li><li>shift</li></ul></li></ul></li></ul></li></ul><h3 id="1-4-3-进度事件"><a href="#1-4-3-进度事件" class="headerlink" title="1.4.3 进度事件"></a>1.4.3 进度事件</h3><p>用来描述资源加载的进度，主要由:</p><ul><li>AJAX请求</li><li><code>&lt;img&gt;</code></li><li><code>&lt;audio&gt;</code></li><li><code>&lt;video&gt;</code></li><li><code>&lt;style&gt;</code></li><li><code>&lt;link&gt;</code></li></ul><p>该类外部资源的加载触发，继承了ProgressEvent接口。主要包含以下几种事件：</p><ul><li>abort  外部资源中止加载时被触发</li><li>error  由于错误导致外部资源无法加载时触发</li><li>load   外部资源加载成功时触发</li><li>loadstart  外部资源开始加载时触发</li><li>loadend  外部资源停止加载时触发</li><li>progress  外部资源加载过程中不断触发</li><li>timeout  加载超时时触发</li></ul><ul><li><p>ProgressEvent接口</p><ul><li>用来描述外部资源加载的进度</li><li><code>new ProgressEvent(type, options)</code><ul><li>types 事件类型</li><li>options - 配置对象<ul><li>lengthComputable 布尔值，表示加载的总量是否可以计算，默认为false</li><li>loaded 表示已经加载的量</li><li>total 表示需要加载的量<h3 id="1-4-4-表单事件"><a href="#1-4-4-表单事件" class="headerlink" title="1.4.4 表单事件"></a>1.4.4 表单事件</h3></li></ul></li></ul></li></ul></li><li><p>表单事件的种类</p><ul><li>input<ul><li>当<code>&lt;input&gt;, &lt;select&gt;, &lt;textarea&gt;</code>的值发生变化时触发</li><li>input事件会连续触发，每按下一个键，都会触发一次input事件的</li></ul></li><li>select<ul><li>是在<code>&lt;input&gt; &lt;select&gt; &lt;textarea&gt;</code>里面的值发生变化的时候触发 </li></ul></li><li>change<ul><li>在元素失去焦点时发生</li><li>即当有连续变化的时候，input事件会被触发很多次，而change事件只在失去焦点的时候被触发一次。</li><li>换个角度看，input事件是一定伴随着change事件的，具体分为以下几种情况<ul><li>激活单选框或复选框时触发</li><li>用户提交时触发</li><li>当文本框或textarea元素的值发生改变，并且失去焦点的时候触发</li></ul></li></ul></li><li>invalid<ul><li>用户提交表单，当表单元素的值不满足校验条件，就会触发invalid事件 </li></ul></li><li>reset<ul><li>发生在表单对象上</li><li>表示表单重置时锁触发的事件</li></ul></li><li>submit<ul><li>当表单数据向服务器提交时触发</li></ul></li></ul></li><li><p>inputEvent接口</p><ul><li><code>new InputEvent(type, options)</code></li><li>type 字符串，表示事件名称</li><li>options 配置对象<ul><li>inputType</li><li>data  表示插入的字符串</li><li>dataTransfer </li></ul></li></ul></li></ul><h3 id="1-4-5-触摸事件"><a href="#1-4-5-触摸事件" class="headerlink" title="1.4.5 触摸事件"></a>1.4.5 触摸事件</h3><ul><li><p>触摸操作</p><ul><li>touch  一个触摸点<ul><li>位置</li><li>大小</li><li>形状</li><li>压力</li><li>目标元素</li></ul></li><li>touchList  多个触摸点的集合<ul><li>成员为Touch的实例对象</li><li>属性<ul><li>length  表示触摸点的数量</li><li>item() 返回指定的成员</li></ul></li></ul></li><li>touchEvent  触摸引发的事件实例</li></ul></li><li><p>Touch 接口概述</p><ul><li><code>var touch = new Touch(touchOptions)</code> </li><li>touchOptions<ul><li>identifier <ul><li>触摸点的唯一ID</li></ul></li><li>target</li><li>clientX</li><li>clientY</li><li>screenX</li><li>screenY</li><li>pageX</li><li>pageY</li><li>radiusX </li><li>radiusY</li><li>rotationAngle</li><li>force <ul><li>0 -1 范围</li><li>表示触摸压力</li></ul></li></ul></li></ul></li><li><p>触摸事件的种类</p><ul><li>touchstart</li><li>touchend</li><li>touchmove</li><li>touchcancel <h3 id="1-4-6-拖拉事件"><a href="#1-4-6-拖拉事件" class="headerlink" title="1.4.6 拖拉事件"></a>1.4.6 拖拉事件</h3></li></ul></li><li><p>拖拉定义</p><ul><li>用户在某个对象上按下鼠标键不放，拖动它到另一个位置，然后释放鼠标键，将该对象放在那里</li></ul></li><li><p>拖拉的对象</p><ul><li>元素节点</li><li>图片</li><li>链接</li><li>选中的文字</li></ul></li></ul><h3 id="1-4-7-其他常见事件"><a href="#1-4-7-其他常见事件" class="headerlink" title="1.4.7 其他常见事件"></a>1.4.7 其他常见事件</h3><ul><li>资源事件<ul><li>beforeunload <ul><li>在窗口，文档，各种资源将要卸载前触发</li><li>用于防止用户不小心卸载资源</li></ul></li><li>unload<ul><li>在窗口关闭或者document对象将要卸载时触发</li><li>触发顺序排在beforeunload, pagehide事件后面</li></ul></li><li>load<ul><li>在页面或者某个资源加载成功时触发</li><li>页面或者资源从浏览器缓存加载，并不会触发load事件</li></ul></li></ul></li><li>session历史事件<ul><li>pageshow<ul><li>页面加载时触发，如果要指定页面每次加载时都运行的打字吗，可以放在这个事件的监听函数当中 </li></ul></li><li>pagehide</li><li>popstate<ul><li>在浏览器的history对象的当前记录发生显式切换时触发</li></ul></li><li>hashchange<ul><li>URL的hash部分发生变化的时候触发 </li></ul></li></ul></li><li>网页状态事件 <ul><li>DOMContentLoaded 事件<ul><li>网页下载并解析完成以后在document对象上触发该事件  </li></ul></li></ul></li><li>窗口事件<ul><li>scroll <ul><li>用户拖动滚动条</li></ul></li><li>resize</li><li>fullscreenchange</li><li>fullscreenerror </li></ul></li><li>焦点事件<ul><li>focus 获得焦点以后触发</li><li>blur  失去焦点以后触发</li><li>focusin  将要获得焦点时触发</li><li>focusout 将要失去焦点时触发</li></ul></li></ul><h1 id="2-浏览器模型"><a href="#2-浏览器模型" class="headerlink" title="2. 浏览器模型"></a>2. 浏览器模型</h1><p>主要来介绍浏览器提供的各种JS接口</p><h2 id="2-1-浏览器环境概述"><a href="#2-1-浏览器环境概述" class="headerlink" title="2.1 浏览器环境概述"></a>2.1 浏览器环境概述</h2><ul><li>代码嵌入网页方法<ul><li><script> 直接嵌入代码  + type属性  用来指定脚本类型      + text/javascript      + application/javascript</li><li><script> 标签加载外部脚本  + 为了防止攻击者篡改外部脚本，script标签允许设置一个`integrity`属性，写入外部脚本的Hash签名，用来验证脚本的一致性 </li><li>事件属性<ul><li>网页元素的事件  比如onclick  onmouseover 可以写入JS代码 </li></ul></li><li>URL协议<ul><li>在URL的位置写入代码，使用这个URL的时候就会执行JS代码了 </li></ul></li></ul></li></ul><pre><code>&lt;script src=&quot;/assets/application.js&quot;  integrity=&quot;sha256-TvVUHzSfftWg1rcfL6TIJ0XKEGrgLyEq6lEpcmrG9qs=&quot;&gt;&lt;/script&gt;&lt;a href=&quot;javascript:console.log(&#39;Hello&#39;)&quot;&gt;点击&lt;/a&gt;</code></pre><h3 id="2-1-1-script工作原理"><a href="#2-1-1-script工作原理" class="headerlink" title="2.1.1 script工作原理"></a>2.1.1 script工作原理</h3><ul><li>网页加载流程<ul><li>浏览器一边下载HTML网页，一边开始解析 </li><li>当发现<code>&lt;script&gt;</code>元素的时候，就暂停解析，将网页渲染的控制权交给JavaScript引擎</li><li>如果<code>&lt;script&gt;</code>元素引用了外部脚本，就下载该脚本再执行，否则就直接执行代码</li><li>JS引擎执行完毕，控制权交还给渲染引擎，恢复往下解析HTML网页</li></ul></li><li>为什么加载脚本的时候会停止页面渲染？<ul><li>因为JS代码可以修改DOM，所以需要将DOM控制权给它，否则会出现线程竞争的问题</li><li>问题点在于如果外部脚本加载时间非常长，那么浏览器会一直等待脚本下载完成，造成网页长时间失去响应，浏览器就会呈现出假死状态，称为阻塞效应。</li><li>因为相对较好的做法是将Script标签放在页面底部，这样即使遇到脚本失去响应，网页主体的渲染已经完成，用户就可以看到内容的。</li></ul></li><li>脚本是有执行顺序的<ul><li>执行顺序由在页面中出现的顺序决定，为了保证脚本之间的依赖关系不受到破坏</li><li>加载脚本都会产生阻塞效应，需要等他们都加载完成浏览器才能继续页面渲染</li></ul></li><li>此外，对于来自<strong>同一个域名的资源</strong>，比如脚本文件、样式表文件、图片文件等，浏览器一般有限制，同时最多下载6～20个资源，即最多同时打开的 TCP 连接有限制，这是为了防止对服务器造成太大压力。如果是来自不同域名的资源，就没有这个限制。所以，通常把静态文件放在不同的域名之下，以加快下载速度。<h3 id="2-1-2-defer属性"><a href="#2-1-2-defer属性" class="headerlink" title="2.1.2 defer属性"></a>2.1.2 defer属性</h3></li><li>为了解决脚本文件下载阻塞网页渲染的问题</li><li>在<code>&lt;script&gt;</code>当中加入defer属性，作用是延迟脚本的执行，等到DOM加载生成后，再执行脚本 </li><li>运行流程<ul><li>浏览器开始解析HTML网页</li><li>发现带有defer属性的script标签</li><li>继续往下解析HTML网页，并且并行下载script元素加载外部脚本</li><li>完成解析HTML网页，回头再执行已经下载了的脚本</li></ul></li></ul><h3 id="2-1-3-async属性"><a href="#2-1-3-async属性" class="headerlink" title="2.1.3 async属性"></a>2.1.3 async属性</h3><p>async属性的作用在于使用另一个进程下载脚本，下载时不会阻塞渲染</p><ul><li>浏览器开始解析HTML网页</li><li>解析过程中，发现带有async属性的script标签</li><li>继续向下解析，同时并行下载script标签当中的外部脚本</li><li>脚本下载完成，浏览器暂停解析HTML网页，开始执行下载的脚本</li><li>脚本执行完毕，浏览器恢复解析HTML网页</li></ul><p>aync属性可以保证脚本下载的同时，浏览器继续渲染。  注意: 一旦采用，脚本执行顺序就无法确定了</p><h3 id="2-1-4-脚本动态加载"><a href="#2-1-4-脚本动态加载" class="headerlink" title="2.1.4 脚本动态加载"></a>2.1.4 脚本动态加载</h3><p>script元素可以动态生成，再插入页面，从而实现脚本的动态加载。</p><pre><code>[&#39;a.js&#39;, &#39;b.js&#39;].forEach(function(src) {  var script = document.createElement(&#39;script&#39;);  script.src = src;  document.head.appendChild(script);});</code></pre><p>动态生成的script标签不会阻塞页面渲染，也就不会造成浏览器假死。但是问题在于，这种方法无法保证脚本的执行顺序，哪个脚本文件先下载完成，就先执行哪个</p><ul><li><p>另外我们可以指定我们需要加载的协议，可以使用HTTP或者HTTPS。默认是HTTP的，如果想使用HTTPS，需要做指定 – <code>&lt;script src=&quot;https://example.js&quot;&gt;&lt;/script&gt;</code></p><h3 id="2-1-5-浏览器组成"><a href="#2-1-5-浏览器组成" class="headerlink" title="2.1.5 浏览器组成"></a>2.1.5 浏览器组成</h3></li><li><p>渲染引擎</p><ul><li>将网页代码渲染为用户视觉可以感知的平面文档</li><li>渲染的步骤<ul><li>解析代码<ul><li>将HTML代码解析为DOM，CSS解析为CSSOM (CSS Object Model)</li></ul></li><li>对象合成<ul><li>将DOM和CSSOM合成一棵渲染树 (render tree)</li></ul></li><li>布局<ul><li>计算出渲染树的布局</li></ul></li><li>绘制<ul><li>将渲染树绘制到屏幕上</li></ul></li></ul></li></ul></li><li><p>重流 vs 重绘</p><ul><li>重流必然导致重绘</li><li>重绘不一定导致重流</li><li>尽量减少重流</li><li>优化技巧<ul><li>DOM尽量写在一起，不要读取一个节点就写入一个</li><li>缓存DOM信息</li><li>动画使用absolute定位或者fixed定位，可以减少对其他元素的影响</li><li>只有必要时才显示隐藏元素</li></ul></li></ul></li><li><p>JavaScript解释器</p><ul><li>读取网页中的JS代码，处理后运行</li><li>js不需要编译，由解释器实时运行  这样的好处是运行和修改都比较方便，刷新页面就可以重新解释；缺点是每次运行都要调用解释器，系统开销较大，运行速度慢于编译型语言</li><li>为加快速度，浏览器一般会进行预编译，生成类似字节码的中间代码</li><li>即时编译  Just in time 编译器直接把源码编译成机器码来运行 <ul><li>字节码只在运行时编译，用到哪一行就编译哪一行，然后把编译结果缓存 </li></ul></li></ul></li></ul><h2 id="2-2-Window对象"><a href="#2-2-Window对象" class="headerlink" title="2.2 Window对象"></a>2.2 Window对象</h2><h3 id="2-2-1-属性"><a href="#2-2-1-属性" class="headerlink" title="2.2.1 属性"></a>2.2.1 属性</h3><p>window指当前的浏览器窗口，是当前页面的顶层对象，所有的其他对象都是其下属。如果一个变量未声明，那么默认就是顶层对象的属性。</p><pre><code>a = 1;window.a // 1</code></pre><ul><li><p>window.name  </p><ul><li>表示当前窗口的名字</li></ul></li><li><p>window.closed </p><ul><li>检查当前窗口是否关闭</li></ul></li><li><p>window.opener </p><ul><li>表示打开当前窗口的父窗口 </li></ul></li><li><p>window.window   window.window</p><ul><li>指向窗口本身，这两个属性都只读</li></ul></li><li><p>window.frames  window,length </p><ul><li>frames返回一个类似数组的对象，成员为页面内所有框架窗口</li></ul></li><li><p>window.screenX window.screenY</p></li><li><p>window.innerHeight  window.innerWidth </p><ul><li>可见部分的高度宽度</li></ul></li><li><p>window.outerHeight  window.outerWidth </p></li><li><p>window.scrollX  window.scrollY</p></li><li><p>组件属性</p><ul><li>window.locationbar  地址栏对象</li><li>window.menubar  菜单栏对象</li><li>window.scrollbars 窗口的滚动条对象</li><li>window.toolbar 工具栏对象</li><li>window.statusbar 状态栏对象</li><li>window.personalbar 个人安装的工具栏对象</li></ul></li><li><p>全局对象属性</p><ul><li>document </li><li>location </li><li>navigator </li><li>history</li><li>localStorage </li><li>sessionStorage </li><li>console </li><li>screen </li></ul></li><li><p>常用方法</p><ul><li><p>window.open(url, windowName, [windowFeatures])</p><ul><li>打开一个新的浏览器窗口</li></ul></li><li><p>window.close()</p></li><li><p>window.stop()</p><ul><li>相当于点击浏览器的停止按钮，会停止加载图像等正在加载的对象</li></ul></li><li><p>window.focus()  获得焦点</p></li><li><p>window.blur()  失去焦点</p></li><li><p>window.getSelection()   表示用户现在选中的文本</p><p>var popup = window.open(<br>‘somepage.html’,<br>‘DefinitionsWindows’,<br>‘height=200,width=200,location=no,status=yes,resizable=yes,scrollbars=yes’<br>);</p></li></ul></li><li><p>事件</p><ul><li>load onload</li><li>error  onerror </li></ul></li></ul><h2 id="2-3-Navigator对象"><a href="#2-3-Navigator对象" class="headerlink" title="2.3 Navigator对象"></a>2.3 Navigator对象</h2><p><a href="https://wangdoc.com/javascript/bom/navigator.html" target="_blank" rel="noopener">https://wangdoc.com/javascript/bom/navigator.html</a></p><h2 id="2-4-Cookie对象"><a href="#2-4-Cookie对象" class="headerlink" title="2.4 Cookie对象"></a>2.4 Cookie对象</h2><h3 id="2-4-1-概述"><a href="#2-4-1-概述" class="headerlink" title="2.4.1 概述"></a>2.4.1 概述</h3><p>Cookie是服务器保存在浏览器的一小段文本信息，浏览器每次向服务器发出请求的时候，就会自动附上这段信息</p><ul><li>用途<ul><li>session 对话管理，保存登录，购物车等等需要记录的信息</li><li>个性化信息  用户偏好等</li><li>追踪用户  记录和分析用户的行为</li></ul></li><li>元数据<ul><li>cookie名字</li><li>cookie值</li><li>到期时间</li><li>所属域名</li><li>生效路径<h2 id="2-5-Location对象"><a href="#2-5-Location对象" class="headerlink" title="2.5 Location对象"></a>2.5 Location对象</h2></li></ul></li></ul><h3 id="2-5-1-Location对象"><a href="#2-5-1-Location对象" class="headerlink" title="2.5.1 Location对象"></a>2.5.1 Location对象</h3><ul><li><code>window.location</code> or <code>document.location</code>去拿到这个对象</li><li>属性<ul><li>Location.href  整个URL</li><li>Location.protocol  当前URL的协议，包括冒号</li><li>Location.host 主机  </li><li>Location.hostname  主机  不包括端口号</li><li>Location.port  端口号</li><li>Location.pathname  URL的路径部分，从根目录的<code>/</code>开始</li><li>Location.search  查询字符串部分，从问号?开始</li><li>Location.hash 片段字符串部分  从#开始</li><li>Location.username </li><li>Location.password </li><li>Location.origin  URL的协议，主机名和端口</li></ul></li></ul><pre><code>// 当前网址为// http://user:passwd@www.example.com:4097/path/a.html?x=111#part1document.location.href// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;document.location.protocol// &quot;http:&quot;document.location.host// &quot;www.example.com:4097&quot;document.location.hostname// &quot;www.example.com&quot;document.location.port// &quot;4097&quot;document.location.pathname// &quot;/path/a.html&quot;document.location.search// &quot;?x=111&quot;document.location.hash// &quot;#part1&quot;document.location.username// &quot;user&quot;document.location.password// &quot;passwd&quot;document.location.origin// &quot;http://user:passwd@www.example.com:4097&quot;</code></pre><p>Location.href属性是浏览器唯一允许跨域写入的属性，即非同源的窗口可以改写另一个窗口的location.href属性，导致后者的网址跳转。location的其他属性都不允许跨域写入的。</p><h3 id="2-5-2-方法"><a href="#2-5-2-方法" class="headerlink" title="2.5.2 方法"></a>2.5.2 方法</h3><ul><li>location.assgin() <ul><li>接受一个URL字符串作为参数，使得浏览器立刻跳转到新的URL。如果参数不是有效的URL，则会报错</li></ul></li><li>location.replace()<ul><li>接受一个URL字符串作为参数，使得浏览器立刻跳转到新的URL</li><li>与assign的不同在于会在浏览历史里删除掉当前网址</li><li>一个应用在于当脚本发现当前是移动设备时，就立刻跳转到移动版网页当中</li></ul></li><li>location.reload()<ul><li>一个布尔值的参数</li><li>true - 向服务器重新请求这个网页，重新加载后，网页将滚动到头部</li><li>false - 从本地缓存重新加载该页面，并且重新加载后，网页的位置是重新加载前的位置</li></ul></li><li>location.toString()<ul><li>返回整个URL字符串 </li></ul></li></ul><h3 id="2-5-3-URL的编码和解码"><a href="#2-5-3-URL的编码和解码" class="headerlink" title="2.5.3 URL的编码和解码"></a>2.5.3 URL的编码和解码</h3><p>除去URL元字符和语义字符以外的其他字符是需要转义的，比如中文都需要进行转义，转义的时候在每个字节前面都会加上百分号，这就构成了URL的编码/解码语法。</p><ul><li>encodeURI()<ul><li>转码整个URL </li><li>参数为一个字符串，代表整个URL </li><li>会将元字符和语义字符之外的字符都进行转义</li></ul></li><li>encodeURIComponent()<ul><li>用于转码URL的组成部分，会转码除了语义字符之外的所有字符，即元字符也会被转码</li></ul></li><li>decodeURI()<ul><li>解码整个URL </li></ul></li><li>decodeURIComponent()<ul><li>解码片段</li></ul></li></ul><pre><code>encodeURI(&#39;http://www.example.com/q=春节&#39;)// &quot;http://www.example.com/q=%E6%98%A5%E8%8A%82&quot;encodeURIComponent(&#39;春节&#39;)// &quot;%E6%98%A5%E8%8A%82&quot;encodeURIComponent(&#39;http://www.example.com/q=春节&#39;)// &quot;http%3A%2F%2Fwww.example.com%2Fq%3D%E6%98%A5%E8%8A%82&quot;decodeURI(&#39;http://www.example.com/q=%E6%98%A5%E8%8A%82&#39;)// &quot;http://www.example.com/q=春节&quot;decodeURIComponent(&#39;%E6%98%A5%E8%8A%82&#39;)// &quot;春节&quot;</code></pre><h3 id="2-5-4-接口"><a href="#2-5-4-接口" class="headerlink" title="2.5.4 接口"></a>2.5.4 接口</h3><ul><li><code>var url = new URL(&#39;http://www.example.com/index.html&#39;);</code></li><li>接受两个参数，第一个参数表示相对路径，第二个参数表示绝对路径</li></ul><pre><code>var url1 = new URL(&#39;index.html&#39;, &#39;http://example.com&#39;);url1.href// &quot;http://example.com/index.html&quot;var url2 = new URL(&#39;page2.html&#39;, &#39;http://example.com/page1.html&#39;);url2.href// &quot;http://example.com/page2.html&quot;var url3 = new URL(&#39;..&#39;, &#39;http://example.com/a/b.html&#39;)url3.href// &quot;http://example.com/&quot;</code></pre><ul><li>方法<ul><li>url.createObjectURL() <ul><li>用来为上传下载文件，流媒体文件生成一个URL字符串。这个字符串代表了FIle对象或Blob对象的URL</li></ul></li><li>url.revokeObjectURL() </li></ul></li></ul><h3 id="2-5-5-URLSearchParams对象"><a href="#2-5-5-URLSearchParams对象" class="headerlink" title="2.5.5 URLSearchParams对象"></a>2.5.5 URLSearchParams对象</h3><ul><li>用来构造，解析，处理URL的查询字符串 </li></ul><pre><code>var params = new URLSearchParams(&#39;?foo=1&amp;bar=2&#39;);// 等同于var params = new URLSearchParams(document.location.search);// 方法二：传入数组var params = new URLSearchParams([[&#39;foo&#39;, 1], [&#39;bar&#39;, 2]]);// 方法三：传入对象var params = new URLSearchParams({&#39;foo&#39; : 1 , &#39;bar&#39; : 2});</code></pre><h2 id="2-6-Blob对象"><a href="#2-6-Blob对象" class="headerlink" title="2.6 Blob对象"></a>2.6 Blob对象</h2><p>ArrayBuffer对象表示一段二进制数据，用来模拟内存里的数据</p><p>Blob对象表示一个二进制文件的数据内容，- Binary Large Object.Blob用于操作二进制文件。</p><ul><li>Blob构造函数<ul><li><code>new Blob(array [, options])</code></li><li>第一个参数 数组 成员是字符串或二进制对象，表示新生成的Blob实例对象的内容</li><li>第二个参数  配置对象<ul><li>type 表示数据的MIME类型，默认是空字符串</li></ul></li></ul></li></ul><pre><code>var htmlFragment = [&#39;&lt;a id=&quot;a&quot;&gt;&lt;b id=&quot;b&quot;&gt;hey!&lt;/b&gt;&lt;/a&gt;&#39;];var myBlob = new Blob(htmlFragment, {type : &#39;text/html&#39;});var obj = { hello: &#39;world&#39; };var blob = new Blob([ JSON.stringify(obj) ], {type : &#39;application/json&#39;});</code></pre><h3 id="2-6-1-实例对象和实例方法"><a href="#2-6-1-实例对象和实例方法" class="headerlink" title="2.6.1 实例对象和实例方法"></a>2.6.1 实例对象和实例方法</h3><ul><li>size<ul><li>数据大小</li></ul></li><li>type<ul><li>数据类型<ul><li>text/html </li></ul></li></ul></li><li>slice(start, end, contentType)<ul><li>用来拷贝原来的数据，返回的也是一个Blob实例 </li><li>起始的字节位置，结束的字节位置，新实例的数据类型</li></ul></li></ul><h3 id="2-6-2-获取文件信息"><a href="#2-6-2-获取文件信息" class="headerlink" title="2.6.2 获取文件信息"></a>2.6.2 获取文件信息</h3><ul><li>文件选择器 <code>&lt;input type=&quot;file&quot;&gt;</code>用来让用户选取文件</li><li>出于安全考虑，浏览器不允许脚本自行设置其value属性，必须手动选取</li><li>文件选择器返回一个FileList对象，每个成员都是一个File实例对象。其为一个特殊的Blob实例，增加了name和lastModifiedDate属性。</li></ul><h3 id="2-6-3-下载文件"><a href="#2-6-3-下载文件" class="headerlink" title="2.6.3 下载文件"></a>2.6.3 下载文件</h3><p>AJAX 请求时，如果指定responseType属性为blob，下载下来的就是一个 Blob 对象。</p><pre><code>function getBlob(url, callback) {  var xhr = new XMLHttpRequest();  xhr.open(&#39;GET&#39;, url);  xhr.responseType = &#39;blob&#39;;  xhr.onload = function () {    callback(xhr.response);  }  xhr.send(null);}</code></pre><h3 id="2-6-4-生成URL"><a href="#2-6-4-生成URL" class="headerlink" title="2.6.4 生成URL"></a>2.6.4 生成URL</h3><ul><li>可以通过使用<code>URL.createObjectURL()</code>方法，针对Blob对象生成一个临时URL，以便于某些API使用</li><li>URL以<code>Blob://</code>开头，表明对应一个Blob对象，协议头后面是一个识别符，用来唯一对应内存的Blob对象</li></ul><pre><code>var droptarget = document.getElementById(&#39;droptarget&#39;);droptarget.ondrop = function (e) {  var files = e.dataTransfer.files;  for (var i = 0; i &lt; files.length; i++) {    var type = files[i].type;    if (type.substring(0,6) !== &#39;image/&#39;)      continue;    var img = document.createElement(&#39;img&#39;);    img.src = URL.createObjectURL(files[i]);    img.onload = function () {      this.width = 100;      document.body.appendChild(this);      URL.revokeObjectURL(this.src);    }  }}</code></pre><p>该段代码通过为拖放的图片文件生成一个URL，产生他们的缩略图，从而使得用户可以预览选择的文件。</p><h3 id="2-6-5-读取文件"><a href="#2-6-5-读取文件" class="headerlink" title="2.6.5 读取文件"></a>2.6.5 读取文件</h3><p>获取Blob对象以后，通过FileReader对象，读取Blob对象的内容。Blob对象作为参数传入FilreReader提供的处理方法当中，然后以指定的格式返回</p><ul><li>FileReader.readAsText()   返回文本，需要指定文本编码</li><li>FileReader.readAsArrayBuffer()   返回ArrayBuffer对象</li><li>FileReader.readAsDataURL()  返回Data URL</li><li>FileReader.readAsBinaryString()  返回原始的二进制字符串</li></ul><h2 id="2-7-表单-FormData对象"><a href="#2-7-表单-FormData对象" class="headerlink" title="2.7 表单 FormData对象"></a>2.7 表单 FormData对象</h2><h3 id="2-7-1-General"><a href="#2-7-1-General" class="headerlink" title="2.7.1 General"></a>2.7.1 General</h3><p>表单对象用来收集用户提交的数据，发送到服务器。</p><pre><code>&lt;form action=&quot;/handling-page&quot; method=&quot;post&quot;&gt;  &lt;div&gt;    &lt;label for=&quot;name&quot;&gt;用户名：&lt;/label&gt;    &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;user_name&quot; /&gt;  &lt;/div&gt;  &lt;div&gt;    &lt;label for=&quot;passwd&quot;&gt;密码：&lt;/label&gt;    &lt;input type=&quot;password&quot; id=&quot;passwd&quot; name=&quot;user_passwd&quot; /&gt;  &lt;/div&gt;  &lt;div&gt;    &lt;input type=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit_button&quot; value=&quot;提交&quot; /&gt;  &lt;/div&gt;&lt;/form&gt;</code></pre><p>键值对会提高到服务器当中，提交的数据格式跟form元素的method属性有关，该属性指定了提交数据的HTTP方法。如果是GET方法，所有键值对会以URL的查询字符串形式，提交到服务器当中。</p><p>如果是post请求，所有键值对会连接成一行，作为HTTP请求的数据体发送到服务器</p><pre><code>GET /handling-page?user_name=张三&amp;user_passwd=123&amp;submit_button=提交Host: example.comPOST /handling-page HTTP/1.1Host: example.comContent-Type: application/x-www-form-urlencodedContent-Length: 74user_name=张三&amp;user_passwd=123&amp;submit_button=提交</code></pre><p>注意如果提交的时候，如果键值不是URL的合法字符，浏览器就会自动对其进行编码。</p><p>点击submit控件就可以提交表单了。</p><h3 id="2-7-2-FormData对象"><a href="#2-7-2-FormData对象" class="headerlink" title="2.7.2 FormData对象"></a>2.7.2 FormData对象</h3><p>通过脚本完成对于表单键值对的构建，然后通过<code>XMLHttpRequest.send()</code>方式来进行发送，浏览器原生提供了FormData对象来完成这项工作。</p><ul><li>FormData() 构造函数的参数是一个表单元素，这个参数是可选的，如果省略参数，就表示一个空的表单，否则就会处理表单元素里面的键值对。</li></ul><pre><code>&lt;form id=&quot;myForm&quot; name=&quot;myForm&quot;&gt;  &lt;div&gt;    &lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt;    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;  &lt;/div&gt;  &lt;div&gt;    &lt;label for=&quot;useracc&quot;&gt;账号：&lt;/label&gt;    &lt;input type=&quot;text&quot; id=&quot;useracc&quot; name=&quot;useracc&quot;&gt;  &lt;/div&gt;  &lt;div&gt;    &lt;label for=&quot;userfile&quot;&gt;上传文件：&lt;/label&gt;    &lt;input type=&quot;file&quot; id=&quot;userfile&quot; name=&quot;userfile&quot;&gt;  &lt;/div&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit!&quot;&gt;&lt;/form&gt;var myForm = document.getElementById(&#39;myForm&#39;);var formData = new FormData(myForm);// 获取某个控件的值formData.get(&#39;username&#39;) // &quot;&quot;// 设置某个控件的值formData.set(&#39;username&#39;, &#39;张三&#39;);formData.get(&#39;username&#39;) // &quot;张三&quot;</code></pre><ul><li>FormData.get(key)</li><li>FormData.getAll(key)</li><li>FormData.set(key, value)</li><li>FormData.delete(key)</li><li>FormData.append(key, value)</li><li>FormData.has(key)</li><li>FormData.keys()  </li><li>FormData.values()</li><li>FormData.entries() </li></ul><h3 id="2-7-3-表单的内置验证"><a href="#2-7-3-表单的内置验证" class="headerlink" title="2.7.3 表单的内置验证"></a>2.7.3 表单的内置验证</h3><ul><li>自动校验<ul><li>可以在表单提交的时候指定一些条件，来自动验证各个表单控件的值是否符合条件</li></ul></li></ul><pre><code>&lt;!-- 必填 --&gt;&lt;input required&gt;&lt;!-- 必须符合正则表达式 --&gt;&lt;input pattern=&quot;banana|cherry&quot;&gt;&lt;!-- 字符串长度必须为6个字符 --&gt;&lt;input minlength=&quot;6&quot; maxlength=&quot;6&quot;&gt;&lt;!-- 数值必须在1到10之间 --&gt;&lt;input type=&quot;number&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;&lt;!-- 必须填入 Email 地址 --&gt;&lt;input type=&quot;email&quot;&gt;&lt;!-- 必须填入 URL --&gt;&lt;input type=&quot;URL&quot;&gt;// 通过CSS伪类来控制整个input:invalid {  border-color: red;}input,input:valid {  border-color: #ccc;}</code></pre><ul><li>checkValidity() <ul><li>用于手动触发表单的校验</li><li>表单元素和表单控件都有checkValidity()方法，用于手动触发校验</li></ul></li></ul><pre><code>function submitForm(action) {  var form = document.getElementById(&#39;form&#39;);  form.action = action;  if (form.checkValidity()) {    form.submit();  }}</code></pre><ul><li>validationMessage 属性<ul><li>返回一个字符串，表示控件不满足校验条件时，浏览器显示的提示文本</li></ul></li></ul><pre><code>var myInput = document.getElementById(&#39;myinput&#39;);if (!myInput.checkValidity()) {  document.getElementById(&#39;prompt&#39;).innerHTML = myInput.validationMessage;}</code></pre><ul><li><p>validity属性</p><ul><li>返回一个validityState对象，包含当前校验状态的信息</li><li>属性<ul><li>validityState.badInput</li><li>validityState.customError </li><li>validityState.patternMismatch</li><li>validityState.rangeOverflow </li><li>validityState.rangeUnderflow </li><li>validityState.stepMismatch </li><li>validityState.tooLong</li><li>validityState.tooShort </li><li>validityState.typeMismatch </li><li>validityState.valid</li><li>valitityState.valueMising </li></ul></li></ul></li><li><p>表单novalide属性</p><ul><li>可以关闭浏览器的自动校验</li></ul></li></ul><h3 id="2-7-4-enctype属性"><a href="#2-7-4-enctype属性" class="headerlink" title="2.7.4 enctype属性"></a>2.7.4 enctype属性</h3><ul><li>GET - URL查询字符串<ul><li>enctype属性无效 </li></ul></li><li>POST - <code>application/x-www-form-yrlencoded</code><ul><li>当省略enctype属性的时候，数据会以默认的<code>application/x-www-form-urlencoded</code>格式进行发送 </li></ul></li><li>POST - <code>text/plain</code></li></ul><pre><code>&lt;form  action=&quot;register.php&quot;  method=&quot;post&quot;  enctype=&quot;text/plain&quot;  onsubmit=&quot;AJAXSubmit(this); return false;&quot;&gt;&lt;/form&gt;</code></pre><ul><li>POST - <code>multipart/form-data</code><ul><li>数据以混合的方式来发送出去</li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://wangdoc.com/javascript/events/index.html" target="_blank" rel="noopener">https://wangdoc.com/javascript/events/index.html</a> </li><li><a href="https://segmentfault.com/a/1190000008227026" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008227026</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 教程 - part 2</title>
      <link href="/JavaScript-%E6%95%99%E7%A8%8B-part-2/"/>
      <url>/JavaScript-%E6%95%99%E7%A8%8B-part-2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-面向对象编程"><a href="#1-面向对象编程" class="headerlink" title="1. 面向对象编程"></a>1. 面向对象编程</h1><h2 id="1-1-实例对象与New命令"><a href="#1-1-实例对象与New命令" class="headerlink" title="1.1 实例对象与New命令"></a>1.1 实例对象与New命令</h2><ul><li><p>对象</p><ul><li>对世界各种复杂关系的抽象</li><li>是一个容器，封装了属性和方法</li></ul></li><li><p>构造函数</p><ul><li>java c++是通过类的概念来作为对象的模板，而对象就是类的实例</li><li>而在js当中，对象体系是基于构造函数和原型链的<h3 id="1-1-1-构造函数"><a href="#1-1-1-构造函数" class="headerlink" title="1.1.1 构造函数"></a>1.1.1 构造函数</h3>构造函数是用来专门生成实例对象的函数，它就是对象的模板，描述了对象的基本结构。</li></ul></li><li><p>构造函数的特点：</p><ul><li>函数体内部使用<strong>this关键字</strong>，代表了所要生成的对象实例</li><li>生成对象的时候，必须使用new命令</li></ul></li></ul><pre><code>var Vehicle = function () {  this.price = 1000;};</code></pre><h3 id="1-1-2-New"><a href="#1-1-2-New" class="headerlink" title="1.1.2 New"></a>1.1.2 New</h3><ul><li>new命令的作用就是执行构造函数返回一个实例对象</li><li>new指令执行的时候，构造函数内部的this就代表了新生成的实例对象</li><li>new指令的原理<ul><li>构建一个空对象，作为要返回的对象的实例</li><li>将这个空对象的原型，指向构造函数的prototype属性</li><li>将这个空对象赋值给函数内部的this关键字</li><li>开始执行构造函数内部的代码</li></ul></li></ul><pre><code>var Vehicle = function () {  this.price = 1000;};var v = new Vehicle();v.price // 1000</code></pre><ul><li>new.target<ul><li>使用new.target关键字</li><li>如果当前函数式new命令调用的，指向当前函数，否则为undefined</li></ul></li><li><code>Object.create()</code>创建实例对象<ul><li>构造函数作为模板，可以生成实例对象。但是，有时拿不到构造函数，只能拿到一个现有的对象。我们希望以这个现有的对象作为模板，生成新的实例对象，这时就可以使用Object.create()方法。</li></ul></li></ul><pre><code>var person1 = {  name: &#39;张三&#39;,  age: 38,  greeting: function() {    console.log(&#39;Hi! I\&#39;m &#39; + this.name + &#39;.&#39;);  }};var person2 = Object.create(person1);person2.name // 张三person2.greeting() // Hi! I&#39;m 张三.</code></pre><h2 id="1-2-this关键字"><a href="#1-2-this关键字" class="headerlink" title="1.2 this关键字"></a>1.2 this关键字</h2><p>this是属性或者方法当前所在的对象。</p><p>对象的属性可以赋给另外一个对象，所以属性所在的当前对象是可变的，this的指向是可变的</p><pre><code>function f() {  return &#39;姓名：&#39;+ this.name;}var A = {  name: &#39;张三&#39;,  describe: f};var B = {  name: &#39;李四&#39;,  describe: f};A.describe() // &quot;姓名：张三&quot;B.describe() // &quot;姓名：李四&quot;&lt;input type=&quot;text&quot; name=&quot;age&quot; size=3 onChange=&quot;validate(this, 18, 99);&quot;&gt;&lt;script&gt;function validate(obj, lowval, hival){  if ((obj.value &lt; lowval) || (obj.value &gt; hival))    console.log(&#39;Invalid Value!&#39;);}&lt;/script&gt;</code></pre><ul><li>JS当中一切都是对象，运行环境也是对象，所以函数总归是在某个对象之中运行的，this就是函数运行时所在的对象</li><li>this为的是在函数体内可以获得函数的当前运行环境的相关信息</li></ul><h3 id="1-2-1-this实质"><a href="#1-2-1-this实质" class="headerlink" title="1.2.1 this实质"></a>1.2.1 this实质</h3><ul><li>首先需要看我们是如何在内存当中进行数据存储的<ul><li><code>var obj = { foo: 5}</code>;<ul><li>将一个对象赋值给变量obj</li><li>JS引擎会先在内存里面生成一个对象</li><li>将这个对象的内存地址赋值给变量obj</li><li>—-&gt; 变量obj是一个地址 reference。后面如果要读取obj.foo， 引擎先从obj拿到内存地址，然后再从该地址读出原始对象，返回其foo属性</li></ul></li><li>原始的对象以字典结构存储，每一个属性名都对应一个属性描述对象<ul><li>如果对象的属性是一个函数的话</li><li>JS引擎会将函数单独保存在内存当中，然后将函数的地址赋值给foo的value属性</li><li>因为<strong>函数是一个单独的值，所以它可以在不同的上下文去执行</strong></li></ul></li><li>this的想法，或者说目的就是在函数体内部，指代函数当前的运行环境</li></ul></li></ul><pre><code>// 对象的实际保存形式{  foo: {    [[value]]: 5    [[writable]]: true    [[enumerable]]: true    [[configurable]]: true  }}var f = function () {    console.log(this.x);}</code></pre><h3 id="1-2-2-使用场合"><a href="#1-2-2-使用场合" class="headerlink" title="1.2.2 使用场合"></a>1.2.2 使用场合</h3><ul><li>全局环境<ul><li>指顶层对象window</li></ul></li><li>构造函数<ul><li>指实例对象 </li><li>在构造函数当中使用this，定义了属性，那就意味着定义了实例对象有一个p属性</li></ul></li></ul><pre><code>// this指实例对象，这个时候为实例对象定义了p属性var Obj = function(p) {    this.p = p;};</code></pre><ul><li>对象方法<ul><li>this指向是方法运行时所在的对象，该方法赋值给另一个对象，就会改变this的指向</li><li>这是因为obj.foo就是一个值，这个值真正调用的时候，运行环境已经不是obj了，而是全局环境，所以this不再指向obj</li></ul></li></ul><pre><code>// 指向objvar obj ={  foo: function () {    console.log(this);  }};obj.foo() // obj// 以下情况都会改变this的指向// 情况一(obj.foo = obj.foo)() // window// 情况二(false || obj.foo)() // window// 情况三(1, obj.foo)() // window</code></pre><h3 id="1-2-3-Tips"><a href="#1-2-3-Tips" class="headerlink" title="1.2.3 Tips"></a>1.2.3 Tips</h3><ul><li>避免多层this<ul><li>因为this的指向是不确定的，所以不应该在函数当中包含多层的this</li><li>如果是多层的话，可以在第二层增加一个指向外层this的变量来做</li></ul></li></ul><pre><code>var o = {  f1: function () {    console.log(this);    var f2 = function () {      console.log(this);    }();  }}o.f1()// Object// Windowvar o = {  f1: function() {    console.log(this);    var that = this;    var f2 = function() {      console.log(that);    }();  }}o.f1()// Object// Object</code></pre><ul><li>数组处理方法当中的this<ul><li>还是需要使用中间变量来固定住this </li></ul></li></ul><h3 id="1-2-4-绑定this的方法"><a href="#1-2-4-绑定this的方法" class="headerlink" title="1.2.4 绑定this的方法"></a>1.2.4 绑定this的方法</h3><p>this的动态切换，可以为JS提供灵活性，但也使得编程变得困难和模糊，因此我们需要将this固定下来，避免出现意想不到的情况。JS提供了call, apply, bind三个方法，来切换和固定this的指向</p><ul><li><code>Function.prototype.call()</code><ul><li>call方法可以指定函数内部的this的指向，(函数执行时所在的作用域)，然后在所指定的作用域当中，调用该函数</li><li>call可以接受多个参数 <code>func.call(thisValue, arg1, arg2)</code> </li><li>第一个参数是this所要指向的那个对象，后面的参数则是函数调用时所需的参数</li></ul></li></ul><pre><code>var obj = {};var f = function () {  return this;};f() === window // true// call可以带个对象，然后这个时候就将this的指向固定下来了f.call(obj) === obj // true</code></pre><ul><li><code>Function.prototype.apply()</code><ul><li>apply接收一个数组作为函数执行时的参数，其他和call函数是一致的</li><li><code>func.apply(thisValue, [arg1, arg2, ...])</code></li></ul></li></ul><pre><code>function f(x, y){  console.log(x + y);}f.call(null, 1, 1) // 2f.apply(null, [1, 1]) // 2</code></pre><ul><li><code>Function.prototype.bind()</code><ul><li>bind方法用于将函数体内的this绑定到某个对象，然后返回一个新函数</li><li>bind方法每次都会返回一个新函数</li></ul></li></ul><pre><code>// 上面代码中，bind方法将getTime方法内部的this绑定到d对象，这时就可以安全地将这个方法赋值给其他变量了。var d = new Date();d.getTime() // 1481869925657var print = d.getTime;print() // Uncaught TypeError: this is not a Date object.var print = d.getTime.bind(d);print() // 1481869925657</code></pre><h2 id="1-3-对象的继承"><a href="#1-3-对象的继承" class="headerlink" title="1.3 对象的继承"></a>1.3 对象的继承</h2><p>A对象通过继承B对象，就能直接拥有B对象的所有属性和方法，这对于代码的复用很有帮助。JavaScript通过原型对象(prototype)来实现继承关系。</p><p>注意ES6当中引入了class语法，可以做基于class的继承了</p><h3 id="1-3-1-原型对象概述"><a href="#1-3-1-原型对象概述" class="headerlink" title="1.3.1 原型对象概述"></a>1.3.1 原型对象概述</h3><ul><li><p>构造函数</p><ul><li><p>JS通过构造函数生成新对象，因此构造函数可以视为对象的模板</p></li><li><p>实例对象的属性和方法定义在构造函数的内部</p></li><li><p>属性实际上是定义在了实例对象上的，但是同一个构造函数的多个实例之间，无法共享属性，从而造成了资源的浪费</p></li><li><p>JavaScript使用原型对象来解决这个问题  – prototype </p><ul><li>其作用就是定义所有实例对象共享的属性和方法 </li></ul><p>function Cat (name, color) {<br>this.name = name;<br>this.color = color;<br>}</p><p>var cat1 = new Cat(‘大毛’, ‘白色’);</p><p>cat1.name // ‘大毛’<br>cat1.color // ‘白色’</p></li></ul></li><li><p>prototype属性的作用</p><ul><li>原型对象的所有属性和方法都能被实例对象共享</li><li>如果属性和方法定义在原型上，那么所有实例对象都能共享<ul><li>节省内存</li><li>体现实例对象之间的联系</li></ul></li><li>原型对象的属性不是实例对象自身的属性，只要修改原型对象，变动就立刻会体现在所有实例对象上</li><li>当实例对象没有某个属性或者方法的时候，会与原型对象上去找，如果有，就用自己的</li></ul></li></ul><pre><code>function Animal(name) {  this.name = name;}Animal.prototype.color = &#39;white&#39;;var cat1 = new Animal(&#39;大毛&#39;);var cat2 = new Animal(&#39;二毛&#39;);cat1.color // &#39;white&#39;cat2.color // &#39;white&#39;cat1.color = &#39;black&#39;;cat1.color // &#39;black&#39;</code></pre><ul><li>原型链<ul><li>JS规定所有对象都有自己的原型对象(prototype)</li><li>一层层回溯，所有对象的原型最终上溯到Object.prototype,即Object构造函数的prototype属性</li><li>而Object.prototype的原型是null</li><li>读取对象的某个属性时，先寻找对象本身的属性，如果找不到，就去原型找，如果还是找不到，就去原型的原型，一层层溯源。一直没有就返回undefined</li><li>如果对象自身和它的原型<strong>都定义了同名属性，那么优先读取对象自身的属性</strong>， – overriding </li></ul></li></ul><pre><code>var MyArray = function () {};MyArray.prototype = new Array();MyArray.prototype.constructor = MyArray;// mine是MyArray的一个实例对象，由于MyArray.protutype指向一个数组实例，使得mine可以调用数组方法var mine = new MyArray();mine.push(1, 2, 3);mine.length // 3mine instanceof Array // true</code></pre><ul><li><p>constructor属性</p><ul><li>prototype对象的constructor属性，默认指向prototype对象所在的构造函数</li><li>constructor属性的作用是可以得知某个是力度向，到底是哪一个构造函数产生的</li></ul></li><li><p>instanceof运算符</p><ul><li>返回一个布尔值，表示对象是否为某个构造函数的实例 </li></ul></li><li><p>构造函数的继承</p><ul><li>让一个构造函数继承另一个构造函数<ul><li>在子类的构造函数当中，调用父类的构造函数</li><li>让子类的原型指向父类的原型，使得子类继承父类的原型</li></ul></li></ul></li></ul><pre><code>// Sub是构造函数，this是子类的实例// 子类上调用父类的构造函数super，使得子类实例具有父类实例的属性function Sub(value) {  Super.call(this);  this.prop = value;}// 让子类的原型指向父类的原型，使得子类继承父类的原型// 使用Object.create是为了不对父类原型造成修改Sub.prototype = Object.create(Super.prototype);Sub.prototype.constructor = Sub;Sub.prototype.method = &#39;...&#39;;</code></pre><p>一个继承的实例:</p><pre><code>function Shape() {  this.x = 0;  this.y = 0;}Shape.prototype.move = function (x, y) {  this.x += x;  this.y += y;  console.info(&#39;Shape moved.&#39;);};// 第一步，子类继承父类的实例function Rectangle() {  Shape.call(this); // 调用父类构造函数}// 另一种写法function Rectangle() {  this.base = Shape;  this.base();}// 第二步，子类继承父类的原型Rectangle.prototype = Object.create(Shape.prototype);Rectangle.prototype.constructor = Rectangle;</code></pre><h2 id="1-4-Object对象的相关方法"><a href="#1-4-Object对象的相关方法" class="headerlink" title="1.4 Object对象的相关方法"></a>1.4 Object对象的相关方法</h2><ul><li>Object.getPrototypeOf()<ul><li>返回参数对象的原型</li></ul></li></ul><pre><code>// 空对象的原型是 Object.prototypeObject.getPrototypeOf({}) === Object.prototype // true// Object.prototype 的原型是 nullObject.getPrototypeOf(Object.prototype) === null // true// 函数的原型是 Function.prototypefunction f() {}Object.getPrototypeOf(f) === Function.prototype // true</code></pre><ul><li>Object.setPrototypeOf() <ul><li>为参数对象设置原型，返回该参数的对象</li><li>第一个参数为现有对象，第二个为原型对象</li></ul></li></ul><pre><code>var a = {};var b = {x: 1};Object.setPrototypeOf(a, b);Object.getPrototypeOf(a) === b // truea.x // 1</code></pre><ul><li>Object.create()<ul><li>接受一个对象作为参数，然后以它为原型，返回一个实例对象。该实例完全继承原型对象的属性</li></ul></li><li>Object.prototype.<strong>proto</strong><ul><li>实例对象的该属性，返回该对象的原型 </li></ul></li></ul><h2 id="1-5-严格模式"><a href="#1-5-严格模式" class="headerlink" title="1.5 严格模式"></a>1.5 严格模式</h2><p>该种模式采用更加严格的JavaScript语法</p><ul><li>明确机制不合理，不严谨的语法</li><li>增加更多的报错场合，消除代码运行的不安全之处，保证代码的运行安全</li><li>提高编译器效率，增加运行速度</li></ul><p>开启的话，使用<code>use strict</code></p><ul><li>use strict放在脚本的第一行，整个脚本都将以严格模式来运行，如果不在第一行就无效，会以正常模式运行</li><li>显式报错<ul><li>只读属性不可写</li><li>只设置了getter的不可写</li></ul></li><li>安全措施<ul><li>全局变量显式声明</li><li>禁止this关键字指向全局对象</li></ul></li></ul><h1 id="2-异步操作"><a href="#2-异步操作" class="headerlink" title="2. 异步操作"></a>2. 异步操作</h1><h2 id="2-1-General"><a href="#2-1-General" class="headerlink" title="2.1 General"></a>2.1 General</h2><h3 id="2-1-1-单线程模型"><a href="#2-1-1-单线程模型" class="headerlink" title="2.1.1 单线程模型"></a>2.1.1 单线程模型</h3><p>JS只在一个线程上运行的  单个脚本只能在一个线程上运行，其他线程都是在后台配合的</p><p>好吃执行简单，坏处就是慢，只要一个任务耗时很长，那么后面的任务就都需要排队等着，会拖延整个程序的执行。</p><p>JS本身不慢，慢的是读写外部数据，等待Ajax请求返回结果。这个时候如果对方服务器一直没有反应，或者网络不通畅，就会导致脚本的长时间停滞。</p><p>因为很多时候慢在IO操作，而CPU实际上是处于闲置状态的，因此CPU这个时候完全可以不管IO操作，挂起处于等待中的任务，先运行排在后面的任务，等到IO操作返回结果，再回头将挂起的任务继续执行下去</p><h3 id="2-1-2-同步任务与异步任务"><a href="#2-1-2-同步任务与异步任务" class="headerlink" title="2.1.2 同步任务与异步任务"></a>2.1.2 同步任务与异步任务</h3><ul><li>同步任务<ul><li>没有被引擎挂起，在主线程上排队执行的任务</li><li>只有前一个任务执行完毕，后一个任务才能开始执行</li></ul></li><li>异步任务<ul><li>被引擎放在一边，不进入主线程，而进入任务队列的任务</li><li>只有引擎认为某个异步任务可以执行了，该任务才会进入主线程执行</li><li>排在异步任务后面的代码。不用等待异步任务结束会马上运行，也就是说，异步任务不具有堵塞效应</li></ul></li></ul><h3 id="2-1-3-任务队列和事件循环"><a href="#2-1-3-任务队列和事件循环" class="headerlink" title="2.1.3 任务队列和事件循环"></a>2.1.3 任务队列和事件循环</h3><ul><li>任务队列<ul><li>存储需要当前程序处理的异步任务</li><li>主线程会执行所有的同步任务，等到同步任务执行完以后，就会去看任务队列里面的异步任务</li><li>如果满足条件，异步任务就重新进入主线程进行执行，此时变成了同步任务了</li><li>异步任务的写法即回调函数</li></ul></li><li>事件循环<ul><li>主线程来看异步任务是否有结果的方式</li><li>就是不断检查，去看挂起来的任务们有没有结果了</li></ul></li></ul><h1 id="2-1-4-异步操作的模式"><a href="#2-1-4-异步操作的模式" class="headerlink" title="2.1.4 异步操作的模式"></a>2.1.4 异步操作的模式</h1><ul><li>回调函数</li></ul><pre><code>function f1(callback) {  // ...  callback();}function f2() {  // ...}f1(f2);</code></pre><ul><li>事件监听<ul><li>异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生</li></ul></li></ul><pre><code>f1.on(&#39;done&#39;, f2);function f1() {  setTimeout(function () {    // ...    f1.trigger(&#39;done&#39;);  }, 1000);}</code></pre><ul><li>发布订阅<ul><li>某个任务执行完成，向信号中心发布一个信号</li><li>其他任务向信号中心订阅这个信号，来知道什么时候自己可以开始执行</li></ul></li></ul><pre><code>jQuery.subscribe(&#39;done&#39;, f2);function f1() {  setTimeout(function () {    // ...    jQuery.publish(&#39;done&#39;);  }, 1000);}</code></pre><h3 id="2-1-5-异步操作的流程控制"><a href="#2-1-5-异步操作的流程控制" class="headerlink" title="2.1.5 异步操作的流程控制"></a>2.1.5 异步操作的流程控制</h3><ul><li>串行执行</li></ul><pre><code>var items = [ 1, 2, 3, 4, 5, 6 ];var results = [];function async(arg, callback) {  console.log(&#39;参数为 &#39; + arg +&#39; , 1秒后返回结果&#39;);  setTimeout(function () { callback(arg * 2); }, 1000);}function final(value) {  console.log(&#39;完成: &#39;, value);}function series(item) {  if(item) {    async( item, function(result) {      results.push(result);      return series(items.shift());    });  } else {    return final(results[results.length - 1]);  }}series(items.shift());</code></pre><ul><li>并行执行<ul><li>并行会快，但是如果并行任务太多，很容易耗尽系统的资源，拖慢运行速度 </li></ul></li></ul><pre><code>var items = [ 1, 2, 3, 4, 5, 6 ];var results = [];function async(arg, callback) {  console.log(&#39;参数为 &#39; + arg +&#39; , 1秒后返回结果&#39;);  setTimeout(function () { callback(arg * 2); }, 1000);}function final(value) {  console.log(&#39;完成: &#39;, value);}items.forEach(function(item) {  async(item, function(result){    results.push(result);    if(results.length === items.length) {      final(results[results.length - 1]);    }  })});</code></pre><ul><li>并行与串行相结合!!!!!<ul><li>设置一个门槛，每次最多只能并行执行n个异步任务</li></ul></li></ul><pre><code>var items = [ 1, 2, 3, 4, 5, 6 ];var results = [];var running = 0;var limit = 2;function async(arg, callback) {  console.log(&#39;参数为 &#39; + arg +&#39; , 1秒后返回结果&#39;);  setTimeout(function () { callback(arg * 2); }, 1000);}function final(value) {  console.log(&#39;完成: &#39;, value);}function launcher() {  while(running &lt; limit &amp;&amp; items.length &gt; 0) {    var item = items.shift();    async(item, function(result) {      results.push(result);      running--;      if(items.length &gt; 0) {        launcher();      } else if(running == 0) {        final(results);      }    });    running++;  }}launcher();</code></pre><h2 id="2-2-定时器"><a href="#2-2-定时器" class="headerlink" title="2.2 定时器"></a>2.2 定时器</h2><p>JS提供定时执行代码的功能，由setTimeout()以及setInterval()两个函数来完成，它们可以向任务队列添加定时任务。</p><ul><li>setTimeout()<ul><li>指定某个函数或者某段代码，在多少毫秒之后执行</li><li>返回一个整数，表示定时器的编号</li><li><code>var timerId = setTimeout(func|code, delay)</code></li></ul></li></ul><pre><code>// 1,1是回调函数的参数setTimeout(function (a,b) {  console.log(a + b);}, 1000, 1, 1);</code></pre><ul><li>setInterval()<ul><li>setInterval是设置某个任务每隔一段时间就执行一次，为无限次的执行的</li><li>指定的是开始执行之间的间隔，没有考虑每次任务执行本身所消耗的时间</li><li>为了确定两次执行之间的固定间隔，可以使用setTimeout来指定下一次执行的具体时间</li></ul></li></ul><pre><code>var i = 1;var timer = setTimeout(function f() {  // ...  timer = setTimeout(f, 2000);}, 2000);</code></pre><ul><li>clearTimeout() clearInterval()<ul><li>传入对应的计数器编号，就可以取消对应的定时器了</li></ul></li></ul><h3 id="2-2-1-Debounce-函数"><a href="#2-2-1-Debounce-函数" class="headerlink" title="2.2.1 Debounce 函数"></a>2.2.1 Debounce 函数</h3><p>想要解决的问题：不希望回调函数被频繁调用，即当用户填入网页输入框的内容以后，用户会点击button希望能传回数据，但是很有可能是在多次重复相同的信息的。</p><p>因此我们应该加一个门槛，表示两次Ajax通信的最小间隔时间。如果在间隔时间内发生了新的keydown时间，就不触发Ajax通信，并且开始重新计时。如果过了指定时间，没有发生新的keydown事件，再将数据发送出去。</p><pre><code>// 在2.5秒内，当用户再次敲击的时候，会取消上次定时器，然后再新建一个定时器$(&#39;textarea&#39;).on(&#39;keydown&#39;, debounce(ajaxAction, 2500));function debounce(fn, delay){  var timer = null; // 声明计时器  return function() {    var context = this;    var args = arguments;    clearTimeout(timer);    timer = setTimeout(function () {      fn.apply(context, args);    }, delay);  };}</code></pre><h3 id="2-2-2-运行机制"><a href="#2-2-2-运行机制" class="headerlink" title="2.2.2 运行机制"></a>2.2.2 运行机制</h3><p>setTimeout和setInterval都是将指定的代码移出本轮事件循环，等到下一轮事件循环，再检查时间是否到了指定的时间。如果到了，就执行对应的代码，如果不到，就继续等待。</p><p>这意味着，setTimeout 和 setInterval指定的回调函数，必须等到<strong>本轮事件循环</strong>的所有同步任务都执行完. 由于前面的任务到底需要多少时间执行完，是不确定的，所以我们是无法保证二者指定的任务一定会按照预定时间执行</p><pre><code>setInterval(function () {  console.log(2);}, 1000);sleep(3000);function sleep(ms) {  var start = Date.now();  while ((Date.now() - start) &lt; ms) {  }}</code></pre><p>上面例子会先sleep 3秒然后才会输出2，注意是不累计的，即只输出一个2的</p><h3 id="2-2-3-setTimeout-f-0-及其应用"><a href="#2-2-3-setTimeout-f-0-及其应用" class="headerlink" title="2.2.3 setTimeout(f,0) 及其应用"></a>2.2.3 setTimeout(f,0) 及其应用</h3><p>setTimeout(f,0)也不会直接执行的，因为它必须要等待当前脚本的同步任务全部处理完以后，才会执行setTimeout指定的回调函数f，即setTimeout(f,0)会在下一轮事件循环开始的时候执行</p><pre><code>setTimeout(function () {  console.log(1);}, 0);console.log(2);// 2// 1</code></pre><p><strong>setTimeout的应用</strong></p><ul><li>调整事件的发生顺序</li><li>调整用户自定义的回调函数和浏览器默认动作之间的执行顺序</li><li>setTimeout(f,0)意味着将任务放到浏览器最早可得的空闲时段执行，所以那些计算量大，耗时长的任务通常可以分成几个小部分分别方法这个方法当中去</li></ul><pre><code>// HTML 代码如下// &lt;input type=&quot;button&quot; id=&quot;myButton&quot; value=&quot;click&quot;&gt;var input = document.getElementById(&#39;myButton&#39;);input.onclick = function A() {  setTimeout(function B() {    input.value +=&#39; input&#39;;  }, 0)};document.body.onclick = function C() {  input.value += &#39; body&#39;};// HTML 代码如下// &lt;input type=&quot;text&quot; id=&quot;input-box&quot;&gt;document.getElementById(&#39;input-box&#39;).onkeypress = function (event) {  this.value = this.value.toUpperCase();}document.getElementById(&#39;input-box&#39;).onkeypress = function() {  var self = this;  setTimeout(function() {    self.value = self.value.toUpperCase();  }, 0);}var div = document.getElementsByTagName(&#39;div&#39;)[0];// 写法一for (var i = 0xA00000; i &lt; 0xFFFFFF; i++) {  div.style.backgroundColor = &#39;#&#39; + i.toString(16);}// 写法二var timer;var i=0x100000;function func() {  timer = setTimeout(func, 0);  div.style.backgroundColor = &#39;#&#39; + i.toString(16);  if (i++ == 0xFFFFFF) clearTimeout(timer);}timer = setTimeout(func, 0);</code></pre><h2 id="2-3-Promise对象"><a href="#2-3-Promise对象" class="headerlink" title="2.3 Promise对象"></a>2.3 Promise对象</h2><p>JS的异步操作解决方案，为异步操作提供统一的接口，起到代理的作用，充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise可以让异步操作写法和写同步操作相似，不必一层层地嵌套回调函数</p><pre><code>function f1(resolve, reject) {    // 异步代码}var p1 = new Promise(f1);</code></pre><p>上述例子当中接受一个回调函数f1作为参数，f1里面是异步操作的代码，然后返回p1为一个Promise实例。</p><p>所有异步任务都返回一个Promise实例，然后通过自带的then方法，来指定下一步的回调函数。通过then的写法，来减少函数和函数之间的嵌套的写法。</p><h3 id="2-3-1-Promise对象的状态"><a href="#2-3-1-Promise对象的状态" class="headerlink" title="2.3.1 Promise对象的状态"></a>2.3.1 Promise对象的状态</h3><ul><li>异步操作未完成 - pending</li><li>resolved<ul><li>异步操作成功 - fulfilled</li><li>异步操作失败 - rejected</li></ul></li></ul><p>一旦状态发生变化，就不会再有新的状态变化了，即Promise的实例的状态变化只可能发生一次</p><p>Promise原生构造函数接受一个函数作为参数，有两个参数，分别为resolve还有reject。</p><h3 id="2-3-2-Promise-prototype-then"><a href="#2-3-2-Promise-prototype-then" class="headerlink" title="2.3.2 Promise.prototype.then()"></a>2.3.2 Promise.prototype.then()</h3><ul><li>then方法用来添加回调函数<ul><li>第一个回调函数是异步操作成功用的</li><li>第二个是异步操作失败使用</li></ul></li><li>Promise的报错具有传递性</li></ul><pre><code>p1  .then(step1)  .then(step2)  .then(step3)  .then(    console.log,    console.error  );</code></pre><p>在上述的例子里面，console.log 只显示step3的内容，但是console.error会显示出step1，2，3出现的任意错误。Promise对象的报错具有传递性 </p><h1 id="3-DOM"><a href="#3-DOM" class="headerlink" title="3. DOM"></a>3. DOM</h1><h2 id="3-1-Intro"><a href="#3-1-Intro" class="headerlink" title="3.1 Intro"></a>3.1 Intro</h2><p>DOM是JavaScript操作网页的接口，全称为文档对象模型(Document Object Model).它的作用是将网页转为一个JavaScript对象，从而可以用脚本进行各种操作。</p><p>浏览器根据DOM模型，将结构化文档解析成一系列的节点，再由这些节点组成一个树状结构 - DOM tree。所有的节点和最终的树状架构，都有规范的对外接口。</p><ul><li><p>节点  </p><ul><li>DOM的最小组成单位</li></ul></li><li><p>节点类型</p><ul><li>Document 文档树的顶层节点</li><li>DocumentType doctype标签，比如    <code>&lt;!DOCTYPE html&gt;</code></li><li>Element 网页的各种HTML标签</li><li>Attribute  网页元素的属性</li><li>Text  标签之间或标签包含的文本</li><li>comment 注释</li><li>DocumentFragment  文档片段<h2 id="3-2-Node简述"><a href="#3-2-Node简述" class="headerlink" title="3.2 Node简述"></a>3.2 Node简述</h2><h3 id="3-2-1-Node接口"><a href="#3-2-1-Node接口" class="headerlink" title="3.2.1 Node接口"></a>3.2.1 Node接口</h3></li></ul></li><li><p>nodeType </p><ul><li>返回一个整数值，表示节点的类型<ul><li>document 9 </li><li>element  1</li><li>attr     2</li><li>text     3</li><li>documentFragment 11 </li><li>documentType     10</li><li>Comment          8</li></ul></li></ul></li><li><p>nodeName</p><ul><li>返回节点的名称</li></ul></li><li><p>nodeValue</p><ul><li>返回一个字符串，表示当前节点本身的文本值，该属性可读写</li></ul></li></ul><pre><code>var div = document.getElementById(&#39;d1&#39;);div.nodeValue // nulldiv.firstChild.nodeValue // &quot;hello world&quot;</code></pre><ul><li>Node.prototype.textContent<ul><li>textContent属性返回当前节点和它的所有后代节点的文本内容</li><li>该属性是可读写的，设置该属性的值，会用一个新的文本节点代替原有的子节点</li><li>注意转译的时候HTML标签会被忽略掉的</li></ul></li></ul><pre><code>document.getElementById(&#39;foo&#39;).textContent = &#39;&lt;p&gt;GoodBye!&lt;/p&gt;&#39;;</code></pre><ul><li>Node.prototype.baseURI<ul><li>返回一个字符串，表示当前网页的绝对路径</li><li>浏览器会根据这个属性计算网页上的相对路径的URL  </li><li>该属性为只读 </li></ul></li></ul><pre><code>document.baseURI// &quot;http://www.example.com/index.html&quot;</code></pre><ul><li><p>Node.prototype.ownerDocument </p><ul><li>返回当前节点所在的顶层文档对象，即document对象</li></ul></li><li><p>Node.prototype.nextSibling </p><ul><li>返回紧跟在当前节点后面的第一个同级节点 </li><li>如果当前节点后面没有同级节点，就返回null </li><li>该属性可以用来遍历所有子节点</li></ul></li></ul><pre><code>var d1 = document.getElementById(&#39;d1&#39;);var d2 = document.getElementById(&#39;d2&#39;);d1.nextSibling === d2 // true// 遍历所有同级节点var el = document.getElementById(&#39;div1&#39;).firstChild;while (el !== null) {  console.log(el.nodeName);  el = el.nextSibling;}</code></pre><ul><li>Node.prototype.previousSibling <ul><li>返回倩倩节点前面的，距离最近的，同级的节点</li><li>如果没有同级节点，就返回null </li></ul></li><li>Node.prototype.parentNode<ul><li>返回当前节点的父节点</li><li>对于一个节点来说，其父节点可能为：<ul><li>element </li><li>document </li><li>documentFragment </li></ul></li></ul></li><li>Node.prototype.parentElement </li><li>Node.prototype.firstChild</li><li>Node.prototype.lastChild</li><li>Node.prototype.childNodes<ul><li>返回Nodelist集合，包括当前节点的所有子节点</li></ul></li><li>Node.prototype.isConnected<ul><li>返回一个布尔值，表示当前节点是否在文档当中</li></ul></li></ul><h3 id="3-2-2-node方法"><a href="#3-2-2-node方法" class="headerlink" title="3.2.2 node方法"></a>3.2.2 node方法</h3><ul><li>appendChild()<ul><li>接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点</li><li>如果参数节点是DOM已经存在的节点，appendChild方法会将其从原来的位置移动到新位置</li></ul></li><li>hasChildNodes()<ul><li>返回一个布尔值，表示当前节点是否有子节点</li></ul></li><li>cloneNode()<ul><li>克隆一个节点，接受一个布尔值作为参数， 表示是否同时克隆子节点</li><li>返回值为一个克隆出来的新节点</li></ul></li><li>insertBefore()<ul><li>用来将某个节点插入父节点内部的指定位置</li><li><code>var insertedNode = parentNode.insertBefore(newNode, referenceNode);</code></li></ul></li><li>removeChild()<ul><li>接受一个子节点作为参数，用于从当前节点移除该子节点</li></ul></li><li>replaceChild()<ul><li>用于将一个新的节点替换当前节点的某一个子节点</li></ul></li><li>contains()<ul><li>返回布尔值，看参数节点是否满足以下条件<ul><li>参数节点为当前节点</li><li>为当前节点的子节点</li><li>为当前节点的后代节点</li></ul></li></ul></li><li>getRootNode()<ul><li>返回当前节点所在文档的根节点document,与ownerDocument属性的作用相同 </li></ul></li></ul><h2 id="3-3-Document节点"><a href="#3-3-Document节点" class="headerlink" title="3.3 Document节点"></a>3.3 Document节点</h2><p>document节点对象代表整个文档，每个网页都有自己的document对象，<code>window.document</code>属性就指向这个对象</p><ul><li>正常网页可以直接使用docuemnt 还有window.document</li><li>iframe框架里面的网页，使用iframe节点的contentDocument属性</li><li>Ajax操作返回的文档，使用XMLHttpRequest对象的responseXML属性</li></ul><h3 id="3-3-1-快捷方式属性"><a href="#3-3-1-快捷方式属性" class="headerlink" title="3.3.1 快捷方式属性"></a>3.3.1 快捷方式属性</h3><ul><li>document.defaultView <ul><li>返回document对象所属的window对象</li></ul></li><li>document.doctype</li></ul><pre><code>var doctype = document.doctype;doctype // &quot;&lt;!DOCTYPE html&gt;&quot;doctype.name // &quot;html&quot;</code></pre><ul><li>document.documentElement <ul><li>返回当前文档的根元素节点</li><li>通常为document节点的第二个子节点，紧跟在document.doctype节点后面</li></ul></li><li>document.body<ul><li>指向body节点</li></ul></li><li>document.head<ul><li>指向head节点</li></ul></li><li>document.scrollingElement <ul><li>返回文档的滚动元素</li></ul></li><li>document.activeElement <ul><li>返回获得当前焦点的DOM元素</li><li>通常这个属性返回的是<code>&lt;input&gt; &lt;textarea&gt; &lt;select&gt;</code>这类表单元素</li></ul></li><li>document.fullscreenElement <ul><li>返回当前以全屏状态展示的DOM元素 </li></ul></li></ul><h3 id="3-3-2-节点集合属性"><a href="#3-3-2-节点集合属性" class="headerlink" title="3.3.2 节点集合属性"></a>3.3.2 节点集合属性</h3><p>返回一个HTMLCollection实例，表示文档内部特定元素的集合。这些集合是动态的，原节点有任何变化，立刻会反映在集合当中 </p><ul><li>document.links </li><li>document.forms</li><li>document.images </li><li>document.embeds  / document.plugins <ul><li>返回所有<embed>节点</li></ul></li><li>document.scripts</li><li>document.styleSheets</li></ul><h3 id="3-3-3-文档静态信息属性"><a href="#3-3-3-文档静态信息属性" class="headerlink" title="3.3.3 文档静态信息属性"></a>3.3.3 文档静态信息属性</h3><ul><li>document.documentURI / document.URL<ul><li>返回一个字符串，表示当前文档的网址</li><li>不同之处在于他们继承自不同的接口</li><li>documentURI 继承自Document接口，可用于所有文档</li><li>URL 继承自HTMLDocument接口，只可用于HTML文档</li></ul></li><li>document.domain<ul><li>返回当前文档的域名 </li><li>比如，网页的网址是<a href="http://www.example.com:80/hello.html，那么document.domain属性就等于www.example.com" target="_blank" rel="noopener">http://www.example.com:80/hello.html，那么document.domain属性就等于www.example.com</a></li></ul></li><li>document.location <ul><li>浏览器原生对象，提供URL相关的信息和操作方法</li><li>通过window.location 和document.location属性，可以拿到这个对象</li></ul></li><li>document.lastModified <ul><li>返回当前文档的问候修改时间</li></ul></li><li>document.title </li><li>document.characterSet <ul><li>UTF-8</li><li>ISO-8859-1</li><li>etc.</li></ul></li><li>document.referrer <ul><li>返回字符串，表示当前文档的访问者来的地方</li></ul></li><li>document.dir <ul><li>返回一个字符串<ul><li>rtl</li><li>ltr</li></ul></li></ul></li><li>document.compatMode<ul><li>返回浏览器处理文档的模式 </li><li>BackCompat 向后兼容模式</li><li>CSS1Compat 严格模式</li></ul></li></ul><h3 id="3-3-4-文档状态属性"><a href="#3-3-4-文档状态属性" class="headerlink" title="3.3.4 文档状态属性"></a>3.3.4 文档状态属性</h3><ul><li>hidden<ul><li>返回一个布尔值</li></ul></li><li>visibilityState  返回当前文档的可见状态<ul><li>visible</li><li>hidden</li><li>prerender 正在渲染的状态，对于用户来说，这个页面不可见</li><li>unloaded 从内存中卸载了</li></ul></li><li>readyState  返回当前文档的状态<ul><li>loading 加载HTML代码阶段</li><li>interactive  加载外部资源阶段</li><li>complete  加载完成</li></ul></li><li>cookie</li><li>designMode <ul><li>on/ off</li><li>当开启以后，用户就可以编辑整个文档的内容了</li></ul></li><li>implementation <ul><li>返回一个DOMImplementation对象 </li><li>DOMImplementation.createDocument()</li><li>DOMImplementation.createHTMLDocument()</li><li>DOMImplementation.createDocumentType() </li></ul></li></ul><h3 id="3-3-5-Document相关方法"><a href="#3-3-5-Document相关方法" class="headerlink" title="3.3.5 Document相关方法"></a>3.3.5 Document相关方法</h3><ul><li>document.open()  document.close() <ul><li>open用来清除当前文档的所有内容，使得文档处于可写状态</li><li>document.close用来关闭打开的文档</li></ul></li><li>document.write()  document.writeln()<ul><li>write用于向当前文档写入内容</li><li>当页面已经解析完成以后，再调用write会先调用open方法，这样所有文档的内容就已经被擦除了</li><li>在页面渲染过程中的调用write方法，并不会自动调用open方法</li><li>writeln是在末尾会添加换行符</li></ul></li></ul><pre><code>document.addEventListener(&#39;DOMContentLoaded&#39;, function (event) {  document.write(&#39;&lt;p&gt;Hello World!&lt;/p&gt;&#39;);});// 等同于document.addEventListener(&#39;DOMContentLoaded&#39;, function (event) {  document.open();  document.write(&#39;&lt;p&gt;Hello World!&lt;/p&gt;&#39;);  document.close();});</code></pre><ul><li>document.querySelector()  document.querySelectorAll()<ul><li>接受一个CSS选择器作为参数，返回匹配该选择器的元素节点。如果多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null</li><li>querySelectorAll方法与querySelector类似，区别在于返回的是NodeList对象，包含所有匹配给定选择器的节点</li></ul></li></ul><pre><code>var el1 = document.querySelector(&#39;.myclass&#39;);var el2 = document.querySelector(&#39;#myParent &gt; [ng-click]&#39;);// 选中 data-foo-bar 属性等于 someval 的元素document.querySelectorAll(&#39;[data-foo-bar=&quot;someval&quot;]&#39;);// 选中 myForm 表单中所有不通过验证的元素document.querySelectorAll(&#39;#myForm :invalid&#39;);// 选中div元素，那些 class 含 ignore 的除外document.querySelectorAll(&#39;DIV:not(.ignore)&#39;);// 同时选中 div，a，script 三类元素document.querySelectorAll(&#39;DIV, A, SCRIPT&#39;);</code></pre><ul><li>document.getElementsByTagName()<ul><li>搜索HTML标签名，返回符合条件的元素</li><li>返回的为一个HTMLCollection对象</li><li>可以实时反映HTML文档的变化</li></ul></li><li>document.getElementsByClassName()<ul><li>返回一个类似数组的对象，包括了所有class名字符合指定条件的元素，元素的变化实时反映在返回结果当中</li></ul></li><li>document.getElementsByName()<ul><li>用于选择拥有name属性的HTML元素，返回一个类似数组的对象</li></ul></li><li>document.getElementById()<ul><li>返回匹配指定id属性的元素节点</li><li>如果没有发现匹配的节点，则返回null</li></ul></li><li>document.elementFromPoint()  document.elementsFromPoint()<ul><li>返回位于页面指定位置最上层的元素节点 </li><li><code>var element = document.elementFromPoint(50, 50);</code></li><li>该代码就会选中在这个坐标上的最上层的HTML元素</li><li>两个参数是相对于左上角的横坐标和纵坐标，单位是像素</li></ul></li><li>document.createElement()<ul><li>用来生成元素节点，并返回该节点</li><li>方法的参数为元素的标签名，即元素节点的tagName属性</li></ul></li><li>document.createTextNode()<ul><li>用来生成文本节点，并返回该节点</li><li>参数是文本节点的内容</li></ul></li></ul><pre><code>var newDiv = document.createElement(&#39;div&#39;);var newContent = document.createTextNode(&#39;Hello&#39;);newDiv.appendChild(newContent);</code></pre><ul><li>document.createAttribute() <ul><li>生成一个新的属性节点</li></ul></li></ul><pre><code>var node = document.getElementById(&#39;div1&#39;);var a = document.createAttribute(&#39;my_attrib&#39;);a.value = &#39;newVal&#39;;node.setAttributeNode(a);// 或者node.setAttribute(&#39;my_attrib&#39;, &#39;newVal&#39;);</code></pre><ul><li>document.createComment() </li><li>document.createDocumentFragment()<ul><li>生成一个空的文档片段对象 </li><li>是存于内存的DOM片段，不属于当前文档，常常用来生成一段较为复杂的DOM结构，然后再插入到文档当中</li><li>因为DocumentFragment不属于当前文档，对其任何改动都不会引发网页的重新渲染，比直接修改当前文档的DOM有更好的性能表现</li></ul></li></ul><ul><li>document.createEvent() <ul><li>生成一个事件对象</li><li>其参数为事件类型，比如<ul><li>MouseEvents</li><li>MutationEvents</li><li>HTMLEvents </li></ul></li></ul></li></ul><pre><code>var event = document.createEvent(&#39;Event&#39;);event.initEvent(&#39;build&#39;, true, true);document.addEventListener(&#39;build&#39;, function (e) {  console.log(e.type); // &quot;build&quot;}, false);document.dispatchEvent(event);</code></pre><ul><li>document.addEventListener() <ul><li>添加事件监听函数 </li></ul></li><li>document.removeEventListner()<ul><li>移除事件监听函数 </li></ul></li><li>document.dispatchEvent()<ul><li>触发事件</li></ul></li><li>document.hasFocus()<ul><li>返回一个布尔值，表示当前文档是否有元素被激活或者获得了焦点</li></ul></li><li>document.adoptNode()<ul><li>document.adoptNode方法将某个节点及其子节点，从原来所在的文档或DocumentFragment里面移除，归属当前document对象，返回插入后的新节点。插入的节点对象的ownerDocument属性，会变成当前的document对象，而parentNode属性是null</li></ul></li></ul><pre><code>var node = document.adoptNode(externalNode);document.appendChild(node);</code></pre><h2 id="3-4-Element-节点"><a href="#3-4-Element-节点" class="headerlink" title="3.4 Element 节点"></a>3.4 Element 节点</h2><p>Element结点对应网页的HTML元素，每个HTML原色，在DOM树上都会转化成一个ELement节点对象</p><h3 id="3-4-1-实例属性"><a href="#3-4-1-实例属性" class="headerlink" title="3.4.1 实例属性"></a>3.4.1 实例属性</h3><ul><li>Element.id</li><li>Element.tagName <ul><li>返回指定元素的大写标签名</li></ul></li><li>Element.dir<ul><li>用于读写当前元素的文字方向</li></ul></li><li>Element.accessKey<ul><li>用于读写分配给当前元素的快捷键</li></ul></li></ul><pre><code>// HTML 代码为 &lt;p id=&quot;foo&quot;&gt;var p = document.querySelector(&#39;p&#39;);p.id // &quot;foo&quot;// HTML代码为// &lt;span id=&quot;myspan&quot;&gt;Hello&lt;/span&gt;var span = document.getElementById(&#39;myspan&#39;);span.id // &quot;myspan&quot;span.tagName // &quot;SPAN&quot;// HTML 代码如下// &lt;button accesskey=&quot;h&quot; id=&quot;btn&quot;&gt;点击&lt;/button&gt;var btn = document.getElementById(&#39;btn&#39;);btn.accessKey // &quot;h&quot;</code></pre><ul><li><p>Element.draggable</p><ul><li>返回一个布尔值，表示当前元素是否可拖动，该属性可读写</li></ul></li><li><p>Element.lang</p><ul><li>返回当前元素的语言设置 </li></ul></li><li><p>Element.tabIndex</p><ul><li>返回一个整数值，表示当前元素在tab键遍历的时候的顺序</li><li>如果为负值，在tab不会遍历到这个原色</li><li>对于正整数，按照顺序从小到大进行遍历</li></ul></li><li><p>Element.title</p><ul><li>用于读写当前元素HTML属性的title </li><li>用于指定鼠标悬浮时弹出的文字提示框</li></ul></li><li><p>Element.hidden</p><ul><li>控制当前元素是否可见</li><li>CSS的设置高于hidden  即如果css层规定了<code>display:none</code>或者<code>display:hidden</code> 那么element.hidden是无法改变其可见性的</li></ul></li><li><p>Element.contentEditable  Element.isContentEditable </p></li><li><p>Element.attributes </p><ul><li>返回一个类似数组的对象，成员是当前元素节点的所有属性节点</li></ul></li><li><p>Element.className Element.classList</p><ul><li>用来读写当前原色节点的class属性</li><li>其值为一个字符串，每个class之间用空格来分割</li><li>st</li><li>返回一个类似数组的对象</li></ul></li></ul><pre><code>// HTML 代码 &lt;div class=&quot;one two three&quot; id=&quot;myDiv&quot;&gt;&lt;/div&gt;var div = document.getElementById(&#39;myDiv&#39;);div.className// &quot;one two three&quot;div.classList// {//   0: &quot;one&quot;//   1: &quot;two&quot;//   2: &quot;three&quot;//   length: 3// }</code></pre><ul><li>Element.innerHTML <ul><li>返回一个字符串，等同于该元素包含的所有HTML代码</li><li>可以读写</li><li>用于设定某个节点的内容</li><li>能够改变所有元素结点的内容，包括HTML body这类元素</li></ul></li></ul><pre><code>// HTML代码如下 &lt;p id=&quot;para&quot;&gt; 5 &gt; 3 &lt;/p&gt;document.getElementById(&#39;para&#39;).innerHTML// 5 &amp;gt; 3</code></pre><ul><li>Element.outerHTML <ul><li>返回一个字符串，表示当前元素结点的所有HTML代码，包括该元素本身和所有子元素</li></ul></li><li>Element.clientHeight Element.clientWidth<ul><li>返回一个整数值表示元素节点的CSS高度和宽度</li></ul></li></ul><h3 id="3-4-2-实例方法"><a href="#3-4-2-实例方法" class="headerlink" title="3.4.2 实例方法"></a>3.4.2 实例方法</h3><ul><li>getAttribute()</li><li>getAttributeNames() </li><li>setAttribute()</li><li>hasAttribute()</li><li>hasAttributes()</li><li>removeAttribute() </li></ul><h3 id="3-4-3-事件相关方法"><a href="#3-4-3-事件相关方法" class="headerlink" title="3.4.3 事件相关方法"></a>3.4.3 事件相关方法</h3><ul><li>Element.addEventListener()</li><li>Element.removeEventListener()</li><li>Element.dispatchEvent()</li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Object Oriented </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript教程 Part 1</title>
      <link href="/JavaScript%E6%95%99%E7%A8%8B-Part-1/"/>
      <url>/JavaScript%E6%95%99%E7%A8%8B-Part-1/</url>
      
        <content type="html"><![CDATA[<p>发现前面看的JS还是不太成系统，遇到的这方面的问题越来越多，需要好好的深入研究下这块内容了。</p><h1 id="1-Basic"><a href="#1-Basic" class="headerlink" title="1. Basic"></a>1. Basic</h1><h2 id="1-1-概览"><a href="#1-1-概览" class="headerlink" title="1.1 概览"></a>1.1 概览</h2><ul><li>嵌入式语言</li><li>本身的核心语法只有数学逻辑运算相关的</li><li>靠宿主环境提供各种输入输出相关的API<ul><li>浏览器</li><li>服务器环境 - nodejs</li></ul></li><li>JS的核心语法部分<ul><li>基本语法构造<ul><li>操作符</li><li>控制结构</li><li>语句</li></ul></li><li>标准库<ul><li>Array</li><li>Date </li><li>Math</li><li>…</li></ul></li></ul></li><li>除此以外，便是其宿主环境提供的各种不同的API了</li><li>浏览器<ul><li>浏览器控制类 </li><li>DOM类  html</li><li>Web类  ajax call</li></ul></li></ul><p>本文会从基本语法，标准库，浏览器API以及DOM四个大方面来解释整个js的运行。大部分内容出自阮一峰的电子书，其中加了一下自己认为不错的例子。</p><ul><li>JS性能<ul><li>JS基本上都是编译运行，运行效率很高</li><li>采取事件驱动 event-driven </li><li>非阻塞式 non-blocking </li></ul></li></ul><h2 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h2><ul><li>变量提升<ul><li>JS引擎会先解析代码，获取所有被声明的变量，然后再一行一行的运行。</li><li>即所有的变量的声明语句都会被提升到代码的头部。</li></ul></li><li>使用label<ul><li>定位符，用于跳转到程序的任意位置</li><li>比较常用的场景：可以跳出双重循环 - 直接</li></ul></li></ul><pre><code>outOfTwoLoops:    for (let i = 0; i &lt; 10; i ++) {        for (let j = 0; j &lt; 10; j ++) {            if (i*j &lt; 99) break outOfTwoLoops;        }    }</code></pre><h2 id="1-3-数据类型概述"><a href="#1-3-数据类型概述" class="headerlink" title="1.3 数据类型概述"></a>1.3 数据类型概述</h2><ul><li>基本数据类型<ul><li>number</li><li>string</li><li>boolean</li><li>undefined<ul><li>nothing defined (value)</li><li>when switch to number, come to be NaN </li><li>表示未定义</li></ul></li><li>null <ul><li>empty object </li><li>when switch to number, come to be 0</li><li>表示为空</li></ul></li><li>object<ul><li>狭义的对象</li><li>array</li><li>function</li></ul></li></ul></li></ul><p>JS里面将函数function也作为一种对象来进行处理，好处是可以做函数式的编程了，即可以将整个函数赋给一个变量，这就可以为编程带来非常大的灵活性了。</p><ul><li><p>typeof</p><ul><li><code>function f() {}</code></li><li><code>typeof f // function</code></li><li><code>typeof d // undefined</code></li><li><code>typeof [] // object</code></li><li><code>typeof {} // object</code></li></ul></li><li><p>数值</p><ul><li>所有数字都是以64位浮点数形式储存的，即使整数也是如此</li><li>浮点数本身就是不精确的，涉及小数的运算需要非常小心</li><li>相关方法</li></ul></li></ul><pre><code>// 字符串转化为整数parseInt(&#39;123&#39;)  // 123parseInt(&#39;123CannotProcessString&#39;)  // 123parseInt(&#39;12.343&#39;)  // 12parseInt(&#39;1.99&#39;)  // 1parseInt(&#39;hahah&#39;)  // NaN // parseInt第二个参数表示被解析的值得进制，返回的值是10进制的parseInt(&#39;1000&#39;, 2)  // 8// parseFloat same pattern with parseIntparseFloat(&#39;&#39;) // NaNparseFloat(&#39;123.45&#39;) // 123.45// 判断一个值是否为NaN, 只对数值有效，对于其他类型，首先转化为数值的时候就变成NaN了isNaN(123)  // false</code></pre><ul><li><p>NaN</p><ul><li>not a number</li><li>主要出现在将字符串解析成数组出错的场合</li><li><code>typeof NaN    // &#39;number&#39;</code></li></ul></li><li><p>字符串</p><ul><li>默认只能写在一行当中，多行会报错</li><li>如果想分在多行，需要在每一行的尾部使用反斜杠 <code>\</code></li><li>转义 <ul><li>\0 nukk</li><li>\b 后退</li><li>\f 换页</li><li>\n 换行</li><li>\r 回车</li><li>\t 制表</li><li>\v 垂直制表</li><li>&#39; 单引号</li><li>&quot; 双引号</li><li>\ 反斜杠</li></ul></li><li>字符串与数组<ul><li>字符串可以视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符</li><li>但是字符串里面的单个字符无法改变和增删的，无法通过数组的形式来做这个</li><li><code>str.length</code>返回字符串的长度</li></ul></li></ul></li></ul><pre><code>var s = &#39;hello&#39;;s[0] // &quot;h&quot;s[1] // &quot;e&quot;s[4] // &quot;o&quot;// 直接对字符串使用方括号运算符&#39;hello&#39;[1] // &quot;e&quot;</code></pre><ul><li>字符集 <ul><li>JS使用Unicode字符集，JS引擎内部所有字符都是使用Unicode来进行表示的。 </li><li>因此可以直接将字符写成 <code>\uxxxx</code>的形式，后四位是该字符的Unicode码点</li></ul></li><li>Base64转码<ul><li>做转码是因为文本里面有时会有一些不可打印的符号，不是为了加密，就是为了简化程序的处理过程</li><li>Base64可以将其转化成可以打印的字符</li><li>有时也需要以文本的格式传递二进制数据，也可以使用Base64编码</li><li>btoa() 任意值转化为base64编码  binary to ASCII</li><li>atob() Base64编码转为原来的值  ASCII to binary </li><li>对于ASCII无法表示的字符，我们需要加一个encodeURIComponent的指令，来编码Uniform Resource Identifier（URI）</li></ul></li></ul><ul><li>对象<ul><li>对象是键值对的集合，是一种无序的复合数据集合</li><li>对象的所有键名都是字符串，所以可以选择不加引号</li><li>对象的每一个键名称为一个属性 property <ul><li>其键值可以是任何数据类型，如果一个属性的值为函数，那么就可以将这个属性称为方法，可以像函数那样来做调用 </li></ul></li><li>属性是可以<strong>动态创建</strong>的，不必在对象声明的时候就指定</li><li>查看对象本身的属性 <code>Object.keys</code></li><li>删除属性  <code>delete obj.p</code>     </li><li>属性是否存在 - 检查键名  <code>&#39;p&#39; in obj</code></li></ul></li></ul><pre><code>var obj = {    foo: &#39;hello&#39;,    bar: &#39;world&#39;};</code></pre><ul><li><p>表达式 or  语句</p><ul><li><code>{foo: 123}</code></li><li>这样子可以理解为一个表达式，也可以理解为一个语句，foo是个标签，指向123.</li><li>JS引擎的做法是一律解释为代码块</li><li>因此如果想要表示成一个表达式，那么我们就应该在想要表达的东西的外部加上一对小括号以撇清关系</li><li>语句 用分号进行分隔 做某种行为</li><li>表达式 由运算符构成，并运算产生结果的语法结构，用逗号进行分割 是会生成一个值得</li><li>当JS期待得到一个语句的时候，你可以使用一个表达式语句来做；但是当JS期待一个表达式的时候，你是无法带入一个语句的，比如if 语句就无法作为一个方法的参数</li></ul></li><li><p>函数</p><ul><li>可以反复调用的代码块</li><li>可以接受输入的参数，</li><li>三种声明函数的方式：<ul><li>function </li><li>函数表达式<ul><li>函数表达式的等号右侧是可以有函数名的，但是这个函数名只在这个函数体内有效，其他是无效的 </li></ul></li><li>function构造函数</li></ul></li><li>函数重复声明，后声明的会覆盖前面声明的</li><li>调用函数，使用圆括号</li><li>在JS中，凡是可以使用值的地方，就可以使用函数</li><li>因为将函数名视为变量名，所有采用function命令声明函数时，整个函数会像变量声明一样，提升到代码的头部。</li><li>函数的属性与方法<ul><li>name<ul><li>根据定义的方法的不同，返回不同值<ul><li>函数定义  返回函数名</li><li>函数表达式定义  返回变量名</li></ul></li></ul></li><li>length<ul><li>返回函数定义之中的参数个数</li><li>length属性提供了一种机制，来判断定义的时候和调用参数的差异，以便实现面向对象编程的方法重载</li></ul></li><li>toString()<ul><li>返回一个字符串，内容是函数的源码 </li></ul></li></ul></li><li>函数作用域<ul><li>global variable</li><li>local variable</li><li>函数执行时所在的作用域，是定义时的作用域，而不是调用的时候所在的作用域</li></ul></li><li>传递方式<ul><li>对于原始类型来说，是值传递的 (pass by value)，也就是说，在函数体内修改参数值，不会影响到函数的外部。</li><li>如果函数参数是复合类型的值(数组、对象、函数),那么传递方式就是传址传递 (pass by reference)。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。</li></ul></li><li>arguments对象<ul><li>因为JS当中允许函数有不同数目的参数，因此需要有一种机制能够在函数体内部读取所有的参数，因此定义了arguments对象来做这件事</li><li>arguments对象包含了函数运行时的所有参数</li><li>而且注意arguments对象与函数参数并不具有联动关系。</li><li>arguments.length 返回函数实际传入的参数的数量</li></ul></li><li>闭包<ul><li>JS的链式作用域，子对象会逐级向上寻找所有父对象的变量，因此父对象的所有变量对子对象而言都是可见的，反之不成立</li><li>闭包就是函数f2，为的是能读取函数内部的变量，并将其传递出去。</li><li>是将函数内部和函数外部连接起来的一座桥梁</li></ul></li></ul></li></ul><pre><code>function f1() {  var n = 999;  function f2() {    console.log(n);  }  return f2;}var result = f1();result(); // 999// functionfunction sayHello(var name) {    console.log(&quot;Hello&quot; + name);}// function expression var sayHello = function(var name) {    console.log(&quot;Hello&quot; + name);};// function constructor var add = new Function(    &#39;x&#39;,    &#39;y&#39;,    &#39;return x + y&#39;);// arguments var f = function(a,b) {    arguments[0] = 2;    arguments[1] = 10;    return a + b;}// f(1, 2) ----&gt; 12 </code></pre><ul><li>立即调用的函数表达式(IIFE) - immediately invoked function expression<ul><li>在JS当中，圆括号本身就是运算符，跟在函数名之后，表示调用了这个函数</li><li>有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。</li><li><code>function(){ /* code */ }(); // SyntaxError: Unexpected token</code></li><li>产生这个错误的原因是因为function这个关键字既可以作为语句也可以作为表达式，JS引擎为了避免歧义，就规定只要function关键字出现在行首，就一律解释为语句。</li><li><code>(function(){}());</code> 通过这种方式来进行直接的运行</li></ul></li><li>eval 指令<ul><li>用于在当前作用域当中，注入代码</li><li>但是因为安全风险和不利于JS引擎去优化执行速度，所以一般不推荐使用</li><li>最常见的场合是解析JSON数据的字符串，但一般用JSON.parse会更加合适</li></ul></li><li>数组<ul><li>任何类型的数据都可以放入数组</li><li>数组本身是一种特殊的对象</li><li>length 属性  = 键名中的最大整数加上1</li><li>数组的数字键不需要连续，length属性的值总是比最大的整数键大1</li><li>即数组是一个动态的数据结构，可以随时增减数组的成员</li><li>清空数组可以通过将数组的长度设为0来实现的</li></ul></li></ul><pre><code>var arr = [&#39;a&#39;, &#39;b&#39;];arr.length // 2arr[2] = &#39;c&#39;;arr.length // 3arr[9] = &#39;d&#39;;arr.length // 10arr[1000] = &#39;e&#39;;arr.length // 1001</code></pre><h2 id="1-4-运算符"><a href="#1-4-运算符" class="headerlink" title="1.4 运算符"></a>1.4 运算符</h2><ul><li>算数运算符<ul><li>对象的相加<ul><li>对象转成原始类型的值的规则为：</li><li>首先自动调用对象的valueOf方法，一般会返回对象本身</li><li>再自动调用对象的toString方法，将其转为字符串</li></ul></li></ul></li></ul><pre><code>var obj = {p: 1}obj + 2 // [object Object]2  ----&gt; obj.valueOf().toString()//可以自定义valueOf方法的var obj = {    valueOf: function() {        return 1;    }};obj + 2 // 3</code></pre><ul><li>比较运算符</li><li>布尔运算符<ul><li>!</li><li>&amp;&amp; </li><li>|| </li><li>?:</li></ul></li><li>二进制位运算符</li><li>其他运算符<ul><li>void<ul><li>作用是执行一个表达式，但是不返回任何值(undefined)</li><li>主要目的是为了在超级链接当中可以插入代码，但是又不产生跳转</li></ul></li><li>逗号运算符<ul><li>用于对两个表达式求值，并且返回后一个表达式的值 </li></ul></li></ul></li></ul><pre><code>// 下述代码因为onclick return false所以不会产生跳转的&lt;script&gt;function f() {  console.log(&#39;Hello World&#39;);}&lt;/script&gt;&lt;a href=&quot;http://example.com&quot; onclick=&quot;f(); return false;&quot;&gt;点击&lt;/a&gt;// 可以直接用void function来取代 return false的操作  显得清晰简洁很多的&lt;a href=&quot;javascript: void(f())&quot;&gt;文字&lt;/a&gt;</code></pre><h1 id="2-常用语法"><a href="#2-常用语法" class="headerlink" title="2. 常用语法"></a>2. 常用语法</h1><h2 id="2-1-数据类型的转换"><a href="#2-1-数据类型的转换" class="headerlink" title="2.1 数据类型的转换"></a>2.1 数据类型的转换</h2><p>变量没有类型限制，e.g: <code>var x = y ? 1 : &#39;a&#39;</code></p><p>在上述的例子当中，我们在编译的时候是不知道到底x是个数值还是个字符的，必须等到运行的时候才可以有数据。而JS当进行运算的时候，如果发现实际的类型和期待的不相符，会直接将其转化为期待的类型的。</p><ul><li>强制转换<ul><li><code>Number()</code><ul><li>可以将任意类型的值转化为数值</li><li>Number函数将字符串转为数值，要比<code>parseInt</code>严格非常多，只要有一个字符无法转成数值，整个字符串就只能被转化为NaN了</li><li>Number进行转化的规则为：<ul><li>调用对象自身的valueOf；如果为原始类型，直接对该值使用Number函数</li><li>如果valueOf返回的还是对象，那么改成调用对象的toString方法，如果toString方法返回原始类型的值，就对该值使用Number函数，不再进行后续操作</li><li>如果toString方法返回的是对象，就报错</li></ul></li></ul></li><li><code>String()</code><ul><li>原始类型值<ul><li>undefined -&gt; “undefined”</li><li>null -&gt; “null”</li></ul></li><li>对象<ul><li>对象返回类型字符串   <code>String({a: 1}) // &quot;[object Object]&quot;</code></li><li>数组返回其字符串形式 <code>String([1, 2, 3]) // &quot;1,2,3&quot;</code></li></ul></li></ul></li><li><code>Boolean()</code><ul><li>只有以下五个值的转换结果为false,其余全部为true<ul><li>undefined </li><li>null</li><li>0</li><li>NaN</li><li>‘’</li></ul></li></ul></li></ul></li></ul><h2 id="2-2-错误处理机制"><a href="#2-2-错误处理机制" class="headerlink" title="2.2 错误处理机制"></a>2.2 错误处理机制</h2><h3 id="2-2-1-Error实例对象"><a href="#2-2-1-Error实例对象" class="headerlink" title="2.2.1 Error实例对象"></a>2.2.1 Error实例对象</h3><p>JS解析或运行时发生错误，引擎就会抛出一个错误对象。JS原生提供Error构造函数，所有抛出的错误都是这个构造函数的实例。</p><pre><code>var error = new Error(&#39;Some error occur&#39;);error.message // &quot;Some error occur&quot;</code></pre><p>Error构造函数接受一个参数，表示错误提示，可以从实例的message属性读到这个参数。抛出Error实例对象以后，整个程序就中断在发生错误的地方，不再往下执行。</p><p>JS当中只有Error的message属性是必带的，但是一般来说，还会携带有<code>name</code>以及<code>stack</code>的信息，分别表示错误的名称和错误的堆栈</p><h3 id="2-2-2-原生错误类型"><a href="#2-2-2-原生错误类型" class="headerlink" title="2.2.2 原生错误类型"></a>2.2.2 原生错误类型</h3><p>下述错误类型都是构造函数，可以直接使用它来手动生成错误对象。这些构造函数都接收一个参数，代表错误提示信息</p><ul><li>SyntaxError <ul><li>解析代码时发生的语法错误</li></ul></li><li>ReferenceError<ul><li>引用一个不存在的变量</li><li>或者将一个值分配给无法分配的对象</li></ul></li><li>RangeError<ul><li>值超出有效范围时发生的错误<ul><li>数组长度为负</li><li>对象方法参数超出范围</li><li>函数堆栈超过最大值</li></ul></li></ul></li><li>TypeError <ul><li>变量或者参数不是预期类型时发生的错误 </li></ul></li><li>URIError<ul><li>是URI相关的函数的参数不正确时抛出的错误<ul><li>encodeURI()</li><li>decodeURI()</li><li>encodeURIComponent()</li><li>decodeURIComponent()</li><li>escape()</li><li>unescape() </li></ul></li></ul></li><li>EvalError<ul><li>eval函数没有被正确执行 </li></ul></li></ul><h3 id="2-2-3-自定义错误"><a href="#2-2-3-自定义错误" class="headerlink" title="2.2.3 自定义错误"></a>2.2.3 自定义错误</h3><pre><code>function UserError(msg) {    this.message = msg;    this.name = &quot;UserError&quot;;}// 继承了Error对象，声明其构造器UserError.prototype = new Error();UserError.prototype.constructor = UserError;</code></pre><p>而后我们也可以使用<code>throw</code> 抛出任何我们想抛出的值或者对象，程序运行到throw这里会终止。</p><h3 id="2-2-4-try-catch-finally"><a href="#2-2-4-try-catch-finally" class="headerlink" title="2.2.4 try - catch - finally"></a>2.2.4 try - catch - finally</h3><p>这里注意三者之间的执行顺序 </p><p>先try，捕获异常，而后finally代码块是不管是否出现错误，都必须最后运行的语句</p><pre><code>function cleansUp() {  try {    throw new Error(&#39;出错了……&#39;);    console.log(&#39;此行不会执行&#39;);  } finally {    console.log(&#39;完成清理工作&#39;);  }}cleansUp()// 完成清理工作// Uncaught Error: 出错了……//    at cleansUp (&lt;anonymous&gt;:3:11)//    at &lt;anonymous&gt;:10:1</code></pre><p>上述例子当中，中断执行了，会先执行finally代码块，再向用户提示报错信息。但是实际上try是已经执行完了的，finally代码块的运行不能改变try里面的输出或者function </p><pre><code>var count = 0;function countUp() {  try {    return count;  } finally {    count++;  }}countUp()// 0count// 1</code></pre><p>上述例子证明了try先执行完，才轮到finally，但是是finally先进行输出的。</p><p>finally的经典应用场景一般设计文件描述符的关闭：</p><pre><code>openFile();try {  writeFile(Data);} catch(e) {  handleError(e);} finally {  closeFile();}// try catch finally 执行顺序的反应function f() {  try {    console.log(0);    throw &#39;bug&#39;;  } catch(e) {    console.log(1);    return true; // 这句原本会延迟到 finally 代码块结束再执行    console.log(2); // 不会运行  } finally {    console.log(3);    return false; // 这句会覆盖掉前面那句 return    console.log(4); // 不会运行  }  console.log(5); // 不会运行}var result = f();// 0// 1// 3result// false</code></pre><h2 id="2-3-编程风格"><a href="#2-3-编程风格" class="headerlink" title="2.3 编程风格"></a>2.3 编程风格</h2><p>对于区块，大括号应该跟在这一行里面，不要另外起一行，因为JavaScript会自动添加句末的分号，导致一些难以察觉的错误。</p><ul><li>分号的使用<ul><li>不使用分号的情况<ul><li>for/ while</li><li>if/ switch/ try</li><li>函数的声明语句</li></ul></li><li>分号的自动添加<ul><li>js会自动添加，但是还会看下一行能否连接起来成一条语句，或者表达式，如果可以的话，会直接来做连接的 </li><li>一行的起首为自增或者自减运算符，那么其前面会自动添加分号</li><li>continue, break, return, throw这几个语句后面如果直接跟了换行符，都是会直接添加分号的</li></ul></li></ul></li><li>switch - case <ul><li>可以将其重写成对象的格式，<a href="https://medium.com/chrisburgin/rewriting-javascript-replacing-the-switch-statement-cfff707cf045" target="_blank" rel="noopener">medium上的例子</a></li><li>switch case 不利于格式统一，有点太冗长，而且很容易忘记break，用对象是个很好地选择实际上</li></ul></li></ul><pre><code>function doAction(action) {  switch (action) {    case &#39;hack&#39;:      return &#39;hack&#39;;    case &#39;slash&#39;:      return &#39;slash&#39;;    case &#39;run&#39;:      return &#39;run&#39;;    default:      throw new Error(&#39;Invalid action.&#39;);  }}function doAction(action) {  var actions = {    &#39;hack&#39;: function () {      return &#39;hack&#39;;    },    &#39;slash&#39;: function () {      return &#39;slash&#39;;    },    &#39;run&#39;: function () {      return &#39;run&#39;;    }  };  if (typeof actions[action] !== &#39;function&#39;) {    throw new Error(&#39;Invalid action.&#39;);  }  return actions[action]();}</code></pre><h2 id="2-4-console对象与控制台"><a href="#2-4-console对象与控制台" class="headerlink" title="2.4 console对象与控制台"></a>2.4 console对象与控制台</h2><ul><li>console<ul><li>JS的原生对象，可以输出各种信息到控制台，并提供了很多有用的辅助方法</li><li>用于调试程序，提供网页代码运行时的错误信息</li><li>提供一个命令行接口，用来和网页代码互动</li><li>console.log()<ul><li>占位符<ul><li>%s</li><li>%d</li><li>%i 整数</li><li>%f</li><li>%o 对象的链接</li><li>%c css格式的字符串<ul><li>对应的参数必须是CSS代码，用来对输出内容进行CSS的渲染</li></ul></li></ul></li></ul></li><li>console.table()<ul><li>输出复合类型的数据，以表格形式进行显示</li></ul></li><li>console.count()<ul><li>记录被调用了多少次</li></ul></li><li>console.dir()<ul><li>对一个对象进行检查，以便于阅读和打印的格式显示出来</li></ul></li><li>console.dirxml()<ul><li>用于以目录树的形式，显示一个DOM节点</li></ul></li><li>console.time()  console.timeEnd()<ul><li>用来看一个操作所花费的准确时间、</li></ul></li><li>console.trace()<ul><li>显示当前执行的代码在堆栈中的调用路径 <h1 id="3-标准库"><a href="#3-标准库" class="headerlink" title="3. 标准库"></a>3. 标准库</h1></li></ul></li></ul></li></ul><h2 id="3-1-Object对象"><a href="#3-1-Object对象" class="headerlink" title="3.1 Object对象"></a>3.1 Object对象</h2><pre><code>Object.prototype.print = function () {  console.log(this);};var obj = new Object();obj.print() // Object</code></pre><p>凡是定义在Object.prototype对象上面的属性和方法，将被所有实例对象共享。<code>Object.prototype</code>叫做原型对象</p><h3 id="3-1-1-Object静态方法"><a href="#3-1-1-Object静态方法" class="headerlink" title="3.1.1 Object静态方法"></a>3.1.1 Object静态方法</h3><p>Object静态方法指的是部署在Object对象自身的方法。</p><ul><li>Object.keys<ul><li>方法参数为一个对象</li><li>返回一个数组，该数组的成员都是该对象自身的(非继承的)所有属性名</li></ul></li><li>Object.getOwnPropertyNames<ul><li>与Object.keys一样的用法</li><li>不同之处在于这个也会返回不可枚举的属性名</li></ul></li><li>如何计算对象的属性个数？<ul><li>Object.keys(obj).length </li></ul></li><li>对象属性模型的相关方法<ul><li>Object.getOwnPropertyDescriptor() <ul><li>获取某个属性的描述对象</li></ul></li><li>Object.defineProperty()<ul><li>通过描述对象，定义某个属性 </li></ul></li><li>Object.defineProperties()</li></ul></li><li>控制对象状态的方法<ul><li>Object.preventExtensions()<ul><li>防止对象扩展</li><li>使得一个对象无法再添加新的属性</li></ul></li><li>Object.isExtensible()<ul><li>判断对象是否扩展</li></ul></li><li>Object.seal()<ul><li>禁止对象的配置</li><li>无法添加也无法删除属性</li></ul></li><li>Object.isSealed()</li><li>Object.freeze()<ul><li>冻结一个对象</li><li>无法添加</li><li>无法删除</li><li>无法修改</li></ul></li><li>Object.isFrozen()<ul><li>判断一个对象是否冻结</li></ul></li></ul></li><li>原型链相关方法<ul><li>Object.create()<ul><li>指定原型对象和属性，返回一个新的对象</li></ul></li><li>Object.getPrototypeOf()<ul><li>获取对象的prototype对象 </li></ul></li></ul></li></ul><pre><code>var obj = {  p1: 123,  p2: 456};Object.keys(obj) // [&quot;p1&quot;, &quot;p2&quot;]var a = [&#39;Hello&#39;, &#39;World&#39;];Object.keys(a) // [&quot;0&quot;, &quot;1&quot;]Object.getOwnPropertyNames(a) // [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</code></pre><h3 id="3-1-2-Object的实例方法"><a href="#3-1-2-Object的实例方法" class="headerlink" title="3.1.2 Object的实例方法"></a>3.1.2 Object的实例方法</h3><p>指的是定义在Object.prototype对象的方法，称为实例方法。所有的Object对象都继承了这几个方法。</p><ul><li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li></ul><pre><code>// Object.prototype.valueOf()  返回对象本身var obj = new Object();obj.valueOf() === obj; // true</code></pre><ul><li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。<ul><li>toString本身是返回一个对象的字符串形式，默认情况下返回类型字符串</li><li>当对一个对象调用这个方法的时候，会返回字符串<code>[object Object]</code></li><li>可以自定义方法来返回更多的有用信息</li><li>数组，字符串，函数，Date对象都有自己的自定义的tostring方法的</li><li>我们可以用过<code>Object.prototype.toString.call(value)</code>来判断出一个值到底是什么类型的</li></ul></li></ul><pre><code>var o1 = new Object();o1.toString() // &quot;[object Object]&quot;var o2 = {a:1};o2.toString() // &quot;[object Object]&quot;var obj = new Object();obj.toString = function () {    return &quot;hello, I rewrite the toString() function&quot;;}Object.prototype.toString.call(2) // &quot;[object Number]&quot;Object.prototype.toString.call(&#39;&#39;) // &quot;[object String]&quot;Object.prototype.toString.call(true) // &quot;[object Boolean]&quot;Object.prototype.toString.call(undefined) // &quot;[object Undefined]&quot;Object.prototype.toString.call(null) // &quot;[object Null]&quot;Object.prototype.toString.call(Math) // &quot;[object Math]&quot;Object.prototype.toString.call({}) // &quot;[object Object]&quot;Object.prototype.toString.call([]) // &quot;[object Array]&quot;</code></pre><ul><li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。<ul><li>为的就是留出一个接口，让各种不同的对象实现自己的版本的toLocaleString,用来返回针对某些特定地域的特定的值 </li></ul></li><li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。<ul><li>接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否有该属性 </li></ul></li><li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li><li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。 </li></ul><h3 id="3-1-3-Attributes-Object"><a href="#3-1-3-Attributes-Object" class="headerlink" title="3.1.3 Attributes Object"></a>3.1.3 Attributes Object</h3><p>属性描述对象，控制其行为，比如该属性是否可写。可遍历等等。</p><p>属性描述对象提供了6个元属性</p><ul><li>value </li><li>writable </li><li>enumerable 布尔值，表示该属性是否可遍历</li><li>configurable 可配置性 <ul><li>如果设置为false, 将组织某些操作改写该属性，比如无法删除，也不得改变该属性的属性描述对象</li></ul></li><li>get<ul><li>取值函数</li></ul></li><li>set<ul><li>存值函数</li></ul></li></ul><p>属性可以通过存取器来进行定义  </p><p>存值函数称为setter，取值函数称为getter </p><pre><code>var obj = Object.defineProperty({}, &#39;p&#39;, {  get: function () {    return &#39;getter&#39;;  },  set: function (value) {    console.log(&#39;setter: &#39; + value);  }});obj.p // &quot;getter&quot;obj.p = 123 // &quot;setter: 123&quot;</code></pre><h1 id="3-2-Array对象"><a href="#3-2-Array对象" class="headerlink" title="3.2 Array对象"></a>3.2 Array对象</h1><h3 id="3-2-1-构造函数与静态方法"><a href="#3-2-1-构造函数与静态方法" class="headerlink" title="3.2.1 构造函数与静态方法"></a>3.2.1 构造函数与静态方法</h3><p>Array是JS的原生对象，也是一个构造函数，可以用其直接生成新的数组</p><pre><code>var arr = new Array(2);arr.length // 2</code></pre><ul><li>Array.isArray()<ul><li>判断一个obj是否为数组</li><li>这样做的原因是为了弥补<code>typeof</code>的缺陷，typeof只能返回是否一个object的这种信息</li></ul></li></ul><h3 id="3-2-2-实例方法"><a href="#3-2-2-实例方法" class="headerlink" title="3.2.2  实例方法"></a>3.2.2  实例方法</h3><ul><li>valueOf()<ul><li>返回数组本身 </li></ul></li><li>toString() <ul><li>返回数组的字符串形式</li></ul></li><li>push()<ul><li>在数组的末端加一个或者多个元素，并返回添加新元素以后的数组长度 </li></ul></li><li>pop()<ul><li>pop方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</li></ul></li><li>shift()<ul><li>用于删除数组的第一个元素，并且返回该元素</li><li>可以用来遍历并且清空一个数组</li></ul></li></ul><pre><code>var list = [1,2,3,4];var item;while (item = list.shift()) {    console.log(item);}</code></pre><ul><li>unshift()<ul><li>用于在数组的第一个位置添加元素，并且返回新元素添加以后的数组长度</li></ul></li><li>join()<ul><li>以指定参数作为分隔符，将所有数组成员连接为一个字符串并返回</li><li>如果数组成员是undefined/ null/ blank, 会被转成空字符串</li><li>join默认是用逗号来连接的</li></ul></li></ul><pre><code>var a = [1, 2, 3, 4];a.join(&#39; &#39;) // &#39;1 2 3 4&#39;a.join(&#39; | &#39;) // &quot;1 | 2 | 3 | 4&quot;a.join() // &quot;1,2,3,4&quot;</code></pre><ul><li>concat()<ul><li>用于多个数组的合并</li><li>将新数组的成员，添加到原数组成员的后面，然后返回一个新数组，原数组不变</li></ul></li><li>reverse()</li><li>slice()<ul><li>用于提取目标数组的一部分，返回一个新数组，原数组并不发生改变</li><li>第一个参数为起始位置，第二个参数为终止位置，但是这个位置并不包含在内</li><li>如果第二个参数省略，那就一直返回到原数组的最后一个成员</li><li>slice的一个重要应用时将类似数组的对象转为真正的数组</li></ul></li></ul><pre><code>Array.prototype.slice.call({ 0: &#39;a&#39;, 1: &#39;b&#39;, length: 2 })// [&#39;a&#39;, &#39;b&#39;]Array.prototype.slice.call(document.querySelectorAll(&quot;div&quot;));Array.prototype.slice.call(arguments);</code></pre><ul><li>splice()<ul><li>删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素</li><li><code>arr.splice(start, count, addElement1, addElement2, ...);</code></li></ul></li><li>sort()</li><li>map()<ul><li>将数组的所有成员依次传入参数函数，然后将每一次的执行结果组成一个新数组返回</li></ul></li></ul><pre><code>var numbers = [1, 2, 3];numbers.map(function (n) {  return n + 1;});// [2, 3, 4]numbers// [1, 2, 3]</code></pre><ul><li>forEach()<ul><li>与map方法类似，对数组的所有成员依次执行参数函数。但是forEach不返回值，只用来操作数据 </li><li>forEach接收第二个参数，绑定参数函数的this变量</li><li>forEacg方法无法中断执行，总是会把所有成员遍历完，如果希望符合某种条件就中断遍历，那需要使用for循环</li></ul></li></ul><pre><code>var out = [];[1, 2, 3].forEach(function(elem) {  this.push(elem * elem);}, out);out // [1, 4, 9]</code></pre><ul><li>filter()<ul><li>用于过滤数组成员，满足条件的成员组成一个新数组返回 </li><li>参数是一个函数，返回结果为true的成员组成一个新数组返回</li></ul></li></ul><pre><code>// 当前成员，当前位置，整个数组[1, 2, 3, 4, 5].filter(function (elem, index, arr) {  return index % 2 === 0;});// [1, 3, 5]var obj = { MAX: 3 };var myFilter = function (item) {  if (item &gt; this.MAX) return true;};var arr = [2, 8, 3, 4, 1, 3, 2, 9];arr.filter(myFilter, obj) // [8, 4, 9]</code></pre><ul><li>some()<ul><li>有满足条件的就返回true </li></ul></li><li>every()<ul><li>全都满足条件才返回true</li></ul></li><li>reduce(), reduceRight()<ul><li>依次处理数组的每一个成员，最终累计为一个值</li><li>reduce从左到右进行处理</li><li>reduceRight从右向左进行处理</li><li>四个参数<ul><li>累积变量</li><li>当前变量</li><li>当前位置</li><li>原数组</li></ul></li></ul></li></ul><pre><code>function findLongest(entries) {  return entries.reduce(function (longest, entry) {    return entry.length &gt; longest.length ? entry : longest;  }, &#39;&#39;);}findLongest([&#39;aaa&#39;, &#39;bb&#39;, &#39;c&#39;]) // &quot;aaa&quot;</code></pre><ul><li>indexOf()<ul><li>返回给定元素在数组中第一次出现的位置，如果没有出现就返回-1 </li></ul></li><li>lastIndexOf()<ul><li>返回给定元素在数组中最后一次出现的位置，如果没有出现就返回-1 </li></ul></li></ul><h2 id="3-3-包装对象"><a href="#3-3-包装对象" class="headerlink" title="3.3 包装对象"></a>3.3 包装对象</h2><p>三种原始类型的值 - 数值，字符串，布尔值在一定条件下也会自动转为对象，称为原始类型的包装对象 - wrapper</p><pre><code>var v1 = new Number(123);var v2 = new String(&#39;abc&#39;);var v3 = new Boolean(true);typeof v1 // &quot;object&quot;typeof v2 // &quot;object&quot;typeof v3 // &quot;object&quot;v1 === 123 // falsev2 === &#39;abc&#39; // falsev3 === true // false</code></pre><ul><li>valueOf()<ul><li>返回包装对象实例对应的原始类型的值</li></ul></li><li>toString()<ul><li>返回对应的字符串形式</li></ul></li><li>原始类型与实例对象的自动转换<ul><li>一些时候我们将原始类型的值自动当做包装对象来调用了，这时JS引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。</li><li><code>&#39;abc&#39;.length // 3</code></li><li>abc是字符串，但是js直接将其转化为了其包装对象，并在调用结束后，直接销毁这个临时对象，以此完成整个自动转换的过程</li></ul></li></ul><h3 id="3-3-1-Boolean对象"><a href="#3-3-1-Boolean对象" class="headerlink" title="3.3.1 Boolean对象"></a>3.3.1 Boolean对象</h3><pre><code>Boolean(undefined) // falseBoolean(null) // falseBoolean(0) // falseBoolean(&#39;&#39;) // falseBoolean(NaN) // falseBoolean(1) // trueBoolean(&#39;false&#39;) // trueBoolean([]) // trueBoolean({}) // trueBoolean(function () {}) // trueBoolean(/foo/) // true</code></pre><h3 id="3-3-2-Number对象"><a href="#3-3-2-Number对象" class="headerlink" title="3.3.2 Number对象"></a>3.3.2 Number对象</h3><ul><li>静态属性<ul><li>Number.POSITIVE_INFINITY</li><li>Number.NEGATIVE_INFINITY</li><li>Number.NaN</li><li>Number.MIN_VALUE</li><li>Number.MAX_SAFE_INTEGER</li><li>Number.MIN_SAFE_INTEGER</li></ul></li><li>实例方法<ul><li>Number.prototype.toString()</li><li>Number.prototype.toFixed()<ul><li>将一个数转为指定位数的小数，然后返回这个小数对应的字符串</li><li><code>(10).toFixed(2) // &quot;10.00&quot;</code></li></ul></li><li>Number.prototype.toExponential()<ul><li><code>(10).toExponential()  // &quot;1e+1&quot;</code></li><li>参数是小数点后有效数字的位数</li></ul></li><li>Number.prototype.toPrecision()<ul><li><code>(12.34).toPrecision(2) // &quot;12&quot;</code></li><li>将数字转为指定位数的有效数字</li></ul></li></ul></li></ul><h3 id="3-3-3-String对象"><a href="#3-3-3-String对象" class="headerlink" title="3.3.3 String对象"></a>3.3.3 String对象</h3><p>用来生成字符串对象，会生成一个非常类似数组的对象</p><pre><code>new String(&#39;abc&#39;)// String {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3}</code></pre><ul><li>静态方法<ul><li>String.fromCharCode()<ul><li>数值代表Unicode码点，返回值是这些码点组成的字符串</li></ul></li></ul></li><li>实例方法<ul><li>String.prototype.charAt()</li><li>String.prototype.charCodeAt()<ul><li>返回的是字符串指定位置的Unicode码点</li></ul></li><li>String.prototype.concat()<ul><li>用来连接两个字符串，返回一个新的字符串，并不改变原来的字符串</li><li><code>&#39;a&#39;.concat(&#39;b&#39;, &#39;c&#39;) // &quot;abc&quot;</code></li></ul></li><li>String.prototype.slice()<ul><li>用于从原字符串去除子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。 </li></ul></li><li>String.prototype.substr()<ul><li>从原字符串取出子字符串并返回，不改变原字符串</li><li>第一个参数为子字符串的开始位置，第二个参数为子字符串的长度</li></ul></li><li>String.prototype.indexOf()，String.prototype.lastIndexOf()</li><li>String.prototype.trim()<ul><li>去除字符串两端的空格，返回一个新的字符串，不改变原字符串</li><li>还包括 \t \v \n \r</li></ul></li><li>String.prototype.toLowerCase()，String.prototype.toUpperCase()</li><li>String.prototype.match()</li><li>String.prototype.search()<ul><li>返回值为匹配的第一个位置，如果没有找到匹配则返回 -1</li></ul></li><li>String.prototype.replace()</li><li>String.prototype.split()<ul><li>按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组</li></ul></li></ul></li></ul><pre><code>&#39;a|b|c&#39;.split(&#39;|&#39;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&#39;a||c&#39;.split(&#39;|&#39;) // [&#39;a&#39;, &#39;&#39;, &#39;c&#39;]&#39;a|b|c&#39;.split(&#39;|&#39;, 0) // []&#39;a|b|c&#39;.split(&#39;|&#39;, 1) // [&quot;a&quot;]&#39;a|b|c&#39;.split(&#39;|&#39;, 2) // [&quot;a&quot;, &quot;b&quot;]&#39;a|b|c&#39;.split(&#39;|&#39;, 3) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&#39;a|b|c&#39;.split(&#39;|&#39;, 4) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><h2 id="3-4-Math对象"><a href="#3-4-Math对象" class="headerlink" title="3.4 Math对象"></a>3.4 Math对象</h2><p>JS的原生对象，不是构造函数，无法生成对象，所有的属性和方法都需要在Math对象上进行调用</p><ul><li>静态属性<ul><li>Math.E</li><li>Math.LN2</li><li>Math.LN10</li><li>Math.LOG2E</li><li>Math.PI</li></ul></li><li>静态方法<ul><li>Math.abs()</li><li>Math.ceil()<ul><li>向上取整 </li></ul></li><li>Math.floor()<ul><li>向下取整</li></ul></li><li>Math.max()</li><li>Math.min()</li><li>Math.pow() 指数运算</li><li>Math.sqrt()</li><li>Math.log()</li><li>Math.exp() e的指数</li><li>Math.round() 四舍五入</li><li>Math.random() 随机数</li></ul></li></ul><h2 id="3-5-Date对象"><a href="#3-5-Date对象" class="headerlink" title="3.5 Date对象"></a>3.5 Date对象</h2><p>以UTC时间1970年1月1日00:00:00作为时间元点。</p><ul><li>直接调用Date() 返回当前时间</li><li>构造函数<ul><li>如果带参数，就转化那个时间</li><li>不带，就是当前时间</li></ul></li><li>静态方法<ul><li>Date.now() <ul><li>返回当前时间距离时间零点的毫秒数</li></ul></li><li>Date.parse()<ul><li>解析日期字符串，返回该时间距离时间零点的毫秒数</li><li>日期字符串需要符合RFC 2822和 ISO8061 两个标准</li></ul></li><li>Date.UTC()<ul><li>接收年月日等变量作为参数，返回该时间距离时间零点的毫秒数 </li></ul></li></ul></li><li>to see doc <a href="https://wangdoc.com/javascript/stdlib/date.html" target="_blank" rel="noopener">https://wangdoc.com/javascript/stdlib/date.html</a></li><li>get see doc <a href="https://wangdoc.com/javascript/stdlib/date.html" target="_blank" rel="noopener">https://wangdoc.com/javascript/stdlib/date.html</a></li><li>set see doc <a href="https://wangdoc.com/javascript/stdlib/date.html" target="_blank" rel="noopener">https://wangdoc.com/javascript/stdlib/date.html</a> </li></ul><h2 id="3-6-RegExp对象"><a href="#3-6-RegExp对象" class="headerlink" title="3.6 RegExp对象"></a>3.6 RegExp对象</h2><p>提供正则表达式的功能。表达文本模式的方法，可以使用字面量，以斜杠表示开始和结束，也可以使用RegExp构造函数</p><pre><code>// 引擎编译代码的时候，就新建正则表达式了var regex = /xyz/;// 运行的时候建立var regex = new RegExp(&#39;xyz&#39;);</code></pre><h3 id="3-6-1-实例属性"><a href="#3-6-1-实例属性" class="headerlink" title="3.6.1 实例属性"></a>3.6.1 实例属性</h3><ul><li>RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。</li><li>RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。</li><li>RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。</li><li>RegExp.prototype.flags：返回一个字符串，包含了已经设置的所有修饰符，按字母排序。</li></ul><h3 id="3-6-2-实例方法"><a href="#3-6-2-实例方法" class="headerlink" title="3.6.2 实例方法"></a>3.6.2 实例方法</h3><ul><li>RegExp.prototype.test()<ul><li>返回一个布尔值，表示当前模式是否能匹配参数字符串</li><li><code>/cat/.test(&#39;cats and dogs&#39;)  // true</code></li></ul></li><li>RegExp.prototype.exec()<ul><li>返回匹配结果，如果匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null </li></ul></li><li>String.prototype.match()<ul><li>所有匹配的子字符串</li></ul></li><li>String.prototype.search()<ul><li>按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置</li></ul></li><li>String.prototype.replace()<ul><li>按照给定的正则表达式进行替换，返回替换后的字符串</li></ul></li><li>String.prototype.split()<ul><li>按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</li></ul></li></ul><h3 id="3-6-3-各种符号表示"><a href="#3-6-3-各种符号表示" class="headerlink" title="3.6.3 各种符号表示"></a>3.6.3 各种符号表示</h3><ul><li>/g<ul><li>匹配所有符合正则表达式的值，如果没有，成功一次以后就停止了</li></ul></li><li>小括号 </li></ul><pre><code>// 如果带括号，括号本身的也会返回的&#39;aaa*a*&#39;.split(/(a*)/)// [ &#39;&#39;, &#39;aaa&#39;, &#39;*&#39;, &#39;a&#39;, &#39;*&#39; ]</code></pre><ul><li>字面量字符<ul><li>就是一对一的匹配</li><li>比如 /dog/ 只匹配包含dog的</li></ul></li><li>元字符<ul><li>点字符  匹配一个<ul><li>匹配出了回车\r, 换行\n, 行分隔符 \u2028, 段分隔符\u2029之外的所有字符</li></ul></li><li>位置字符<ul><li>^<ul><li>表示字符串开始的位置 </li></ul></li><li>$<ul><li>表示字符串结束的位置</li></ul></li></ul></li><li>选择符 | <ul><li>表示or的关系 </li><li>e.g <code>cat|dog</code>表示cat or dog都匹配</li></ul></li></ul></li><li>转义符<ul><li>对于正则表达式当中本身就具有特殊含义的元字符的处理，当需要匹配自身的时候，在它们的前面加上反斜杠 </li></ul></li><li>字符类 <ul><li>表示有一系列字符可供选择，只要匹配其中一个就可以了 都放到方括号当中 <code>[]</code></li><li>脱字符 <code>^</code><ul><li>若方括号内第一个字符是[^]，则是求反，即除了中括号之内的字符以外都可以进行匹配</li><li>如果方括号内没有其他字符，就表示匹配一切字符了，包括换行符</li><li>注意脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义</li></ul></li><li>连字符 <code>-</code><ul><li>对于连续序列的字符，用连字符来进行简写 </li></ul></li></ul></li><li>预定义模式 - 常见模式的简写方式<ul><li><code>\d</code><ul><li>匹配 0-9之间的任意数字，相当于<code>[0-9]</code> </li></ul></li><li><code>\D</code><ul><li>匹配所有 0-9之外的字符 相当于 <code>[^0-9]</code> </li></ul></li><li><code>\w</code><ul><li>匹配任意的字母、数字和下划线， 相当于<code>[A-Za-z0-9]</code> </li></ul></li><li><code>\W</code><ul><li>匹配除了字母数字和下划线以外的内容,  相当于<code>[^A-Za-z0-9]</code> </li></ul></li><li><code>\s</code><ul><li>匹配空格，包括换行符，制表符以及空格符，相当于<code>[\t\r\n\v\f]</code> </li></ul></li><li><code>\S</code><ul><li>匹配非空格的字符，相当于 <code>[^\t\r\n\v\f]</code> </li></ul></li><li><code>\b</code><ul><li>匹配词的边界 </li></ul></li><li><code>\B</code><ul><li>匹配词的内部 </li></ul></li></ul></li></ul><pre><code>// test必须出现在开始位置/^test/.test(&#39;test123&#39;) // true// test必须出现在结束位置/test$/.test(&#39;new test&#39;) // true// 从开始位置到结束位置只有test/^test$/.test(&#39;test&#39;) // true/^test$/.test(&#39;test test&#39;) // false/[abc]/.test(&#39;hello world&#39;) // false/[abc]/.test(&#39;apple&#39;) // truevar s = &#39;Please yes\nmake my day!&#39;;s.match(/yes.*day/) // nulls.match(/yes[^]*day/) // [ &#39;yes\nmake my day&#39;]// \s 的例子/\s\w*/.exec(&#39;hello world&#39;) // [&quot; world&quot;]// \b 的例子/\bworld/.test(&#39;hello world&#39;) // true/\bworld/.test(&#39;hello-world&#39;) // true/\bworld/.test(&#39;helloworld&#39;) // false// \B 的例子/\Bworld/.test(&#39;hello-world&#39;) // false/\Bworld/.test(&#39;helloworld&#39;) // true</code></pre><ul><li>重复类 - <code>{}</code><ul><li>模式的精准次数匹配，使用大括号表示</li><li><code>{n}</code> <ul><li>恰好重复n次 </li></ul></li><li><code>{n,}</code><ul><li>至少重复n次 </li></ul></li><li><code>{n,m}</code><ul><li>重复不少于n次不多于m次</li></ul></li></ul></li><li>量词符 - 用来设定某个模式出现的次数<ul><li><code>?</code><ul><li>出现0次或者1次</li><li>{0,1}</li></ul></li><li><code>*</code><ul><li>出现0次或多次</li><li>{0,}</li></ul></li><li><code>+</code><ul><li>出现1次或多次</li><li>{1,}</li></ul></li></ul></li><li>贪婪模式<ul><li>通过在量词符后面加问号，从贪婪模式转化为非贪婪模式</li></ul></li></ul><pre><code>&#39;abb&#39;.match(/ab*b/) // [&quot;abb&quot;]&#39;abb&#39;.match(/ab*?b/) // [&quot;ab&quot;]&#39;abb&#39;.match(/ab?b/) // [&quot;abb&quot;]&#39;abb&#39;.match(/ab??b/) // [&quot;ab&quot;]</code></pre><ul><li>修饰符<ul><li>表示模式的附加规则，放在正则模式的最尾部</li><li>修饰符可以单个使用，也可以多个使用</li><li>g修饰符<ul><li>默认情况下，如果第一次匹配成功了，那么正则对象就会停止向下匹配了</li><li>g修饰符代表全局匹配，加上他之后，正则对象将匹配全部符合条件的结果，主要用于搜索替换</li></ul></li><li>i修饰符<ul><li>表示忽略大小写 </li></ul></li><li>m修饰符<ul><li>m修饰符表示多行模式（multiline），会修改^和$的行为。默认情况下（即不加m修饰符时），^和$匹配字符串的开始处和结尾处，加上m修饰符以后，^和$还会匹配行首和行尾，即^和$会识别换行符（\n）。 </li></ul></li></ul></li></ul><pre><code>var regex = /b/g;var str = &#39;abba&#39;;regex.test(str); // trueregex.test(str); // trueregex.test(str); // false/abc/.test(&#39;ABC&#39;) // false/abc/i.test(&#39;ABC&#39;) // true/world$/.test(&#39;hello world\n&#39;) // false/world$/m.test(&#39;hello world\n&#39;) // true</code></pre><ul><li>组匹配<ul><li>括号表示分组匹配，括号中的模式用来匹配分组的内容 + 可以用\n表示第n个括号里面的内容</li><li>非捕获组 <code>(?:x)</code><ul><li>表示不返回该组匹配的内容 </li></ul></li><li>先行断言 <code>x(?=y)</code><ul><li>表示只有x在y前面才匹配，y不会被计入返回结果</li></ul></li><li>先行否定断言 <code>x(?!y)</code><ul><li>x只有不在y前面才匹配，y不会被计入返回结果 </li></ul></li></ul></li></ul><pre><code>var m = &#39;abcabc&#39;.match(/(.)b(.)/);m // [&#39;abc&#39;, &#39;a&#39;, &#39;c&#39;]/y(..)(.)\2\1/.test(&#39;yabccab&#39;) // truevar m = &#39;abc&#39;.match(/(?:.)b(.)/);m // [&quot;abc&quot;, &quot;c&quot;]</code></pre><h2 id="3-7-JSON对象"><a href="#3-7-JSON对象" class="headerlink" title="3.7 JSON对象"></a>3.7 JSON对象</h2><h3 id="3-7-1-JSON格式"><a href="#3-7-1-JSON格式" class="headerlink" title="3.7.1 JSON格式"></a>3.7.1 JSON格式</h3><ol><li>复合类型的值只能是数组或对象</li><li>原始类型只有四种：字符串，数值，布尔值和null</li><li>字符串必须使用双引号表示，不能使用单引号</li><li>对象的键名必须放在双引号里面</li><li>数组或对象最后一个成员的后面，不可以加逗号</li></ol><h3 id="3-7-2-JSON对象"><a href="#3-7-2-JSON对象" class="headerlink" title="3.7.2 JSON对象"></a>3.7.2 JSON对象</h3><ul><li>JSON.stringify()<ul><li>将一个值转为JSON字符串</li><li>会忽略对象的不可遍历的属性</li></ul></li><li>JSON.parse()<ul><li>将JSON字符串转成对应的值 </li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">https://wangdoc.com/javascript/</a> </li><li>表达式和语句 <a href="https://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687589.html" target="_blank" rel="noopener">https://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687589.html</a> </li><li>statement and expressions <a href="https://2ality.com/2012/09/expressions-vs-statements.html" target="_blank" rel="noopener">https://2ality.com/2012/09/expressions-vs-statements.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - callback function</title>
      <link href="/JavaScript-callback-function/"/>
      <url>/JavaScript-callback-function/</url>
      
        <content type="html"><![CDATA[<h1 id="1-What-is"><a href="#1-What-is" class="headerlink" title="1. What is"></a>1. What is</h1><ul><li>A function that is to be executed after another function has finished executing – hence the name call back </li><li>In JavaScript, functions are <strong>objects</strong>. Because of this, <strong>functions can take functions as arguments</strong>, and can be returned by other functions. Functions that do this are called <strong>higher-order functions</strong>. Any function that is passed as an argument is called a callback function.</li></ul><h1 id="2-Why-need"><a href="#2-Why-need" class="headerlink" title="2. Why need"></a>2. Why need</h1><p>JS is an event driven language, instead of waiting for a response before moving on, JS will keep executing while listening for other events. </p><pre><code>function first(){  // Simulate a code delay  setTimeout( function(){    console.log(1);  }, 500 );}function second(){  console.log(2);}first();second();// 2, 1</code></pre><p>The above example shows JS didn’t wait for a response from first() before moving on to execute second() </p><h1 id="3-How-to"><a href="#3-How-to" class="headerlink" title="3. How to"></a>3. How to</h1><pre><code>function doHomework(subject, callback) {  alert(`Starting my ${subject} homework.`);  callback();}doHomework(&#39;math&#39;, function() {  alert(&#39;Finished my homework&#39;);});</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Glossary/Callback_function</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i18next tutorial</title>
      <link href="/i18next-tutorial/"/>
      <url>/i18next-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><ul><li>highlights<ul><li>both for front end and back end<ul><li>can be used in nodejs, PHP, IOS, Android, etc. </li></ul></li><li>thorough solution <ul><li>detect the user language </li><li>load the translation </li><li>optionally cache the translation </li><li>extension support <ul><li><a href="https://www.i18next.com/overview/configuration-options" target="_blank" rel="noopener">personalization</a></li></ul></li></ul></li><li>scalability <ul><li>we could separate translations into multiple files and load them on demand  </li></ul></li></ul></li></ul><h1 id="2-Starting-from-Scratch"><a href="#2-Starting-from-Scratch" class="headerlink" title="2. Starting from Scratch"></a>2. Starting from Scratch</h1><h2 id="2-1-Basic-Example"><a href="#2-1-Basic-Example" class="headerlink" title="2.1 Basic Example"></a>2.1 Basic Example</h2><pre><code>// with callback functionimport i18next from &#39;i18next&#39;;i18next.init({  lng: &#39;en&#39;,  debug: true,  resources: {    en: {      translation: {        &quot;key&quot;: &quot;hello world&quot;      }    }  }}, function(err, t) {  // initialized and ready to go!  document.getElementById(&#39;output&#39;).innerHTML = i18next.t(&#39;key&#39;);});// with promisei18next.init({  lng: &#39;en&#39;,  debug: true,  resources: {    en: {      translation: {        &quot;key&quot;: &quot;hello world&quot;      }    }  }}).then(function(t) {  // initialized and ready to go!  document.getElementById(&#39;output&#39;).innerHTML = i18next.t(&#39;key&#39;);});</code></pre><h2 id="2-2-Configuration"><a href="#2-2-Configuration" class="headerlink" title="2.2 Configuration"></a>2.2 Configuration</h2><p>Record options when calling <code>i18next.init(options, callback)</code></p><ul><li>resources </li><li>lng </li><li>fallbackLng<ul><li>language to use if translation in user language are not available </li></ul></li><li>whitelist<ul><li>array of allowed languages </li></ul></li><li>ns <ul><li>string or array of namespaces to load  </li></ul></li><li>detection <ul><li>options for language detection </li></ul></li><li>backend <ul><li>option for backend </li></ul></li><li>cache <ul><li>option for cache layer  </li></ul></li></ul><h1 id="3-API"><a href="#3-API" class="headerlink" title="3. API"></a>3. API</h1><h2 id="3-1-General"><a href="#3-1-General" class="headerlink" title="3.1 General"></a>3.1 General</h2><ul><li>init <ul><li><code>i18next.init(options, callback)</code></li><li>Initialize an i18next instance </li><li>callback will be called after all translations were loaded </li></ul></li><li>use <ul><li><code>i18next.use(module)</code></li><li>load additional plugins to i18next </li></ul></li><li>t <ul><li><code>i18next.t(keys, options)</code></li><li>do translation, we could either use one key as a string or multiple keys as an Array of String. </li></ul></li></ul><pre><code>i18next.t(&#39;my.key&#39;); // -&gt; will return value in set languagei18next.t([&#39;unknown.key&#39;, &#39;my.key&#39;]); // -&gt; will return value for &#39;my.key&#39; in set language</code></pre><ul><li>exists<ul><li><code>i18next.exists(key, options)</code></li><li>same resolve function as t function, return true if a key exists </li></ul></li><li>getFixedT <ul><li><code>i18next.getFixedT(lng, ns)</code></li><li>return a t function that defaults to given language or namespace </li></ul></li></ul><pre><code>// fix language to germanconst de = i18next.getFixedT(&#39;de&#39;);de(&#39;myKey&#39;);// or fix the namespace to anotherNamespaceconst anotherNamespace = i18next.getFixedT(null, &#39;anotherNamespace&#39;);anotherNamespace(&#39;anotherNamespaceKey&#39;); // no need to prefix ns i18n.t(&#39;anotherNamespace:anotherNamespaceKey&#39;);</code></pre><ul><li>changeLanguage <ul><li><code>i18next.changeLanguage(lng, callback)</code></li><li>change the language, the callback will be called as soon translation were loaded or an error occurs while loading </li></ul></li><li>languages <ul><li><code>i18next.languages</code></li><li>a set, that will be used to look up the translation value </li></ul></li><li>loadNamespaces<ul><li><code>i18next.loadNamespaces(ns, callback)</code></li><li>load additional namespaces not defined in init options </li></ul></li></ul><pre><code>i18next.loadNamespaces(&#39;myNamespace&#39;, (err) =&gt; { /* resources have been loaded */ });i18next.loadNamespaces([&#39;myNamespace1&#39;, &#39;myNamespace2&#39;], (err) =&gt; { /* resources have been loaded */ });// using Promisesi18next  .loadNamespaces([&#39;myNamespace1&#39;, &#39;myNamespace2&#39;])  .then(() =&gt; {});</code></pre><ul><li><p>loadLanguages</p><ul><li><code>i18next.loadLanguages(lngs, callbak)</code></li><li>load additional languages not defined in init options </li></ul></li><li><p>reloadResources </p></li><li><p>setDefaultNamespace </p><ul><li>change the default namespace </li></ul></li><li><p>dir </p><ul><li><code>i18next.dir(lng)</code></li><li>return rtl or ltr depending on languages read direction </li></ul></li><li><p>format </p><ul><li><code>i18next.format(data, format, lng)</code></li><li>interpolation.format function exposure on init </li></ul></li></ul><h2 id="3-2-Instance-Creation"><a href="#3-2-Instance-Creation" class="headerlink" title="3.2 Instance Creation"></a>3.2 Instance Creation</h2><ul><li>createInstance <ul><li><code>i18next.createInstance(options, callback)</code></li><li>return a new i18next instance </li></ul></li></ul><pre><code>const newInstance = i18next.createInstance({  fallbackLng: &#39;en&#39;,  ns: [&#39;file1&#39;, &#39;file2&#39;],  defaultNS: &#39;file1&#39;,  debug: true}, (err, t) =&gt; {  if (err) return console.log(&#39;something went wrong loading&#39;, err);  t(&#39;key&#39;); // -&gt; same as i18next.t}));// is the same asconst newInstance = i18next.createInstance();newInstance.init({  fallbackLng: &#39;en&#39;,  ns: [&#39;file1&#39;, &#39;file2&#39;],  defaultNS: &#39;file1&#39;,  debug: true}, (err, t) =&gt; {  if (err) return console.log(&#39;something went wrong loading&#39;, err);  t(&#39;key&#39;); // -&gt; same as i18next.t}));</code></pre><ul><li>cloneInstance <ul><li><code>i18next,cloneInstance(options)</code></li><li>create a clone of the current instance</li><li>share store, plugins, and initial configuration </li><li>can be used to create an instance sharing storage but being independent on set language or default namespaces </li></ul></li></ul><h2 id="3-3-Events"><a href="#3-3-Events" class="headerlink" title="3.3 Events"></a>3.3 Events</h2><ul><li>onInitialized <ul><li><code>i18next.on(&#39;initialized&#39;, function(options){})</code></li><li>get fired after initialization </li></ul></li><li>onLanguageChanged<ul><li><code>i18next.on(&#39;languageChanged&#39;, function(lng){}</code></li><li>get fired when changeLanguage got called </li></ul></li><li>onLoaded <ul><li><code>i18next.on(&#39;loaded&#39;, function(loaded) {})</code></li><li>get fired when loading resources</li></ul></li><li>onFailedLoading<ul><li><code>i18next.on(&#39;failedLoading&#39;, function(lng, ns, msg) {})</code> </li><li>get fired if loading resources failed </li></ul></li><li>onMissingKey<ul><li><code>i18next.on(&#39;missingKey&#39;, function(lngs, namespace, key, res) {})</code></li></ul></li></ul><h2 id="3-4-Store-Events"><a href="#3-4-Store-Events" class="headerlink" title="3.4 Store Events"></a>3.4 Store Events</h2><ul><li>onAdded<ul><li><code>i18next.store.on(&#39;added&#39;, function(lng, ns) {})</code> </li></ul></li><li>onRemoved<ul><li><code>i18next.store.on(&#39;removed&#39;, function(lng, ns) {})</code></li></ul></li></ul><h2 id="3-5-Resource-Handling"><a href="#3-5-Resource-Handling" class="headerlink" title="3.5 Resource Handling"></a>3.5 Resource Handling</h2><p>can be accessed on i18next or i18next.services.resourceStore </p><ul><li>getResource <ul><li><code>i18next.getResource(lng, ns, key, options)</code> </li></ul></li><li>addResource <ul><li><code>i18next.addResource(lng, ns, key, value, options)</code></li></ul></li><li>addResourceBundle<ul><li><code>i18next.addResourceBundle(lng, ns, resources, deep, overwrite)</code></li><li>add a complete bundle </li></ul></li><li>hasResourceBundle </li><li>getDataByLanguage</li><li>getResourceBundle</li><li>removeResourceBUndle </li></ul><h1 id="4-Translation-Function"><a href="#4-Translation-Function" class="headerlink" title="4. Translation Function"></a>4. Translation Function</h1><h2 id="4-1-Essentials"><a href="#4-1-Essentials" class="headerlink" title="4.1 Essentials"></a>4.1 Essentials</h2><h3 id="4-1-1-Accessing-Keys"><a href="#4-1-1-Accessing-Keys" class="headerlink" title="4.1.1 Accessing Keys"></a>4.1.1 Accessing Keys</h3><pre><code>{    &quot;key&quot;: &quot;value of key&quot;,    &quot;look&quot;: {        &quot;deep&quot;: &quot;value of look deep&quot;    }}// use key for translation, then return its valuei18next.t(&#39;key&#39;);// -&gt; &quot;value of key&quot;// key could have its own structure i18next.t(&#39;look.deep&#39;);// -&gt; &quot;value of look deep&quot;</code></pre><h3 id="4-1-2-Passing-default-value"><a href="#4-1-2-Passing-default-value" class="headerlink" title="4.1.2 Passing default value"></a>4.1.2 Passing default value</h3><pre><code>i18next.t(&#39;key&#39;, &#39;default value to show&#39;)</code></pre><h3 id="4-1-3-Accessing-keys-in-different-namespace"><a href="#4-1-3-Accessing-keys-in-different-namespace" class="headerlink" title="4.1.3 Accessing keys in different namespace"></a>4.1.3 Accessing keys in different namespace</h3><p>As mentioned in 5.1, namespace allow you to separate translations into multiple files </p><ul><li>init </li></ul><pre><code>i18next.init({  ns: [&#39;common&#39;, &#39;moduleA&#39;],  defaultNS: &#39;moduleA&#39;});{    &quot;name&quot;: &quot;Module A&quot;}{    &quot;button&quot;: {        &quot;save&quot;: &quot;save&quot;    }}i18next.t(&#39;name&#39;);// -&gt; &quot;Module A&quot;// as shown below, for not default ns, you have to specify the ns name i18next.t(&#39;common:button.save&#39;);// -&gt; &quot;save&quot;</code></pre><h3 id="4-1-4-Multiple-Fallback-Keys"><a href="#4-1-4-Multiple-Fallback-Keys" class="headerlink" title="4.1.4 Multiple Fallback Keys"></a>4.1.4 Multiple Fallback Keys</h3><p>we could call t with an array of key, enable translation with dynamic keys, for a non specific fallback value </p><pre><code>{  &quot;error&quot;: {    &quot;unspecific&quot;: &quot;Something went wrong.&quot;,    &quot;404&quot;: &quot;The page was not found.&quot;  }}// const error = &#39;404&#39;;i18next.t([`error.${error}`, &#39;error.unspecific&#39;]); // -&gt; &quot;The page was not found&quot;// const error = &#39;502&#39;;i18next.t([`error.${error}`, &#39;error.unspecific&#39;]); // -&gt; &quot;Something went wrong&quot;</code></pre><h3 id="4-1-5-Overview-Options"><a href="#4-1-5-Overview-Options" class="headerlink" title="4.1.5 Overview Options"></a>4.1.5 Overview Options</h3><h2 id="4-2-Interpolation"><a href="#4-2-Interpolation" class="headerlink" title="4.2 Interpolation"></a>4.2 Interpolation</h2><p>It enables you to integrate dynamic values into translation. </p><p>Interpolation values get escaped to save you from possible xss attacks</p><h3 id="4-2-1-Basic"><a href="#4-2-1-Basic" class="headerlink" title="4.2.1 Basic"></a>4.2.1 Basic</h3><p>Key by default are strings surrounded by curly brackets</p><pre><code>{    &quot;key&quot;: &quot;{{what}} is {{how}}&quot;}i18next.t(&#39;key&#39;, { what: &#39;i18next&#39;, how: &#39;great&#39; });// -&gt; &quot;i18next is great&quot;// Working with data models{    &quot;key&quot;: &quot;I am {{author.name}}&quot;}const author = {     name: &#39;Jan&#39;,    github: &#39;jamuhl&#39;};i18next.t(&#39;key&#39;, { author });// -&gt; &quot;I am Jan&quot;</code></pre><h3 id="4-2-2-Unescape"><a href="#4-2-2-Unescape" class="headerlink" title="4.2.2 Unescape"></a>4.2.2 Unescape</h3><p>Per default the values get escaped to save you from possible xss attacks, you could toggle excaping off, by either putting <code>-</code> beofre the key, or set the <code>escapeValue</code> option to <code>false</code> when requesting a translation. </p><pre><code>{    &quot;keyEscaped&quot;: &quot;no danger {{myVar}}&quot;,    &quot;keyUnescaped&quot;: &quot;dangerous {{- myVar}}&quot;}i18next.t(&#39;keyEscaped&#39;, { myVar: &#39;&lt;img /&gt;&#39; });// -&gt; &quot;no danger &amp;lt;img &amp;#x2F;&amp;gt;&quot;i18next.t(&#39;keyUnescaped&#39;, { myVar: &#39;&lt;img /&gt;&#39; });// -&gt; &quot;dangerous &lt;img /&gt;&quot;i18next.t(&#39;keyEscaped&#39;, { myVar: &#39;&lt;img /&gt;&#39;, interpolation: { escapeValue: false } });// -&gt; &quot;no danger &lt;img /&gt;&quot; (obviously could be dangerous)</code></pre><h3 id="4-2-3-Additional-Options"><a href="#4-2-3-Additional-Options" class="headerlink" title="4.2.3 Additional Options"></a>4.2.3 Additional Options</h3><p>Prefix/ suffix for interpolation and other options can be overridden in the init options or by passing additional options to the <code>t</code> function. </p><pre><code>i18next.init({    interpolation: { ... }});i18next.t(&#39;key&#39;, {    interpolation: { ... }});</code></pre><ul><li>format </li><li>formatSeparator <ul><li>used to separate format from interpolation value </li></ul></li><li>excape <ul><li><code>function excape(str) {return str;}</code></li></ul></li><li>escapeValue<ul><li>escape passed in values to avoid xss injection </li></ul></li><li>useRawValueToEscape <ul><li>if true, then value passed into escape function is not casted to string, use with custom escape function that does its own type check </li></ul></li><li>prefix </li><li>suffix </li><li>prefixEscaped  escaped prefix for interpolation (regexSafe)</li><li>suffixEscaped  escaped suffix for interpolation (regexSafe)</li><li>unexcapeSuffix</li><li>unescapePrefix</li><li>nestingPrefix</li><li>nestingSuffix</li><li>nestingPrefixEscaped </li><li>nestingSuffixEscaped</li><li>defaultVariables<ul><li>global variables to use in interpolation replacements </li></ul></li><li>maxReplaces<ul><li>after how many interpolation runs to break out before throwing a stack overflow  </li></ul></li></ul><h2 id="4-3-Formatting"><a href="#4-3-Formatting" class="headerlink" title="4.3 Formatting"></a>4.3 Formatting</h2><p>Format numbers/ dates and you can also use this function for custom formattings. </p><h3 id="4-3-1-Basic"><a href="#4-3-1-Basic" class="headerlink" title="4.3.1 Basic"></a>4.3.1 Basic</h3><pre><code>{    &quot;key&quot;: &quot;The current date is {{date, MM/DD/YYYY}}&quot;,    &quot;key2&quot;: &quot;{{text, uppercase}} just uppercased&quot;}i18next.init({    interpolation: {        format: function(value, format, lng) {            if (format === &#39;uppercase&#39;) return value.toUpperCase();            if(value instanceof Date) return moment(value).format(format);            return value;        }    }});i18next.t(&#39;key&#39;, { date: new Date() });// -&gt; &quot;The current date is 07/13/2016&quot;i18next.t(&#39;key2&#39;, { text: &#39;can you hear me&#39; });// =&gt; &quot;CAN YOU HEAR ME just uppercased&quot;i18next.on(&#39;languageChanged&#39;, function(lng) {  moment.locale(lng);});</code></pre><h3 id="4-3-2-Additional-Options"><a href="#4-3-2-Additional-Options" class="headerlink" title="4.3.2 Additional Options"></a>4.3.2 Additional Options</h3><ul><li>format function <ul><li><code>function format(value, format, lng){}</code> </li></ul></li><li>formatSeparator<ul><li>used to separate format from interpolation value </li></ul></li></ul><h2 id="4-4-Plurals"><a href="#4-4-Plurals" class="headerlink" title="4.4 Plurals"></a>4.4 Plurals</h2><p>i18next support plurals by default. </p><pre><code>{  &quot;key&quot;: &quot;item&quot;,  &quot;key_plural&quot;: &quot;items&quot;,  &quot;keyWithCount&quot;: &quot;{{count}} item&quot;,  &quot;keyWithCount_plural&quot;: &quot;{{count}} items&quot;}i18next.t(&#39;key&#39;, {count: 0}); // -&gt; &quot;items&quot;i18next.t(&#39;key&#39;, {count: 1}); // -&gt; &quot;item&quot;i18next.t(&#39;key&#39;, {count: 5}); // -&gt; &quot;items&quot;i18next.t(&#39;key&#39;, {count: 100}); // -&gt; &quot;items&quot;i18next.t(&#39;keyWithCount&#39;, {count: 0}); // -&gt; &quot;0 items&quot;i18next.t(&#39;keyWithCount&#39;, {count: 1}); // -&gt; &quot;1 item&quot;i18next.t(&#39;keyWithCount&#39;, {count: 5}); // -&gt; &quot;5 items&quot;i18next.t(&#39;keyWithCount&#39;, {count: 100}); // -&gt; &quot;100 items&quot;</code></pre><p>Usually the plural suffix could be key_plural directly, but you could find more accurate answer <a href="https://jsfiddle.net/sm9wgLze" target="_blank" rel="noopener">here</a></p><h3 id="4-4-1-Interval-Plurals"><a href="#4-4-1-Interval-Plurals" class="headerlink" title="4.4.1 Interval Plurals"></a>4.4.1 Interval Plurals</h3><p>We could define phrases expressing the number of items lies in a range in following ways </p><pre><code>// add a post processor import i18next from &#39;i18next&#39;;import intervalPlural from &#39;i18next-intervalplural-postprocessor&#39;;i18next  .use(intervalPlural)  .init(i18nextOptions); // define all the keys needed {  &quot;key1&quot;: &quot;{{count}} item&quot;,  &quot;key1_plural&quot;: &quot;{{count}} items&quot;,  &quot;key1_interval&quot;: &quot;(1){one item};(2-7){a few items};(7-inf){a lot of items};&quot;,  &quot;key2&quot;: &quot;{{count}} item&quot;,  &quot;key2_plural&quot;: &quot;{{count}} items&quot;,  &quot;key2_interval&quot;: &quot;(1){one item};(2-7){a few items};&quot;}// sample - running code i18next.t(&#39;key1_interval&#39;, {postProcess: &#39;interval&#39;, count: 1}); // -&gt; &quot;one item&quot;i18next.t(&#39;key1_interval&#39;, {postProcess: &#39;interval&#39;, count: 4}); // -&gt; &quot;a few items&quot;i18next.t(&#39;key1_interval&#39;, {postProcess: &#39;interval&#39;, count: 100}); // -&gt; &quot;a lot of items&quot;// not matching into a range it will fallback to// the regular plural formi18next.t(&#39;key2_interval&#39;, {postProcess: &#39;interval&#39;, count: 1}); // -&gt; &quot;one item&quot;i18next.t(&#39;key2_interval&#39;, {postProcess: &#39;interval&#39;, count: 4}); // -&gt; &quot;a few items&quot;i18next.t(&#39;key2_interval&#39;, {postProcess: &#39;interval&#39;, count: 100}); // -&gt; &quot;100 items&quot;</code></pre><h2 id="4-5-Nesting"><a href="#4-5-Nesting" class="headerlink" title="4.5 Nesting"></a>4.5 Nesting</h2><h3 id="4-5-1-Basic"><a href="#4-5-1-Basic" class="headerlink" title="4.5.1 Basic"></a>4.5.1 Basic</h3><p>Allow you to reference other keys in a translation, could be useful to build glossary terms. </p><pre><code>{    &quot;nesting1&quot;: &quot;1 $t(nesting2)&quot;,    &quot;nesting2&quot;: &quot;2 $t(nesting3)&quot;,    &quot;nesting3&quot;: &quot;3&quot;,}i18next.t(&#39;nesting1&#39;); // -&gt; &quot;1 2 3&quot;</code></pre><p>we could also reference keys from other namespaces by prepending the namespace</p><pre><code>&quot;nesting1&quot;: &quot;1 $t(common:nesting2)&quot;</code></pre><h3 id="4-5-2-Passing-Options-to-nestings"><a href="#4-5-2-Passing-Options-to-nestings" class="headerlink" title="4.5.2 Passing Options to nestings"></a>4.5.2 Passing Options to nestings</h3><pre><code>{      &quot;girlsAndBoys&quot;: &quot;$t(girls, {&#39;count&#39;: {{girls}} }) and {{count}} boy&quot;,      &quot;girlsAndBoys_plural&quot;: &quot;$t(girls, {&#39;count&#39;: {{girls}} }) and {{count}} boys&quot;,      &quot;girls&quot;: &quot;{{count}} girl&quot;,      &quot;girls_plural&quot;: &quot;{{count}} girls&quot;}i18next.t(&#39;girlsAndBoys&#39;, {count: 2, girls: 3});// -&gt; &quot;3 girls and 2 boys&quot;</code></pre><h3 id="4-5-3-Passing-nesting-to-interpolated"><a href="#4-5-3-Passing-nesting-to-interpolated" class="headerlink" title="4.5.3 Passing nesting to interpolated"></a>4.5.3 Passing nesting to interpolated</h3><pre><code>{      &quot;key1&quot;: &quot;hello world&quot;,      &quot;key2&quot;: &quot;say: {{val}}&quot;}i18next.t(&#39;key2&#39;, {val: &#39;$t(key1)&#39;});// -&gt; &quot;say: hello world&quot;</code></pre><h2 id="4-6-Context"><a href="#4-6-Context" class="headerlink" title="4.6 Context"></a>4.6 Context</h2><p>Differ translations by providing a context  – useful to provide gender specific translations </p><pre><code>{      &quot;friend&quot;: &quot;A friend&quot;,      &quot;friend_male&quot;: &quot;A boyfriend&quot;,      &quot;friend_female&quot;: &quot;A girlfriend&quot;}i18next.t(&#39;friend&#39;); // -&gt; &quot;A friend&quot;i18next.t(&#39;friend&#39;, { context: &#39;male&#39; }); // -&gt; &quot;A boyfriend&quot;i18next.t(&#39;friend&#39;, { context: &#39;female&#39; }); // -&gt; &quot;A girlfriend&quot;{      &quot;friend_male&quot;: &quot;A boyfriend&quot;,      &quot;friend_female&quot;: &quot;A girlfriend&quot;,      &quot;friend_male_plural&quot;: &quot;{{count}} boyfriends&quot;,      &quot;friend_female_plural&quot;: &quot;{{count}} girlfriends&quot;}i18next.t(&#39;friend&#39;, {context: &#39;male&#39;, count: 1}); // -&gt; &quot;A boyfriend&quot;i18next.t(&#39;friend&#39;, {context: &#39;female&#39;, count: 1}); // -&gt; &quot;A girlfriend&quot;i18next.t(&#39;friend&#39;, {context: &#39;male&#39;, count: 100}); // -&gt; &quot;100 boyfriends&quot;i18next.t(&#39;friend&#39;, {context: &#39;female&#39;, count: 100}); // -&gt; &quot;100 girlfriends&quot;</code></pre><h2 id="4-7-Objects-and-Arrays"><a href="#4-7-Objects-and-Arrays" class="headerlink" title="4.7 Objects and Arrays"></a>4.7 Objects and Arrays</h2><p>You could return objects or arrays to be used by 3rd party modules localization</p><pre><code>{    &quot;tree&quot;: {        &quot;res&quot;: &quot;added {{something}}&quot;    },    &quot;array&quot;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]}i18next.t(&#39;tree&#39;, { returnObjects: true, something: &#39;gold&#39; });// -&gt; { res: &#39;added gold&#39; }i18next.t(&#39;array&#39;, { returnObjects: true });// -&gt; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre><h1 id="5-Principles"><a href="#5-Principles" class="headerlink" title="5. Principles"></a>5. Principles</h1><h2 id="5-1-Namespace"><a href="#5-1-Namespace" class="headerlink" title="5.1 Namespace"></a>5.1 Namespace</h2><ul><li>allow you to separate translations thatget loaded into multiple files </li><li>separate files could benefits<ul><li>too many segments in a file make you lose the overview</li><li>not every translation needs to be loaded on the first page, speed up load time </li></ul></li><li>good practice<ul><li>namespace per view/ page</li><li>namespace per application section </li><li>namespace per module which gets lazy loaded </li></ul></li></ul><pre><code>i18next.init({  ns: [&#39;common&#39;, &#39;moduleA&#39;, &#39;moduleB&#39;],  defaultNS: &#39;moduleA&#39;}, (err, t) =&gt; {  i18next.t(&#39;myKey&#39;); // key in moduleA namespace (defined default)  i18next.t(&#39;common:myKey&#39;); // key in common namespace});// load additional namespaces after initializationi18next.loadNamespaces(&#39;anotherNamespace&#39;, (err, t) =&gt; { /* ... */ });</code></pre><h2 id="5-2-Translation-Resolution"><a href="#5-2-Translation-Resolution" class="headerlink" title="5.2 Translation Resolution"></a>5.2 Translation Resolution</h2><p>A overall process on how i18next attempts to translate your keys into the appropriate content for a given location. </p><h3 id="5-2-1-Concepts"><a href="#5-2-1-Concepts" class="headerlink" title="5.2.1 Concepts"></a>5.2.1 Concepts</h3><ul><li>Keys<ul><li>A key is a specific set to text than provides a corresponding value when look up </li></ul></li><li>Languages <ul><li>Language to be used for translating a key </li><li>If a key is not found, you could gracefully fall back to other languages </li></ul></li></ul><h3 id="5-2-2-Resolution-Order"><a href="#5-2-2-Resolution-Order" class="headerlink" title="5.2.2 Resolution Order"></a>5.2.2 Resolution Order</h3><p>When translating a key, i18next tries the first combination of <strong>namespace, language, and key</strong>.  If that doesn’t work, i18next will try to match with a similar key, looking for a key that best fits the plural form, context and singular form in that order. </p><ul><li>similar keys <ul><li>If the specific key is not found, i18next tries to match the key you are looking for with a similar key, looking for a key that best fits the plural form, context, and singular form in that order.</li></ul></li><li>languages<ul><li>i18next will walk through the list of languages, which consists of the current language and the fallback languages.  </li></ul></li><li>namespaces<ul><li>walk through current namespaces and the fallback namespaces </li></ul></li><li>fallback keys <ul><li>if that key is still not found, i18n will walk through the process with the fallbak keys if specified  </li></ul></li><li>key not found <ul><li>will then return the key itself, that being the first key specified if you also specified fallback keys </li></ul></li></ul><h2 id="5-3-Fallback"><a href="#5-3-Fallback" class="headerlink" title="5.3 Fallback"></a>5.3 Fallback</h2><pre><code>{  &quot;error&quot;: {    &quot;unspecific&quot;: &quot;Something went wrong.&quot;,    &quot;404&quot;: &quot;The page was not found.&quot;  }}// const error = &#39;404&#39;;i18next.t([`error.${error}`, &#39;error.unspecific&#39;]) // -&gt; &quot;The page was not found&quot;// const error = &#39;502&#39;;i18next.t([`error.${error}`, &#39;error.unspecific&#39;]) // -&gt; &quot;Something went wrong&quot;</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.i18next.com/" target="_blank" rel="noopener">https://www.i18next.com/</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> i18next </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS pseudo class selectors</title>
      <link href="/CSS-pseudo-class-selectors/"/>
      <url>/CSS-pseudo-class-selectors/</url>
      
        <content type="html"><![CDATA[<h1 id="1-What-is-pseudo-selectors"><a href="#1-What-is-pseudo-selectors" class="headerlink" title="1. What is pseudo selectors?"></a>1. What is pseudo selectors?</h1><blockquote><p>Used to style specified parts of an element: </p><ol><li>Style the first letter, or line of an element </li><li>Insert content before, or after the content of an element </li></ol></blockquote><h1 id="2-Why-you-wanna-use-it"><a href="#2-Why-you-wanna-use-it" class="headerlink" title="2. Why you wanna use it?"></a>2. Why you wanna use it?</h1><ul><li>Realize some fancy styling, like you want to highlight the first line or first character in an element </li><li>You want to insert some common element before/after each specific element</li></ul><h1 id="3-How-to-use-it"><a href="#3-How-to-use-it" class="headerlink" title="3. How to use it?"></a>3. How to use it?</h1><pre><code>p::first-line {  color: #ff0000;  font-variant: small-caps;}p::first-letter {  color: #ff0000;  font-size: xx-large;}// you insert gif before every h1h1::before {  content: url(smiley.gif);}h1::after {  content: url(smiley.gif);}::selection {  color: red;  background: yellow;}</code></pre><h1 id="4-Tips"><a href="#4-Tips" class="headerlink" title="4. Tips"></a>4. Tips</h1><h2 id="4-1-Double-colon-versus-single"><a href="#4-1-Double-colon-versus-single" class="headerlink" title="4.1 Double colon versus single"></a>4.1 Double colon versus single</h2><p>The double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements.</p><p>The single-colon syntax was used for both pseudo-classes and pseudo-elements in CSS2 and CSS1.</p><p>For backward compatibility, the single-colon syntax is acceptable for CSS2 and CSS1 pseudo-elements.</p><p>*<em>Please try to use single instead of double thus it could support almost all browsers *</em></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.w3schools.com/css/css_pseudo_elements.asp" target="_blank" rel="noopener">https://www.w3schools.com/css/css_pseudo_elements.asp</a></li><li><a href="https://css-tricks.com/almanac/selectors/a/after-and-before/" target="_blank" rel="noopener">https://css-tricks.com/almanac/selectors/a/after-and-before/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux性能优化(4)-CPU使用率</title>
      <link href="/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-4-CPU%E4%BD%BF%E7%94%A8%E7%8E%87/"/>
      <url>/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-4-CPU%E4%BD%BF%E7%94%A8%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>衡量CPU的方式，可以使用：</p><ul><li>平均负载</li><li>CPU上下文切换</li><li>CPU使用率</li></ul><h1 id="1-CPU使用率"><a href="#1-CPU使用率" class="headerlink" title="1. CPU使用率"></a>1. CPU使用率</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>Linux作为一个多任务操作系统，将每个CPU的时间划分为很短的时间片，再通过调度器轮流分配给各个人物使用，因此造成多任务同时运行的错觉。</p><p>为了维护CPU时间，Linux通过事先定义的节拍率，触发时间中断，并使用全局变量Jiffies记录了开机以来的节拍数，每发生一次时间中断，Jiffies的值就加1.可以通过查询<code>/boot/config</code>内核选项来查看其配置，一般来说设置为100，250， 1000等数值。比如对于100来说，就是每秒触发250次时间中断。</p><p>Linux通过<code>/proc</code>虚拟文件系统，向用户空间提供系统内部状态的信息，而<code>/proc/stat</code>提供的就是系统的CPU和任务统计信息</p><ul><li>使用man proc 查询, 都是和CPU使用率相关的重要指标<ul><li>user: 用户态CPU时间</li><li>nice: 低优先级用户态时间</li><li>system: 内核态CPU时间</li><li>idle: 空闲时间</li><li>iowait: 等待I/O的CPU时间</li><li>irq: 处理硬中断的CPU时间</li><li>softirq: 处理软中断的CPU时间</li><li>steal: 运行在虚拟机当中，被其他虚拟机占用的CPU时间</li><li>guest: 运行虚拟机的CPU时间</li><li>guest_nice: 以低优先级运行虚拟机的时间</li></ul></li></ul><p><img src="https://i.loli.net/2020/01/31/vbKiQhfYDls4XrH.png" alt="fig1.png"></p><h2 id="1-2-如何查看"><a href="#1-2-如何查看" class="headerlink" title="1.2 如何查看"></a>1.2 如何查看</h2><ul><li>top<ul><li>显示系统总体的CPU和内存使用的情况，以及各个进程的资源使用情况 </li></ul></li><li>ps<ul><li>显示每个进程的资源使用情况 </li></ul></li><li>pidstat<ul><li>分析每个进程的CPU使用率 </li></ul></li></ul><h2 id="1-3-如何分析"><a href="#1-3-如何分析" class="headerlink" title="1.3 如何分析"></a>1.3 如何分析</h2><ul><li>使用Perf<ul><li>perf top<ul><li>显示占用CPU时钟最多的函数或者指令 </li></ul></li><li>perf record<ul><li>可以保存数据 </li></ul></li><li>perf report</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CPU Utilization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux性能优化(3)-CPU 上下文切换</title>
      <link href="/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-3-CPU-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
      <url>/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-3-CPU-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><p>多个进程竞争CPU会导致系统的负载升高，这是因为CPU会进行上下文切换。Linux是一个多任务操作系统，它可以支持远大于CPU数量的任务同时进行，然而，并不是真的同时运行，而是系统在很短的时间内，将CPU轮流分配给它们，造成多任务同时运行的错觉。</p><p>而在每个任务运行之前，CPU需要知道任务从哪里加载，又从哪里开始运行的。即<strong><em>系统需要事先设置好CPU寄存器和程序计数器</em></strong>。</p><p>CPU 寄存器，是 CPU 内置的容量小、但速度极快的内存。而程序计数器，则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。它们都是 CPU 在运行任何任务前，必须的依赖环境，因此也被叫做 CPU上下文。</p><p><img src="https://i.loli.net/2020/01/31/3jaulkJAZwrsYBm.png" alt="fig1.png"></p><p>而CPU上下文切换，就是先把前一个任务的CPU上下文，(CPU寄存器和程序计数器)保存起来,然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。</p><p>而这些保存下来的上下文，会存储在系统内核中，并在任务重新调度执行时再次加载进来。这样就能保证任务原来的状态不受影响，让任务看起来还是连续运行。</p><p>而CPU的上下文切换，可以分为几个不同的场景，进程上下文切换，线程上下文切换以及中断上下文切换。</p><h1 id="2-系统调用"><a href="#2-系统调用" class="headerlink" title="2 系统调用"></a>2 系统调用</h1><p>Linux 按照特权等级，把进程的运行空间分为内核空间和用户空间，分别对应着下图中， CPU 特权等级的 Ring 0 和 Ring 3。</p><p><img src="https://i.loli.net/2020/01/31/itzhDSE6eTcVOGP.png" alt="fig2.png"></p><ul><li>内核空间具有最高权限，可以直接访问所有资源</li><li>用户空间只能访问受限资源，不能直接访问内存等硬件设备，必须通过系统调用陷入内核状态中，才能访问这些特权资源。</li></ul><blockquote><p>进程既可以在用户空间运行，也可以在内核空间中运行。分别称为进程的用户态和内核态。</p></blockquote><p>从用户态到内核态的转变，需要通过系统调用来完成。而这实际上也发生了CPU的上下文切换，CPU 寄存器里原来用户态的指令位置，需要先保存起来。接着，为了执行内核态代码，CPU 寄存器需要更新为内核态指令的新位置。最后才是跳转到内核态运行内核任务。</p><p>而系统调用结束后，CPU 寄存器需要恢复原来保存的用户态，然后再切换到用户空间，继续运行进程。所以一次系统调用的过程，实际上是发生了两次CPU上下文切换。</p><p>系统调用过程，不会切换进程的，不涉及到虚拟内存等进程用户态的资源，也不会切换进程。</p><ul><li>进程的上下文切换，是指从一个进程切换到另一个进程运行。</li><li>系统调用过程一直在同一个进程当中</li></ul><h1 id="3-进程上下文切换"><a href="#3-进程上下文切换" class="headerlink" title="3. 进程上下文切换"></a>3. 进程上下文切换</h1><h2 id="3-1-进程上下文切换和系统调用的区别"><a href="#3-1-进程上下文切换和系统调用的区别" class="headerlink" title="3.1 进程上下文切换和系统调用的区别"></a>3.1 进程上下文切换和系统调用的区别</h2><ul><li>进程是由内核来管理和调度的，<strong>进程的切换只能发生在内核态</strong>。所以，进程的上下文不仅包括了<strong>虚拟内存、栈、全局变量</strong>等用户空间的资源，还包括了<strong>内核堆栈、寄存器</strong>等内核空间的状态。</li><li>因此，进程的上下文切换就比系统调用时多了一步：在保存当前进程的内核状态和 CPU 寄存器之前，需要先把该进程的虚拟内存、栈等保存下来；而加载了下一进程的内核态后，还需要刷新进程的虚拟内存和用户栈。</li></ul><p><img src="https://i.loli.net/2020/01/31/qum5ICSpUbZcjyR.png" alt="fig3.png"></p><p>每次上下文切换都需要几十纳秒到数微秒的 CPU 时间。这个时间还是相当可观的，特别是在进程上下文切换次数较多的情况下，很容易导致 CPU 将大量时间耗费在寄存器、内核栈以及虚拟内存等资源的保存和恢复上，进而大大缩短了真正运行进程的时间。这也正是上一节中我们所讲的，导致平均负载升高的一个重要因素。</p><p>另外，我们知道， <strong>Linux 通过 TLB（Translation Lookaside Buffer）来管理虚拟内存到物理内存的映射关系</strong>。当虚拟内存更新后，TLB 也需要刷新，内存的访问也会随之变慢。特别是在多处理器系统上，缓存是被多个处理器共享的，刷新缓存不仅会影响当前处理器的进程，还会影响共享缓存的其他处理器的进程。</p><h2 id="3-2-何时需要进程切换"><a href="#3-2-何时需要进程切换" class="headerlink" title="3.2 何时需要进程切换"></a>3.2 何时需要进程切换</h2><p>进程调度的时候，按照优先级和等待的时间进行排序，对CPU的使用进行分配。</p><ol><li>为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，就会被系统挂起，切换到其它正在等待 CPU 的进程运行。</li><li><strong>进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行</strong>，这个时候进程也会被挂起，并由系统调度其他进程运行。</li><li>当进程通过睡眠函数  sleep 这样的方法将自己主动挂起时，自然也会重新调度。</li><li>当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行。</li><li>发生<strong>硬件中断</strong>时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序。</li></ol><h1 id="4-线程上下文切换"><a href="#4-线程上下文切换" class="headerlink" title="4. 线程上下文切换"></a>4. 线程上下文切换</h1><h2 id="4-1-线程-vs-进程"><a href="#4-1-线程-vs-进程" class="headerlink" title="4.1 线程 vs 进程"></a>4.1 线程 vs 进程</h2><blockquote><p>线程是调度的基本单温，而进程是资源拥有的基本单位。</p></blockquote><ul><li>内核当中的任务调度，实际上的调用对象是线程</li><li>进程在为线程提供虚拟内存，全局变量等资源</li><li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源，这些资源在上下文切换的时候是不需要修改的</li><li>线程自己的私有数据比如栈还有寄存器，在上下文切换的时候是需要保存的</li></ul><h2 id="4-2-线程切换"><a href="#4-2-线程切换" class="headerlink" title="4.2 线程切换"></a>4.2 线程切换</h2><p>两种情况：</p><ul><li>两个线程属于不同进程，因为资源不共享，所以切换过程跟进程上下文切换时一样的</li><li>两个线程属于同一个进程，虚拟内存是共享的，在切换的时候，虚拟内存等资源保持不动，只需要切换线程的私有数据，寄存器等不共享的数据</li></ul><h1 id="5-中断上下文切换"><a href="#5-中断上下文切换" class="headerlink" title="5. 中断上下文切换"></a>5. 中断上下文切换</h1><p>快速响应硬件时间的方式，中断处理会打断进程的正常调度和执行，转而调用中断处理程序，响应设备事件。而在打断其他进程时，需要将进程当前的状态保存下来，这样在中断结束以后，进程仍可以从原来的状态恢复运行。</p><p>跟进程上下文不同，中断上下文切换并不涉及到进程的用户态。所以，即便中断过程打断了一个正处在用户态的进程，也不需要保存和恢复这个进程的虚拟内存、全局变量等用户态资源。中断上下文，其实只包括内核态中断服务程序执行所必需的状态，包括 CPU 寄存器、内核堆栈、硬件中断参数等。</p><p>对同一个 CPU 来说，中断处理比进程拥有更高的优先级。，所以中断上下文切换并不会与进程上下文切换同时发生。同样道理，由于中断会打断正常进程的调度和执行，所以大部分中断处理程序都短小精悍，以便尽可能快的执行结束。</p><h1 id="5-实践"><a href="#5-实践" class="headerlink" title="5. 实践"></a>5. 实践</h1><h2 id="5-1-使用vmstat分析内存使用情况"><a href="#5-1-使用vmstat分析内存使用情况" class="headerlink" title="5.1 使用vmstat分析内存使用情况"></a>5.1 使用<code>vmstat</code>分析内存使用情况</h2><pre><code># 每隔 5 秒输出 1 组数据$ vmstat 5procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 0  0      0 7005360  91564 818900    0    0     0     0   25   33  0  0 100  0  0</code></pre><ul><li>cs: 每秒上下文切换的次数</li><li>in: 每秒中断的次数</li><li>r (Running or Runnable): 就绪队列的长度，即正在运行和等待CPU的进程数</li><li>b (Blocked) 处于不可中断睡眠状态的进程数</li></ul><h2 id="5-2-使用pidstat-w-查看每个进程的上下文切换情况"><a href="#5-2-使用pidstat-w-查看每个进程的上下文切换情况" class="headerlink" title="5.2 使用pidstat -w 查看每个进程的上下文切换情况"></a>5.2 使用<code>pidstat -w</code> 查看每个进程的上下文切换情况</h2><pre><code># 每隔 5 秒输出 1 组数据$ pidstat -w 5Linux 4.15.0 (ubuntu)  09/23/18  _x86_64_  (2 CPU)08:18:26      UID       PID   cswch/s nvcswch/s  Command08:18:31        0         1      0.20      0.00  systemd08:18:31        0         8      5.40      0.00  rcu_sched...</code></pre><ul><li>cswch: 每秒资源上下文切换<ul><li>指进程无法获取所需的资源，导致的上下文切换</li></ul></li><li>nvcswch: 每秒非资源上下文切换<ul><li>指进程由于时间片已经到了等原因，被系统强制调度，进而发生的上下文切换</li></ul></li></ul><h2 id="5-3-从-proc-interrupts读取中断信息"><a href="#5-3-从-proc-interrupts读取中断信息" class="headerlink" title="5.3 从/proc/interrupts读取中断信息"></a>5.3 从<code>/proc/interrupts</code>读取中断信息</h2><p>/proc是Linux的一个虚拟文件系统，用于内核空间与用户空间之间的通信。/proc/interrupts是这种通信机制的一部分，提供了一个只读的中断使用情况。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Context Switch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux性能优化(2)-平均负载</title>
      <link href="/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-2-%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD/"/>
      <url>/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-2-%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-如何理解平均负载"><a href="#1-如何理解平均负载" class="headerlink" title="1. 如何理解平均负载"></a>1. 如何理解平均负载</h1><pre><code>$uptime14:35:36 up 62 days,  2:51,  2 users,  load average: 0.02, 0.70, 1.06</code></pre><p>当前时间，系统运行时间，正在登录用户数</p><p>后面的三个数字是过去1min, 5min, 15min的平均负载。</p><blockquote><p>平均负载时指单位时间内，系统处于可运行状态和不可中断状态的平均进程数，也就是平均活跃进程数，它和CPU使用率没有直接关系。</p></blockquote><blockquote><p>可运行状态的进程：指正在使用CPU或者正在等待CPU的进程, 也就是我们用<code>ps</code>看到的处于Running/ Runnable状态的进程。</p></blockquote><blockquote><p>不可中断状态的进程：指正处于内核态关键流程中的进程，并且这些进程是不可以被打断的。比如等待硬件设备的I/O响应，即我们在<code>ps</code>命令下看到的D(Uninerruptible Sleep/ Disk Sleep)状态.</p></blockquote><p>例如当一个进程向磁盘读写数据时，为了一致，在得到磁盘回复之前，是不能被其他进程或者中断打断的。否则容易出现磁盘数据与进程数据不一致的问题。</p><p>不可中断状态实际上是系统对进程和硬件设备的一种保护机制。</p><p>平均负载 -&gt; 平均活跃进程数 -&gt; 单位时间内的活跃进程数.最理想的情况就是每个CPU都刚好运行着一个进程，这样每一个CPU都能得到充分的利用。</p><h1 id="2-平均负载为多少时比较合理？"><a href="#2-平均负载为多少时比较合理？" class="headerlink" title="2. 平均负载为多少时比较合理？"></a>2. 平均负载为多少时比较合理？</h1><p>首先需要知道系统有几个CPU，可以通过top命令或者从文件/proc/cpuinfo中读取</p><pre><code>$grep &#39;model name&#39; /proc/cpuinfo | wc -l</code></pre><p>当平均负载高于CPU数量70%的时候，就应该分析和排查负载高的问题了。</p><h1 id="3-平均负载与CPU使用率"><a href="#3-平均负载与CPU使用率" class="headerlink" title="3. 平均负载与CPU使用率"></a>3. 平均负载与CPU使用率</h1><p>二者不一定会完全一致，因为平均负载指单位时间内处于可运行状态和不可中断状态的进程数，不仅包括了<strong><em>正在使用CPU的进程，还包括等待CPU和等待I/O的进程</em></strong>。</p><p>而CPU使用率，是根据单位时间内CPU的繁忙情况进行统计的，举例：</p><ul><li>CPU密集进程</li></ul><p>使用大量CPU使得平均负载升高，此时二者是一致的</p><ul><li>IO密集型进程</li></ul><p>等待I/O也会导致平均负载升高，但CPU使用率不一定会很高</p><h1 id="4-案例分析"><a href="#4-案例分析" class="headerlink" title="4. 案例分析"></a>4. 案例分析</h1><h2 id="4-1-使用工具"><a href="#4-1-使用工具" class="headerlink" title="4.1 使用工具"></a>4.1 使用工具</h2><h3 id="4-1-1-stress"><a href="#4-1-1-stress" class="headerlink" title="4.1.1 stress"></a>4.1.1 stress</h3><p>Linux 系统压力测试工具，可以用作异常进程模拟平均负载升高的场景。</p><h3 id="4-1-2-sysstat"><a href="#4-1-2-sysstat" class="headerlink" title="4.1.2 sysstat"></a>4.1.2 sysstat</h3><p>包含了常用的多核CPU性能分析工具，用来实时查看进程的CPU、内存、I/O以及上下文切换等性能指标。</p><h2 id="4-2-场景分析-CPU密集型进程"><a href="#4-2-场景分析-CPU密集型进程" class="headerlink" title="4.2 场景分析-CPU密集型进程"></a>4.2 场景分析-CPU密集型进程</h2><p>terminal 1: </p><pre><code>$ stress --cpu 1 --timeout 600</code></pre><p>terminal 2: </p><pre><code># -d 参数表示高亮显示变化的区域$ watch -d uptime...,  load average: 1.00, 0.75, 0.39</code></pre><p>terminal 3: run mpstat to see CPU usage </p><pre><code># -P ALL 表示监控所有 CPU，后面数字 5 表示间隔 5 秒后输出一组数据$ mpstat -P ALL 5Linux 4.15.0 (ubuntu) 09/22/18 _x86_64_ (2 CPU)13:30:06     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle13:30:11     all   50.05    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   49.9513:30:11       0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.0013:30:11       1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</code></pre><p>Use pidstat to see process usage </p><pre><code># 间隔 5 秒后输出一组数据$ pidstat -u 5 113:37:07      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command13:37:12        0      2962  100.00    0.00    0.00    0.00  100.00     1  stress</code></pre><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><ol><li>mpstat -P ALL 5</li><li>pidstat -u 5 1</li></ol><ul><li>-u : cpu usage</li><li>-r : memory usage</li><li>-d : I/O usage</li><li>-p : specific process id </li></ul><ol start="3"><li>watch -d uptime </li></ol><p>watch可以帮你检测一个命令的运行结果，在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果。你可以拿他来监测你想要的一切命令的结果变化，比如 tail 一个 log 文件，ls 监测某个文件的大小变化。</p><ul><li>-n : interval</li><li>-d : highlight </li><li>‘’ : command</li></ul><p>e.g : <code>watch -n 1 -d &#39;pstree|grep http&#39;</code></p><ol start="4"><li>uptime </li></ol><h1 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6. Reference"></a>6. Reference</h1><ol><li><a href="https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858775.html" target="_blank" rel="noopener">Linux CPU 实时监控mpstat命令详解</a></li><li><a href="http://www.cnblogs.com/peida/archive/2012/12/31/2840241.html" target="_blank" rel="noopener">watch命令</a></li><li><a href="https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858874.html" target="_blank" rel="noopener">Linux运行进程实时监控pidstat命令详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 平均负载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux性能优化(1)-概述</title>
      <link href="/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-1-%E6%A6%82%E8%BF%B0/"/>
      <url>/Linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-1-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-性能问题"><a href="#1-性能问题" class="headerlink" title="1. 性能问题"></a>1. 性能问题</h1><p>性能调优的困难主要在于：其与系统原理相联系，把系统从应用程序、库函数、系统调用、再到内核和硬件等不同的层级贯穿起来。</p><p>这个系列会讲Linux性能的基本指标，工具，相应的观测、分析和调优方法。主要研究CPU性能、磁盘I/O性能、内存性能以及网络性能四个方面的内容。</p><p>对于自己来说，其实遇到过一些性能上的问题了，但是颇有点不求甚解，有stackoverflow这个工具以后，就有点难脱离这个脚手架了。学习方法上有问题，这也是想写这么个系列，学习这样的课程的初衷。需要去了解应用程序和系统的基本原理，进行实战练习，建立一个整体性能的全局观。</p><p>想要调整性能，可能不需要了解每个组件的所有实现细节，只要能理解他们最基本的工作原理和协作方式就可以了。</p><h1 id="2-性能指标"><a href="#2-性能指标" class="headerlink" title="2. 性能指标"></a>2. 性能指标</h1><p>高并发(吞吐)，响应快(延迟)。这两个指标是从应用负载的角度来考察性能的，从系统资源的视角出发的指标，就是资源使用率，饱和度等。</p><p><img src="https://i.loli.net/2020/01/31/rvfmJx3eMwdntlW.png" alt="1.png"></p><p>随着应用负载的增加，系统资源的使用也会升高，甚至达到极限。而性能问题的本质，就是<strong>系统资源已经达到瓶颈，但请求的处理还不够快，无法支撑更多的请求</strong>。</p><p>性能分析，就是找出应用或者系统的瓶颈，并设法去避免或者缓解它们。包含一系列步骤：</p><ol><li>选择指标评估应用程序和系统的性能</li><li>为应用程序和系统设置性能目标</li><li>进行性能基准测试</li><li>性能分析定位瓶颈</li><li>优化系统和应用程序</li><li>性能监控和告警</li></ol><h1 id="3-性能工具"><a href="#3-性能工具" class="headerlink" title="3. 性能工具"></a>3. 性能工具</h1><p><img src="https://i.loli.net/2020/01/31/5uRyNxQUhdpWAOY.png" alt="2.png"><br>Brendan Greff的性能工具图谱</p><p><img src="https://i.loli.net/2020/01/31/TtXop59L7BwxmFY.png" alt="3.png"><br>性能优化思维导图</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用指令(3) - Inspired by THE ART OF COMMAND LINE</title>
      <link href="/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-3-Inspired-by-THE-ART-OF-COMMAND-LINE/"/>
      <url>/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-3-Inspired-by-THE-ART-OF-COMMAND-LINE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h1><ul><li><code>apropos</code>查找文档</li><li><code>type [cmd]</code> 看这个命令是可执行文件、shell还是别名</li><li>任务管理工具们<ul><li>&amp;</li><li>ctrl + z</li><li>ctrl + c</li><li>jobs</li><li>fg</li><li>bg</li><li>kill</li></ul></li><li>文件管理工具<ul><li>ls    ls -l</li><li>less </li><li>head</li><li>tail   tail -f</li><li>chown </li><li>chmod </li><li>du -hs*</li></ul></li><li>文件系统管理<ul><li>df</li><li>mount </li><li>fdisk</li><li>mkfs</li><li>lsblk</li></ul></li><li>网络知识<ul><li>ip</li><li>ipconfig</li><li>dig</li></ul></li><li>grep<ul><li>-i</li><li>-o</li><li>-v</li><li>-A</li><li>-B</li><li>-C</li></ul></li></ul><h1 id="2-日常使用"><a href="#2-日常使用" class="headerlink" title="2. 日常使用"></a>2. 日常使用</h1><ul><li>补全<ul><li>tab 自动补全</li><li>ctrl-r 搜索命令行历史记录 <ul><li>enter 执行</li><li>鼠标右键 edit</li></ul></li></ul></li><li>删除 &amp; 移动<ul><li>ctrl-w 删除键入的最后一个单词</li><li>ctrl-u 删除行内光标所在位置之前的内容</li><li>alt-b alt-f以单词为单位移动光标</li><li>ctrl-a 到行的开始</li><li>ctrl-e 到行的结尾</li></ul></li><li>xargs <ul><li>接收pipeline的输入，然后用这个输入继续做操作</li></ul></li><li>pgrep, pkill <ul><li>通过名字或者属性来找到进程</li></ul></li><li>netstat -ltnp <ul><li>看现在处在listening 状态下的进程们 </li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.quora.com/Linux/What-are-some-time-saving-tips-that-every-Linux-user-should-know#" target="_blank" rel="noopener">https://www.quora.com/Linux/What-are-some-time-saving-tips-that-every-Linux-user-should-know#</a></li><li><a href="https://coolshell.cn/articles/7829.html" target="_blank" rel="noopener">https://coolshell.cn/articles/7829.html</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令(2)</title>
      <link href="/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-2/"/>
      <url>/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-2/</url>
      
        <content type="html"><![CDATA[<p>继续上篇来介绍一些基本的指令</p><h1 id="1-tr指令"><a href="#1-tr指令" class="headerlink" title="1. tr指令"></a>1. tr指令</h1><ul><li>tr是用来对从stdin进入的字符进行相关的翻译和转换的，并且将其呈现在stdout当中</li><li>tr会接收两个字符set，然后用第二个set里面的字符来替换第一个set里面的字符</li><li>tr预定义了一些sets供用户来直接使用<ul><li>alnum: 字母数字组成的字符集</li><li>alpha：按字母顺序的字符集</li><li>blank: 空白字符集</li><li>cntrl: 控制字符集</li><li>digit: 数字字符集</li><li>graph: 图像字符集</li><li>lower: 小写字母字符集</li><li>print: 可以写出的字符集</li><li>punct: 标点符号字符集</li><li>space: 空格字符集</li><li>upper: 大写字母字符集</li><li>xdigit: 十六进制字符集</li></ul></li><li>tr -d [blabla] 删除[]里面定义的字符</li></ul><h1 id="2-colrm-指令"><a href="#2-colrm-指令" class="headerlink" title="2. colrm 指令"></a>2. colrm 指令</h1><ul><li>用来删除行的指令</li></ul><pre><code>// 删除从第四行开始到末尾的所有$ cat grocery.list | colrm 4 </code></pre><h1 id="3-expand-和-unexpand-指令"><a href="#3-expand-和-unexpand-指令" class="headerlink" title="3. expand 和 unexpand 指令"></a>3. expand 和 unexpand 指令</h1><ul><li>expand指令能够将tabs变成空格</li><li>unexpand 指令能够将空格变成tab</li></ul><h1 id="4-comm-cmp以及diff指令"><a href="#4-comm-cmp以及diff指令" class="headerlink" title="4. comm, cmp以及diff指令"></a>4. comm, cmp以及diff指令</h1><ul><li>diff指令比较两个文件，并且告知二者之间的不同<ul><li>-w 忽视空格上的不同</li><li>-i 忽视大小写的不同</li></ul></li><li>comm 也是比较两个文件，但是行为不太一样。会生成三行输出<ul><li>只在第一个文件当中出现的行</li><li>只在第二个文件当中出现的行</li><li>在两个文件当中都出现的行</li></ul></li><li>cmp 比较两个文件<ul><li>显示出两个文件不同的byte和行号 </li></ul></li></ul><h1 id="5-bc指令"><a href="#5-bc指令" class="headerlink" title="5. bc指令"></a>5. bc指令</h1><ul><li>使用bc来做基础运算 - basic calculator </li></ul><pre><code>$ echo 2+3 | bc </code></pre><h1 id="6-sed-指令"><a href="#6-sed-指令" class="headerlink" title="6. sed 指令"></a>6. sed 指令</h1><p><a href="https://coolshell.cn/articles/9104.html" target="_blank" rel="noopener">https://coolshell.cn/articles/9104.html</a></p><ul><li><p>sed指令可以用来对文件或者数据流进行转化</p><ul><li>一次读取一行的数据</li><li>对这一行数据实行特定的操作</li><li>一般来说输出到stdout</li></ul></li><li><p>功能</p><ul><li>从buffer里面删除文字</li><li>在buffer附上文本或者插入文本</li><li>写入文件</li><li>用regex定义的规则来转化文本</li></ul></li><li><p>-e: 指定表达式或者编辑的脚本   用来做替换</p><ul><li>s 表示这是个替换命令</li><li>用 / 作为分隔符 </li><li>前面是待替换的文本，后面是替换的文本</li><li>g 便是让这个替换在现在的整个buffer里都生效</li></ul></li></ul><pre><code>$ echo &quot;IBM 174.99&quot; |sed –e &#39;s/IBM/International Business Machines/g&#39; International Business Machines 174.99$ echo &quot;Oracle DB&quot;|sed -e &#39;s/Oracle/IBM/g&#39; -e &#39;s/DB/DB2/g&#39;IBM DB2$ echo &quot;C:\Program Files\PuTTY\putty.exe&quot;| sed -e &#39;s/\\/\//g&#39; -e &#39;s/ /_/g&#39; -e &#39;s/://g&#39;C/Program_Files/PuTTY/putty.exe</code></pre><ul><li>用来做漏斗<ul><li>d 表示要删除的东西</li><li>然后中间跟着的是正则表达式 表示的一个string pattern</li></ul></li></ul><pre><code>cat &lt;&lt; EOF &gt; dummy_sed.txt# top of file  # the next line here# Last Name, PhoneSmith, 555-1212Jones, 555-5555 # last numberEOF$ sed &#39;/^[[:space:]]*#/d&#39; dummy_sed.txtSmith, 555-1212Jones, 555-5555 # last number$ grep -v  ^[[:space:]]*# dummy_sed.txtSmith, 555-1212Jones, 555-5555 # last number</code></pre><h1 id="7-awk指令"><a href="#7-awk指令" class="headerlink" title="7. awk指令"></a>7. awk指令</h1><h2 id="7-1-指令范式"><a href="#7-1-指令范式" class="headerlink" title="7.1 指令范式"></a>7.1 指令范式</h2><pre><code>// $1 表示第1列，$4表示第4列  注意$0表示整行$ awk &#39;{print $1, $4}&#39;  netstat.txt </code></pre><p><a href="https://coolshell.cn/tag/awk" target="_blank" rel="noopener">https://coolshell.cn/tag/awk</a> </p><ul><li>用来做转换，漏斗，格式化等</li><li>从stdin拿数据，然后展示在stdout当中</li></ul><h2 id="7-2-格式化输出"><a href="#7-2-格式化输出" class="headerlink" title="7.2 格式化输出"></a>7.2 格式化输出</h2><p>格式化输出的样式基本上和c语言的一样</p><pre><code>$ awk &#39;{printf &quot;%-8s %-8s %-8s %-18s %-22s %-15s\n&quot;,$1,$2,$3,$4,$5,$6}&#39; netstat.txt</code></pre><h2 id="7-3-过滤记录的功能"><a href="#7-3-过滤记录的功能" class="headerlink" title="7.3 过滤记录的功能"></a>7.3 过滤记录的功能</h2><pre><code>$ awk &#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; &#39; netstat.txt// 内建变量NR来展示表头$ awk &#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==1 &#39; netstat.txt$ awk &#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==1 {printf &quot;%-20s %-20s %s\n&quot;,$4,$5,$6}&#39; netstat.txt</code></pre><h2 id="7-4-awk的内建变量"><a href="#7-4-awk的内建变量" class="headerlink" title="7.4 awk的内建变量"></a>7.4 awk的内建变量</h2><ul><li>$0 当前记录 </li><li>$1 - $n 当前记录的第n个字段</li><li>FS  输入字段分隔符，默认是空格或者Tab</li><li>NF  当前记录当中的字段个数</li><li>NR  已经读出的记录数，行号</li><li>FNR 当前记录数，与NR不同的是，这个值会是各个文件自己的行号</li><li>RS  输入的记录分隔符，默认为换行符</li><li>OFS 输出字段分隔符，默认空格</li><li>ORS 输出记录分隔符，默认换行符</li><li>FILENAME 当前输入文件的名字</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用指令(1)</title>
      <link href="/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-1/"/>
      <url>/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-1/</url>
      
        <content type="html"><![CDATA[<p>Unix的一大哲学就是创建只做一件事情的程序块，并且将这件事情做好。在这种哲学下，仔细思考需要的接口，并且用pipeline联结起来并最终产生了有用的结果就变成一件很重要的事情了。想象一下数据通过管道在不同的指令之间流动的过程，很难不用优美来形容，哈哈。本文总结一些基本的文本处理的命令，注意这些命令一般来说也是可以串联起来实现一些相对复杂且完成度比较高的功能的。</p><p>下面将逐个介绍各个指令：</p><h1 id="1-Cat"><a href="#1-Cat" class="headerlink" title="1. Cat"></a>1. Cat</h1><ul><li>用来创建，连接，展示文件的</li></ul><pre><code>// 创建新文件，在本行命令以后就可以输入想存储的内容了$ cat &gt; grocery.list// 将新输入的内容附在原文件尾$ cat &gt;&gt; grocery.list // 查看文件当中的内容$ cat grocery.list// 查看文件当中的内容，带行数的$ cat -n grocery.list </code></pre><h1 id="2-nl"><a href="#2-nl" class="headerlink" title="2. nl"></a>2. nl</h1><p>nl可以从stdin或者文件里读取行。输出会写到stdout或者重指向到一个文件，或者通过管道将内容传输到其他指令处。</p><ul><li><p>nl</p><ul><li><p>-b 指定要计数的行</p><ul><li>a : 所有行都算</li><li>t : 不计空行，或者只有空格的行</li><li>n : 全都不计</li><li>p : 根据某种特征</li></ul></li><li><p>-s 指定行号和具体内容的分隔符</p><p>// nl 类似于 cat -n<br>$ nl grocery.list </p><p>// 根据 p定义的特征：这里是只记录起始字母为a或b的<br>$ nl -b p^[ba] grocery.list</p><p>// 让行号和具体内容之间的分隔符变成等号<br>$ nl -s= grocery.list </p></li></ul></li></ul><h1 id="3-wc"><a href="#3-wc" class="headerlink" title="3. wc"></a>3. wc</h1><p>wc是wordcount的简称，顾名思义，用来统计行数，词语数量，或者是字母的数量</p><ul><li>wc<ul><li>-l 行数</li><li>-w 词语数</li><li>-c 字母数</li></ul></li></ul><h1 id="4-grep"><a href="#4-grep" class="headerlink" title="4. grep"></a>4. grep</h1><p>会搜索特定的文件，或者从stdin里，去寻找符合定义的某种特征的表达</p><ul><li>grep<ul><li>-c 统计出现了的行数</li><li>-h 搜索多个文件的时候不再显示出文件名字</li><li>-i 忽略大小写的不同</li><li>-l 只打印满足指定特征的文件名</li><li>-n 打印所在的行位置</li><li>-v 输出所有不满足特征的行</li><li>-w </li></ul></li></ul><h1 id="5-streams-pipes-redirects-tee"><a href="#5-streams-pipes-redirects-tee" class="headerlink" title="5. streams, pipes, redirects, tee"></a>5. streams, pipes, redirects, tee</h1><p>在Unix当中，一个terminal常规是包含三个流的，一个为了输入，两个为了输出。输入流，指的是stdin,一般来说是指向keyboard的；标准输出流一般指的是stdout， 会将结果输出到terminal。每个流都有自己的文件描述符，每一个都可以做管道化，分开来做重定向到其他命令当中去。 </p><ul><li>stdin 0  &lt; </li><li>stdout 1 &gt; </li><li>stderr 2 </li></ul><p>“|” 指一个管道，会将前一个指令的输出作为下一个指令的输入</p><pre><code>$ cat grocery.list | nl </code></pre><ul><li>&lt;&lt; <ul><li>可以进行多行的输入</li></ul></li></ul><h1 id="6-Using-head-and-tail"><a href="#6-Using-head-and-tail" class="headerlink" title="6. Using head and tail"></a>6. Using head and tail</h1><p>这两个指令是用来看一个文件的头部或者尾部的部分</p><ul><li><p>-n</p><ul><li>用上述指令加想要显示的行数</li></ul></li><li><p>-c</p><ul><li><p>显示的字符的数量 </p><p>//显示grocery文件的前10行<br>$ head -n10 grocery.list</p><p>//显示grocery文件最后12的个字符<br>$ tail -c12 grocery.list</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Curl tutorial</title>
      <link href="/Curl-tutorial/"/>
      <url>/Curl-tutorial/</url>
      
        <content type="html"><![CDATA[<p>curl = client url, used to make requests to web server in client side. </p><h4 id="Send-GET-request-to-the-url"><a href="#Send-GET-request-to-the-url" class="headerlink" title="Send GET request to the url"></a>Send GET request to the url</h4><pre><code>curl https://www.google.com </code></pre><h4 id="A-Define-client’s-agent-header-—-User-Agent"><a href="#A-Define-client’s-agent-header-—-User-Agent" class="headerlink" title="-A Define client’s agent header —- User-Agent"></a>-A Define client’s agent header —- <code>User-Agent</code></h4><pre><code>curl -A &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39; https://google.com</code></pre><h4 id="b-pass-cookie-to-server"><a href="#b-pass-cookie-to-server" class="headerlink" title="-b pass cookie to server"></a>-b pass cookie to server</h4><pre><code>curl -b &#39;foo=bar&#39; https://www.google.com</code></pre><h4 id="d-send-the-data-body-needed-when-sending-POST-request"><a href="#d-send-the-data-body-needed-when-sending-POST-request" class="headerlink" title="-d send the data body needed when sending POST request"></a>-d send the data body needed when sending POST request</h4><pre><code>curl -d &#39;login=leilei&amp;pwd=test&#39; -X POST https://www.google.com curl -d &#39;@data.txt&#39; -X POST https://www.google.com </code></pre><h4 id="e-set-header’s-Referer"><a href="#e-set-header’s-Referer" class="headerlink" title="-e set header’s Referer"></a>-e set header’s Referer</h4><pre><code>curl -e &#39;https://google.com?q=example&#39; https://www.example.com</code></pre><h4 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a>–data-urlencode</h4><p>similar to <code>-d</code>, the difference is <strong>it could do URL encode for sent data</strong></p><pre><code>curl --data-urlencode &#39;comment=hello world&#39; https://google.com/login</code></pre><h4 id="F-send-binary-file-to-server"><a href="#F-send-binary-file-to-server" class="headerlink" title="-F  send binary file to server"></a>-F  send binary file to server</h4><pre><code>curl -F &#39;file=@photo.png;type=image/png&#39; https://google.com/profile</code></pre><h4 id="G-create-the-search-string-needed"><a href="#G-create-the-search-string-needed" class="headerlink" title="-G create the search string needed"></a>-G create the search string needed</h4><pre><code>curl -G -d &#39;q=kitties&#39; -d &#39;count=20&#39; https://google.com/search</code></pre><h4 id="H-Add-HTTP-header"><a href="#H-Add-HTTP-header" class="headerlink" title="-H Add HTTP header"></a>-H Add HTTP header</h4><pre><code>curl -H &#39;Accept-Language: en-US&#39; https://google.com</code></pre><h4 id="–limit-reate"><a href="#–limit-reate" class="headerlink" title="–limit-reate"></a>–limit-reate</h4><p>Limit the speed, simulate env with low speed internet </p><pre><code>curl --limit-rate 200k https://google.com</code></pre><h4 id="u-set-username-and-pwd-for-server-authentication"><a href="#u-set-username-and-pwd-for-server-authentication" class="headerlink" title="-u set username and pwd for server authentication"></a>-u set username and pwd for server authentication</h4><pre><code>curl -u &#39;bob:12345&#39; https://google.com/login</code></pre><h4 id="X-method-for-make-request"><a href="#X-method-for-make-request" class="headerlink" title="-X method for make request"></a>-X method for make request</h4><pre><code>curl -X POST https://www.example.com</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></li><li><a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">https://catonmat.net/cookbooks/curl</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何提高GPS精度</title>
      <link href="/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98GPS%E7%B2%BE%E5%BA%A6/"/>
      <url>/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98GPS%E7%B2%BE%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>这是Uber18年更的一篇文章，里面详细描述了优步的做法，如何从软件角度来提高GPS的精度。</p><h1 id="1-概览"><a href="#1-概览" class="headerlink" title="1. 概览"></a>1. 概览</h1><p>定位和导航所使用的全球定位系统(GPS)已然深深嵌入进了我们的生活当中，对于Uber尤其重要。Uber需要通过GPS系统知道乘车人和司机所在的位置，还要给出如何从司机所在的位置到乘车人所在位置的导航，路径规划。为了能够带来更好的用户体验，那么位置的估计就需要尽可能的精确。</p><p>GPS从出现到现在其工作原理并没有出现太大的变化，这带来了不小的表现瓶颈。而相较于1973年的技术条件，以及当时做出的我们会何时何地使用GPS的假设，我们有足够理由去考虑基于现在的技术条件去想办法改进其精度。</p><p>尽管GPS在相对空旷的地方工作的非常不错，但是在城市里，面对高楼大厦以及高密度的人群，其误差可以高达50米。</p><p>Uber开发了一个软件来升级安卓的GPS性能，通过使用client-server架构，使用3D地图，经由GNSS API来做复杂的基于GPS数据的概率运算。</p><p>本文我们会先说明下为什么GPS在现代城市当中表现很差，而后给出一个概览 - 我们是如何通过信号处理算法来解决这个问题的。</p><h1 id="2-GPS-GNSS-背景"><a href="#2-GPS-GNSS-背景" class="headerlink" title="2. GPS/ GNSS 背景"></a>2. GPS/ GNSS 背景</h1><p>GPS是被美国政府所操作的30颗卫星，在距离地球大约2万公里的地方环绕地球。这些卫星会发出信号，而我们的手机会作为接收器接收到这些信号,比较重要的一点信息是这些卫星发出的信号里面也包含了他们的发送时间。</p><p>而接收时间和发出时间的差值乘上光速就是卫星和接受者之间的距离，成为pseudorange. 如果说二者时间是同步的话，信号的传输是直线的话，那么这就会是二者之间的实际直线距离。但是在现实生活中，二者的时间往往不是同步的，因此接受者需要解决四个unknown。他自己的3d坐标以及时间差。对于四个变量，那我们就需要有四个卫星发出的信号来解决这个问题了。</p><p>在实际生活中，我们往往会用更多的卫星来计算，这样来使结果更鲁棒。</p><h1 id="3-为什么在城市环境中定位变得不够准确？"><a href="#3-为什么在城市环境中定位变得不够准确？" class="headerlink" title="3. 为什么在城市环境中定位变得不够准确？"></a>3. 为什么在城市环境中定位变得不够准确？</h1><p>基于GNSS定位的一大假设就是接收人是可以直面每个卫星的，即是直线，然后我们通过直线来接收信号，处理，做出定位。但是在城市当中，很容易因为镜面的反射等原因，我们的手机依旧能接到卫星发出的信号，但是是经由反射，因此时间差要比实际的要大。这种现象导致了在城市区域误差可能达到50米的程度。</p><h1 id="4-优化"><a href="#4-优化" class="headerlink" title="4. 优化"></a>4. 优化</h1><p>我们的方法利用了GNSS信号易被阻碍的特性。对于安卓手机来说，LocationManager API不仅提供了手机位置的估计，也提供了对于每个卫星针对当前位置的信噪比。如果我们使用这个信号强度的信息，加入到3D地图当中，那么我们就能得到很有价值的地点信息了。如果信噪值比较低，那很有可能当前卫星被阻挡了；相反的，就证明当前位置尚佳。这是基本的原理，但是还有些问题，比如有些时候，即便是没有被高楼阻挡，但是你站在遮挡物下边，也会对信号造成影响。另外，3D地图本身的精确度也存疑，更别提我们无法辨别当前数据是否受到随机的大型移动物体的影响。这也给整个过程增加了不确定性。</p><p>为了解决此类问题，Uber使用了概率模型，对于接收者可能在的任何位置，我们会用3D地图来检查，是否从接收者到卫星的信号会被物体阻挡。通过这种方式我们可以计算得到获得的信噪比信息的可信程度。然后通过一系列地点的对比，我们就能获得一张热力图，反映了用户最可能在的地方。</p><p>这张局部热点图经常会有多个局部最优解，这个时候我们就要借助手机本身的基于wifi的定位功能了。</p><p>基本上Uber就是通过上述的方式来做优化，使之能拿到更准确的定位结果的。</p><p><a href="https://eng.uber.com/rethinking-gps/" target="_blank" rel="noopener">https://eng.uber.com/rethinking-gps/</a> </p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPS </tag>
            
            <tag> Uber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google搜索技巧</title>
      <link href="/Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
      <url>/Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用-tabs"><a href="#1-使用-tabs" class="headerlink" title="1. 使用 tabs"></a>1. 使用 tabs</h2><p>在google的搜索栏下方是有分类的，使用特定的分类可以给我们更好的结果</p><h2 id="2-使用双引号"><a href="#2-使用双引号" class="headerlink" title="2. 使用双引号"></a>2. 使用双引号</h2><p>双引号内的词语会成为一个特定的搜索词语，比如你搜索”Hello World”， 没有双引号的话goole会搜索包含这两个词语的link，但是有了双引号就会搜索按照这样的顺序，并且是连在一起的出现的link。</p><h2 id="3-使用连字符去排除关键字"><a href="#3-使用连字符去排除关键字" class="headerlink" title="3. 使用连字符去排除关键字"></a>3. 使用连字符去排除关键字</h2><p>比如搜索mustang -cars 表示希望搜真的马，不能包括车这个关键字</p><h2 id="4-使用冒号去搜索特定的网站"><a href="#4-使用冒号去搜索特定的网站" class="headerlink" title="4. 使用冒号去搜索特定的网站"></a>4. 使用冒号去搜索特定的网站</h2><pre><code>leileichen site:llchen60.com</code></pre><p>表示只在llchen60.com这个网址搜索leileichen这个关键字</p><h2 id="5-找到一个link到其他页面的页面"><a href="#5-找到一个link到其他页面的页面" class="headerlink" title="5. 找到一个link到其他页面的页面"></a>5. 找到一个link到其他页面的页面</h2><p>用来找到谁引用了这个页面</p><pre><code>link:llchen60.com</code></pre><p>来找到那些引用了这个网址的页面们</p><h2 id="6-使用星号通配符"><a href="#6-使用星号通配符" class="headerlink" title="6. 使用星号通配符"></a>6. 使用星号通配符</h2><pre><code>来自*的你</code></pre><p>google会帮你找到符合上述通配符的词条/ 页面。</p><h2 id="7-找到与一个网站相似的网站"><a href="#7-找到与一个网站相似的网站" class="headerlink" title="7. 找到与一个网站相似的网站"></a>7. 找到与一个网站相似的网站</h2><pre><code>related:llchen60.com</code></pre><p>找到和这个网站类似的网站们 </p><h2 id="8-同时寻找多个关键词"><a href="#8-同时寻找多个关键词" class="headerlink" title="8. 同时寻找多个关键词"></a>8. 同时寻找多个关键词</h2><pre><code>“first word&quot; OR &quot;second word&quot;</code></pre><h2 id="9-搜索一系列的数据"><a href="#9-搜索一系列的数据" class="headerlink" title="9. 搜索一系列的数据"></a>9. 搜索一系列的数据</h2><pre><code>nba championship ..2008nba chanpionship 2006..2008</code></pre><p>第一个是只搜索2008年的nba冠军，第二个是搜索2006到2008年的nba冠军</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html" target="_blank" rel="noopener">https://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硅谷增长黑客实战笔记</title>
      <link href="/%E7%A1%85%E8%B0%B7%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>/%E7%A1%85%E8%B0%B7%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-增长黑客的理念"><a href="#1-增长黑客的理念" class="headerlink" title="1. 增长黑客的理念"></a>1. 增长黑客的理念</h1><h2 id="1-1-基本的定义"><a href="#1-1-基本的定义" class="headerlink" title="1.1 基本的定义"></a>1.1 基本的定义</h2><p>需求在于：需要一个新的市场营销的角色，要有企业家的精神，有强大的内在动力能挑起增长的责任，迫不及待想将产品推广给更多客户；创造性尝试新方法，对新技术充满好奇；应用数据需要得心应手，通过数据分析来寻找好的想法，并且按照科学实验的方法论，对这些想法进行测试。</p><p>需要增长团队，让企业快速增长 – growth hacking </p><h2 id="1-2-What-does-a-growth-manager-do"><a href="#1-2-What-does-a-growth-manager-do" class="headerlink" title="1.2 What does a growth manager do?"></a>1.2 What does a growth manager do?</h2><p>负责：</p><ul><li>搭建数据基础设施</li><li>定义增长目标</li><li>提供用户洞察</li><li>排序增长项目</li><li>设计并上线实验</li></ul><p>growth manager需要将原先各自为政的产品开发和营销职能有机整合起来。</p><p>传统的产品经理负责产品的开发流程，更多的是以解决方案为导向；而增长产品经理，虽然遵循类似的流程，但是出发点是增长—-即通过用户行为的改变，来推动某个业务指标的增长。</p><blockquote><p>增长产品经理，就是处在产品和营销的交界点上，负责用产品的手段达到营销的目的。 </p></blockquote><h2 id="1-3-Pirate-Metrics"><a href="#1-3-Pirate-Metrics" class="headerlink" title="1.3 Pirate Metrics"></a>1.3 Pirate Metrics</h2><ul><li>Acquisition: 用户获取</li><li>Activation: 用户激活</li><li>Retention: 用户留存</li><li>Refereal: 用户推荐</li><li>Revenue: 盈利</li><li>Resurrection: 挽回流失客户</li></ul><p>可以看出增长黑客在关注一个用户生命周期的各个环节。</p><h1 id="2-增长方法论"><a href="#2-增长方法论" class="headerlink" title="2. 增长方法论"></a>2. 增长方法论</h1><h2 id="2-1-增长实验"><a href="#2-1-增长实验" class="headerlink" title="2.1 增长实验"></a>2.1 增长实验</h2><p>就是实验，针对一个目标，产生一个实验假设，设计实验，分析结果，看看假设是对是错。</p><p>增长方法论的精髓就是<strong><em>按照科学实验的原则，尽量准确的设计实验和测量结果，从而建立起一个“开发-测试-学习”的反馈闭环</em></strong></p><blockquote><p>假设 -&gt; 开发 -&gt; 测试 -&gt; 测量 -&gt; 数据 -&gt; 学习 -&gt; 假设</p></blockquote><p>这里的实验指的是A/ B测试</p><p>要不停的在线做AB测试，知道什么样的方式会更加有利于公司的发展。</p><h2 id="2-2-增长流程"><a href="#2-2-增长流程" class="headerlink" title="2.2 增长流程"></a>2.2 增长流程</h2><p>增长关注的范围很广，但应该有的放矢，要有策略有重点地按流程进行。</p><p>给出增长目标，聚焦增长领域，产生想法，想法执行顺序，实验，结果，反馈，调整与优化，产生良性循环。</p><p>任何事情都是一个实验，通过它，你或者实现增长，或者学到经验。</p><h2 id="2-3-面对的挑战"><a href="#2-3-面对的挑战" class="headerlink" title="2.3 面对的挑战"></a>2.3 面对的挑战</h2><ol><li>在低垂的果实被慢慢摘掉以后，如何持续保证产生好的实验结果，驱动增长指标呢？</li><li>面对激烈的竞争和变化的环境，如何离用户更近、如何持续创新让增长实验成为产品的竞争优势？</li><li>如何保证增长流程高效运作、增长团队内部紧密合作，有主人翁的感觉？</li><li>如何确保和其他团队以及管理层的良好沟通和合作，得到大家的支持，达成共赢？ </li><li>如何让增长实验和数据驱动成为公司文化的一部分呢？ </li></ol><h1 id="3-用户获取，推荐，激活，留存等不同阶段的增长技巧"><a href="#3-用户获取，推荐，激活，留存等不同阶段的增长技巧" class="headerlink" title="3. 用户获取，推荐，激活，留存等不同阶段的增长技巧"></a>3. 用户获取，推荐，激活，留存等不同阶段的增长技巧</h1><h2 id="3-1-用户获取"><a href="#3-1-用户获取" class="headerlink" title="3.1 用户获取"></a>3.1 用户获取</h2><p>Flikr 和 instagram -&gt; 真正独特的点子是很少见的</p><p>如今一款产品能否成功越来越少依靠让人耳目一新的功能，而是越来越多地依靠成功的增长策略。</p><h3 id="3-1-1-新用户获取的永恒公式-LTV-gt-CAC"><a href="#3-1-1-新用户获取的永恒公式-LTV-gt-CAC" class="headerlink" title="3.1.1 新用户获取的永恒公式  LTV &gt; CAC"></a>3.1.1 新用户获取的永恒公式  LTV &gt; CAC</h3><p>Life Time Value &gt; Customer Acquisition Cost （获取用户的成本）</p><p>一般来说希望比例能够大于3.</p><p>CAC = （营销总费用 + 销售总费用）、同时期新增用户数</p><h3 id="3-1-2-用户获取过程中的术语"><a href="#3-1-2-用户获取过程中的术语" class="headerlink" title="3.1.2 用户获取过程中的术语"></a>3.1.2 用户获取过程中的术语</h3><ol><li>混合CAC(Blended CAC) - 将付费渠道和天然渠道混在一起计算的CAC</li><li>付费CAC - 付费渠道的平均顾客获取成本  这个数值代表了你可以控制的渠道效率，可以理解为如果风险投资给你钱，在一段时间内就可以通过加大投入而持续以这个成本获取新用户。</li><li>满载CAC - 加上所有市场和销售相关人员的薪酬，工具，设备等花费而计算出来的用户获取成本。</li></ol><h3 id="3-1-3-如何计算用户生命周期的价值"><a href="#3-1-3-如何计算用户生命周期的价值" class="headerlink" title="3.1.3 如何计算用户生命周期的价值"></a>3.1.3 如何计算用户生命周期的价值</h3><p>基本思路： </p><ol><li>用户会使用多少个月</li><li>平均每个月你能从用户身上赚多少钱</li></ol><p>对于有高LTV的产品才会去请销售团队，对于LTV很小的，更多是需要进行病毒传播这样子。</p><p>一个产品想要做大，仅仅有产品市场的契合是不够的，而是需要市场、产品、模型、渠道四者之间的契合。</p><ul><li>市场-产品契合： 有一个目标客户群存在，对这样一个产品有需要。</li><li>产品-渠道契合： 能够在特定的渠道商找到该产品的目标客户群</li><li>渠道-模型契合： 产品的盈利模型和用户生命周期价值能够支持使用这些渠道的成本</li><li>模型-市场契合： 目标客户群愿意为这个产品肤浅，支持产品的盈利模型。</li></ul><h2 id="3-2-如何选择用户获取渠道？"><a href="#3-2-如何选择用户获取渠道？" class="headerlink" title="3.2 如何选择用户获取渠道？"></a>3.2 如何选择用户获取渠道？</h2><h3 id="3-2-1-了解产品特点"><a href="#3-2-1-了解产品特点" class="headerlink" title="3.2.1 了解产品特点"></a>3.2.1 了解产品特点</h3><ul><li>面向对象： 消费者，中小型企业，大型企业</li><li>产品形态： 移动应用，SaaS软件，硬件产品</li><li>所在行业： 社交、游戏、社群、金融</li><li>盈利模式： 免费、广告、月费、产品内购买</li><li>单位经济学： 用户平均生命周期价值</li></ul><p>对于大部分产品来说，真正能做大的一般是一到两个渠道，病毒传播并不适合所有的产品。</p><p>比如微信，没有使用门槛，免费，没有使用门槛，用户很快能得到价值，并且大家都需要。最重要的是用户使用之后，有动力来邀请他的亲朋好友来使用，使用的人越多，对产品的用户体验提升越多，这就是网络效应。</p><h3 id="3-2-2-了解用户群体"><a href="#3-2-2-了解用户群体" class="headerlink" title="3.2.2 了解用户群体"></a>3.2.2 了解用户群体</h3><ul><li>怎么样的人</li><li>生活节奏</li><li>什么时间做什么样的事情</li><li>喜欢用什么产品</li><li>去什么地方消费</li><li>有哪些兴趣</li><li>关注哪些名人</li></ul><h3 id="3-2-3-列出可能的备选渠道"><a href="#3-2-3-列出可能的备选渠道" class="headerlink" title="3.2.3 列出可能的备选渠道"></a>3.2.3 列出可能的备选渠道</h3><ul><li>付费渠道：通过付费广告获取用户的渠道</li><li>有机渠道：不需要直接花广告费用的获客渠道</li><li>其他渠道</li></ul><p>在当下的北美，能做到大体量的渠道有：</p><ul><li>付费增长<ul><li>facebook</li><li>instagram</li><li>google adwords购买关键字广告</li></ul></li><li>病毒传播<ul><li>产品本身有社交属性</li><li>功能涉及多人合作或共享的</li><li>hotmail/ dropbox/ slack</li></ul></li><li>搜索引擎优化<ul><li>产品能创造很多内容</li><li>将搜索引擎优化作为主要渠道</li></ul></li><li>销售<ul><li>人工宣讲，展示</li><li>建立一个重复的销售流程</li><li>招募销售团队并设计一套体系</li></ul></li></ul><p>为什么这几个渠道能做大呢？ </p><ol><li>都是反馈闭环，当你通过这些渠道获取了用户从用户身上赚到钱，都可以再进行投入的。</li><li>体量足够大。各大社交网络对用户免费，用户基数很大</li></ol><h3 id="3-2-4-筛选最初的获取渠道"><a href="#3-2-4-筛选最初的获取渠道" class="headerlink" title="3.2.4 筛选最初的获取渠道"></a>3.2.4 筛选最初的获取渠道</h3><ul><li>大体量的渠道优先</li><li>免费或便宜的渠道优先</li><li>可追踪的渠道优先</li><li>可以精准定位目标用户群的渠道</li><li>可以随时开始、随时结束的渠道优先</li></ul><p>需要了解各个渠道的特点，开始最初测试，然后追踪和分析结果，测试时需要观察以下两个指标：</p><ol><li>哪个渠道用户获取成本最低</li><li>哪个渠道获取的用户留存时间最长，LTV最高</li></ol><p>可以通过激活比例和付费比例来进行模拟</p><h3 id="3-2-5-运营、优化、拓展用户获取渠道"><a href="#3-2-5-运营、优化、拓展用户获取渠道" class="headerlink" title="3.2.5 运营、优化、拓展用户获取渠道"></a>3.2.5 运营、优化、拓展用户获取渠道</h3><p>在找到了最初的用户获取渠道以后，需要做：</p><ul><li>制定新用户获取目标</li><li>决定市场预算的分配和进行渠道的日常运营</li><li>通过广告设计测试和用户定位测试，优化已有渠道的表现</li><li>不断发现和探索新的渠道</li></ul><p>需要持续追踪已有渠道的成本，不断调整，测试并加入新的渠道</p><blockquote><p>过于依赖某个单一渠道是有风险的，一旦建立了一两个核心渠道，还需要主动尝试新的渠道。</p></blockquote><h2 id="3-3-最棒的获取渠道-用户推荐"><a href="#3-3-最棒的获取渠道-用户推荐" class="headerlink" title="3.3 最棒的获取渠道 - 用户推荐"></a>3.3 最棒的获取渠道 - 用户推荐</h2><p>用户推荐这个渠道十分受欢迎，原因为：</p><ol><li>获取成本低：老用户帮你带来新的用户</li><li>用户质量好：背景会和已有用户类似，因此更有可能成为你的产品的目标用户</li><li>转化比例高： 有好友推荐的信用背书</li></ol><h3 id="3-3-1-用户推荐的三个概念"><a href="#3-3-1-用户推荐的三个概念" class="headerlink" title="3.3.1 用户推荐的三个概念"></a>3.3.1 用户推荐的三个概念</h3><ul><li>用户推荐</li><li>病毒传播</li><li>网络效应 - 越多的用户，产品/服务更加完善，老用户得到的价值也提升了</li></ul><h3 id="3-3-2-用户推荐的类型"><a href="#3-3-2-用户推荐的类型" class="headerlink" title="3.3.2 用户推荐的类型"></a>3.3.2 用户推荐的类型</h3><ul><li>口口相传</li><li>展示相传</li><li>补贴推荐 - 双向补贴推荐 - 送产品功能比送钱好</li><li>社交网络用户推荐</li><li>病毒传播  有趣新颖 具有视觉感染力 容易分享的东西</li><li>产品内传播机制<ul><li>产品需求 - 功能本身是否需要用户邀请其他用户</li><li>内容分享 - 知乎，网易云音乐，喜马拉雅</li><li>人为制造 </li><li>欢乐时刻，最嗨的时候让用户分享</li><li>顺便接触 - 加水印，加一句话之类的</li></ul></li></ul><p>最成功的产品不是在上市之后才考虑增长的，而是在打磨产品的同时就开始设计和实验产品内病毒传播、用户推荐和网络效应的种种机制。</p><h3 id="3-3-3-衡量用户推荐的公式"><a href="#3-3-3-衡量用户推荐的公式" class="headerlink" title="3.3.3 衡量用户推荐的公式"></a>3.3.3 衡量用户推荐的公式</h3><p>K因子，就是看平均每个老用户可以带来几个新用户。如果K因子大于1，那么理论上这个产品就不需要再去人为推动增长了。</p><p>用户推荐共识</p><ul><li>通过邀请加入的新用户数 = <ul><li>潜在的推荐人总数 x<ul><li>总活跃用户基数</li><li>接触到邀请机会的比例</li></ul></li><li>推荐人转化率 x</li><li>分支因子 x</li><li>被推荐人转化率</li></ul></li></ul><p>新用户总数 = 总活跃用户基数 x 接触到邀请机会的比例 x 邀请机会页面的转化率 x 平均每人发出的邀请数量 x 被推荐人接受邀请的比例 x 接受邀请后完成注册的比例</p><p>这里面有多个转化漏斗，需要做针对性的分析，看瓶颈在哪里。</p><h2 id="3-4-用户激活：增长的关键转化点"><a href="#3-4-用户激活：增长的关键转化点" class="headerlink" title="3.4 用户激活：增长的关键转化点"></a>3.4 用户激活：增长的关键转化点</h2><p>一个公司应该花至少和新产品开发一样多的精力在新用户体验上，甚至更多。</p><p>新用户激活包含从新用户首次登录、完成账户注册和必要的设置到第一次使用产品关键功能的这段过程。因为它处于市场和产品之间，有点像两不管地带，很容易被忽略掉。</p><p>数据显示，大部分应用会在三天内流失掉超过75%的用户。</p><h3 id="3-4-1-如何定义用户激活"><a href="#3-4-1-如何定义用户激活" class="headerlink" title="3.4.1 如何定义用户激活"></a>3.4.1 如何定义用户激活</h3><p>Aha时刻，用户认识到这个产品的作用的那一时刻，通过认识到作用才会有可能留存下来的。没有经历这种时刻的用户，会流失掉的。</p><p>对于公司来说，定义用户激活，需要这样子来进行描述：<strong><em>谁在多长时间内完成了多少次的什么行为</em></strong></p><ul><li>定义一个关键行为</li><li>要找到这个关键行为的完成者</li><li>时间限度，以及完成次数的限定</li></ul><h3 id="3-4-2-理解关键行为"><a href="#3-4-2-理解关键行为" class="headerlink" title="3.4.2 理解关键行为"></a>3.4.2 理解关键行为</h3><p>关键行为：指让新用户通过采取某个特定行为迅速了解到产品的价值所在，到达Aha时刻。 </p><ul><li>列出可能的关键行为</li><li>通过数据分析筛选关键行为<ul><li>找到和长期用户存在正相关最强的行为</li></ul></li><li>通过定性用户调研进一步确定关键行为</li></ul><h3 id="3-4-3-衡量用户激活的常用指标和图表"><a href="#3-4-3-衡量用户激活的常用指标和图表" class="headerlink" title="3.4.3 衡量用户激活的常用指标和图表"></a>3.4.3 衡量用户激活的常用指标和图表</h3><ol><li>激活率 - 新用户在一定时间以内完成激活行为的比例。</li><li>激活漏斗转化率 - 追踪新用户注册和激活的全过程，看用户完成每一个步骤占进入这个步骤总人数的比例。</li><li>新用户留存指标 - 新用户经过一个月以后，还是否是活跃用户</li></ol><h3 id="3-4-4-激动指数模型"><a href="#3-4-4-激动指数模型" class="headerlink" title="3.4.4 激动指数模型"></a>3.4.4 激动指数模型</h3><p>代表用户有多大动力在某个时刻完成某件事情。新用户激活的过程就是在激动指数降为0之前完成整个过程，体会到产品的价值。</p><ol><li>要明确用户的初始激动指数  大公司or小公司？ 渠道？ </li><li>了解各个元素对激动指数的影响</li></ol><h3 id="3-4-5-新用户引导的原则"><a href="#3-4-5-新用户引导的原则" class="headerlink" title="3.4.5 新用户引导的原则"></a>3.4.5 新用户引导的原则</h3><ul><li>增强动力<ul><li>保持外部广告和新用户欢迎页面的前后一致性</li><li>向用户解释为什么要各种权限，而不是上来直接就要</li><li>利用社会信任，</li><li>让用户参与其中，完成一个引导互动的流程</li></ul></li><li>减少障碍<ul><li>推迟注册步骤，让用户先使用产品</li><li>移除多余步骤，隐藏过多信息</li><li>避免冷启动，预加载</li></ul></li><li>适时助推<ul><li>明确机会窗口  明确在哪个阶段需要给助力</li><li>灵活采用各种UX模式进行用户引导</li><li>利用邮件或移动推送等外部形式提醒用户完成了新用户的激活</li></ul></li><li>私人订制<ul><li>让用户自己选择兴趣和偏好</li><li>根据用户消费历史推荐</li><li>根据用户目的给予不同的引导</li><li>根据用户不同的群组给予不同的引导</li></ul></li></ul><p>注意避免： </p><ul><li>步骤太多，流程太长</li><li>没有聚焦到关键行为，想让新用户做的事情太多了</li><li>花太多时间教用户如何用界面，而没有让用户使用产品</li><li>太快完成设置，没有足够教育</li><li>注册太顺利，没有足够的障碍筛选掉不合格的用户</li><li>对每个用户都统一对待</li></ul><h3 id="3-4-6-新用户激活-系统工程"><a href="#3-4-6-新用户激活-系统工程" class="headerlink" title="3.4.6 新用户激活 - 系统工程"></a>3.4.6 新用户激活 - 系统工程</h3><p>新用户激活是整个增长过程中难度最大的，成功的用户激活需要</p><ul><li>帮助用户完成基本的账户设置</li><li>让用户对产品有一定的了解</li><li>让用户完成和长期留存息息相关的关键行为</li><li>令用户感受到产品的价值</li><li>需要新用户在有限时间内，在认识、体验、行动和情感四个方面都完成一次升级，变成产品的使用者</li></ul><p>新用户整个激活过程需要专门的团队，做专门的事情：</p><ul><li>多个团队<ul><li>产品，市场，增长，客户成功，销售，设计，工程人员</li></ul></li><li>新用户激活需要多个渠道配合<ul><li>广告</li><li>产品内新用户的引导</li><li>邮件推送</li><li>社交网络</li><li>公关</li><li>活动</li></ul></li><li>延长定义新用户激活的时间段</li></ul><h2 id="3-5-用户留存：增长的坚实根基"><a href="#3-5-用户留存：增长的坚实根基" class="headerlink" title="3.5 用户留存：增长的坚实根基"></a>3.5 用户留存：增长的坚实根基</h2><p>用户留存的影响：</p><ul><li>好留存会使用户付费周期变长，用户生命周期价值LTV升高</li><li>好留存可以使团队有预算测试更多，更贵的增长渠道</li><li>好留存能带来更多忠实的老用户，可以推荐更多新用户</li><li>强大之处在于其复利效应</li></ul><h3 id="3-5-1-定义留存"><a href="#3-5-1-定义留存" class="headerlink" title="3.5.1 定义留存"></a>3.5.1 定义留存</h3><p>如何定义留存：</p><ul><li>计算同一用户群不同时间的留存率(retension rate)</li><li>或者叫同期群分析</li><li>将同一时间加入的用户放在一起，横向追踪在接下来几个月，一年的时间里，是不是还持续使用这个产品，流失比例</li></ul><h3 id="3-5-2-留存的关键行为"><a href="#3-5-2-留存的关键行为" class="headerlink" title="3.5.2 留存的关键行为"></a>3.5.2 留存的关键行为</h3><ul><li>一定时间以后返回网站？ <ul><li>基于用户登录行为</li><li>要看产品特征，比如对于在线游戏，就很够；对于其他的，可能不够了</li></ul></li><li>用户留存应当和用户的关键行为挂钩</li><li>找到属于产品的天然使用周期<ul><li>上网找这个分类下的拳头产品的指标</li></ul></li><li>记录流程<ul><li>记录每一周首次完成关键行为的用户数，也就是激活用户数</li><li>追踪这些用户在接下来的每一周里继续完成关键行为的数量</li><li>通过1，2步，计算每一周有关键行为的用户占首周激活用户数的百分比</li></ul></li></ul><h3 id="3-5-3-分析留存曲线"><a href="#3-5-3-分析留存曲线" class="headerlink" title="3.5.3 分析留存曲线"></a>3.5.3 分析留存曲线</h3><p>从留存曲线上，可以看出：</p><ul><li>从不同时期的起始同期群的大小可以看到用户数的增长速度</li><li>从用户完成关键行为的比例可以看到用户对产品的参与度</li><li>从不同时期的同期群曲线可以看到用户的留存率是否有改善</li></ul><h3 id="3-5-4-留存的不同阶段"><a href="#3-5-4-留存的不同阶段" class="headerlink" title="3.5.4 留存的不同阶段"></a>3.5.4 留存的不同阶段</h3><ul><li>新用户激活阶段<ul><li>注册</li><li>激活</li><li>整体新用户体验</li></ul></li><li>中期留存阶段<ul><li>指用户完成了首次关键行为之后继续熟悉产品，发现更多价值</li></ul></li><li>长期留存阶段<ul><li>主要目标是让用户经常回来使用产品，感受到产品的核心价值</li></ul></li><li>流失用户阶段<ul><li>针对已经流失的用户，让用户重新发现产品价值，唤回用户</li></ul></li></ul><h3 id="3-5-5-用户分组"><a href="#3-5-5-用户分组" class="headerlink" title="3.5.5 用户分组"></a>3.5.5 用户分组</h3><ul><li>分组并对比不同群组的留存曲线</li><li>比较不同流量来源的用户留存曲线</li><li>比较不同用户特征的用户留存曲线</li><li>不同产品客户端</li><li>最好按照行为来进行划分</li></ul><h3 id="3-5-6-留存与长期留存（用户参与）"><a href="#3-5-6-留存与长期留存（用户参与）" class="headerlink" title="3.5.6 留存与长期留存（用户参与）"></a>3.5.6 留存与长期留存（用户参与）</h3><ul><li>用户留存率指过了一定时间后，有多少用户仍然在产品内进行关键行为</li><li>用户参与度指在一定时间内，用户平均有几个关键行为和有多少用户同时有超过一种以上的关键行为</li></ul><ul><li><p>按照用户参与度对用户进行分类</p><ul><li>消极用户 90%<ul><li>没有按照最理想的方式使用产品，但会按照自己的方式以比较正常的频率持续使用产品</li></ul></li><li>核心用户 9%<ul><li>以比较正常的频率和正确的方式使用产品，是活跃用户里的大多数</li></ul></li><li>超级用户 1%<ul><li>包括各种进阶功能 </li></ul></li></ul></li><li><p>留存模型</p><ul><li>增加参与用户数</li><li>长期留住用户</li><li>自我持续</li></ul></li><li><p>即要有好产品给用户带来价值</p></li><li><p>产品要能对用户的行为产生影响</p></li><li><p>反过来用户的行为也成为产品体验的一部分</p></li></ul><h3 id="3-5-7-完成关键行为：-BJ-Fogg的行为模型"><a href="#3-5-7-完成关键行为：-BJ-Fogg的行为模型" class="headerlink" title="3.5.7 完成关键行为： BJ Fogg的行为模型"></a>3.5.7 完成关键行为： BJ Fogg的行为模型</h3><p>B = MAT </p><p>行为的发生与否受到动力，能力，和触发的三个因素的影响。</p><ul><li>行为： 想让用户采取的行动</li><li>动力： 用户有多想完成这个行为</li><li>能力： 这个行为对用户来说有多容易</li><li>触发： 提醒用户采取行动</li></ul><h3 id="3-5-8-让用户养成习惯"><a href="#3-5-8-让用户养成习惯" class="headerlink" title="3.5.8 让用户养成习惯"></a>3.5.8 让用户养成习惯</h3><p>—–&gt;  《上瘾：让用户养成使用习惯的四大产品逻辑》</p><ul><li>给用户的单次行为提供奖励，并且这个奖励应当是不固定的</li><li>要求用户在产品当中投入一点努力，而这一点努力可以增加用户在产品里储藏的价值</li><li>要让外在的触发和用户的内在触发相结合</li><li>打造一个参与闭环，让用户的一个行为可以带来更多的行为</li></ul><h3 id="3-5-9-参与闭环：让行为带来更多的行为"><a href="#3-5-9-参与闭环：让行为带来更多的行为" class="headerlink" title="3.5.9 参与闭环：让行为带来更多的行为"></a>3.5.9 参与闭环：让行为带来更多的行为</h3><ul><li>参与闭环： 能够将行为放大的良性循环，一个行为可以带来另外一个行为，从而使得每个行为的价值都得到提升</li><li>通过产品设计让用户参与闭环，让每次行为都被放大，带来更多的行为，从而加深对产品的参与度。</li><li>从产品角度来说，要找到有效的钩子，通过有效触发让用户完成行为 </li><li>从用户角度看，产品的设计要和用户的内在动力相一致，并在用户行动后给予反馈和奖励，从而激励用户进行下一步行动。</li><li>触发 -&gt; 行动 -&gt; 反馈 -&gt; 动力</li></ul><h3 id="3-5-10-提高用户留存的8种武器"><a href="#3-5-10-提高用户留存的8种武器" class="headerlink" title="3.5.10 提高用户留存的8种武器"></a>3.5.10 提高用户留存的8种武器</h3><ul><li>产品改进<ul><li>产品团队往往更专注于开发和上线新的功能，往往会忽略如何让更多的用户在产品已有功能上得到更多的价值</li><li>增长团队的努力方向<ul><li>优化新用户引导</li><li>改善用户使用体验</li><li>加入持续引导机制</li><li>帮助用户形成使用习惯</li></ul></li></ul></li><li>新用户引导和教育</li><li>邮件</li><li>通知<ul><li>产品内信息的使用，忌信息轰炸<ul><li>推广新功能，新内容或者提高已有功能使用度</li><li>对时间敏感的信息</li><li>给用户提供信息，和用户互动，对话</li></ul></li></ul></li><li>推送<ul><li>RRF模型<ul><li>覆盖面 Reach<ul><li>由移动推送的触发情景和适用用户群决定 </li></ul></li><li>相关性 Relevance<ul><li>移动推送到达的及时性和内容的个人化 </li></ul></li><li>频率 Frequency <ul><li>触发推送的情景的发生频率</li></ul></li></ul></li><li>测试过程<ul><li>检测负面的影响，如用户取消推送权限的比率和应用卸载率</li><li>小比例用户测试</li><li>只有在最紧急的时候适用震动</li><li>在计划移动推送时，考虑用户的日常生活节奏</li><li>在文案中适用多种多样的个性化语言</li><li>通过深度链接让用户直接到达应用内指定的页面</li><li>不断测试，不断优化</li></ul></li></ul></li><li>客户服务</li><li>促销</li><li>忠诚客户计划</li><li>新产品</li></ul><h1 id="4-增长团队与增长流程"><a href="#4-增长团队与增长流程" class="headerlink" title="4. 增长团队与增长流程"></a>4. 增长团队与增长流程</h1><p>到底如何做增长？因为增长涉及的范围非常广泛，可以尝试的方向和技巧有很多，做增长的时候很容易陷入扔飞镖的陷阱当中去，就是希望有几个会被扔到靶子上没掉下来。但是—–二八定律，任何给定时刻，对增长推动最大的事情可能只有那么一两件。</p><blockquote><p>增长成功的秘诀不在于同时做很多事，而是在于能够找到目前影响增长率最关键的一两件事。</p></blockquote><h2 id="4-1-增长作战计划书"><a href="#4-1-增长作战计划书" class="headerlink" title="4.1 增长作战计划书"></a>4.1 增长作战计划书</h2><p>以这个计划书为蓝图问问题，做假设，做测试，得出结论，步步为营，不断调整和修正你的假设，揭示增长的问题和关键所在，从而最终达到目标。这张计划书需要有：</p><h3 id="4-1-1-方向标：北极星指标"><a href="#4-1-1-方向标：北极星指标" class="headerlink" title="4.1.1 方向标：北极星指标"></a>4.1.1 方向标：北极星指标</h3><p>给出关键性的指标，e.g  facebook: 活跃用户数量 vs MySpace 注册用户数量</p><p>这个指标代表了管理层对用户价值和公司成功关系之间的理解。敢不敢秀给投资者看，敢不敢直面问题，很关键了。比如京东的删掉自营数据，完全的骗自己；包括苹果不再公布手机销售数量… </p><p>如何定义北极星指标？</p><ul><li>你的产品的核心价值是什么？这个指标能让你知道你的用户体验到了这种价值么？</li><li>这个指标能够反映用户的活跃程度么？ </li><li>如果这个指标变好了，是不是能够说明整个公司是在向好的方向发展？ </li><li>这个指标是不是很容易被整个团队理解和交流呢？ </li><li>这个指标是一个先导指标还是一个滞后指标？</li></ul><p>滞后指标，比如按月付费，但是可能有些用户就是忘了取消了<br>先导指标： 月活跃用户数</p><ul><li>这个指标是不是一个可操作的指标？ </li></ul><h3 id="4-1-2-路线图：-增长模型"><a href="#4-1-2-路线图：-增长模型" class="headerlink" title="4.1.2 路线图： 增长模型"></a>4.1.2 路线图： 增长模型</h3><p>增长模型，类似于传统的商业模型，但是其重点在于增长，用户的增长和利润的增长。</p><p>增长模型的精髓是将生意提炼和总结成一个数学公式，从而帮助你用全面、简单和结构化的方式去思考增长。</p><p><strong><em>能用一个公式来描述我们部门的生意吗？</em></strong> </p><p>通过这种方式，可以帮助团队理解过去的一些产品决策，并且确定产品的优劣势，还可以揭示一些曾经成立但现在已经过时的假设。</p><p>当团队成员在每天决策中，都可以用同样的增长模型作为标准的时候，团队的方向和优先级就会变得更加一致。</p><p>打造增长模型的方式： </p><ol><li>数学模型当中的输入变量，方程，输出变量(北极星指标)</li><li>看user journey </li><li>给用户旅程的每一步都找到一个相应的指标，然后设置追踪来弥补这个漏斗，用这些指标作为增长模型的输入变量。同时，注意将各个输入变量不断分解到最小，这样子我们就能揭示出所有对增长有影响的单个输入变量，并且将数据记录下来 </li></ol><p>其实打造整个增长模型的目的就是揭示所有影响增长的输入变量，并且用量化的方式来指导实验。通过这种方式，<strong><em>将抽象的增长分解成一个个具体的影响增长的输入变量</em></strong>。当我们把所有的输入变量都列出来以后，就会发现增长的驱动力可以来自于用户声明周期的各个阶段，而不仅仅是新用户的获取了。</p><p>通过这种方式定量预测未来的增长趋势。</p><h3 id="4-1-3-仪表盘：-关键指标看板-dashboard"><a href="#4-1-3-仪表盘：-关键指标看板-dashboard" class="headerlink" title="4.1.3 仪表盘： 关键指标看板(dashboard)"></a>4.1.3 仪表盘： 关键指标看板(dashboard)</h3><p>关键行为漏斗，一般互联网公司的数据主要分为渠道数据、盈利数据和用户行为数据。用户行为数据由于其可操作性强，是增长团队找到机会的金矿。</p><p>事件Event用于描述用户的行为，一般是在网站、应用界面中发生的。</p><p>采取分级分步的方法，先定义出最重要的少数几个事件进行追踪。然后再做其次重要的时间，这样的好处是循序渐进，很快就可以得到最重要的数据。</p><p>如果从头建立用户行为追踪计划，找到三个最重要的一级事件，应该要<strong><em>代表用户从初次接触产品到最终成功使用产品的最重要的里程碑</em></strong>。</p><p>譬如在零售网站，那么重要的里程碑式行为应该有： 产品页面浏览；产品加入购物车；产品购买成功。</p><p>构建用户行为漏斗！！！</p><p>看板数据应包括：</p><ul><li>北极星指标 数值，趋势</li><li>增长模型关键指标：头部访客量，新用户激活率，老用户留存率，盈利情况等</li><li>关键细分指标：比如与关键行为相关的指标、一些重要流程的漏斗分解等</li><li>重要用户分组：按渠道分，按新老用户分，按产品平台分等</li></ul><h3 id="4-1-4-参考书：-用户心理决策地图-定型数据"><a href="#4-1-4-参考书：-用户心理决策地图-定型数据" class="headerlink" title="4.1.4 参考书： 用户心理决策地图(定型数据)"></a>4.1.4 参考书： 用户心理决策地图(定型数据)</h3><p>做增长，数据是非常有用的武器，但是有时候容易犯这样的错误：即总是从数据的角度想问题，却忽略了每个用户都是实实在在的大活人。其实，增长团队的最高境界就是能从用户第一人称视角看问题，将产品价值迅速为用户呈上。</p><p>增长模型从公司的角度来看，量化了影响增长的每一步的关键指标，只要转化率不是100%，就仍有优化空间。但是从用户角度来看，也代表了每一个用户的决策过程。通过转化率的总和数字，我们也要认识到每一个用户<strong>动机不同，背景不同，所处状态不同，思维模式不同，因此决策的过程</strong>不同。</p><p>需要深入了解用户心理学，才能有效地驱动增长。</p><p>需要了解用户在决策的不同阶段的心理学： </p><ul><li>访问阶段</li></ul><p>要解决的问题：用户会注意到这个产品么？ </p><p>由于用户给产品的注意力很少，增长团队需要在稍纵即逝的机会里抓住用户的注意力和情感，所以重点在于通过有冲击力的设计和文案吸引用户的眼球，引起用户的共鸣。Keep - 自律给我自由</p><ul><li>转化阶段</li></ul><p>需要帮助用户做出尝试的决定。这个时候机会窗口其实还是相对短暂的，需要用<strong><em>好的设计和故事</em></strong>引起用户的情感共鸣，通过清晰的文案描述产品的好处，给用户推荐个性化的内容和产品，以及通过各种心理学的方式，例如<strong><em>稀缺性、社交证据、紧迫感</em></strong>等，增强用户尝试的动力</p><ul><li>激活阶段</li></ul><p>引导用户尽快完成各种必须的步骤，进行关键动作，体验产品的核心价值。“我该如何使用这个产品”—-&gt; “我得到了我想要的了么”</p><p>这个时候用户对产品的关注度达到了峰值，在决策的过程中开始更多地运用逻辑学习新产品的使用。增长团队需要关注的重点是：通过各种方式引导，简化流程，去除阻碍行动的壁垒，适时提醒没有行动的用户，以及帮助用户设立一个向高级用户进发的目标和计划。</p><ul><li>留存阶段</li></ul><p>帮助用户形成使用习惯，引导用户继续使用更多功能，并感受到进展。</p><p>帮助解决的问题是：</p><ol><li>为什么要继续使用这个产品？</li><li>该什么场景下继续使用呢？</li><li>能继续发现新的价值么？</li></ol><p>通过各种机制留住用户，庆祝进展，里程碑，适时的提醒和沟通，向用户介绍新功能等。</p><ul><li>推荐阶段</li></ul><p>帮助用户回答 —- “我现在要把这个介绍给别人吗？”</p><p>情感决策（喜欢这个东西）还是逻辑决策（分享的各种奖励）</p><ul><li>变现阶段</li></ul><p>帮助用户回答 —- “我愿意为他付钱么？值得么？” </p><h2 id="4-2-移动应用的增长框架"><a href="#4-2-移动应用的增长框架" class="headerlink" title="4.2 移动应用的增长框架"></a>4.2 移动应用的增长框架</h2><ol><li>技术是最底层的基础</li><li>分析和洞察是指导增长策略的根本</li><li>用户获取、参与和留存，以及变现是用户生命周期的三个主要阶段</li><li>具体渠道的运用跨越了用户的不同生命周期。</li></ol><p><img src="%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%A2%9E%E9%95%BF%E6%A1%86%E6%9E%B6%E5%9B%BE.jpg" alt="移动应用增长框架图"></p><h2 id="4-3-组建增长团队"><a href="#4-3-组建增长团队" class="headerlink" title="4.3 组建增长团队"></a>4.3 组建增长团队</h2><h3 id="4-3-1-架构"><a href="#4-3-1-架构" class="headerlink" title="4.3.1 架构"></a>4.3.1 架构</h3><ul><li>团队负责人直接汇报给CEO</li><li>将这种独立型的增长团队架构作为内部最重要的目标</li><li>专门团队用全部时间负责增长</li><li>分开的小增长团队<ul><li>新用户获取</li><li>用户激活</li><li>用户参与度提升</li><li>流失用户唤回</li></ul></li><li>团队人员构成，全才难求，但是增长是个很复合的过程<ul><li>产品经理</li><li>分析师</li><li>用户研究师</li><li>设计师</li><li>工程师</li></ul></li><li>运作流程<ul><li>理解数据</li><li>发现机会</li><li>执行计划</li></ul></li><li>团队每半年定一个增长目标</li><li>每8周作为一个增长周期<ul><li>2周 <ul><li>分析已有数据和头脑风暴决定做什么</li><li>制定增长规划图</li></ul></li><li>6周<ul><li>做开发和执行</li></ul></li><li>汇总分析结果并决定下一步的计划</li></ul></li></ul><h3 id="4-3-2-增长，产品，营销，运营的区别和联系"><a href="#4-3-2-增长，产品，营销，运营的区别和联系" class="headerlink" title="4.3.2 增长，产品，营销，运营的区别和联系"></a>4.3.2 增长，产品，营销，运营的区别和联系</h3><ul><li><p>增长团队本质上是一个以用户和利润增长为目标的产品团队。</p><ul><li>增长团队被允许在产品内部进行优化和改动</li><li>有工程师资源支持能够达到这个目的</li></ul></li><li><p>和产品团队的不同</p><ul><li>产品团队的日常活动围绕着产品和功能的开发展开</li><li>增长团队的目标是增长，追求的是影响力和结果</li><li>产品是价值创造，而增长是在向更多的人传播价值</li><li>增长团队更偏重指标为导向，其方法论更偏向数据驱动，更注重实验，并且常要求团队明确地在商业指标和用户体验之间做权衡。</li></ul></li><li><p>增长和运营</p><ul><li>产品团队负责界定和提供长期用户价值</li><li>运营团队负责创造短期用户价值和协助产品完善长期价值<ul><li>内容运营<ul><li>关注内容的传播效果 </li></ul></li><li>用户运营<ul><li>活跃用户指标，包括用户的新增、留存、活跃、传播以及用户之间价值的良性循环 </li></ul></li><li>活动运营<ul><li>关注活动的目标达成度和效果 </li></ul></li><li>产品运营<ul><li>通过各种运营手段去拉升某个产品的特定数据 </li></ul></li></ul></li></ul></li><li><p>增长团队的核心要素</p><ul><li>跨功能的团队： 打破产品和市场之间的隔阂</li><li>利用定性和定量的数据分析深入了解用户的行为</li><li>快速做产品迭代和测试新的想法，并使用深入的分析来指导行动</li></ul></li></ul><h3 id="4-3-3-增长团队的必备元素"><a href="#4-3-3-增长团队的必备元素" class="headerlink" title="4.3.3 增长团队的必备元素"></a>4.3.3 增长团队的必备元素</h3><ul><li>前提条件：<ul><li>产品：是否已经建立了核心价值</li><li>文化：是否能够得到领导层的支持<ul><li>是能够让增长变得更可预测，但是无法保证真的可以增长 </li></ul></li><li>资源： 合理的想要的资源和工具</li><li>流程： 增长团队的运作流程  开发-衡量-学习</li><li>人才： 合适的人才</li></ul></li><li>需要满足： <ul><li>文化</li><li>人员</li><li>流程</li><li>工具</li><li>资源</li></ul></li></ul><h3 id="4-3-4-如何配置增长团队"><a href="#4-3-4-如何配置增长团队" class="headerlink" title="4.3.4 如何配置增长团队"></a>4.3.4 如何配置增长团队</h3><ul><li>基本配置<ul><li>增长产品经理<ul><li>数据驱动 </li></ul></li><li>2-3 程序员<ul><li>增长基因</li><li>A/B测试技术难度其实不高，会喜欢么？</li><li>实验代码会被浪费</li><li>有商业和产品思维</li><li>沟通能力和项目管理能力</li></ul></li><li>1 数据分析师</li><li>1 设计师<ul><li>快速上线，不需要特别精益求精 </li></ul></li><li>0-1 定性用户研究<ul><li>测试用户心理</li><li>发现交互界面中的问题</li><li>给增长实验提供方向、线索和反馈</li></ul></li><li>市场渠道专家<ul><li>搜索引擎</li><li>付费广告</li><li>病毒传播</li><li>邮件</li></ul></li></ul></li><li>在达到产品和市场契合的时候，就开始建立增长团队</li></ul><h3 id="4-3-5-增长团队的组织架构"><a href="#4-3-5-增长团队的组织架构" class="headerlink" title="4.3.5 增长团队的组织架构"></a>4.3.5 增长团队的组织架构</h3><ul><li>独立特区的模式<ul><li>好处从头建立自己的流程</li><li>有自己的文化和基因</li><li>独立的模式能够保证增长团队能够真正建立起数据导向、数据驱动的运作体系，而不是试图融入公司团队已有的运作模式当中</li><li>强有力的支持</li><li>容易各个团队之间产生矛盾</li></ul></li><li>功能主导的模式<ul><li>归属于另外一个大的功能团队，以产品团队居多 </li></ul></li><li>内部咨询师的模式<ul><li>只负责产品的某部分的功能 </li></ul></li></ul><h3 id="4-3-6-增长团队工具箱"><a href="#4-3-6-增长团队工具箱" class="headerlink" title="4.3.6 增长团队工具箱"></a>4.3.6 增长团队工具箱</h3><ul><li>数据分析</li><li>A/B 测试</li><li>渠道管理以及营销自动化</li><li>项目管理和知识分享<h1 id="5-职业路径"><a href="#5-职业路径" class="headerlink" title="5. 职业路径"></a>5. 职业路径</h1></li></ul><h1 id="6-增长计划"><a href="#6-增长计划" class="headerlink" title="6.增长计划"></a>6.增长计划</h1><h2 id="6-1-增长黑客的最初90天计划：-第一周"><a href="#6-1-增长黑客的最初90天计划：-第一周" class="headerlink" title="6.1 增长黑客的最初90天计划： 第一周"></a>6.1 增长黑客的最初90天计划： 第一周</h2><ul><li>了解增长工具箱</li></ul><p>迅速熟悉公司内部使用的各种工具：例如渠道管理工具、邮件、移动推送等CRM(客户关系)工具，用户行为追踪，数据可视化看板等数据分析工具，A/B测试工具，以及项目管理工具。记录下来任何需要填补的漏洞</p><ul><li>深入研究历史数据</li></ul><p>全面了解历史数据，比如对于一个移动应用来说，看它的下载量，注册比例，激活用户比例，长期留存率，老用户推荐比例，盈利来源等。如果没有现成的数据看板，需要从不同的源头收集各种数据，将它们放在一起来看。收集所有关键数据点，可以帮助我从大框架上了解现状、发现问题</p><ul><li>和直接经理/ CEO会谈</li></ul><p>在会议上需要确定以下几件事情：</p><ol><li>了解工作背景信息</li><li>沟通双方的工作风格</li><li>讨论增长的计划和优先级</li><li>了解如何和工程师、设计师合作，以便上线实验</li></ol><p>讨论应该在哪个方面来进行实验</p><ul><li>和团队及合作者开会</li></ul><p>因为增长天然需要跨部门的合作，除了和自己的下属会谈之外，也应该安排时间来认识合作团队，了解事情是如何运转的，处理好和同事的关系。如同新用户激活对于用户的增长很重要一样，给大家的第一印象也很重要</p><ul><li>倾听用户的声音</li></ul><p>倾听用户的声音</p><h2 id="6-2-增长黑客的最初90天计划：-第一月"><a href="#6-2-增长黑客的最初90天计划：-第一月" class="headerlink" title="6.2 增长黑客的最初90天计划： 第一月"></a>6.2 增长黑客的最初90天计划： 第一月</h2><ul><li>确定增长指标</li></ul><p>并不需要必须是日均活跃用户，这个应用是每天都会使用的么？</p><p>如何定义活跃？打开？还是一些更有价值的行为？</p><p>留存率的北极星指标：North Star Metric（OMTM），就是最重要的一个指标，要对应你的产品给用户传输的价值。</p><ul><li>找到一个聚焦领域</li></ul><p>运用收集到的所有信息，深入分析各种数据，并且和团队讨论，战略性地选择第一个聚焦领域，理想情况下，在这个领域进行实验应该是潜在影响力最大的，资源要求少，成功概率高。</p><p>关于提升留存率，不一定是要通过邮件等方式找回流式的用户，也有可能从产品中寻找机会，让用户更愿意呆在这个平台里面。</p><p>寻找杠杆：finding leverage: 需要有明确的目标，然后针对这个目标，找到所有领域当中杠杆效应最明显的地方，然后针对这个地方进行试验改进。所谓的杠杆效应，就是性价比最高的地方。—–对于改善留存率而言，杠杆效应最大的点应该是在产品领域的。</p><ul><li>上线增长实验</li></ul><p>坚持推进直到第一个实验成功上线，希望通过之前的分析和准备工作，使这个实验能带来正面的结果</p><p>可能一些小文本的改变会给转化率带来很大的提高：</p><ol><li>你愿意开通每周10美元的定期投资么？</li><li>如果你每周存入10美元，5年后仅本金就可以积累2600美元。从今天开始每周投资10美元吧！（+40%）</li><li>你知道已经有n百万用户使用定期投资功能了么？从今天开始每周投资10美元吧！（+60%）</li></ol><p>—–&gt; 将小的结果积少成多呈现出来，或者强调有很多其他人在使用这个功能，对用户的心理有着强大的影响。</p><p>如何解决程序员们的困扰？不愿意做，为什么？</p><p>突然功能的取消；文本色彩的变化，无聊…</p><p>需要尽可能地将程序员从繁琐的文本测试和小改动中解放出来，让它们去做更复杂、更有挑战性的实验。采用提前埋点的方法或者第三方测试工具里面的高级功能，其实可以很有效的解决这个问题</p><p>程序员喜欢看到自己的工作的影响力，要调动它们的积极性，需要<strong>让他们参与到产生实验假设和实验设计的整个过程中</strong>去，并且及时把结果反馈给他们</p><p>不是所有程序员都适合在增长团队当中的，如果只是追求技术深度，在增长团队显然不是最合适的，但是对于有产品思维的，喜欢看到自己的工作对用户和业务有影响的程序员来说，增长团队的工作其实更有吸引力。</p><ul><li>定期与用户交流</li></ul><p>定期交流，很多问题是A/B测试做不了，验证不了的。不管是用户问卷调查，顾客发展电话还是用户社群，需要找到一个可以定期和用户对话的途径。对用户了解得越多，就能越好地找到用户的痛点和让用户惊喜的办法，实验成功率就会越高。</p><p>还有与内部的人员的交流，因为是单独成立了一个增长团队，而这个团队很多时候都需要调用整个公司各个部门的力量来一起做东西。每周实验分享会，疯狂的A/B测试，告诉大家结果，让各个部门的人都更加了解一些。</p><p>对应的email list,share实验心得</p><p>头脑风暴讨论会</p><ul><li>弥补工具，数据，基础设施的漏洞</li></ul><p>应该明确出现了哪些问题，哪些问题更加关键，以及如何去解决</p><h2 id="6-3-增长黑客的最初90天计划：-第一季度"><a href="#6-3-增长黑客的最初90天计划：-第一季度" class="headerlink" title="6.3 增长黑客的最初90天计划： 第一季度"></a>6.3 增长黑客的最初90天计划： 第一季度</h2><ul><li>搭建增长模型</li></ul><p>从同事和团队里，以及从数据和测试当中，对驱动公司增长的因素有了进一步的了解。接下来，需要后退一步，试着把所有的信息组装在一起，提炼成一个高度概括的增长模型。</p><p>增长模型是一个解释业务里不同的变量，以及它们如何互相影响转化成增长的数学公式，能够帮助你更有效地了解业务、协调团队、设计实验和衡量结果。</p><ul><li>设立增长实验流程</li></ul><p>当上线了最初的几个实验之后，应该开始建立一个增长实验流程，这个流程包括下面两个阶段： </p><ol><li>战略制定阶段：</li></ol><p>通过审视增长模型和指标，深入的数据分析，找到一个聚焦领域，<br>2. 战术执行阶段：</p><p>针对聚焦领域，快速进行 开发-衡量-学习的迭代流程，产生备选实验想法，排列优先级，上线实验，收集数据进行分析，然后应用实验结果，把心得用到下一个实验当中。</p><ul><li>选择实验记录系统</li></ul><p>共享的表格和文档，也可以使用公司内部的已有的项目管理软件</p><p>每个实验想法都应该记录下来，设计每个实验的时候都应该有清晰的假设和计划，每个结果都应该有分析，并存档。所有这些信息都应该存储在一个共享的系统当中作为历史记录，同时供现在的和未来的团队使用和学习</p><ul><li>组织增长会议</li></ul><p>可以省掉一些沟通成本，但是必要的会议也是需要的。从每周召开增长团队例会开始，帮助沟通增长目标，管理增长流程，促进团队成员间的交流，增强他们的参与感。在这个会议上，可以监测指标进展，回顾增长实验的上线情况，分析讨论结果等。其他可能有用的会议，可以视组里情况进行取舍： </p><ol><li>每日增长团队站立会议</li><li>每周增长细分团队间实验结果交流会议</li><li>每两周管理层交流会议</li><li>每月全公司想法收集午餐会</li><li>不定期设计冲刺会议</li></ol><ul><li>倡导增长文化</li></ul><p>增长文化，从最基本的两件事开始做起：</p><ol><li>将实验的结果和心得向全公司公开，让每个人都知道增长团队的进展，并且可以把这些心得应用在自己的工作当中</li><li>鼓励每个人都来贡献实验想法，因为即使是针对同一个问题，每个人也都是有自己的视角的。比如，销售团队和客户服务团队离用户更近，工程师团队对程序更熟悉，很多时候他们都会带来出其不意的想法的。</li></ol><h1 id="7-增长战略"><a href="#7-增长战略" class="headerlink" title="7. 增长战略"></a>7. 增长战略</h1><h2 id="7-1-设定增长目标"><a href="#7-1-设定增长目标" class="headerlink" title="7.1 设定增长目标"></a>7.1 设定增长目标</h2><ul><li>找到正确的增长KPI并设定一个清晰明确的目标。</li><li>北极星指标就是公司的核心增长KPI</li><li>费劲但是不是完全没有可能</li></ul><h2 id="7-2-指标分解"><a href="#7-2-指标分解" class="headerlink" title="7.2 指标分解"></a>7.2 指标分解</h2><ul><li>横向分解<ul><li>按照用户的群组，加法的方式来做分解</li></ul></li><li>纵向分解<ul><li>按照用户的生命旅程，通过乘法的方式将子目标进一步拆解为更细的漏斗步骤。</li></ul></li></ul><h2 id="7-3-找到聚焦领域"><a href="#7-3-找到聚焦领域" class="headerlink" title="7.3 找到聚焦领域"></a>7.3 找到聚焦领域</h2><ul><li>通过分析和研究，找到性价比最高的聚焦领域</li></ul><h2 id="7-4-增长战术执行"><a href="#7-4-增长战术执行" class="headerlink" title="7.4 增长战术执行"></a>7.4 增长战术执行</h2><ul><li>增长冲刺<ul><li>产生实验想法<ul><li>针对聚焦领域，通过数据分析指定探索方向，产生出一系列的备选试验想法，记录在增长规划图当中</li><li>将收集试验想法当做增长流程的常规组成部分</li></ul></li><li>决定优先级排序<ul><li>影响力 - 成功率 - 开发成本 </li></ul></li><li>设计和开发试验<ul><li>要有一个增长试验报告<ul><li>部分划分<ul><li>试验假设</li><li>试验设计</li><li>试验指标</li><li>试验打分</li><li>试验结果</li><li>试验心得</li><li>后续计划</li></ul></li></ul></li></ul></li><li>分析数据<ul><li>确保试验结果具有统计显著性</li><li>计算所需的样本量 – 样本计算器</li><li>设置参数<ul><li>基本的转化率</li><li>最小能监测到的改变幅度</li><li>统计显著值</li></ul></li></ul></li><li>应用结果<ul><li>应用结果</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading </tag>
            
            <tag> Thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员修炼之道</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-注重实效方法论"><a href="#1-注重实效方法论" class="headerlink" title="1. 注重实效方法论"></a>1. 注重实效方法论</h1><h2 id="1-1-高效习惯"><a href="#1-1-高效习惯" class="headerlink" title="1.1 高效习惯"></a>1.1 高效习惯</h2><ul><li>不要害怕发生问题，不要推卸责任</li><li>对于一个事情是否能做到，提供各种选择，而不是借口</li><li>不要留着破窗户(低劣的设计，错误决策，糟糕代码)，将出问题的代码放入注释是个不错的选择。</li><li>参与正在发生的成功要更容易些，让他们瞥见未来，他们就会聚集在你的周围。</li></ul><h2 id="1-2-知识资产"><a href="#1-2-知识资产" class="headerlink" title="1.2 知识资产"></a>1.2 知识资产</h2><p>管理知识资产和管理金融资产非常相似：</p><ul><li>严肃的投资者定期投资 —— 作为习惯</li><li>多元化是长期成功的关键</li><li>聪明的投资者在保守的投资和高风险、高回报的投资之间平衡其资产</li><li>投资者设法低买高卖，以获取最大回报</li><li>应当周期性重新评估和平衡资产</li></ul><h2 id="1-3-交流"><a href="#1-3-交流" class="headerlink" title="1.3 交流"></a>1.3 交流</h2><ul><li>知道想说什么，有大纲</li><li>了解听众</li><li>让文档美观</li><li>让听众参与</li></ul><h1 id="2-注重实效的途径"><a href="#2-注重实效的途径" class="headerlink" title="2. 注重实效的途径"></a>2. 注重实效的途径</h1><h2 id="2-1-重复"><a href="#2-1-重复" class="headerlink" title="2.1 重复"></a>2.1 重复</h2><blockquote><p>DRY - Don’t repeat yourself!</p></blockquote><p>在不同的地方写相同的东西那在修改的时候就不能忘记每一处的修改，这是很crazy的做法了</p><h2 id="2-2-重复的发生"><a href="#2-2-重复的发生" class="headerlink" title="2.2 重复的发生"></a>2.2 重复的发生</h2><h2 id="2-2-1-强加的重复-似乎是环境要求"><a href="#2-2-1-强加的重复-似乎是环境要求" class="headerlink" title="2.2.1 强加的重复 - 似乎是环境要求"></a>2.2.1 强加的重复 - 似乎是环境要求</h2><h2 id="2-2-2-无意的重复-没有意识到"><a href="#2-2-2-无意的重复-没有意识到" class="headerlink" title="2.2.2 无意的重复 - 没有意识到"></a>2.2.2 无意的重复 - 没有意识到</h2><ul><li>注意数据之间的相互重复，如果有某个量值是可以通过其他数据计算得出的，那么就应该用计算得出的值</li><li>而由于性能原因，做cache引起的重复，需要将影响局部化，不要将其暴露给外界</li><li>像Java这样的面向对象的语言应当总是使用访问器函数来读写对象的属性</li></ul><h2 id="2-2-3-无耐性的重复-偷懒"><a href="#2-2-3-无耐性的重复-偷懒" class="headerlink" title="2.2.3 无耐性的重复 - 偷懒"></a>2.2.3 无耐性的重复 - 偷懒</h2><h2 id="2-2-4-开发者之间的重复-同一团队的几个人重复了同样的信息"><a href="#2-2-4-开发者之间的重复-同一团队的几个人重复了同样的信息" class="headerlink" title="2.2.4 开发者之间的重复 - 同一团队的几个人重复了同样的信息"></a>2.2.4 开发者之间的重复 - 同一团队的几个人重复了同样的信息</h2><ul><li>Make it easy to reuse </li></ul><h2 id="2-3-正交性"><a href="#2-3-正交性" class="headerlink" title="2.3 正交性"></a>2.3 正交性</h2><p>表示一种互不依赖，解耦性。指几个子系统之间互不依赖，例如数据库代码与用户界面代码应该为正交的</p><blockquote><p>Eliminate effects between unrelatd things </p></blockquote><p>使基础知识和应用分离，每个主要的基础设施组件(数据库、通信接口、中间件层)有自己的子团队</p><h2 id="2-4-设计"><a href="#2-4-设计" class="headerlink" title="2.4 设计"></a>2.4 设计</h2><p>做一个正交系统，关键指标！ </p><ul><li>模块化</li><li>基于组件</li><li>分层</li></ul><p>系统应该是由一组相互协作的模块组成，每个模块都实现不依赖于其他模块的功能。</p><p>通过分层使得每层都只使用在其下面的层次提供的抽象，在改动底层实现，而又不影响其他代码方面，就会有极大的灵活性了。</p><blockquote><p>对于正交性组件的测试方法 -&gt; 如果我显著改变某个特定功能背后的需求，有多少模块会受到影响呢？   需要是一个！</p></blockquote><h2 id="2-5-编码"><a href="#2-5-编码" class="headerlink" title="2.5 编码"></a>2.5 编码</h2><ul><li>让代码保持解耦<ul><li>不会没必要的想其他模块暴露任何借口</li></ul></li><li>避免使用全局数据</li><li>避免使用相似的函数</li></ul><blockquote><p>There are no final decisions </p></blockquote><h2 id="2-6-原型与便签"><a href="#2-6-原型与便签" class="headerlink" title="2.6 原型与便签"></a>2.6 原型与便签</h2><p>原型不需要总是以代码为基础，要看需求。比如为<strong>工作流和应用逻辑这样的动态事物制作原型，便签</strong>就非常好。用户界面的原型可以使白板上的图形，或者是永辉图程序或者界面构建器绘制的无功能的模型。</p><p>原型设计的目的就是为了去回答一些问题的，一些不在意的方面就可以不去管它。 </p><h3 id="2-6-1-什么时候使用原型"><a href="#2-6-1-什么时候使用原型" class="headerlink" title="2.6.1 什么时候使用原型"></a>2.6.1 什么时候使用原型</h3><ul><li>应制作原型的事物<ul><li>架构</li><li>已有系统中的新功能</li><li>外部数据的结构或内容</li><li>第三方工具或组件</li><li>性能问题</li><li>用户界面设计</li></ul></li></ul><h3 id="2-6-2-怎样使用原型"><a href="#2-6-2-怎样使用原型" class="headerlink" title="2.6.2 怎样使用原型"></a>2.6.2 怎样使用原型</h3><p>可以忽略一些细节</p><ul><li>正确性<ul><li>可以使用虚设的数据</li></ul></li><li>完整性<ul><li>原型也许只能在非常有限的意义上工作，也许只有一项预先选择的输入数据和菜单项</li></ul></li><li>健壮性<ul><li>错误检查可能会非常不完整，或者完全没有</li></ul></li><li>风格<ul><li>可能没有多少注释或者文档</li></ul></li></ul><h3 id="2-6-3-如何制作架构原型"><a href="#2-6-3-如何制作架构原型" class="headerlink" title="2.6.3 如何制作架构原型"></a>2.6.3 如何制作架构原型</h3><ul><li>在架构原型中寻求解答的一些问题<ul><li>主要组件的责任是否得到了良好的定义？ 是否适当？ </li><li>主要组件之间的协作是否得到良好的定义？ </li><li>耦合是否得以最小化？ </li><li>是否能确定重复的潜在来源？ </li><li>接口定义和各项约束是否可接受？ </li><li>每个模块在执行过程中是否能访问到其所需的数据？ 是否能在需要时进行访问？ </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading </tag>
            
            <tag> Thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说日本</title>
      <link href="/%E8%AF%B4%E8%AF%B4%E6%97%A5%E6%9C%AC/"/>
      <url>/%E8%AF%B4%E8%AF%B4%E6%97%A5%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>一衣带水的邻国，看上去像富士山一样，温润如玉，殊不知是座活火山，平静下酝酿着风暴。这是个很神奇的存在啊。有全世界独一无二的审慎与严谨，但也有战斗到死的癫狂。尽量不在这篇文章里输出自己的观点，只想说说关于日本，在自己了解以后，一些神奇的，令人惊叹的点。</p><h1 id="1-关于日本本身"><a href="#1-关于日本本身" class="headerlink" title="1. 关于日本本身"></a>1. 关于日本本身</h1><h2 id="1-1-地理位置-地理决定论？日本民族性格？"><a href="#1-1-地理位置-地理决定论？日本民族性格？" class="headerlink" title="1.1 地理位置-地理决定论？日本民族性格？"></a>1.1 地理位置-地理决定论？日本民族性格？</h2><p>千岛之国，日本国土由6852个小岛构成，四个最大的岛占了整个国土97%的面积，分别为： 北海道，本州，四国，九州。73% 森林覆盖率，世界顶级。108 座活火山，地震，从古至今，一直都在。<br><a href="https://en.wikipedia.org/wiki/List_of_countries_by_natural_disaster_risk" target="_blank" rel="noopener">natural disaster risk rank</a> 因为处于太平洋板块和亚欧板块交界处的消亡边界，每年都有上千次地震发生，其中不乏6级以上的<a href="https://www.livescience.com/30312-japan-earthquakes-top-10-110408.html" target="_blank" rel="noopener">大地震</a>。而如果统计1级以上的地震数量，日本<a href="http://blog.sciencenet.cn/blog-2277-1063374.html" target="_blank" rel="noopener">2016年达到了6566次</a>。</p><h2 id="1-2-教育水平"><a href="#1-2-教育水平" class="headerlink" title="1.2 教育水平"></a>1.2 教育水平</h2><p>日本教育水平世界前列，<a href="https://www.zhihu.com/question/21303431/answer/543321578" target="_blank" rel="noopener">OECD数据-知乎</a></p><h2 id="1-3-发迹史"><a href="#1-3-发迹史" class="headerlink" title="1.3 发迹史"></a>1.3 发迹史</h2><h3 id="1-3-0-明治维新"><a href="#1-3-0-明治维新" class="headerlink" title="1.3.0 明治维新"></a>1.3.0 明治维新</h3><h3 id="1-3-1-First-Sino-Japanese-War-甲午战争"><a href="#1-3-1-First-Sino-Japanese-War-甲午战争" class="headerlink" title="1.3.1 First Sino-Japanese War - 甲午战争"></a>1.3.1 First Sino-Japanese War - 甲午战争</h3><p>我国割让了辽东半岛（列强干预，未能得逞），台湾岛，澎湖列岛。增开沙市，重庆，苏州，杭州为商埠，并允许日本在中国的通商口岸投资办厂。</p><p>题外（待补充）：为什么会选择闭关锁国（稳定+可自给自足+南美，尤其秘鲁大量廉价银元的冲击）</p><ol start="2"><li>战争赔款的使用</li></ol><ul><li>一半用来扩充陆海军军备</li><li>币值改革的准备金 - 确立金本位的货币制度，融入世界经济体系</li><li>军舰水雷艇补充基金</li><li>灾害准备基金</li><li>教育基金</li><li>台湾经营费用</li></ul><p>吐槽： 定远舰建造花费约140万两白银，慈禧60大寿花费白银愈1000万两。<a href="http://blog.sina.com.cn/s/blog_7765a8070101e7mt.html?tj=1" target="_blank" rel="noopener">可能不太准确的数据源，(欢迎提供更准确的~)</a></p><h3 id="1-3-2-日俄战争"><a href="#1-3-2-日俄战争" class="headerlink" title="1.3.2 日俄战争"></a>1.3.2 日俄战争</h3><h3 id="1-3-3-一战与二战"><a href="#1-3-3-一战与二战" class="headerlink" title="1.3.3 一战与二战"></a>1.3.3 一战与二战</h3><p>说这方面的好文章太多，提一个日本战败后签订的跳月细文：<br><a href="https://en.wikipedia.org/wiki/Article_9_of_the_Japanese_Constitution" target="_blank" rel="noopener">日本放弃了宣布战争的权利- renounce the sovereign right of belligerency and aims at an international peace based on justice and order</a></p><h2 id="1-3-日本现在的问题"><a href="#1-3-日本现在的问题" class="headerlink" title="1.3 日本现在的问题"></a>1.3 日本现在的问题</h2><ol><li>人口老龄化</li></ol><p>根据2014年的估计，33%的日本人的年龄在60岁以上，25.9%在65岁以上，而这种老龄化的趋势正愈演愈烈。日本人口整体正在负增长中，2014年数据为127M，预计2040年会减到107M， 2050年会到97M，不足一亿。<a href="https://en.wikipedia.org/wiki/Aging_of_Japan" target="_blank" rel="noopener">(日本人口老龄化)</a></p><ol start="2"><li>自杀率 – related with 1.1?</li></ol><p>日本每年自杀人数30000左右，非常高的<a href="https://en.wikipedia.org/wiki/Suicide_in_Japan" target="_blank" rel="noopener">自杀率</a>。</p><ol start="3"><li>丧一代的年轻人？</li></ol><p><a href="https://en.wikipedia.org/wiki/Hikikomori" target="_blank" rel="noopener">Hikikpomori</a> 死肥宅? 大概应该这么翻译吧</p><p>沉溺于虚拟生活，摒弃一切社交活动，活在自己的世界里。</p><p>巨大的社会压力，<strong>有礼也束于礼</strong>。等级森严，职责分明。规则与秩序对于人的某些方面的束缚。</p><p>日本<a href="http://ihl.cankaoxiaoxi.com/2016/1122/1450130.shtml" target="_blank" rel="noopener">网吧难民</a>，这点可以和<a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E5%92%8C%E5%A4%A7%E7%A5%9E" target="_blank" rel="noopener">三和大神</a>对应哎~  </p><h2 id="1-4-日本文化的宣扬-famous-for"><a href="#1-4-日本文化的宣扬-famous-for" class="headerlink" title="1.4 日本文化的宣扬/ famous for"></a>1.4 日本文化的宣扬/ famous for</h2><ol><li>浮世绘<br>很有意思，Japan means a hard, dark, enamellike varnish containing asphalt, used to give a black gloss to metal objects.漆器。</li></ol><p>中国日本在19世纪开始都会往欧洲出口很多瓷器，这里佩服下古代国人的智慧，我们撒黄豆浇水来保护瓷器，黄豆遇水发芽，与瓷器牢牢结合起来；日本选择用报纸包裹，浮世绘由此传入欧洲，深受喜爱~ (偏传说，没找到史实，但实在是很有意思啊！)</p><ol start="2"><li>动漫</li><li>音乐产业</li><li>电影</li><li>饮食</li><li>现代技术</li></ol><h1 id="2-与中国的关系"><a href="#2-与中国的关系" class="headerlink" title="2. 与中国的关系"></a>2. 与中国的关系</h1><h2 id="2-1-二战"><a href="#2-1-二战" class="headerlink" title="2.1 二战"></a>2.1 二战</h2><h2 id="2-2-对中援助"><a href="#2-2-对中援助" class="headerlink" title="2.2 对中援助"></a>2.2 对中援助</h2><p>日本在二战以后对中有大量经济援助，占到了中国接收的总经济援助的60%以上。</p><p>整个经济援助分为三部分：</p><ol><li>有偿资金协力</li><li>无偿资金赠与</li><li>技术指导培育协助</li></ol><p>整个经济援助从1979年开始，直到2007年12月结束。38年来对中政府开发援助的合约总额为3.64兆円，折合2852亿人民币。其中89.7%是有偿贷款，贷款利率最高3.5%,最低仅为0.65%，贷款周期是30~40年，前10年免还本金。日本的援助占到了中国政府接受总体外援的67.2%，位居24个帮助国和机构之首。高于第二名德国33倍之多。而在日本对外援助国当中中国则排在印尼和印度之后第三位。<a href="https://www.zhihu.com/question/40252945" target="_blank" rel="noopener">如何看待日本曾是中国的最大援助国？</a></p><p>这点很有意思，确实，我们免除了日本的战争赔款，但这不足以成为日本给予如此大量的援助的先决条件。尤其是在我们一穷二白，完全没有外汇储备，还需要对外招商引资的关键时刻，这笔钱会极大影响我们的发展速度。</p><p>因为歉意？ </p><p>因为免除战争赔款极大程度上维系了天皇的荣誉？</p><p>因为技术上经济上的援助可以加速了解中国？</p><p>因为经济上的援助，有息贷款同样给日本带来了很大的经济利益？这点实打实的，对日本从上世纪80年代开始就开放了市场。</p><p>因为政治上我们不知道的角力？ </p><h1 id="3-小总"><a href="#3-小总" class="headerlink" title="3. 小总"></a>3. 小总</h1><p>一个尚武且善武，自制且极端，有礼又束于礼，崇尚强者的民族。历史当鉴，未来已来。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japan </tag>
            
            <tag> Reading </tag>
            
            <tag> Thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构笔记</title>
      <link href="/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是重构？"><a href="#1-什么是重构？" class="headerlink" title="1. 什么是重构？"></a>1. 什么是重构？</h1><blockquote><p>在不改变软件可观察行为的前提下改善其内部结构，提高其可理解性，降低其修改成本</p></blockquote><p>当面对历史遗留问题的时候，规模很大，历史超久，使得增加单元测试或者理解逻辑成为不可能的任务，那么我们有的工具就是那些已经被证明是<strong>行为保持的重构手法</strong>，整理出可测试的接口，并添加测试，以此作为继续重构的立足点。</p><h2 id="1-1-Tips"><a href="#1-1-Tips" class="headerlink" title="1.1 Tips"></a>1.1 Tips</h2><ol><li>以微小的步伐修改程序，以期更好的发现错误。</li><li>代码应该表现自己的目的！！！</li><li>大多数情况下，函数应该放在它所使用的数据的所属对象当中</li><li>尽量去除临时变量，因为其很容易产生问题，导致大量参数被传来传去。  Replace Temp with Query </li><li>注意将变化的东西放到一块去，一块来解决</li></ol><h1 id="2-重构原则"><a href="#2-重构原则" class="headerlink" title="2. 重构原则"></a>2. 重构原则</h1><p>使用重构原则开发软件的时候，实质上是将自己的时间分配给了两种截然不同的行为：添加新功能以及重构。添加新功能的时候就不修改既有代码；重构时不添加新功能，只管改进程序结构。</p><h2 id="2-1-为何重构"><a href="#2-1-为何重构" class="headerlink" title="2.1 为何重构"></a>2.1 为何重构</h2><ul><li>改进软件设计<ul><li>整理代码，让代码回到应有的位置上去</li><li>减少代码量，消除重复代码</li></ul></li><li>使得软件更容易理解</li><li>更容易找到Big</li><li>提高编程速度<ul><li>良好的设计是快速开发的根本</li></ul></li></ul><blockquote><p>当重复做一件事情三次的时候，请重构。</p></blockquote><ul><li>在添加功能的时候重构<ul><li>帮助理解需要修改的代码</li></ul></li><li>修补错误时重构</li><li>修改接口<ul><li>当接口不得不被修改的时候</li><li>deprecate掉旧接口，并且让旧接口Internally调用新接口</li></ul></li></ul><h1 id="3-代码的坏味道"><a href="#3-代码的坏味道" class="headerlink" title="3. 代码的坏味道"></a>3. 代码的坏味道</h1><p>本章比较大概，但里面又提及了很多细节性的方法，建议先去了解这些方法，再来看这一章！ </p><p>量度规矩 vs 见识广博者的直觉</p><h2 id="3-1-Duplicated-Code-重复代码"><a href="#3-1-Duplicated-Code-重复代码" class="headerlink" title="3.1 Duplicated Code 重复代码"></a>3.1 Duplicated Code 重复代码</h2><ul><li>同一个类的两个函数有相同表达式<ul><li>extract method</li></ul></li><li>两个互为兄弟的子类内的相同表达式<ul><li>extract method to super class</li></ul></li><li>两个不相关的类， duplicate code<ul><li>对其中一个使用extract class，将重复代码提炼到一个独立类当中 </li></ul></li></ul><h2 id="3-2-Long-Method-过长函数"><a href="#3-2-Long-Method-过长函数" class="headerlink" title="3.2 Long Method (过长函数)"></a>3.2 Long Method (过长函数)</h2><p>间接层所能带来的全部利益 - 解释能力，共享能力，选择能力都是由小型函数支持的</p><p>给函数一个好名字，让代码阅读者可以很迅速地了解到这个函数是做什么的。</p><p>每当感觉需要以注释来说明点什么的时候，我们就需要把说明的东西写进一个独立函数中。</p><h2 id="3-3-Large-Class-过大的类"><a href="#3-3-Large-Class-过大的类" class="headerlink" title="3.3 Large Class (过大的类)"></a>3.3 Large Class (过大的类)</h2><p>如果用单个类做太多事情，往往会出现大量的实例变量，一旦如此，duplicated code也就会接踵而至了。</p><p>extract class or extract subclass </p><h2 id="3-4-Long-Parameter-List-过长参数列"><a href="#3-4-Long-Parameter-List-过长参数列" class="headerlink" title="3.4 Long Parameter List (过长参数列)"></a>3.4 Long Parameter List (过长参数列)</h2><p>replace parameter with method </p><p>introduce paramter object </p><h2 id="3-5-Divergent-Change-发散式变化"><a href="#3-5-Divergent-Change-发散式变化" class="headerlink" title="3.5 Divergent Change (发散式变化)"></a>3.5 Divergent Change (发散式变化)</h2><p>针对某一外界变化的所有的相应修改都只应该发生在单一类当中，并且新类内的所有内容都应该反应此变化。应找到导致变化的原因，然后运用Extact Class将其提炼到另一个类当中。</p><h2 id="3-6-Shotgun-Surgery"><a href="#3-6-Shotgun-Surgery" class="headerlink" title="3.6 Shotgun Surgery"></a>3.6 Shotgun Surgery</h2><p>如果每遇到某种变化，都必须在很多不同的类内做许多小修改，那么就应该使用move method和move field把所有需要的修改都放到一个类里去。努力使外界变化和需要修改的类能够一一对应。</p><h2 id="3-7-Feature-Envy"><a href="#3-7-Feature-Envy" class="headerlink" title="3.7 Feature Envy"></a>3.7 Feature Envy</h2><h2 id="3-8-Data-Clumps"><a href="#3-8-Data-Clumps" class="headerlink" title="3.8 Data Clumps"></a>3.8 Data Clumps</h2><p>将经常绑在一起出现的数据放到一起，创建属于他们的对象</p><h2 id="3-9-Primitive-Obsession"><a href="#3-9-Primitive-Obsession" class="headerlink" title="3.9 Primitive Obsession"></a>3.9 Primitive Obsession</h2><h2 id="3-10-switch"><a href="#3-10-switch" class="headerlink" title="3.10 switch"></a>3.10 switch</h2><p>少用switch，应该考虑用多态来做替换</p><h2 id="3-11-Parallel-Inheritance-Hierarchies-平行继承关系"><a href="#3-11-Parallel-Inheritance-Hierarchies-平行继承关系" class="headerlink" title="3.11 Parallel Inheritance Hierarchies (平行继承关系)"></a>3.11 Parallel Inheritance Hierarchies (平行继承关系)</h2><h2 id="3-12-Lazy-Class"><a href="#3-12-Lazy-Class" class="headerlink" title="3.12 Lazy Class"></a>3.12 Lazy Class</h2><h2 id="3-13-Speculative-Generality"><a href="#3-13-Speculative-Generality" class="headerlink" title="3.13 Speculative Generality"></a>3.13 Speculative Generality</h2><h2 id="3-14-Temporary-Field"><a href="#3-14-Temporary-Field" class="headerlink" title="3.14 Temporary Field"></a>3.14 Temporary Field</h2><h2 id="3-15-Message-Chains"><a href="#3-15-Message-Chains" class="headerlink" title="3.15 Message Chains"></a>3.15 Message Chains</h2><h2 id="3-16-Middle-Man"><a href="#3-16-Middle-Man" class="headerlink" title="3.16 Middle Man"></a>3.16 Middle Man</h2><h2 id="3-17-Inappropriate-Intimacy"><a href="#3-17-Inappropriate-Intimacy" class="headerlink" title="3.17 Inappropriate Intimacy"></a>3.17 Inappropriate Intimacy</h2><h2 id="3-18-Alternative-Classes-with-Different-Interfaces"><a href="#3-18-Alternative-Classes-with-Different-Interfaces" class="headerlink" title="3.18 Alternative Classes with Different Interfaces"></a>3.18 Alternative Classes with Different Interfaces</h2><h2 id="3-19-Incomplete-Library-Class"><a href="#3-19-Incomplete-Library-Class" class="headerlink" title="3.19 Incomplete Library Class"></a>3.19 Incomplete Library Class</h2><h2 id="3-20-Data-Class"><a href="#3-20-Data-Class" class="headerlink" title="3.20 Data Class"></a>3.20 Data Class</h2><h2 id="3-21-Refused-Bequest"><a href="#3-21-Refused-Bequest" class="headerlink" title="3.21 Refused Bequest"></a>3.21 Refused Bequest</h2><h2 id="3-22-Comments"><a href="#3-22-Comments" class="headerlink" title="3.22 Comments"></a>3.22 Comments</h2><h1 id="4-构筑测试体系"><a href="#4-构筑测试体系" class="headerlink" title="4. 构筑测试体系"></a>4. 构筑测试体系</h1><p>对于程序员来说，写代码的时间实际上很少，大部分时间是用在了调试代码上。实际上，每个类都应该有一个测试函数，并以它来测试自己。</p><p>写好一点功能就立即去进行测试。事实上，最好能在添加特性之前先写测试代码，使得将注意力集中于接口而非实现。</p><p>编写代码时，应该先让代码失败，以此证明测试机制的确可以运行，并且正确测试了其该测试的东西。</p><p>观察类该做的所有事情，然后针对任何一项功能的任何一种可能失败情况，进行测试。</p><h1 id="5-重构列表"><a href="#5-重构列表" class="headerlink" title="5. 重构列表"></a>5. 重构列表</h1><ul><li>方法</li><li>动机</li></ul><h1 id="6-重新组织函数"><a href="#6-重新组织函数" class="headerlink" title="6. 重新组织函数"></a>6. 重新组织函数</h1><p>重构手法大部分都针对函数，而问题往往源自于Long Methods。因为其包含了太多信息。</p><h2 id="6-1-Extract-Methods"><a href="#6-1-Extract-Methods" class="headerlink" title="6.1 Extract Methods"></a>6.1 Extract Methods</h2><ul><li>将一段代码放进一个独立函数当中，并且用函数名称来解释该函数的用途</li><li>动机  <ul><li>当函数过长，或者需要注释才能让人理解用途，就放到独立函数当中</li><li>函数粒度小意味着更容易进行复用</li><li>使得高层函数读起来就像一些列注释</li></ul></li><li>做法<ul><li>创造一个函数，根据这个函数的意图来对其进行命名，以做什么而不是怎么做来命名</li></ul></li></ul><h2 id="6-2-Inline-Method-内联函数"><a href="#6-2-Inline-Method-内联函数" class="headerlink" title="6.2 Inline Method 内联函数"></a>6.2 Inline Method 内联函数</h2><ul><li>在函数调用点插入函数本体，然后移除该函数</li><li>动机<ul><li>移除没有太大价值的间接层</li></ul></li></ul><h2 id="6-3-Inline-Temp-内联临时变量"><a href="#6-3-Inline-Temp-内联临时变量" class="headerlink" title="6.3 Inline Temp 内联临时变量"></a>6.3 Inline Temp 内联临时变量</h2><ul><li>你有一个临时变量，只被简单表达式赋值一次，而它妨碍了其他重构手法</li><li>动机<ul><li>一般作为Replace Temp with Query的一部分使用</li></ul></li></ul><h2 id="6-4-Replace-Temp-with-Query-以查询取代临时变量"><a href="#6-4-Replace-Temp-with-Query-以查询取代临时变量" class="headerlink" title="6.4 Replace Temp with Query  以查询取代临时变量"></a>6.4 Replace Temp with Query  以查询取代临时变量</h2><ul><li>现象<ul><li>你的程序以一个临时变量保存某一表达式的运算结果</li></ul></li><li>将这个表达式提炼到一个独立函数当中，将这个临时变量的所有引用点替换为对新函数的调用。此后，新函数就可以被其他函数调用了。</li><li>动机<ul><li>临时变量的问题是他们是暂时的，很可能你需要写出更长的函数来访问到需要的临时变量 </li></ul></li></ul><h2 id="6-5-Introduce-Explaining-Variable-引入解释性变量"><a href="#6-5-Introduce-Explaining-Variable-引入解释性变量" class="headerlink" title="6.5 Introduce Explaining Variable 引入解释性变量"></a>6.5 Introduce Explaining Variable 引入解释性变量</h2><ul><li>将该复杂表达式(或其中一部分)的结果放进一个临时变量，以此变量名称来解释表达式用途。</li><li>动机<ul><li>表达式有可能非常复杂且难以阅读，临时变量可以帮助你将表达式分解为比较容易管理的形式</li><li>这样子我们就可以运用临时变量来解释每一步的意义，在执行一些比较长的判断逻辑的时候很关键</li></ul></li><li>做法<ul><li>和 extract method 有可替换的潜在部分的</li><li>使用introduce explaining variable是在extract method需要花费更大工作量的时候</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
            <tag> rafactor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明朝户籍制度</title>
      <link href="/%E6%98%8E%E6%9C%9D%E6%88%B7%E7%B1%8D%E5%88%B6%E5%BA%A6/"/>
      <url>/%E6%98%8E%E6%9C%9D%E6%88%B7%E7%B1%8D%E5%88%B6%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>从元朝的百废待兴到明太祖的休养生息，用一个个制度逐渐了解稳固自己统治的国家，户帖制，里甲制，鱼鳞图册，三位一体，奠定了一朝之基。似乎大家有点小觑了朱元璋啊。</p><h1 id="1-户籍的重要性"><a href="#1-户籍的重要性" class="headerlink" title="1. 户籍的重要性"></a>1. 户籍的重要性</h1><ul><li>壮丁数量<ul><li>能动员的士兵和民夫数量 </li></ul></li><li>牲畜数量<ul><li>运力的多寡与分配</li></ul></li><li>作物产量<ul><li>粮草征发</li></ul></li><li>地形图册<ul><li>决定用兵方略</li></ul></li><li>资源<ul><li>草药</li><li>矿物</li><li>etc.</li></ul></li></ul><p>田地数量和人口数量，掌握这两个才能稳定政权。</p><p><strong><em>收税有据，束民有方</em></strong></p><h1 id="2-户帖法"><a href="#2-户帖法" class="headerlink" title="2. 户帖法"></a>2. 户帖法</h1><h2 id="2-1-户帖制的流程"><a href="#2-1-户帖制的流程" class="headerlink" title="2.1 户帖制的流程"></a>2.1 户帖制的流程</h2><ol><li>皇帝下发圣旨到户部</li><li>户部设计出标准户籍格式尺寸，叫做户帖式。用纸长一尺三寸，宽一尺两寸。</li><li>户部将设计好的户帖式下发给官办印坊，批量印刷并分发</li><li>各地州县接到空白户帖知乎，必须由正印官员担任提调官，负责张贴文告，晓谕百姓</li><li>下级官吏执行落地</li><li>百姓多数不识字，故需要小吏现场填写各种资料，并由熟悉内情的里正审核并作保</li><li>所有填好的籍联，在衙门汇总统计，要算明户口，人口，丁口，田产几项数字的总和，连同原始资料一起上交</li><li>朱元璋动员了大批军队系统的文书人员，分散到各地区审核抽查</li></ol><h2 id="2-2-户帖正文格式"><a href="#2-2-户帖正文格式" class="headerlink" title="2.2 户帖正文格式"></a>2.2 户帖正文格式</h2><ul><li>分为左中右三块<ul><li>最右<ul><li>印制洪武皇帝的圣旨</li></ul></li><li>中间<ul><li>该户的乡贯</li><li>男子丁口</li><li>女子口</li><li>名岁</li><li>与户主关系</li><li>户种</li><li>事产</li><li>住址</li></ul></li><li>最左<ul><li>每一级经手官员的签押</li></ul></li></ul></li><li>每一份户帖，都要一式两联<ul><li>籍联 给官府留底</li><li>户联 给百姓留底</li><li>在二者的骑缝处，要印有字号以作为堪和之用</li><li>加盖户部骑缝章</li></ul></li></ul><h2 id="2-3-缺憾？"><a href="#2-3-缺憾？" class="headerlink" title="2.3 缺憾？"></a>2.3 缺憾？</h2><ul><li>只记录了土地多少，却没有统计田地的质量<ul><li>缺能够准确丈量土地的人才</li><li>且不清丈土地，百姓的抵触情绪就会小很多</li><li>！！鼓励垦荒，新开发的土地不予起科</li></ul></li><li>职业户制依旧<ul><li>维稳</li><li>国家政策的延续性</li><li>卫所制，军队不再退役，世代军人</li><li>粗略分类<ul><li>民户</li><li>军户</li><li>匠户</li><li>灶户</li></ul></li></ul></li></ul><p>一般来说，古代的中央政权为了减少管理成本，行政力量一般只会延伸到县一级，再往下，官府只控制地方上的财税，军权，意识形态解读权等大节，而将一部分的琐碎的事务管理权交给地方上自己解决  – 即交由当地的乡绅，豪强以及宗族。</p><p>户帖制十年后的再度改革，力求;</p><ol><li>击破横亘在朝廷和基层之间的利益集团，提高对基层的掌控力</li><li>避免高昂的管理成本</li></ol><h1 id="3-里甲制-–-小黄册"><a href="#3-里甲制-–-小黄册" class="headerlink" title="3. 里甲制 – 小黄册"></a>3. 里甲制 – 小黄册</h1><p>户帖制刚开始就在做的试点工程…</p><h2 id="3-1-构成"><a href="#3-1-构成" class="headerlink" title="3.1 构成"></a>3.1 构成</h2><ul><li>基本行政单位 图<ul><li>共100户<ul><li>每10户编成一甲，从中选出一户甲首来管理</li><li>共10甲首</li><li>选出一里长，负责掌管十个甲首，为一图的最高长官，直接向县级衙门汇报</li></ul></li></ul></li><li>规则！！！<ul><li>甲首 里长 不是由上级全权指派，也不是基层选出，而是—-轮换制</li><li>100户中前10的富户轮流做里长</li><li>每户任期1年</li><li>11-20，担任甲首，每户分管9户，任期一年，由甲内其他户来做替换</li></ul></li><li>徭役<ul><li>10甲排定次序，每年派出一甲去应徭役</li></ul></li><li>连坐制</li></ul><h2 id="3-2-里长-甲首职责"><a href="#3-2-里长-甲首职责" class="headerlink" title="3.2 里长 甲首职责"></a>3.2 里长 甲首职责</h2><ul><li>管理责任<ul><li>里长需要把赋税搞齐</li></ul></li><li>解决邻里纠纷</li><li>文书作保</li><li>治安巡检</li><li>徭役<ul><li>负担很重，三重负担<ul><li>自备干粮</li><li>损失劳动力，导致田地荒芜</li><li>税赋依旧</li></ul></li></ul></li></ul><h2 id="3-3-补缺"><a href="#3-3-补缺" class="headerlink" title="3.3 补缺"></a>3.3 补缺</h2><ul><li>老人制<ul><li>选取年龄大且德高望重的老人作为乡里争讼的裁决者</li></ul></li><li>hhhhh，里甲工作手册</li><li>粮长职务<ul><li>由当地丁粮多的富户充当</li><li>去京师领取文书，返回辖区</li><li>督促里长，甲首筹粮</li></ul></li></ul><h2 id="3-4-黄册内容"><a href="#3-4-黄册内容" class="headerlink" title="3.4 黄册内容"></a>3.4 黄册内容</h2><ul><li>类似户帖的</li><li>百眼图/ 编次格眼<ul><li>徭役的排班表</li></ul></li><li>四柱式记录<ul><li>旧管</li><li>新收</li><li>开除</li><li>实在</li></ul></li><li>田地大小一直有</li><li>但是还有税赋记录！ <ul><li>夏税</li><li>秋粮</li></ul></li></ul><h2 id="3-5-分析"><a href="#3-5-分析" class="headerlink" title="3.5 分析"></a>3.5 分析</h2><p>将政府让给绅权和族权的权利进行进一步的戏份，保证每一户人家都有机会掌握基层权力。看似让基层更加分散，实际上让中央的权威回来了！</p><p>对官府来说，还不用承担管理人员的成本了… </p><h1 id="4-鱼鳞图册"><a href="#4-鱼鳞图册" class="headerlink" title="4. 鱼鳞图册"></a>4. 鱼鳞图册</h1><p>在有了户帖制，里甲制保驾护航之后，开始了全国范围的丈量土地的工作</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>黄册和里甲制锁住了人口相关的税费和徭役，鱼鳞图册和粮长掌控了田地租赋，三个制度，三位一体，将百姓牢牢钉在了土地之上，化为稳固的税基，源源不断为朝廷输血。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做时间管理</title>
      <link href="/%E5%A6%82%E4%BD%95%E5%81%9A%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
      <url>/%E5%A6%82%E4%BD%95%E5%81%9A%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>逐渐发现时间开始不够用了，要做的followup有点多，不想每天仅仅忙工作上的事情，每天会拿出一些时间学技术，看文章，更新博客；也会拿出一部分时间来看书，阅读，希望能在专业领域和generic的方面都会有点点提升，但是，时间上… 确实越来越不够用了。</p><p>上网搜了一下，发现有几个小点是可以尝试着去变化，看看能不能整体有提升的。</p><h1 id="1-时间安排前移"><a href="#1-时间安排前移" class="headerlink" title="1. 时间安排前移"></a>1. 时间安排前移</h1><p>早晨的时间的利用  </p><p>起床以后不干杂事，先解决自己想要专注，今天必须解决的问题。</p><p>即起床以后先去解决你今天非常想处理的，你自己给自己安排的事情。邮件，微信实质上是别人给你安排的事情，这些事情的优先级不应该凌驾于你对于自己的安排。</p><h1 id="2-时间安排"><a href="#2-时间安排" class="headerlink" title="2. 时间安排"></a>2. 时间安排</h1><p>从时间维度和事务维度两个维度跟进，我使用的是timecamp + trello，实质上是记录在每个项目上所花费的时间以及你的待办事项(按照项目来进行划分)。</p><h1 id="3-tips"><a href="#3-tips" class="headerlink" title="3. tips"></a>3. tips</h1><p>进程切换非常昂贵，避免多任务，保持单进程 </p><p>每天能保证高效的时间是有限的，集中注意力，高效工作每天最多4小时。</p><p>划分任务的优先级，不要把急切当做重要。紧急和重要划分开，四象限工作法，从重要紧急做起，但重要不紧急，到不重要但紧急，到不重要不紧急。</p><p>起床以后，不要查看邮件和微信。</p><p>早起，假如4点起床，那么到了中午你就完成了一天的任务了。</p><p>你没空时不会做的事情，有空了也不会做的。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.ruanyifeng.com/blog/2009/01/stuff_that_matters.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2009/01/stuff_that_matters.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2016/05/time-management.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2016/05/time-management.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2011/01/never_check_email_first_thing_in_the_morning" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2011/01/never_check_email_first_thing_in_the_morning</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thought </tag>
            
            <tag> time management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习观 from Yjango</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E8%A7%82-from-Yjango/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E8%A7%82-from-Yjango/</url>
      
        <content type="html"><![CDATA[<p>机缘巧合，看到个Yjango的学习观系列视频，把如何学习，怎么学习讲得非常透彻，在这里做下整理，希望能对大家都有所裨益。</p><h1 id="1-什么是学习？"><a href="#1-什么是学习？" class="headerlink" title="1. 什么是学习？"></a>1. 什么是学习？</h1><p>记忆 vs 学习</p><p>学习：从有限的例子当中得到一般性的规律的过程，找出的规律叫做知识。</p><p>学习是在用知识来压缩信息的，我不需要记住无数种情况，但是我需要根据每次出现的情况，根据我的知识来做出相应的判断。</p><h1 id="2-如何学习？"><a href="#2-如何学习？" class="headerlink" title="2. 如何学习？"></a>2. 如何学习？</h1><p>在人脑中，学习是通过例子来找出问题和答案之间的关系，而后重塑大脑链接来完成的。</p><p><strong>信息是具体的情况，而知识不是单纯的信息，而是信息与信息之间的关系</strong></p><p>对于知识的描述能对学习起到之音的作用，而最终想要达到的目的一定是<strong>通过例子理清问题和答案的关系来重塑大脑连接</strong>。</p><p>先把书读厚，再把书读薄。<br>就是说：尽可能的<strong>搜集更多的例子帮助体会问题和答案之间的关系</strong>，当你真正学会之后，这些都会被压缩为知识的。</p><h1 id="3-学习误区"><a href="#3-学习误区" class="headerlink" title="3. 学习误区"></a>3. 学习误区</h1><h2 id="3-1-针对知识的类型做出不同的学习方案-知识构建方式"><a href="#3-1-针对知识的类型做出不同的学习方案-知识构建方式" class="headerlink" title="3.1 针对知识的类型做出不同的学习方案 - 知识构建方式"></a>3.1 针对知识的类型做出不同的学习方案 - 知识构建方式</h2><p>首先我们的学习可以分为两大类：思考类学习和运动类学习。</p><p>思考类：是很慢的，是需要显示的经过大脑思考，然后做出判断，然后给出输出的。擅长解决推断问题，但是慢，无法应对多因素的问题。</p><p>运动类：很快，完全不经过我们的意识处理，我们就可以对应的做出反应。非思考类，非意识能解决的问题。面对这种情况，我们必须进行大量训练，行程肌肉记忆。这类训练最重要的是要有正确的输入输出，没有正确的反馈将永远都学不会。</p><p>我们需要对两种类型的学习进行区分，而后做出对应的学习处理。</p><h2 id="3-2-错误的输入输出"><a href="#3-2-错误的输入输出" class="headerlink" title="3.2 错误的输入输出"></a>3.2 错误的输入输出</h2><p>比如说听说读写学英文，我们将应该使用运动类的方式进行学习的东西当成了思考类进行学习的东西，于是文字输入并做文字输出，结果就导致了学习很长时间但是就是学不好东西。</p><p>而正确的解决方式，对于听说读写来说，理应是：</p><ul><li>听： 声音 -&gt; 意思， 运动类</li><li>说:  想法 -&gt; 发声,  运动类</li><li>读:  文字 -&gt; 意思,  运动类</li><li>写:  想法 -&gt; 打字,  运动类</li></ul><h2 id="3-3-不通过例子，仅记忆知识"><a href="#3-3-不通过例子，仅记忆知识" class="headerlink" title="3.3 不通过例子，仅记忆知识"></a>3.3 不通过例子，仅记忆知识</h2><p>大量例子，来构建知识之间的联结 </p><h1 id="4-应用误区"><a href="#4-应用误区" class="headerlink" title="4. 应用误区"></a>4. 应用误区</h1><p>解决subtask，分而治之，因为人的大脑在进行思考类的学习或者说解决问题的时候，是无法同时触及多个领域的内容的。所以我们需要专注于一个方面的东西，深入研究，解决完这个小问题以后再接下来解决下一个小问题。将原来需要<strong>指数级</strong>解决的问题转化成了<strong>线性级</strong>可以解决的问题。</p><h1 id="5-思维导图"><a href="#5-思维导图" class="headerlink" title="5. 思维导图"></a>5. 思维导图</h1><p>为什么简单又强大？</p><p>帮助学习应用当中的误区</p><ul><li><p>列关键词</p></li><li><p>遍历联想</p></li><li><p>压缩信息</p></li><li><p>分析共同输入输出，找出规律</p></li><li><p>这个关键词是在代表着几者之间的关系的</p></li><li><p>思维导图的关键词  – 动宾结构，描述的是输入和输出之间的函数关系</p></li><li><p>对思维的拆分  拆成小知识的组合</p><ul><li>然后用例子来构建</li><li>知识的网络的好处就在于其重用性</li></ul></li><li><p>思维导图在描述的是二阶知识</p><ul><li>一般的是在描述信息与信息之间的关系</li><li>而思维导图是想描述知识与知识之间的关系</li></ul></li><li><p>学习原则</p><ul><li>明确任务输入输出</li><li>将信息压缩成知识</li><li>例子重塑大脑连接</li><li>二阶知识拆分知识</li></ul></li></ul><h1 id="6-费曼技巧"><a href="#6-费曼技巧" class="headerlink" title="6. 费曼技巧"></a>6. 费曼技巧</h1><p>学习 + 解释 </p><p>解释的过程达成的目的：</p><ul><li>提取压缩</li><li>转化为自己的语言<ul><li>明确任务</li><li>拆分知识<ul><li>子知识之间的输入输出，pipeline </li></ul></li></ul></li><li>是在验证自己学会了  即遇到从未遇到的情况的时候如何去解决</li><li>需要新例子，新角度 </li><li>思维导图在拆分知识，而费曼技巧则是在验证知识 </li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li>超智能体 公众号-YJango</li></ol>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
            <tag> thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何成功(From Sam Altman)</title>
      <link href="/%E5%A6%82%E4%BD%95%E6%88%90%E5%8A%9F-From-Sam-Altman/"/>
      <url>/%E5%A6%82%E4%BD%95%E6%88%90%E5%8A%9F-From-Sam-Altman/</url>
      
        <content type="html"><![CDATA[<p>我观察了数以千计的创始人，关于这些人是怎么赚到那么多钱、怎么创造出重要东西的，我思考了很多很多。通常，他们一开始非常想赚大钱，后来变成想要创造出重要的东西。我最终总结了下面的13条，关于如何创造出常人无法企及的成就。</p><p>如果你已经达到了一定的成功（通过天赋或者努力），同时想通过努力把这基本的成功拓展成常人无法企及的成就，下面的这些对你就会容易很多。但其中大部分适用于所有人。</p><h1 id="1-让自己利滚利-复利自身"><a href="#1-让自己利滚利-复利自身" class="headerlink" title="1.让自己利滚利 - 复利自身"></a>1.让自己利滚利 - 复利自身</h1><p>利滚利是个奇迹。你需要随处留意它。指数曲线增长是创造财富的关键。</p><p>每年增长50％的中型企业在很短的时间内将会变得巨大。世界上很少有企业具有真正的网络效应（network effect）和极高的可扩展性。但随着技术的发展，越来越多的企业将会有这个可能。找到实现利滚利的企业，甚至创建出这种企业，是值得花费精力去做的。</p><p>你自己也要追求指数速度增长 - 你应该把不断增长的向上和向右的轨迹作为你人生的目标。选择一个可以实现利滚利的职业是很重要的 - 因为大多数职业都是线性增长的。</p><p>你不应该进入一个，那些做了两年的人可以和已经做了二十年的人一样的职业 – 你应该保持在一个一直不断高效学习的状态。随着职业发展，你所完成的每个工作单元都应该产生比以前多的成果。有很多方法可以获得这种杠杆作用，例如资本，技术，品牌，网络效应和人员管理。</p><p>不管你是用何种标准来衡量成功 - 金钱，地位，对世界的影响或其他任何基准，你都应该专注于如何可以把你自己定义的成功翻10倍。<strong>我愿意在项目之间，花费尽可能多的时间来寻找下一个项目</strong>。但我总是希望它成为这样一个项目：<strong>如果成功，将使我职业生涯的其余部分不值得一提</strong>。</p><p>大多数人会陷入寻找线性机会。专注于潜在的可以让你上一个台阶的变化，即使这意味着小机会的流失。</p><p>我认为，无论是对公司还是对个人的职业生涯而言，最大的竞争优势是，<strong>根据全球不同系统将如何融合在一起，做出的长远决定</strong>。关于复利增长，值得注意的一个方面是，<strong>最远的将来会是最重要的</strong>。</p><p>在这样一个几乎没有人真正的用长远的眼光来看待的世界里，市场会给那些这么做的人带来丰厚的回报。相信指数增长，耐心等待，惊喜会等着你。</p><h1 id="2-极度自信"><a href="#2-极度自信" class="headerlink" title="2. 极度自信"></a>2. 极度自信</h1><p>自信是非常强大的。我认识的最成功的人对自己自信得几乎到了妄想的程度。</p><p>尽早培养自信。<br>随着你得到更多可以证明自己判断力上佳的数据点，并且你可以不断地达到理想的结果，你会愈发地相信自己的。</p><p>如果你不相信自己，很难让自己对未来有跟别人不同的想法。但与别人有不同的想法是创造价值的关键所在。</p><p>我记得多年前Elon Musk带我参观了SpaceX工厂。他详细讲述了制造火箭的每一部分，但让我记忆最深刻的事情是他谈到向火星发射大型火箭时脸上的绝对自信。我离开时想“嗯，所以这就是拥有信念的标杆吧。”</p><p>管理自己的士气 - 以及团队的士气 - 是大多数努力中最大的挑战之一。如果没有很多的自信，这几乎是不可能的。不幸的是，你越雄心勃勃，世界就越会试图击垮你。</p><p>大多数极为成功的人，都在被大众质疑之前，对未来有至少一次非常正确的预期。以此来助自己坚定信念，度过这段时间；否则会经历更艰难的一段日子。</p><p>自信需要和自知保持平衡。我曾经讨厌任何形式的批评，并积极地避免他们。现在，我试着在假设这些批评说的是真的情况下，然后决定我是否要对它采取行动。寻求真理，很难并经常是痛苦的，但这是将自信与自我欺骗分开的原因。这种平衡可以帮你避免变得自傲和不接地气。</p><h1 id="3-学会独立思考"><a href="#3-学会独立思考" class="headerlink" title="3. 学会独立思考"></a>3. 学会独立思考</h1><p>创业很难教，因为原创思维很难教。学校的设立不是为了教这个 - 事实上，学校通常会奖励模仿。所以你需要自己去培养独立思考的能力。</p><p>从本质开始思考并尝试产生新想法很有趣，找人交流它们可以让你变得更擅长这件事。下一步需要做的就是找到简单，快速的方法来在现实世界中对其进行测试。</p><p>“我会失败很多次，但是我会有一次正确”，这是创业者的行为方式。你必须给自己很多机会以获得幸运。你需要学习的最重要的一课是，<strong>你可以在这个问题似乎无解的情况下弄清楚该怎么做</strong>。你这样做的次数越多，你就会越相信它。相信你可以在看似山穷水尽，无路可走的情况下，柳暗花明，寻到村庄。 Grit（充满激情的毅力）来自于，你知道你被打倒后可以重新站起来。</p><h1 id="4-擅长“销售”"><a href="#4-擅长“销售”" class="headerlink" title="4. 擅长“销售”"></a>4. 擅长“销售”</h1><p>仅靠自信是不够的 - 你还必须能够让别人相信你所相信的东西。</p><p>在某种程度上，所有成功的事业最后都成为销售工作。你必须向客户，潜在员工，媒体，投资者等宣传你的计划。这需要鼓舞人心的愿景、强大的沟通技巧、某种程度的魅力和证明有执行能力的证据。</p><p>善于沟通 - 特别是书面沟通 - 是值得投资的。我对明确沟通的建议是,首先确保你的思路清晰，然后使用简洁明了的语言。</p><p>擅长销售的最佳方式是<strong>真正相信你所销售的产品</strong>。卖你真正相信的东西感觉很棒，试图卖万金油感觉很糟糕。</p><p>提高销售技巧就像改善任何其他技能一样 - 任何人都可以通过刻意练习来改善它。但出于某种原因，也许是因为它令人反感，许多人认为销售技巧是天生的，无法后天学会的。</p><h1 id="5-把风险变的更容易承担"><a href="#5-把风险变的更容易承担" class="headerlink" title="5. 把风险变的更容易承担"></a>5. 把风险变的更容易承担</h1><p>大多数人高估风险并低估奖励。冒险很重要，因为不可能一直都是正确的 - 你必须尝试很多事情并在你学到更多东西时迅速适应。</p><p>在你的职业生涯早期，冒险往往更容易; 你没有太多损失，但是可能会有很多收获。</p><p>一旦你达到了要承担基本义务的程度，你就应该尽量让冒险的损失减小。去寻找如果赌错了会失去1倍，但是如果它有效的话可以翻100倍的小赌注。然后在获利后，在那个方向上做出更大的赌注。</p><p>但是，不要储蓄太久。在YC，我们经常注意到创始人有这样的问题，他们花了很多时间在谷歌或脸书工作。当人们习惯了舒适的生活，可预测到未来的工作，以及在他们在所做的事情上取得成功的声誉时，就变的非常难将这些抛在身后（而且，神奇的是，人们总是能够将他们的生活方式与明年的薪水相匹配）。即使他们离开，回归的诱惑也很大。因为人性，<strong>人们往往会将短期的收益和便利优先于长期的成就</strong>。</p><p>但是当你不在跑步机上被带着跑时，你可以追随你的灵感并花时间去做一些可能会非常有趣的事情。尽可能长时间地保持你的生活低成本和灵活是一种强有力的方法，但显然会有得失。</p><h1 id="6-专注"><a href="#6-专注" class="headerlink" title="6.专注"></a>6.专注</h1><p>专注可以让你事半功倍。</p><p>几乎所有我见过的人，如果他们花更多时间思考要专注在什么事情上，都会有更好的结果。</p><p>做对的事比花更多时间做事更重要。大多数人把大部分时间浪费在无关紧要的事情上。</p><p>一旦你弄清楚要做什么，就抛开一切，快速地完成那些优先级最高的任务。我还没有遇到一个行动缓慢的人非常成功。</p><h1 id="7-努力工作"><a href="#7-努力工作" class="headerlink" title="7.努力工作"></a>7.努力工作</h1><p>通过聪明或努力工作，你可以超过你所在领域的90%的人，这是一项伟大的成就。但要超过99%的人，你两个都需要 - 你的竞争对手将是非常有才能的人，他们有很好的想法，并愿意付出很多努力。</p><p>不同寻常的人得到不同寻常的结果。工作时间很长，意味着关于生活上的巨大的取舍，决定不这样做是完全理性的。但力行工作有很多优点。在大多数情况下，进步会累积，成功会带来更多的成功。</p><p>通常这个过程还是很有趣的。生活中最大的乐趣之一就是找到你的目标，并在这上面努力，然后发现你可以带来远比自己想象中更大的影响。一位YC创始人在离开一家大公司后，对力求获得最大影响的过程感到的愉快和满足感十分惊讶。追寻自己的目标，并为之努力，是极其值得的。</p><p>我不完全清楚为什么努力工作在美国的某些地方变成了坏事，但在世界其他地方肯定不是这样 - 美国以外的创业者所展示的能量和动力正在很快成为新的榜样。</p><p>你必须弄清楚如何努力工作而不会透支。不同的人有自己不同的方法，但几乎总是有效的方法是，找到你喜欢的工作，和你愿意长时间一起工作的人。</p><p>我认为那些，假装没有把大部分时间花在工作上，但是可以在从事的领域非常成功的人，是有害的。事实上，持之以恒的工作，从长期来看可能是可以成功的最重要的原因之一。</p><p>还有一个关于努力工作的想法：在你的事业刚开始时就要努力工作。努力工作就像复利，越早做，你就有越多时间获取收益。当你有更少其他责任时，也更容易专注于用心工作。者往往发生在你年轻的时候。</p><h1 id="8-大胆"><a href="#8-大胆" class="headerlink" title="8.大胆"></a>8.大胆</h1><p>我认为做一个难的创业公司比简单的创业公司更容易。人们希望成为令人兴奋的事物的一部分，并感受到他们的工作的重要性。</p><p>如果你在一个重要问题上取得进展，那么将不断的会有人想来帮助你。让自己变得更加有野心，不要害怕为你真正想要的工作而努力。</p><p>如果其他人都在创办互相模仿的公司，但是你想创办一家完全创新的公司，那么就这样做，不要辗转反侧。跟随你的好奇心。看起来令你兴奋的事情对其他人来说也常常令人兴奋。</p><h1 id="9-意志力"><a href="#9-意志力" class="headerlink" title="9. 意志力"></a>9. 意志力</h1><p>一个很大的秘密就是，大部分时间，这个世界会以你的意志为转移 - 大多数人甚至都不会尝试，只是接受现在世界的运行方式。</p><p>人们有巨大的能力来实现目标。自我怀疑，过早放弃，和没有尽全力推动，种种原因的结合，阻止了大多数人挖掘出他们的所有潜力。</p><p><strong>问问你自己想要什么</strong>。通常不会如意，而且这种求而不得往往非常痛苦的。但是当你努力想去实现自己的目标，往往你能够实现。</p><p>几乎所有时候，那些说“<strong>我将继续坚持直到成功，并且无论面临什么挑战，我都要搞定</strong>”并且认真这么说的人，都会变成功。他们的坚持不懈总会有一次碰到好运的。</p><blockquote><p>I am going to keep going until this works, and no matter what the challenges are I’m going to figure them out. </p></blockquote><p>爱彼迎是我的标杆。他们告诉我了很多故事，虽然我不建议大家模仿（刷爆很多信用卡，每餐吃一美元商店的麦片，不断的与根深蒂固的思维做斗争，等等，等等）但他们设法存活了足够长的时间以便运气找到他们。</p><p>要有梦想，有意志力，你必须保持乐观 - 这是一种可以通过练习而改善的人格特质。我从未见过一个非常成功的悲观主义者。</p><h1 id="10-让别人很难与你竞争"><a href="#10-让别人很难与你竞争" class="headerlink" title="10. 让别人很难与你竞争"></a>10. 让别人很难与你竞争</h1><p>大多数人都明白，如果一个公司在一个领域难以匹敌，那么这个公司就更有价值。这点很重要，也很明显着实是这样的。</p><p>但这对你个人来说也是如此。如果你做的事情可以由其他人完成，那么最终会变成谁要更少的钱来完成。 </p><p>变得难以与之竞争的最佳方式是<strong>建立话语权</strong>。例如，你可以通过建立<strong>强大的个人品牌</strong>，或通过<strong>擅长多个不同领域的交叉</strong>来实现个人关系。还有很多其他策略，但你必须找到一些方法来做到这一点。</p><p>物以类聚，人以群分。大部分人会被身边相处的人的行为方式所影响，这种模仿/影响行为通常是一个错误 - 如果你正在做其他人正在做的事情，与你竞争将不会很难。</p><h1 id="11-建立人脉"><a href="#11-建立人脉" class="headerlink" title="11. 建立人脉"></a>11. 建立人脉</h1><p>出色的工作需要团队。建立一个有才能的人才网络 - 有时是密切的，有时是松散的 - 是事业成功的重要组成部分。你认识的真正有才华的人的规模通常会成为你可以实现的目标的限制因素。</p><p>建立人脉的有效方法是尽可能多地帮助别人。长期的这么做，让我获得了我最好的职场机会和我四项最佳投资中的三项。让我不断惊讶的是，很多好事发生在我身上，竟然是因为多年前我帮助过一些创始人。</p><p>建立人脉的最佳方式之一是，建立一个与你合作的人<strong>都不会被亏待的名声</strong>。<strong>慷慨甚至过度的分享</strong>好处; 它会给你带来10倍的回报。此外，++学习如何评估人们的优点，并让他们做自己擅长的事情++。 （这是我学到的关于管理的最重要的事情，我并没有读过很多关于这方面的书。）<strong>你想要推动员工，并使他们达到的成就超出他们的预期，但同时并不会让员工感到透支</strong>。</p><p>每个人都有比其他人更擅长的事情。用你的优势而不是你的弱点来定义自己。++承认你的弱点并弄清楚如何解决它们++，但不要让它们阻止你去做你想做的事情。我很吃惊我经常从创业者口中听到 “我不能做A，因为我不擅长B”，这几乎总是能反映出这个创业者缺乏创造力。弥补你的弱点的最好方法是聘请互补的团队成员，而不是雇用跟你擅长同样事情的人。 </p><p>在建立人脉中，一个特别有用的方法是善于发现未被发掘的人才。通过练习，快速发掘高智商，有动力和有创造力的人才会变得越来越容易。最简单的学习方法就是与很多人见面，并持续记录谁让你佩服，印象深刻，谁让你觉得不会留下什么的印象。记住，你的目的是<strong>寻找进步速度最快</strong>的人，不要高估经验和目前的成就。</p><p>当我遇到一个新的人时，我总是会问自己“这个人有异于常人的能力吗？”这对于寻找有可能完成伟大事业的人来说是一个非常好的方法。</p><p>建立人脉的一个特别的方式就是，找到<strong>愿意在你身上下赌注的人</strong>，最好是在你职业生涯的早期。毫无疑问，做到这一点的最好方法就是<strong>尽全力</strong>。 （并且请记住，你必须在以后的某个时候回报！） 最后，记住要花时间与支持你抱负的积极的人在一起。</p><h1 id="12-你通过拥有东西来致富"><a href="#12-你通过拥有东西来致富" class="headerlink" title="12 你通过拥有东西来致富"></a>12 你通过拥有东西来致富</h1><p>童年时代，我对经济最大的误解是，人们利用高薪来致富。虽然有一些例外 - 例如艺人 - 但是在福布斯榜单的历史上，几乎没有任何人是靠工资上榜的。</p><p><strong>通过拥有价值可以迅速增长的东西</strong>，你变得真正富裕起来。 </p><p>这可以是一部分生意，房地产，自然资源，知识产权或其他类似东西。但不管怎样，你需要拥有这些东西的股份，而不仅仅是卖掉你的时间。<strong>时间只能线性增长</strong>。 使东西价值迅速增长的最好方法是<strong>大规模创造人们想要的东西</strong>。</p><h1 id="13-自我驱动"><a href="#13-自我驱动" class="headerlink" title="13. 自我驱动"></a>13. 自我驱动</h1><p>大多数人是主要靠外部驱动的;他们做事，是因为他们想要让别人佩服。这么做有很多不好的原因，但这有两个点最重要。</p><p>首先，你会去做大家达成共识的想法和达成共识的职业。你会非常关心 - 远比比你意识到的要多得多 - 其他人是否认为你做的是正确的事情。这可能会阻止你做一些真正有趣的工作，即使你最终决定这样做，其他人也可能早已这样做了。</p><p>其次，你通常会对风险判断错误。你会非常专注于跟上其他人，在对抗竞争中不至于落后，甚至难以容忍短期暂时性的落后。</p><p> 聪明的人似乎特别容易受到外部驱动行为的影响。要意识到这一点，它虽然是有帮助的，但是极其有限。你可能必须超级努力工作，才能不陷入模仿别人的陷阱。</p><p>我认识的最成功的人主要是自我驱动的；++<strong>他们做他们所做的事情，来让自己佩服(impress themselved)，因为他们觉得自己有使命去改变这个世界。</strong>++</p><p>当你赚到足够的钱，可以想买什么就买什么，并获得足够的社会地位后，拥有的更多就不再有趣了。</p><p>自我驱动是我所知道的唯一能够持续推动你达到更高水平的力量。</p><p>这就是为什么一个人的动机问题非常重要。这是我尝试了解一个人的第一件事。正确的动机很难用一套规则来定义，但是当你见到它时，你就会知道。</p><p>在这件事上，杰西卡·利文斯顿和保罗·格雷厄姆是我的标杆。 YC在最初几年被很多人嘲笑，在他们刚开始的时候，几乎没有人认为他们会取得成功。但是他们认为，如果做成了，这件事会对世界将非常有好处。他们喜欢帮助人们，他们相信他们的新模式比现有的模式更好。</p><p>最终，你对成功的定义将会是，在对你来说重要的领域中，作出出色的工作。你越早开始朝这个方向努力，你就能走的越远。如果你做的事情不让你痴迷，你将很难获得巨大的成功。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://blog.samaltman.com/how-to-be-successful" target="_blank" rel="noopener">http://blog.samaltman.com/how-to-be-successful</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
            <tag> Sam Altman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创造估值上亿的公司的方式们(share)</title>
      <link href="/%E5%88%9B%E9%80%A0%E4%BC%B0%E5%80%BC%E4%B8%8A%E4%BA%BF%E7%9A%84%E5%85%AC%E5%8F%B8%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BB%AC-share/"/>
      <url>/%E5%88%9B%E9%80%A0%E4%BC%B0%E5%80%BC%E4%B8%8A%E4%BA%BF%E7%9A%84%E5%85%AC%E5%8F%B8%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BB%AC-share/</url>
      
        <content type="html"><![CDATA[<p>纯分享，只是觉得这几篇文章实在是太有意思，作者2014年10月份写了第一篇，11月写了第二篇，然后再2019年又再度思考，看了下自己的思路是否还是正确的，整个脉络超级清晰。</p><p>每篇文章基本上都是在自己的更为成熟的认知的基础上对于运作方式进行更细的拆分，假设我们要做一个每年收入一亿美元的公司，我们能够通过何种方式进行盈利呢？ </p><ul><li>1,000 个企业用户，每家每年付给你10万美元</li><li>10,000个中等大小公司，每年付1万美元</li><li>100,000个小商户，每年付1000美元</li><li>1,000,000个人用户，每年每人付100美元</li><li>10,000,000个人用户，通过广告从每人获得10美元</li></ul><p>Open questions: 哪一种更适合自己呢？lol</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>不断更新，尤其是五年以后的更新很发人身省啊！ </p><ol><li><p><a href="http://christophjanz.blogspot.com/2014/10/five-ways-to-build-100-million-business.html" target="_blank" rel="noopener">http://christophjanz.blogspot.com/2014/10/five-ways-to-build-100-million-business.html</a></p></li><li><p><a href="http://christophjanz.blogspot.com/2014/11/three-more-ways-to-build-100-million.html" target="_blank" rel="noopener">http://christophjanz.blogspot.com/2014/11/three-more-ways-to-build-100-million.html</a></p></li><li><p><a href="http://christophjanz.blogspot.com/2019/" target="_blank" rel="noopener">http://christophjanz.blogspot.com/2019/</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于2019</title>
      <link href="/%E5%85%B3%E4%BA%8E2019/"/>
      <url>/%E5%85%B3%E4%BA%8E2019/</url>
      
        <content type="html"><![CDATA[<p>写于2018年底</p><p>按照一般的节奏，每年年末总会有对于这一年的反思，哀婉/ 后悔/ 叹息/ 遗憾 或者是 对于闪光点的激动/ 自豪/ 喜悦。然后表一波决心，立一堆flag，期盼在2019年不知道怎么的自己就能够有翻天覆地的变化。 </p><p>这次倒是不想这么写了，感觉，我们对于成功或者失败的归因往往是我们希望看到的归因，往往和旁观者的认知/ 观点有很大的区别。习惯性地认为成功是因为努力，失败是因为客观因素的不可抗。亦或者，归的因还是浮于表面，拿着一个果当做因，自然无法改变真正的果了。问题来了，到底是自上而下，从你希望的大目标来开始想这些问题；还是自下而上，尽力去剖析自己来的实在？  </p><p>现在的自己，觉得是，自下而上(自己)是源，自然来得更实在，能够看清自己自然能把大部分问题都解决掉；只是因为缺乏这种面对本我的能力，不得不选择自上而下的方式——无法直接看清本我，那只能通过镜面隐隐约约窥探下自己到底是什么样子的吧。  </p><p>所以，在努力了N次剖析自己失败以后，选择写这样一篇文章，提出这样一些问题，明白自己内心的渴望，每周都看一看，是否走得近一些了。 </p><p>HHHHH，这里只列问题 😉 欢迎线下一起聊天，一起探索哇！ 很喜欢分享这些的感觉~ (Email: <a href="mailto:stone2paul@gmail.com">stone2paul@gmail.com</a>) </p><p>问题主要分为七个部分：职场、人际关系、健康、财务、个人发展、环境和生活方式。 </p><h1 id="1-职场"><a href="#1-职场" class="headerlink" title="1.职场"></a>1.职场</h1><h4 id="1-1-你将如何谋生？"><a href="#1-1-你将如何谋生？" class="headerlink" title="1.1 你将如何谋生？"></a>1.1 你将如何谋生？</h4><h4 id="1-2-在你的职业或事业中，你认为自己处于什么水平？"><a href="#1-2-在你的职业或事业中，你认为自己处于什么水平？" class="headerlink" title="1.2 在你的职业或事业中，你认为自己处于什么水平？"></a>1.2 在你的职业或事业中，你认为自己处于什么水平？</h4><h4 id="1-3-在未来的五年里，你会取得什么成就来证明你对自己水平的判断是合理的？"><a href="#1-3-在未来的五年里，你会取得什么成就来证明你对自己水平的判断是合理的？" class="headerlink" title="1.3 在未来的五年里，你会取得什么成就来证明你对自己水平的判断是合理的？"></a>1.3 在未来的五年里，你会取得什么成就来证明你对自己水平的判断是合理的？</h4><h4 id="1-4-你克服了哪些障碍？"><a href="#1-4-你克服了哪些障碍？" class="headerlink" title="1.4 你克服了哪些障碍？"></a>1.4 你克服了哪些障碍？</h4><h4 id="1-5-你的职业理想中还缺少什么？或者，你下一步想实现什么？"><a href="#1-5-你的职业理想中还缺少什么？或者，你下一步想实现什么？" class="headerlink" title="1.5 你的职业理想中还缺少什么？或者，你下一步想实现什么？"></a>1.5 你的职业理想中还缺少什么？或者，你下一步想实现什么？</h4><h1 id="2-人际关系"><a href="#2-人际关系" class="headerlink" title="2. 人际关系"></a>2. 人际关系</h1><h4 id="2-1-五年后你的感情状况如何？"><a href="#2-1-五年后你的感情状况如何？" class="headerlink" title="2.1 五年后你的感情状况如何？"></a>2.1 五年后你的感情状况如何？</h4><h4 id="2-2-从现在到五年后会发生什么来证明你对未来的预期是合理的？"><a href="#2-2-从现在到五年后会发生什么来证明你对未来的预期是合理的？" class="headerlink" title="2.2 从现在到五年后会发生什么来证明你对未来的预期是合理的？"></a>2.2 从现在到五年后会发生什么来证明你对未来的预期是合理的？</h4><h4 id="2-3-你交了哪些新朋友？他们是什么样的？是什么让你想和他们成为朋友？"><a href="#2-3-你交了哪些新朋友？他们是什么样的？是什么让你想和他们成为朋友？" class="headerlink" title="2.3 你交了哪些新朋友？他们是什么样的？是什么让你想和他们成为朋友？"></a>2.3 你交了哪些新朋友？他们是什么样的？是什么让你想和他们成为朋友？</h4><h4 id="2-4-你克服了哪些人际关系上的障碍？"><a href="#2-4-你克服了哪些人际关系上的障碍？" class="headerlink" title="2.4 你克服了哪些人际关系上的障碍？"></a>2.4 你克服了哪些人际关系上的障碍？</h4><h4 id="2-5-你的家庭关系是什么样的？"><a href="#2-5-你的家庭关系是什么样的？" class="headerlink" title="2.5 你的家庭关系是什么样的？"></a>2.5 你的家庭关系是什么样的？</h4><h4 id="2-6-你的各种关系中还缺少什么？"><a href="#2-6-你的各种关系中还缺少什么？" class="headerlink" title="2.6 你的各种关系中还缺少什么？"></a>2.6 你的各种关系中还缺少什么？</h4><h1 id="3-健康"><a href="#3-健康" class="headerlink" title="3. 健康"></a>3. 健康</h1><h4 id="3-1-为了保持或改善你的健康，你是如何安排自己的饮食结构的？"><a href="#3-1-为了保持或改善你的健康，你是如何安排自己的饮食结构的？" class="headerlink" title="3.1 为了保持或改善你的健康，你是如何安排自己的饮食结构的？"></a>3.1 为了保持或改善你的健康，你是如何安排自己的饮食结构的？</h4><h4 id="3-2-为了保持或改善你的健康，你是否进行了锻炼？"><a href="#3-2-为了保持或改善你的健康，你是否进行了锻炼？" class="headerlink" title="3.2 为了保持或改善你的健康，你是否进行了锻炼？"></a>3.2 为了保持或改善你的健康，你是否进行了锻炼？</h4><h4 id="3-3-你改善健康的愿望是如何影响你生活中的选择的？"><a href="#3-3-你改善健康的愿望是如何影响你生活中的选择的？" class="headerlink" title="3.3 你改善健康的愿望是如何影响你生活中的选择的？"></a>3.3 你改善健康的愿望是如何影响你生活中的选择的？</h4><h4 id="3-4-你克服了哪些主要障碍？"><a href="#3-4-你克服了哪些主要障碍？" class="headerlink" title="3.4 你克服了哪些主要障碍？"></a>3.4 你克服了哪些主要障碍？</h4><h4 id="3-5-就你的健康状况而言，你还需要达到哪些目标？或者，你下一步想要实现什么？"><a href="#3-5-就你的健康状况而言，你还需要达到哪些目标？或者，你下一步想要实现什么？" class="headerlink" title="3.5 就你的健康状况而言，你还需要达到哪些目标？或者，你下一步想要实现什么？"></a>3.5 就你的健康状况而言，你还需要达到哪些目标？或者，你下一步想要实现什么？</h4><h1 id="4-财务"><a href="#4-财务" class="headerlink" title="4. 财务"></a>4. 财务</h1><h4 id="4-1-你的个人资产状况（资产、负债、现金流）是什么样的？"><a href="#4-1-你的个人资产状况（资产、负债、现金流）是什么样的？" class="headerlink" title="4.1 你的个人资产状况（资产、负债、现金流）是什么样的？"></a>4.1 你的个人资产状况（资产、负债、现金流）是什么样的？</h4><h4 id="4-2-无论你的财务目标是什么（持有现金、应急基金、为退休做准备、为大学攒学费、再买一套房等等），你都采取了哪些措施？"><a href="#4-2-无论你的财务目标是什么（持有现金、应急基金、为退休做准备、为大学攒学费、再买一套房等等），你都采取了哪些措施？" class="headerlink" title="4.2 无论你的财务目标是什么（持有现金、应急基金、为退休做准备、为大学攒学费、再买一套房等等），你都采取了哪些措施？"></a>4.2 无论你的财务目标是什么（持有现金、应急基金、为退休做准备、为大学攒学费、再买一套房等等），你都采取了哪些措施？</h4><h4 id="4-3-你每个月赚多少钱？"><a href="#4-3-你每个月赚多少钱？" class="headerlink" title="4.3 你每个月赚多少钱？"></a>4.3 你每个月赚多少钱？</h4><h4 id="4-4-从现在到将来会发生什么来证明这些收入是合理的？"><a href="#4-4-从现在到将来会发生什么来证明这些收入是合理的？" class="headerlink" title="4.4 从现在到将来会发生什么来证明这些收入是合理的？"></a>4.4 从现在到将来会发生什么来证明这些收入是合理的？</h4><h4 id="4-5-从现在起的五年内，你会达到哪些重要的财务里程碑？"><a href="#4-5-从现在起的五年内，你会达到哪些重要的财务里程碑？" class="headerlink" title="4.5 从现在起的五年内，你会达到哪些重要的财务里程碑？"></a>4.5 从现在起的五年内，你会达到哪些重要的财务里程碑？</h4><h4 id="4-6-你还有哪些财务目标有待实现？"><a href="#4-6-你还有哪些财务目标有待实现？" class="headerlink" title="4.6 你还有哪些财务目标有待实现？"></a>4.6 你还有哪些财务目标有待实现？</h4><h1 id="5-个人发展"><a href="#5-个人发展" class="headerlink" title="5. 个人发展"></a>5. 个人发展</h1><h4 id="5-1-你每天或每周都会做哪些精神实践？它们有没有成为你生活中的一部分？"><a href="#5-1-你每天或每周都会做哪些精神实践？它们有没有成为你生活中的一部分？" class="headerlink" title="5.1 你每天或每周都会做哪些精神实践？它们有没有成为你生活中的一部分？"></a>5.1 你每天或每周都会做哪些精神实践？它们有没有成为你生活中的一部分？</h4><h4 id="5-2-你还学习了什么技能？"><a href="#5-2-你还学习了什么技能？" class="headerlink" title="5.2 你还学习了什么技能？"></a>5.2 你还学习了什么技能？</h4><h4 id="5-3-在未来的五年里，你有哪些学习机会？"><a href="#5-3-在未来的五年里，你有哪些学习机会？" class="headerlink" title="5.3 在未来的五年里，你有哪些学习机会？"></a>5.3 在未来的五年里，你有哪些学习机会？</h4><h4 id="5-4-你尝试过哪些个人发展实践，但不喜欢？"><a href="#5-4-你尝试过哪些个人发展实践，但不喜欢？" class="headerlink" title="5.4 你尝试过哪些个人发展实践，但不喜欢？"></a>5.4 你尝试过哪些个人发展实践，但不喜欢？</h4><h4 id="5-5-你进行个人发展实践的原因是什么？"><a href="#5-5-你进行个人发展实践的原因是什么？" class="headerlink" title="5.5 你进行个人发展实践的原因是什么？"></a>5.5 你进行个人发展实践的原因是什么？</h4><h4 id="5-6-你希望在个人发展方面取得什么成就？"><a href="#5-6-你希望在个人发展方面取得什么成就？" class="headerlink" title="5.6 你希望在个人发展方面取得什么成就？"></a>5.6 你希望在个人发展方面取得什么成就？</h4><h1 id="6-环境"><a href="#6-环境" class="headerlink" title="6. 环境"></a>6. 环境</h1><h4 id="6-1-你住在哪里？"><a href="#6-1-你住在哪里？" class="headerlink" title="6.1 你住在哪里？"></a>6.1 你住在哪里？</h4><h4 id="6-2-你住的地方气候怎么样？"><a href="#6-2-你住的地方气候怎么样？" class="headerlink" title="6.2 你住的地方气候怎么样？"></a>6.2 你住的地方气候怎么样？</h4><h4 id="6-3-描述一下你的家。是房子还是公寓？"><a href="#6-3-描述一下你的家。是房子还是公寓？" class="headerlink" title="6.3 描述一下你的家。是房子还是公寓？"></a>6.3 描述一下你的家。是房子还是公寓？</h4><h4 id="6-4-房子是怎么装修的？"><a href="#6-4-房子是怎么装修的？" class="headerlink" title="6.4 房子是怎么装修的？"></a>6.4 房子是怎么装修的？</h4><h4 id="6-5-如果你一直住在这间房子里，从未搬家过，你后面还做了哪些装修？"><a href="#6-5-如果你一直住在这间房子里，从未搬家过，你后面还做了哪些装修？" class="headerlink" title="6.5 如果你一直住在这间房子里，从未搬家过，你后面还做了哪些装修？"></a>6.5 如果你一直住在这间房子里，从未搬家过，你后面还做了哪些装修？</h4><h4 id="6-6-谁和你住在一起？"><a href="#6-6-谁和你住在一起？" class="headerlink" title="6.6 谁和你住在一起？"></a>6.6 谁和你住在一起？</h4><h1 id="7-生活方式"><a href="#7-生活方式" class="headerlink" title="7. 生活方式"></a>7. 生活方式</h1><h4 id="7-1-你周末、晚上、下班后都有什么娱乐或者消遣活动？"><a href="#7-1-你周末、晚上、下班后都有什么娱乐或者消遣活动？" class="headerlink" title="7.1 你周末、晚上、下班后都有什么娱乐或者消遣活动？"></a>7.1 你周末、晚上、下班后都有什么娱乐或者消遣活动？</h4><h4 id="7-2-你有汽车吗？哪种汽车？如果没有，你有什么打算？"><a href="#7-2-你有汽车吗？哪种汽车？如果没有，你有什么打算？" class="headerlink" title="7.2 你有汽车吗？哪种汽车？如果没有，你有什么打算？"></a>7.2 你有汽车吗？哪种汽车？如果没有，你有什么打算？</h4><h4 id="7-3-你平时上班、休息日或外出时的穿衣打扮是什么样的？"><a href="#7-3-你平时上班、休息日或外出时的穿衣打扮是什么样的？" class="headerlink" title="7.3 你平时上班、休息日或外出时的穿衣打扮是什么样的？"></a>7.3 你平时上班、休息日或外出时的穿衣打扮是什么样的？</h4><h4 id="7-4-你最珍视的物质财富是什么？"><a href="#7-4-你最珍视的物质财富是什么？" class="headerlink" title="7.4 你最珍视的物质财富是什么？"></a>7.4 你最珍视的物质财富是什么？</h4><h4 id="7-5-你去哪里度假了？"><a href="#7-5-你去哪里度假了？" class="headerlink" title="7.5 你去哪里度假了？"></a>7.5 你去哪里度假了？</h4><h4 id="7-6-如果你有孩子，你会和他们一起做什么活动？"><a href="#7-6-如果你有孩子，你会和他们一起做什么活动？" class="headerlink" title="7.6 如果你有孩子，你会和他们一起做什么活动？"></a>7.6 如果你有孩子，你会和他们一起做什么活动？</h4><h4 id="7-7-你养宠物了吗？如果养了，是什么宠物？"><a href="#7-7-你养宠物了吗？如果养了，是什么宠物？" class="headerlink" title="7.7 你养宠物了吗？如果养了，是什么宠物？"></a>7.7 你养宠物了吗？如果养了，是什么宠物？</h4><h4 id="7-8-你还想要什么样的生活方式？"><a href="#7-8-你还想要什么样的生活方式？" class="headerlink" title="7.8 你还想要什么样的生活方式？"></a>7.8 你还想要什么样的生活方式？</h4><h1 id="8-写下你的故事"><a href="#8-写下你的故事" class="headerlink" title="8. 写下你的故事"></a>8. 写下你的故事</h1><p>这么多问题，你回答的还开心吗？接下来才是超级有趣的部分——想象自己五年后的样子，然后把它写下来。假设今天是周五晚上——周五是一个有用的假设，因为它能有效地体现生活方式，这一天既包括工作，也包括了典型的休闲活动。<br>再假设你刚醒过来。你在哪里？你可以描述自己卧室的情况。房子是怎么装修的？接下来描述你的一天的时间记得多一点细节。想象一下你去洗手间刷牙，下楼倒杯咖啡的情景（你可能没这个习惯，但我确实每天都是这样的）。这是一个你如何思考“过程”的例子。一定要写一些关于你的感受的小事。也许两周后你会有一个假期，也许你今天就能拿到报酬。把你的想法写下来可以让你把一天中不一定会发生的事情记起来。<br>写下你如何去上班（除非你在家工作），写下你的每天工作的情况，包括与你打交道的人的轶事和他们的各种特点。这些花边新闻让你的故事感觉真实。如果你需要更多信息，可以参考前面问题的答案。确保你的故事里包含了所有7个类别的信息。你的故事要一直写到你一天结束的时候。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日简史-致敬充满未知的世界</title>
      <link href="/%E4%BB%8A%E6%97%A5%E7%AE%80%E5%8F%B2-%E8%87%B4%E6%95%AC%E5%85%85%E6%BB%A1%E6%9C%AA%E7%9F%A5%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/%E4%BB%8A%E6%97%A5%E7%AE%80%E5%8F%B2-%E8%87%B4%E6%95%AC%E5%85%85%E6%BB%A1%E6%9C%AA%E7%9F%A5%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>作者在这本书里探讨了很多现世的问题，也给出一些自己的探知觉察的方式，几个非常有意思的问题。</p><h1 id="1-科技会如何颠覆整个社会？"><a href="#1-科技会如何颠覆整个社会？" class="headerlink" title="1. 科技会如何颠覆整个社会？"></a>1. 科技会如何颠覆整个社会？</h1><p>逻辑链条： </p><ol><li>人工智能的飞速发展，大数据对于人的精确分析</li><li>自动驾驶 - 使驾驶员失业</li><li>大数据 - 精确的用户画像，使算法比人自己更了解自己。传统的广告业，投资行业的运行方式会发生改变，权威(决定权)转移给算法</li><li>大量低技术含量的职业消失，大量人失业</li><li>当技术再继续发展，会不会有一天可以推行出最针对个人的设计？最能刺激你某种情绪的出现的视频，文章，音乐，图像？ </li><li>如果5成立的话，某种程度上你失去了对自己的控制，因为你所构建判断的所有信息是被筛选出来有特定导向的。</li><li>被控制…     很像《美丽新世界》</li><li>政府如何解决安抚大量失业的人呢？减速技术的革新？给予人最基础的保障和服务（共产主义）？提供足够多的保障基本生活的资金？（芬兰正在做这样的实验）</li><li>基因生物技术的迅猛发展，会不会给少部分人改变自己的基因的机会？改变基因，改变性状，渐渐出现不同的物种，超级人和一般人？ </li></ol><p>上述一切都是推论，但是不能否认确实存在这种可能，而且技术的进步速度着实很快。谁能在2009年用着傻瓜机的时代想象到今日我们的技术水平呢？</p><h1 id="2-人工智能有可能控制人类么？"><a href="#2-人工智能有可能控制人类么？" class="headerlink" title="2. 人工智能有可能控制人类么？"></a>2. 人工智能有可能控制人类么？</h1><p>这里其实需要对大脑和意识做个区分。现在的机器做的事情是大脑做的事情，即通过各种神经元的连接，各种电信号的刺激，根据输入的事物的特征，给出针对性的反应。这其实是一个很有逻辑的过程。</p><p>但是人工智能控制人类这个问题，实质上是在问，人工智能有可能产生自己的意识么？ </p><p>答案在目前看，是不知道… 因为我们现在也并不知道大脑是如何产生各种情绪的，为什么大脑的这种活动热点区域(heatmap)能够喜悦，而另外一种能够生成愤怒？ 我们不知道，二者之间现在无法证明有着任何的因果关系，因为我们不知道意识是如何产生的，又是如何产生作用的。</p><p>现在为数不多的观察意识/心智的方式就是冥想，但是这也只是尽量直接的观察自己的意识的一种方式，我们无法直接观察他人心智来进行研究。</p><p>我们现在认为身边的人有意识更多是一种推己及人，因为我知道自己有意识，而身旁的人和我有很类似的行为特征，因此有理由认为大家都有意识。（但是是不是会很楚门的世界呢？？？？！！！）</p><h1 id="3-人生的意义？"><a href="#3-人生的意义？" class="headerlink" title="3. 人生的意义？"></a>3. 人生的意义？</h1><p>人生的意义？ 某种循环，而我们知识在执行某种赋予我们的角色，让这个循环一直稳定下去？ 我觉得更应该说不是个循环，因为这些都是螺旋上升的，无论是人的认知，还是整个社会的状态，科技环境，这种上升是会把我们所处的整个环境不断推向新的状态的，人与人之间的关系，龃龉，友善，倒是没有大的区别。</p><p>宗教在赋予每个人的人生特定的意义，是线性的生活/世界，还是一个循环的状态。</p><p>用故事来诉说自己的人生的意义，</p><p>循环的上一世下一世有什么意义呢？如果没有前人的肩膀，只能一切从头再来… </p><p>那如果我们给自己的家庭赋予一个特定的意义，用各种方式来验证这个世界是什么样子的，来思考世界发展的走向，用各种方式来证明，那会是一个好的选择么？？？？  </p><p>用几代人的时间，来详细的描述我们所经历的时代，从各个角度去研究探求我们的世界会变成什么样子？   —-&gt; 技术，工程，医学，艺术…. 诸如此类，在每个领域都研究的更深更深一些，这样子会好一些么</p><p>研究人性的边界？ 研究人类最终的归宿？ 研究人类如何能和技术和谐共处又不被技术控制？ </p><p>为什么要有故事，要让人活得不空虚啊，为了让人有目标；如何让人相信故事呢？ 靠各种仪式，将抽象变得具体，将虚构变得真实</p><p>献祭使信服，付出使信服。牺牲  — 沉没成本 </p><p>因为人们今日相信的任何神祗或事务，不论是耶和华，还是国家，革命，都并不完整，有很多问题解释不了，充满漏洞。正因为如此，人类很少把所有的信念都投注到单一的故事上，而是有个信念组合，里面有几个不同的故事，几个不同的身份认同可以配合需求任意切换。几乎所有的社会和运动，都有这种认知失调的情形。</p><p>谨慎欺骗，如果政客的话语开始掺杂一些神秘的词句，就该提高警惕。面对真实的痛苦，这些人可能会用某些空泛难解的表达来加以包装，作为申辩。比如<strong><em>牺牲、永恒、纯净、恢复</em></strong>。</p><p>如果真想知道宇宙的真相，人生的意义，自己的身份，最好的出发点是去观察痛苦，探索痛苦的本质。答案永远不会是一个故事。</p><h1 id="4-一些摘录"><a href="#4-一些摘录" class="headerlink" title="4. 一些摘录"></a>4. 一些摘录</h1><p>冥想是一种感受自己的意识的方式</p><p>道德的重点并不是遵守神圣的诫命，而是要减少痛苦。 </p><p>为什么人会关注他人的感受？是否愉快呢？</p><p>因为人是社交动物，自己的幸福与否，在很大程度上取决于与他人的关系。没有爱，没有友谊，没有群体的支持，谁能快乐得起来呢？如果过着孤独，以自我为中心的生活，肯定会感到痛苦。所以想要快乐你至少要关心你的家人、朋友，以及所属社群里的其他人。</p><p>世上所有的暴力行为，必然始于一个人心中的暴力欲望，这种欲望早在扰乱他人的平和幸福之前，就已经扰乱了自己的平和和幸福了。</p><p>我们的道德从哪里来？ 我们的信仰从哪里来？ 我们的智慧从哪里来？   我们解释不了的东西到底是神创造的，还是说，其实只是因为我们不知道呢？？ </p><p>到底是因为神说不应该做什么我们才不做什么？ 还是我们自己就不想那么做，恰好相信一下呢？ 譬如杀人，不做因为我们的道德还是神说不应该杀人呢？ 如果有一天神的现世代言者说，我们要杀光异教徒，信教的人会做出怎样的选择呢？？</p><p>其实站在这些信教的人的角度，好像并没有做错什么？到底前面没有出事情是因为恰巧道德层面的要求和信仰的要求一致，还是是在通过信仰的方式追求自己的道德呢？     颇有点道德信仰谁为第一性的意味。</p><p>正义来自绝对责任，还是结果导向呢？</p><p>可以用意图道德来回避这个问题，重要的是我的意图，而不是我的实际行动以及结果。但是在这个一切都紧密联系的世界中，最重要的道德义务就是人必须要知道各种事情。现代历史中最严重的罪行，不仅源自于仇恨和贪婪，还源自于无知和冷漠。</p><p>结构性偏见，我们只能听到一部分人的声音，而无法听到另外一部分人的。 </p><p>每个人的眼中开始有其自己认为的真相，而无法交融。</p><p>关于如何防止自己被洗脑的法则： </p><ol><li>如果你想得到可靠的消息，必然要付出昂贵的代价。如果你总是免费得到信息，有可能你才是整个商业世界的产品。</li><li>如果觉得某些问题似乎对你特别重要，就该真正努力阅读相关的科学文献。所谓的科学文献，指的是经过同行评审的论文，由知名学术出版社出版的书籍，以及知名教授的著作。</li></ol><p>美丽新世界：默然忍受命运的暴虐的毒箭，或是面对苦海，拿刀做个一了百了。你们既不是默然忍受，也不是一了百了，而只是取消了命运的毒箭，这样未免太简单化了。</p><p>学校或者说教育，现在最不应该教的是信息… 因为这个世界现在的信息实在太多了， 每个人都在接收不停的信息轰炸。这才是这个世界现在最可怕的问题，越来越多的人失去了持续学习，专注学习的能力。要知道想要深入学习一样东西，是需要进入深度专注地状态的，不是手机一震动就去看一眼，遇到不会的就刷刷微博，看看抖音再继续的那种状态。</p><p>学生，或者说教育，更应该教育学生去做的，是4C。</p><ul><li>批判性思考 critical thinking </li><li>沟通 communication </li><li>合作 collaboration </li><li>创意 creativity </li></ul><p>学校不应该太看重特定的工作技能，而要强调通用的生活技能。最重要的是<strong><em>能够随机应变，学习新事物，在不熟悉的环境里仍然能够保持心智平衡</em></strong>。想要跟上2050年的世界，人类不只需要发明新的想法和产品，最重要的是要一次又一次地重塑自己。</p><p>All that is solid melts into air </p><p>这必将是一个需要不断学习的社会了</p><p>工业革命让我们对于教育的想法就像是一条生产线。城镇的中心有一座大型混凝土建筑，每个房间都配有几排桌椅。铃声响起，你就和另外30个一般大的孩子一起走进某个房间。每个小时都会有一个大人走进了说话，而且政府付钱叫他们这么做的。</p><p>到底是我们在控制技术，还是技术在控制我们呢？ </p><p>大多数人其实并不了解自己，打算倾听自己内心的声音时，很容易遭到外部的操控。我们大脑中的那些声音绝对不值得信赖，因为这些声音反应的总是国家的政治宣言、意识形态的洗脑手段和商业广告的殷殷召唤，更别提人体生化机制本来就有缺陷。</p><p>冥想与内观，各种痛苦最深层的来源，就在于自己的心智。如果有什么是我想得到却不可得，心智的反应就是产生痛苦。痛苦并非外部世界的客观庆幸，而是自己心智产生的心理反应。了解这一点就是跨出了第一步，让人不再产生痛苦。</p><p>大脑与心智的奥秘。大脑是由神经元、突触和生化物质组成的实体网络组织，心智则是痛苦、愉快、爱和愤怒等主观体验的流动。</p><p>我们可以研究到大脑活动，但是我们无法研究他人的心智，或者说是意识。对于意识的研究，还是一个黑箱。（其实某种程度上，这是人工智能是否能有意识的决定性因素 – 即意识在人的大脑中是如何产生的)</p><p>如何直观的观察自己的心智，以及如何直观的观察他人的心智。</p><p>冥想实际上是一种直接观察自己的心智的一种方法</p><p>所谓的实际修行，就是要运用系统持续以及客观的方式，观察身体的感觉以及心智对这些感觉的反应，据此来找出心智的基本模式。内观禅修者都会被告诫，不要想去追求什么特殊的体验，而是要专注于了解自己的心智的真实状况，不论这个状况为何。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
            <tag> society </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Food Rules</title>
      <link href="/Food-Rules/"/>
      <url>/Food-Rules/</url>
      
        <content type="html"><![CDATA[<p>Read a book recommended by Doctor, it tells about some food rules mainly focusing on what should we eat, how much should we eat, pretty funny, wanna share some rules here: </p><h1 id="1-What-should-I-eat"><a href="#1-What-should-I-eat" class="headerlink" title="1. What should I eat?"></a>1. What should I eat?</h1><ol><li>Eat food, not “edible foodlike sunstances”. </li><li>Don’t eat anything your great-grandmother wouldn’t recognize as food. </li><li>Avoid food products containing ingredients that no ordinary human would keep in the pantry. </li><li>Avoid food products that contain high-fructose corn syrup. </li><li>Avoid foods that have some form of suger(or sweetener) listed among the top three ingredients. </li><li>Avoid food products that contain more than five ingredients. </li><li>Avoid food products containing ingredients that a third grader connot pronounce. </li><li>Avoid food products that make health claims.</li><li>Avoid food products with the wordoid or the terms low fat or non fat in their names.</li><li>Avoid foods that are pretending to be something they are not. </li><li>Avoid foods you see advertisement on tv. </li><li>Shop the peripheries of the supermarket and stay out of the middle. </li><li>Eat only foods that will eventually rot. </li><li>Eat foods made from ingredients that you can picture in their raw state or growing in nature. </li><li>Get out of the supermarket whenever you can. </li><li>Buy your snacks at the farmers’ market.</li><li>Eat only foods that have been cooked by humans. </li><li>Don’t ingest foods made in places where everyone is required to wear a surgical cap. </li><li>If it came from a plant, eat it; if it was made in a plant, don’t. </li><li>It’s not food if it arrived through the window of your car. </li><li>It’s not food if it’s called by the same name in every language. </li></ol><h1 id="2-What-kind-of-food-should-I-eat"><a href="#2-What-kind-of-food-should-I-eat" class="headerlink" title="2. What kind of food should I eat?"></a>2. What kind of food should I eat?</h1><ol start="22"><li>Eat mostly plants, especially leaves. </li><li>Treat meat as a flavoring or special occasion food. </li><li>Eating waht stands on one leg(mushrooms, plant foods) is better than eating what stands on two legs(fowl), which is better than eating waht stands on four legs. </li><li>Eat your colors. </li><li>Drink the spinach water. </li><li>Eat animals that have themselves eaten well. </li><li>Eat like an omnivore. </li><li>Eat well grown food from healthy soil. </li><li>Eat wild foods when you can. </li><li>Don’t overlook the oily little fishes.</li><li>Eat some foods that have been predigested by bacteria or fungi. </li><li>Sweeten and salt your food yourself. </li><li>Eat sweet foods as you find them in nature. </li><li>Don’t eat breakfast cereals that change the color of the milk. </li><li>The whiter the bread, the sooner you’ll be dead. </li><li>Favor the kinds of oils and grains that have traditionally been stone ground. </li><li>Eat all the junk food you want as long as you cook it yourself. </li><li>Be the kind of person who takes supplements, then skip the supplements. </li><li>Regard nontraditional foods with skeptism.</li><li>Have a glass of win with dinner. </li></ol><h1 id="3-How-should-I-eat"><a href="#3-How-should-I-eat" class="headerlink" title="3. How should I eat?"></a>3. How should I eat?</h1><ol start="42"><li>Pay more, eat less </li><li>Stop eating before you are full. </li><li>Eat when you are hungry, not when you are bored. </li><li>Consult your gut. Eat slowly</li><li>The banquet is in the first bite. </li><li>Spend as much time enjoying the meal as it took to prepare it. </li><li>Buy smaller plates and glasses.</li><li>Serve a proper portion and don’t go back for seconds. </li><li>Breakfast like a king, lunch like a prince, dinner like a pauper. </li><li>Eat meals. </li><li>Limit your snacks to unprocessed plant foods. </li><li>Don’t get your fuel from the same place your car does. hhhhhh</li><li>Do all your eating at a table</li><li>Try not to eat alone. </li><li>Treat treats as treats. </li><li>Leave sth on your plate. </li></ol>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
            <tag> food </tag>
            
            <tag> diet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS essential(5) - Architecting</title>
      <link href="/AWS-essential-5-Architecting/"/>
      <url>/AWS-essential-5-Architecting/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Introduction-to-well-architected-framework"><a href="#1-Introduction-to-well-architected-framework" class="headerlink" title="1. Introduction to well-architected framework"></a>1. Introduction to well-architected framework</h1><ul><li>developed through reviewing customers’ architectures on AWS </li><li>build and deploy faster </li><li>lower or mitigate risks </li><li>make informed decision </li><li>learn aws best practices </li></ul><h2 id="1-1-Five-Pillars"><a href="#1-1-Five-Pillars" class="headerlink" title="1.1 Five Pillars"></a>1.1 Five Pillars</h2><h3 id="1-1-1-Operational-Excellence"><a href="#1-1-1-Operational-Excellence" class="headerlink" title="1.1.1 Operational Excellence"></a>1.1.1 Operational Excellence</h3><ul><li>Run and monitor systems to deliver business value </li><li>continually improve supporting processes and procedures </li></ul><p>Disign Principles </p><ul><li>perform operations as code </li><li>annotate documentation </li><li>make frequent, small, reversible changes </li><li>refine operations procedures frequently </li><li>anticipate failure </li><li>learn from all operational failures </li></ul><h3 id="1-1-2-Security"><a href="#1-1-2-Security" class="headerlink" title="1.1.2 Security"></a>1.1.2 Security</h3><ul><li>protect information, systems, assets </li><li>do risk assessments and mitigation strategies </li></ul><p>Design Principles </p><ul><li>Implement a strong identity foundation </li><li>enable traceability </li><li>apply security best practices </li><li>automate security best practices </li><li>protect data in transit and at rest </li><li>prepare for security events</li></ul><h3 id="1-1-3-Reliability"><a href="#1-1-3-Reliability" class="headerlink" title="1.1.3 Reliability"></a>1.1.3 Reliability</h3><ul><li>recover from infrastructure or service disruptions </li><li>dynamically acquire computing resources to meet demand </li><li>mitigate disruptions </li></ul><p>Design Principles:</p><ul><li>test recovery procedures </li><li>automatically recover from failure</li><li>scale horizontally to increase aggregate system availability </li><li>stop guessing capacity </li><li>manage change in automation </li></ul><h3 id="1-1-4-Performance-Efficiency"><a href="#1-1-4-Performance-Efficiency" class="headerlink" title="1.1.4 Performance Efficiency"></a>1.1.4 Performance Efficiency</h3><ul><li>use computing resources efficiently </li><li>maintain efficiency as demand changes and technologies evolve </li></ul><p>Design Principles </p><ul><li>Democratize advanced technologies </li><li>Go global in minutes </li><li>use serverless architectures </li><li>Experiment more often </li><li>mechanical sympathy </li></ul><h3 id="1-1-5-Cost-Optimization"><a href="#1-1-5-Cost-Optimization" class="headerlink" title="1.1.5  Cost Optimization"></a>1.1.5  Cost Optimization</h3><ul><li><p>avoid or eliminate unneeded cost or suboptimal resources<br>Design Principles </p></li><li><p>adopt a consumption model </p></li><li><p>measure overall efficiency </p></li><li><p>stop spending money on data center operations </p></li><li><p>analyze and attribute expenditure </p></li><li><p>use managed services to reduce cost of ownership </p></li></ul><h1 id="2-Fault-tolerance-and-highly-available-architecture"><a href="#2-Fault-tolerance-and-highly-available-architecture" class="headerlink" title="2. Fault tolerance and highly available architecture"></a>2. Fault tolerance and highly available architecture</h1><h2 id="2-1-Fault-tolerance"><a href="#2-1-Fault-tolerance" class="headerlink" title="2.1 Fault tolerance"></a>2.1 Fault tolerance</h2><ul><li>remain operational even if components fail </li><li>build-in redundancy of an application’s components</li></ul><h2 id="2-2-High-Availability"><a href="#2-2-High-Availability" class="headerlink" title="2.2 High Availability"></a>2.2 High Availability</h2><ul><li>always functioning and accessible </li><li>downtime is minimized </li><li>without human intervention </li></ul><h2 id="2-3-High-availability-tools"><a href="#2-3-High-availability-tools" class="headerlink" title="2.3 High availability tools"></a>2.3 High availability tools</h2><h3 id="2-3-1-elastic-load-balancers"><a href="#2-3-1-elastic-load-balancers" class="headerlink" title="2.3.1 elastic load balancers"></a>2.3.1 elastic load balancers</h3><p>elb - distribute income traffic to your hosts, also send metrics to cloudwatch </p><h3 id="2-3-2-elastic-IP-addresses"><a href="#2-3-2-elastic-IP-addresses" class="headerlink" title="2.3.2 elastic IP addresses"></a>2.3.2 elastic IP addresses</h3><p>static IP addresses designed for dynamic cloud computing, able to mask failures </p><p>applications still accessible </p><h3 id="2-3-3-amazon-route-53"><a href="#2-3-3-amazon-route-53" class="headerlink" title="2.3.3 amazon route 53"></a>2.3.3 amazon route 53</h3><p>Authorized DNS server, </p><h3 id="2-3-4-auto-scaling"><a href="#2-3-4-auto-scaling" class="headerlink" title="2.3.4 auto scaling"></a>2.3.4 auto scaling</h3><p>launches and terminates by specified conditions </p><p>can be adjusted/ modified </p><p>create new resources on demand </p><h3 id="2-3-5-amazon-cloudwatch"><a href="#2-3-5-amazon-cloudwatch" class="headerlink" title="2.3.5 amazon cloudwatch"></a>2.3.5 amazon cloudwatch</h3><p>collects and tracks infromations </p><h2 id="2-4-Fault-tolerant-tools"><a href="#2-4-Fault-tolerant-tools" class="headerlink" title="2.4 Fault tolerant tools"></a>2.4 Fault tolerant tools</h2><ol><li>Amazon simple queue service </li><li>Amazon simple storage service </li><li>Amazon simple DB </li><li>Amazon relational database service </li></ol><h1 id="3-Web-hosting"><a href="#3-Web-hosting" class="headerlink" title="3. Web hosting"></a>3. Web hosting</h1><h2 id="3-1-benefits"><a href="#3-1-benefits" class="headerlink" title="3.1 benefits"></a>3.1 benefits</h2><ul><li>cost effective<br>handle peak capacity </li></ul><p>do on demand provisioning </p><ul><li>scalable </li><li>on demand </li></ul><h2 id="3-2-Web-hosting-services"><a href="#3-2-Web-hosting-services" class="headerlink" title="3.2 Web hosting services"></a>3.2 Web hosting services</h2><p>Products to assist transition: </p><ol><li>Amazon Virtual Private Cloud </li><li>Amazon Route 53 </li><li>Amazon CloudFront </li><li>Elastic load balancing </li><li>Firewalls/ AWS shield</li><li>Auto scaling </li><li>App servers/ EC2 instances </li><li>Amazon ElasticCache </li><li>Amazon RDS/ Amazon DynamoDB </li></ol><h2 id="3-3-Key-Architectural-considerations"><a href="#3-3-Key-Architectural-considerations" class="headerlink" title="3.3 Key Architectural considerations"></a>3.3 Key Architectural considerations</h2><ol><li>No more physical network appliances </li><li>Firewalls everywhere </li><li>consider multiple data centers </li></ol>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS essential(4)-Security</title>
      <link href="/AWS-essential-4-Security/"/>
      <url>/AWS-essential-4-Security/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Introduction-to-AWS-security"><a href="#1-Introduction-to-AWS-security" class="headerlink" title="1. Introduction to AWS security"></a>1. Introduction to AWS security</h1><ul><li>Approach to security <ul><li>resilient infrastructure </li><li>high security </li><li>strong safeguards </li></ul></li><li>Controls </li><li>AWS products and features </li></ul><ul><li><p>Network Security </p><ul><li>build in firewalls </li><li>encryption in transit </li><li>private dedicated connections </li><li>ddos mitigation </li></ul></li><li><p>Data Encryption </p><ul><li>encrption capabilities for aws storage/ database </li><li>key management options </li><li>hardware based cryptographic key storage options </li></ul></li><li><p>Access Control and management </p><ul><li>Identity and access management </li><li>Multifactor authentication </li><li>integration and federation with corporate directories </li></ul></li><li><p>Monitoring and Logging </p><ul><li>deep visibility into API calls </li><li>log aggregation and options </li><li>alerts </li></ul></li></ul><h1 id="2-The-AWS-Shared-Responsibility-Model"><a href="#2-The-AWS-Shared-Responsibility-Model" class="headerlink" title="2. The AWS Shared Responsibility Model"></a>2. The AWS Shared Responsibility Model</h1><p>Share responsibility for securing data. </p><p>AWS responsible of — security of the cloud </p><ul><li>compute </li><li>storage </li><li>databse </li><li>networking </li></ul><p>Customer responsible of —- security in the cloud </p><ul><li>what to store </li><li>which aws services </li><li>location </li><li>content format </li></ul><h1 id="3-AWS-Access-Control-and-Management"><a href="#3-AWS-Access-Control-and-Management" class="headerlink" title="3. AWS Access Control and Management"></a>3. AWS Access Control and Management</h1><h2 id="3-1-IAM-overview"><a href="#3-1-IAM-overview" class="headerlink" title="3.1 IAM overview -"></a>3.1 IAM overview -</h2><h3 id="3-1-1-Functions"><a href="#3-1-1-Functions" class="headerlink" title="3.1.1 Functions"></a>3.1.1 Functions</h3><ul><li>Control access to AWS resources </li><li>authentication<ul><li>who can access resources</li><li>use AWS IAM policy </li></ul></li><li>Authorization <ul><li>how they can use resources </li></ul></li></ul><p>Manage accesses to: </p><ul><li>compute </li><li>storage </li><li>database </li><li>application services </li></ul><h3 id="3-1-2-Roles"><a href="#3-1-2-Roles" class="headerlink" title="3.1.2 Roles"></a>3.1.2 Roles</h3><ul><li>User</li><li>Group </li><li>Permissions </li><li>Role </li></ul><h3 id="3-1-3-Features"><a href="#3-1-3-Features" class="headerlink" title="3.1.3 Features"></a>3.1.3 Features</h3><ul><li>Shared access to your AWS account </li><li>Granular permissions </li></ul><p>You can grant different permissions to different people for different resources. </p><ul><li>secure access to AWS resources for applications that run on Amazon EC2 </li></ul><p>You can use IAM features to securely provide credentials for applications that run on EC2 instances. These credentials provide permissions for your application to access other AWS resources. </p><ul><li>Multi-factor authentication(MFA)</li><li>Identity federation </li></ul><p>You can allow users who already have passwords elsewhere—for example, in your corporate network or with an internet identity provider—to get temporary access to your AWS account.</p><h3 id="3-1-4-functionalities"><a href="#3-1-4-functionalities" class="headerlink" title="3.1.4 functionalities"></a>3.1.4 functionalities</h3><ul><li>manage users and their access </li><li>manage roles and their permissions </li><li>manage federated users and their permissions </li></ul><h2 id="3-2-How-IAM-works"><a href="#3-2-How-IAM-works" class="headerlink" title="3.2 How IAM works"></a>3.2 How IAM works</h2><h3 id="3-2-1-Elements-contained"><a href="#3-2-1-Elements-contained" class="headerlink" title="3.2.1 Elements contained"></a>3.2.1 Elements contained</h3><ul><li>Resources <ul><li>The user, role, group and policy objects that are stored in IAM. </li></ul></li><li>Identities <ul><li>The IAM resource objects taht are used to identofy and group.  </li></ul></li></ul><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html" target="_blank" rel="noopener">Understanding how IAM works</a></p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS essentials(3) - Core Services</title>
      <link href="/AWS-essentials-3-Core-Services/"/>
      <url>/AWS-essentials-3-Core-Services/</url>
      
        <content type="html"><![CDATA[<h1 id="1-AWS-global-infrastructure"><a href="#1-AWS-global-infrastructure" class="headerlink" title="1. AWS global infrastructure"></a>1. AWS global infrastructure</h1><h2 id="1-1-Regions"><a href="#1-1-Regions" class="headerlink" title="1.1 Regions"></a>1.1 Regions</h2><p>AWS Regions provide multiple, physically separated and isolated Availability Zones which are connected with low latency, high throughput, and highly redundant networking. </p><p><a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=gi&l=emea" target="_blank" rel="noopener">Region table</a></p><h2 id="1-2-Availability-Zones"><a href="#1-2-Availability-Zones" class="headerlink" title="1.2 Availability Zones"></a>1.2 Availability Zones</h2><p>These Availability Zones offer AWS customers an easier and more effective way to design and operate applications and databases, making them more highly available, fault tolerant, and scalable than traditional single datacenter infrastructures or multi-datacenter infrastructures. </p><p>Collection of data centers within a region. </p><p>isolate - protect from failures </p><p>AZs are pyhsically and logically seperated within a region. Own their own: </p><ol><li>uninterruptible power supply </li><li>cooling equipment </li><li>networking connectivity </li><li>backup generators </li></ol><h2 id="1-3-Edge-Locations"><a href="#1-3-Edge-Locations" class="headerlink" title="1.3 Edge Locations"></a>1.3 Edge Locations</h2><p>Content Delivery Network  —- Amazon CloudFront </p><p>Deliver content to customers </p><p>When a user requests content that you’re serving with CloudFront, the user is routed to the edge location that provides the lowest latency (time delay), so that content is delivered with the best possible performance.</p><p><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html" target="_blank" rel="noopener">CloudFront Developer Guide</a></p><h2 id="1-4-Local-Regions"><a href="#1-4-Local-Regions" class="headerlink" title="1.4 Local Regions"></a>1.4 Local Regions</h2><p>An AWS Local Region is a single datacenter designed to complement an existing AWS Region. Like all AWS Regions, AWS Local Regions are completely isolated from other AWS Regions. </p><h1 id="2-Virtual-Private-Cloud-VPC"><a href="#2-Virtual-Private-Cloud-VPC" class="headerlink" title="2. Virtual Private Cloud (VPC)"></a>2. Virtual Private Cloud (VPC)</h1><h2 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1 Introduction"></a>2.1 Introduction</h2><p>Amazon VPC enables you to launch AWS resources into a virtual network that you’ve defined. This virtual network closely resembles a traditional network that you’d operate in your own data center, with the benefits of using the scalable infrastructure of AWS.Consists of such features: </p><ul><li>A private, virtual network in the AWS Cloud <ul><li>Uses same concepts as on premise networking </li></ul></li><li>Allows complete control of network configuration<ul><li>Ability to isolate and expose resources inside VPC </li></ul></li><li>Offers several layers of security controls <ul><li>Ability to allow and deny specific internet and internal traffic </li></ul></li><li>Other AWS services deploy into VPC <ul><li>Services inherent security built into network </li></ul></li></ul><h2 id="2-2-Features"><a href="#2-2-Features" class="headerlink" title="2.2 Features"></a>2.2 Features</h2><ul><li><p>Build upon high availabilty of AWS regions and availability zones </p><ul><li>Amazon VPC lives within a region </li><li>Multiple VPCs per account </li></ul></li><li><p>Subnets   </p><ul><li>Used to divide Amazon VPC </li><li>Allow Amazon VPC to span multiple Azs </li><li>seperate public and private network </li></ul></li><li><p>Route tables </p><ul><li>Control traffic going out of the subnets </li></ul></li><li><p>Internet Gateway (IGW)</p><ul><li>Allows private subnet resources to access internet </li></ul></li><li><p>Network Access Control Lists(NACL)</p><ul><li>Control access to subnets; stateless </li></ul></li></ul><p><img src="https://i.loli.net/2020/01/30/3r4S8k2WYVHFqtf.png" alt="fig1.png"></p><h2 id="2-3-Subnets"><a href="#2-3-Subnets" class="headerlink" title="2.3 Subnets"></a>2.3 Subnets</h2><p>A subnet is a range of IP addresses in your VPC. You can launch AWS resources into a specified subnet. Use a public subnet for resources that must be connected to the internet, and a private subnet for resources that won’t be connected to the internet. </p><h1 id="3-AWS-Security"><a href="#3-AWS-Security" class="headerlink" title="3. AWS Security"></a>3. AWS Security</h1><h2 id="3-1-AWS-security-groups"><a href="#3-1-AWS-security-groups" class="headerlink" title="3.1 AWS security groups"></a>3.1 AWS security groups</h2><p>Filter traffic to your instances </p><p><img src="https://i.loli.net/2020/01/30/nzFWc4MZ86HimgC.png" alt="fig2.png"></p><p>Can configure the security rules, have multi rules. Web tier - application tier - database tier. </p><p>A security group acts as a virtual firewall for instances to control inbound and outbound traffic. Security group act at the instance level , not the subnet level. For each security group, you add rules that control the inbound traffic to instances, and a separate set of riles that control the outbound traffic. </p><h1 id="4-Compute-Services"><a href="#4-Compute-Services" class="headerlink" title="4. Compute Services"></a>4. Compute Services</h1><h2 id="4-1-Amazon-EC2"><a href="#4-1-Amazon-EC2" class="headerlink" title="4.1 Amazon EC2"></a>4.1 Amazon EC2</h2><p>Flexible configuration and control </p><p>maintain complete control of envs </p><p>EC2 overview </p><h3 id="4-1-1-What-is-EC2"><a href="#4-1-1-What-is-EC2" class="headerlink" title="4.1.1 What is EC2"></a>4.1.1 What is EC2</h3><p>EC2: <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html" target="_blank" rel="noopener">Elastic compute cloud</a> </p><p>Compute: different thing you can do with servers </p><ul><li>Application server </li><li>Web server </li><li>Database server </li><li>Game server </li><li>Mail server </li><li>Media server </li><li>Catalog server </li><li>File server </li><li>Computing server </li><li>Proxy server </li></ul><h3 id="4-1-2-Amazon-EC2-instances-instructions"><a href="#4-1-2-Amazon-EC2-instances-instructions" class="headerlink" title="4.1.2 Amazon EC2 instances instructions"></a>4.1.2 Amazon EC2 instances instructions</h3><p>need to select AMI(Amazon Machine Image), present for software choices </p><p>Select instance type(hard ware)</p><p>Configure network, storage, key pairs (Use key value pair to access the instance)</p><h3 id="4-1-3-Features-of-EC2"><a href="#4-1-3-Features-of-EC2" class="headerlink" title="4.1.3 Features of EC2"></a>4.1.3 Features of EC2</h3><ol><li>virtual computing env. known as instances </li><li>various comfigurations of CPU, memory, and networking capacity for your instances </li><li>secure login information for your instances using key pairs(AWS stores the public key, and you store the private key)</li><li>Sotrage volumes(temporory) and persistent storage volumes – Amazon Elastic Block Store</li><li>Firewall that enables you to specify the protocols, ports and source IP ranges that can reach your instances using security groups </li><li>static IPv4 addresses for dynamic cloud computing, known as Elastic IP adddresses</li><li>metadata, known as tags, that you can create and assign to your Amazon EC2 resources </li><li>Virtual networks you can create that are logically isolated from the rest of the AWS cloud</li></ol><h3 id="4-1-4-Security-best-practices"><a href="#4-1-4-Security-best-practices" class="headerlink" title="4.1.4 Security best practices"></a>4.1.4 Security best practices</h3><ol><li>Use AWS identiry and access Management(IAM) to control access to AWS resources, including instances. You can create IAM users and groups under your AWS account, assign security credentials to each, and control the access that each has to resources and services in AWS. </li><li>Restrict access by only allowing trusted hosts or networks to access ports on your instance. For example, you can restrict SSH access by restricting incoming traffic on port 22.</li></ol><h3 id="4-1-5-Instance-types"><a href="#4-1-5-Instance-types" class="headerlink" title="4.1.5 Instance types"></a>4.1.5 Instance types</h3><p>Instance type you specify determines the hardware of the host computer used for your instance. Each instance is provided with a consistent and predictable amount of CPU capacity, memory, storage. </p><ul><li>general purpose </li><li>compute optimized </li><li>memory optimized </li><li>storage optimized </li><li>accelerated computing </li></ul><h2 id="4-2-Lambda"><a href="#4-2-Lambda" class="headerlink" title="4.2 Lambda"></a>4.2 Lambda</h2><h3 id="4-2-1-Overviews"><a href="#4-2-1-Overviews" class="headerlink" title="4.2.1 Overviews"></a>4.2.1 Overviews</h3><p>AWS Lambda is a compute service that lets you run code without provisioning or managing servers. Pay for the compute time you consume. AWS Lambda runs your code on a high-availability compute infrastructure and performs all of the administration of the compute resources, <strong>including server and operating system maintenance, capacity provisioning and automatic scaling</strong>, code monitoring and logging.</p><p>fully managed serverless compute </p><p>event driven execution, respond to event </p><p>sub second metering </p><h3 id="4-2-2-benefits"><a href="#4-2-2-benefits" class="headerlink" title="4.2.2 benefits :"></a>4.2.2 benefits :</h3><ol><li>Lambda manages the compute fleet that offers a balance of memory, CPU, network and other resources. </li></ol><h3 id="4-2-3-Use-cases"><a href="#4-2-3-Use-cases" class="headerlink" title="4.2.3 Use cases"></a>4.2.3 Use cases</h3><ol><li>Run code in response to events, such as changes to data in an Amazon S3 bucket or an DynamoDB table</li><li>Run code in response to HTTP requests using Amazon API gateway</li><li>Invoke code using API calls made using AWS SDKs </li><li>Build serverless applications composed of functions that are triggered by events and automatically deploy them using AWS CodePipeline and AWS CodeBuild. </li></ol><p><img src="https://i.loli.net/2020/01/30/FND9g628EpyeMfG.png" alt="fig3.png"><br><img src="https://i.loli.net/2020/01/30/KMJhXORqAIUNBt3.png" alt="fig4.png"><br><img src="https://i.loli.net/2020/01/30/8bv7jq5etdTKH1W.png" alt="fig5.png"></p><h3 id="4-2-4-Lambda-Applications"><a href="#4-2-4-Lambda-Applications" class="headerlink" title="4.2.4 Lambda Applications"></a>4.2.4 Lambda Applications</h3><p>An AWS Lambda application is a combination of Lambda functions, event sources, and other resources that work together to perform tasks. You can use AWS CloudFormation and other tools to collect your application’s components into a single package that can be deployed and managed as one resource. </p><h3 id="4-2-5-Work-with-AWS-Lambda-Functions"><a href="#4-2-5-Work-with-AWS-Lambda-Functions" class="headerlink" title="4.2.5 Work with AWS Lambda Functions"></a>4.2.5 Work with AWS Lambda Functions</h3><ol><li><p><a href="https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html" target="_blank" rel="noopener">Working with AWS Lambda Functions</a></p></li><li><p><a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html" target="_blank" rel="noopener">AWS Lambda Limits</a></p></li></ol><ul><li>Concurrent Executions limit: 1000 </li><li>function timeout: 15 minutes </li><li>execution threads: 1024 </li></ul><ol start="3"><li>[Building Lambda Functions]</li></ol><ul><li>Lifecycle for an AWS lambda-based application<ul><li>authoring code<ul><li><a href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html" target="_blank" rel="noopener">programing model</a> - the format of the code    </li></ul></li><li>deploying code<ul><li>Package code and dependencies in a deployment package</li><li>upload the package to AWS Lambda to create Lambda function</li></ul></li><li>monitoring<ul><li>CloudWatch    </li></ul></li><li>troubleshooting</li></ul></li></ul><ol start="4"><li><a href="https://docs.aws.amazon.com/lambda/latest/dg/use-cases.html" target="_blank" rel="noopener">Using AWS Lambda With Other Services</a></li></ol><h3 id="4-2-6-Lambda-Concepts"><a href="#4-2-6-Lambda-Concepts" class="headerlink" title="4.2.6 Lambda Concepts"></a>4.2.6 Lambda Concepts</h3><ul><li>Function - A script or program that runs in AWS Lambda. Lambda passes invocation events to your function. The function processes an event and returns a response. </li><li>Runtimes – Lambda runtimes allow functions in different languages to run in the same base execution environment. You configure your function to use a runtime that matches your programming language. The runtime sits in-between the Lambda service and your function code, relaying invocation events, context information, and responses between the two. You can use runtimes provided by Lambda, or build your own. </li><li>Layers – Lambda layers are a distribution mechanism for libraries, custom runtimes, and other function dependencies. Layers let you manage your in-development function code independently from the unchanging code and resources that it uses. You can configure your function to use layers that you create, layers provided by AWS, or layers from other AWS customers.</li></ul><p>A <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html" target="_blank" rel="noopener">layer</a> is a ZIP archive that contains libraries, a custom runtime or other dependencies. With layers, you can use libraries in your function without needing to include them in your deployment package. Layers let you keep your deployment package small, which makes development easier. </p><ul><li>Event source – An AWS service, such as Amazon SNS, or a custom service, that triggers your function and executes its logic.</li><li>Downstream resources – An AWS service, such as DynamoDB tables or Amazon S3 buckets, that your Lambda function calls once it is triggered.</li><li>Log streams – While Lambda automatically monitors your function invocations and reports metrics to CloudWatch, you can annotate your function code with custom logging statements that allow you to analyze the execution flow and performance of your Lambda function to ensure it’s working properly.</li><li>AWS SAM – A model to define serverless applications. AWS SAM is natively supported by AWS CloudFormation and defines simplified syntax for expressing serverless resources. </li></ul><h2 id="4-3-AWS-Elastic-Beanstalk"><a href="#4-3-AWS-Elastic-Beanstalk" class="headerlink" title="4.3 AWS Elastic Beanstalk"></a>4.3 AWS Elastic Beanstalk</h2><h3 id="4-3-1-Overview"><a href="#4-3-1-Overview" class="headerlink" title="4.3.1 Overview"></a>4.3.1 Overview</h3><p>Quick get application into the cloud </p><p>Platform as a service </p><p>You can simply upload your code and Elastic Beanstalk automatically handles the deployment, from capacity provisioning, load balancing, auto-scaling to application health monitoring. At the same time, you retain full control over the AWS resources powering your application and can access the underlying resources at any time.</p><p>Allow quick deployment of your applications </p><p>Elastic Beanstalk provides:</p><ul><li>Application service</li><li>HTTP service</li><li>Operating system</li><li>Language interpreter </li><li>Host </li></ul><h1 id="5-Application-Load-Balancer"><a href="#5-Application-Load-Balancer" class="headerlink" title="5 Application Load Balancer"></a>5 Application Load Balancer</h1><h2 id="5-1-Service-Introduction"><a href="#5-1-Service-Introduction" class="headerlink" title="5.1 Service Introduction"></a>5.1 Service Introduction</h2><p>A load balancerr serves as the single point of contact for clients. The load balancer distributes incoming application traffic across multiple targets, such as EC2 instances in multiple Availability Zones. </p><p>A listener checks for connection requests from clients, using the protocol and port that you configure, and forwards requests to one or more target groups, based on the rules that you define. Each rule specifies a target group, condition, and priority. When the condition is met, the traffic is forwarded to the target group. You must define a default rule for each listener, and you can add rules that specify different target groups based on the content of the request </p><p>Each target group routes requests to one or more registered targets, such as EC2 instances, using the protocol and port number that you specify. You can register a target with multiple target groups. You can configure health checks on a per target group basis. Health checks are performed on all targets registered to a target group that is specified in a listener rule for your load balancer.</p><p>An Application Load Balancer functions at the application layer, <strong>the seventh layer</strong> of the Open Systems Interconnection (OSI) model. After the load balancer receives a request, it evaluates the listener rules in priority order to determine which rule to apply, and then selects a target from the target group for the rule action. You can configure listener rules to route requests to different target groups based on the content of the application traffic. Routing is performed independently for each target group, even when a target is registered with multiple target groups.</p><p>Part of the elastic load balancer service. Add some important features<br><img src="https://i.loli.net/2020/01/30/sHi7LhOGeYvw3Er.png" alt="fig6.png"></p><ol><li>Support more protocols  HTTP HTTPS HTTP/2 </li><li>cloudWatch Metrics   </li><li>Access logs </li><li>Health Checks </li></ol><h2 id="5-2-Key-Concepts"><a href="#5-2-Key-Concepts" class="headerlink" title="5.2 Key Concepts"></a>5.2 Key Concepts</h2><ol><li>Listeners: a process that cehcks for connection requests, using the protocol and port that you configure. Rules that you define for a listener determine how the load balancer routes requests to the targets in one or more target groups. </li><li>Target: A target is a destination for traffic based on the established listener rules </li><li>Target group: each target group routes requests to one or more registered targets using the protocol and port number specified. </li></ol><p><img src="https://i.loli.net/2020/01/30/8TBYo7tIHValjig.png" alt="fig7.png"></p><h2 id="5-3-Benefits-of-using-Application-load-balancer-instead-of-classic-load-balancer"><a href="#5-3-Benefits-of-using-Application-load-balancer-instead-of-classic-load-balancer" class="headerlink" title="5.3 Benefits of using Application load balancer instead of classic load balancer"></a>5.3 Benefits of using Application load balancer instead of classic load balancer</h2><ul><li>Support for path-based routing. You can configure rules for your listener that forward requests based on the URL in the request. This enables you to structure your application as smaller services, and route requests to the correct service based on the content of the URL.</li><li>Support for host-based routing. You can configure rules for your listener that forward requests based on the host field in the HTTP header. This enables you to route requests to multiple domains using a single load balancer.</li><li>Support for routing requests to multiple applications on a single EC2 instance. You can register each instance or IP address with the same target group using multiple ports.</li><li>Support for redirecting requests from one URL to another </li></ul><h2 id="5-4-Use-Cases"><a href="#5-4-Use-Cases" class="headerlink" title="5.4 Use Cases"></a>5.4 Use Cases</h2><ol><li>route request to different ports within a single instance.<br><img src="https://i.loli.net/2020/01/30/8125hJRUbkD3cwi.png" alt="fig8.png"></li></ol><h1 id="6-Elastic-Load-Balancer-classic-load-balancer"><a href="#6-Elastic-Load-Balancer-classic-load-balancer" class="headerlink" title="6. Elastic Load Balancer - classic load balancer"></a>6. Elastic Load Balancer - classic load balancer</h1><h2 id="6-1-Overview"><a href="#6-1-Overview" class="headerlink" title="6.1 Overview"></a>6.1 Overview</h2><p>A load balancer distributes workloads across multiple compute resources, such as virtual servers. Using a load balancer increases the availability and fault tolerance of your applications. </p><p>You can add and remove compute resources from your load balancer as your needs change, without disrupting the overall flow of requests to your applications.</p><p>You can <strong>configure health checks</strong>, which are used to monitor the health of the compute resources so that the load balancer can send requests only to the healthy ones. You can also <strong>offload the work of encryption and decryption to your load balancer</strong> so that your compute resources can focus on their main work.</p><p>Mainly consists of there types of load balancer: </p><ol><li>Application Load Balancer </li><li>Network Load Balancer</li><li>Classic Load Balancer </li></ol><p><a href="https://aws.amazon.com/elasticloadbalancing/features/#compare" target="_blank" rel="noopener">The comparison among those three</a></p><h2 id="6-2-How-does-it-work"><a href="#6-2-How-does-it-work" class="headerlink" title="6.2 How does it work?"></a>6.2 How does it work?</h2><p>A load balancer accepts incoming traffic from clients and routes requests to its registered targets. It also monitors the health of its registered targets and ensures that it routes traffic tonly to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners. A listener is a process that checks for connection requests. It is configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the targets.</p><h3 id="6-2-1-Cross-zone-load-balancing"><a href="#6-2-1-Cross-zone-load-balancing" class="headerlink" title="6.2.1 Cross zone load balancing"></a>6.2.1 Cross zone load balancing</h3><p>The nodes for your load balancer distribute requests from clients to registered targets. When cross-zone load balancing is enabled, each load balancer node distributes traffic across the registered targets in all enabled Availability Zones. When cross-zone load balancing is disabled, each load balancer node distributes traffic across the registered targets in its Availability Zone only.</p><h3 id="6-2-2-Request-Routing"><a href="#6-2-2-Request-Routing" class="headerlink" title="6.2.2 Request Routing"></a>6.2.2 Request Routing</h3><p>Before a client sends a request to your load balancer, it resolves the load balancer’s domain name using a Domain Name System (DNS) server. The DNS entry is controlled by Amazon, because your load balancers are in the amazonaws.com domain. The Amazon DNS servers return one or more IP addresses to the client, which are the IP addresses of the load balancer nodes for your load balancer. With Network Load Balancers, Elastic Load Balancing creates a network interface for each Availability Zone you enable. Each load balancer node in the Availability Zone uses this network interface to get a static IP address. You can optionally associate one Elastic IP address with each network interface when you create the load balancer.</p><p>As traffic to your application changes over time, Elastic Load Balancing scales your load balancer and updates the DNS entry. Note that the DNS entry also specifies the time-to-live (TTL) as 60 seconds, which ensures that the IP addresses can be remapped quickly in response to changing traffic.</p><p><img src="https://i.loli.net/2020/01/30/GRXtJqMcZyYvkAs.png" alt="fig9.png"></p><p><img src="https://i.loli.net/2020/01/30/oG3uYZ6OExWiQS4.png" alt="fig10.png"></p><p>Internet facing load balancers:<br><img src="https://i.loli.net/2020/01/30/OYdKufMSazqIbDQ.png" alt="fig11.png"></p><p>Internal Load Balancers: have DNS name only resolve private nodes<br><img src="https://i.loli.net/2020/01/30/IO24SbGetLaMAfo.png" alt="fig12.png"></p><h3 id="6-2-3-HTTP-Connections"><a href="#6-2-3-HTTP-Connections" class="headerlink" title="6.2.3 HTTP Connections"></a>6.2.3 HTTP Connections</h3><p>Classic Load Balancers use <strong>pre-open connections</strong> but Application Load Balancers do not. Both Classic Load Balancers and Application Load Balancers use <strong>connection multiplexing</strong>. This means that <strong>requests from multiple clients on multiple front-end connections can be routed to a given target through a single back-end connection</strong>. Connection multiplexing improves latency and reduces the load on your applications. To prevent connection multiplexing, disable HTTP keep-alives by setting the Connection: close header in your HTTP responses.</p><h2 id="6-3-Use-cases"><a href="#6-3-Use-cases" class="headerlink" title="6.3 Use cases"></a>6.3 Use cases</h2><ol><li>Access through single point </li><li>Decouple appliation environment </li><li>Provide high availability and fault tolerance </li><li>Increase elasticity and scalability </li></ol><h1 id="7-Auto-Scaling"><a href="#7-Auto-Scaling" class="headerlink" title="7. Auto Scaling"></a>7. Auto Scaling</h1><h2 id="7-1-Service-Introduction"><a href="#7-1-Service-Introduction" class="headerlink" title="7.1 Service Introduction"></a>7.1 Service Introduction</h2><p>Auto scaling helps you ensure you have the correct number of EC2 instances available to handle the load for your application. </p><p>Using cloudWatch to monitor </p><h3 id="7-1-1-Scaling-out-and-scaling-in"><a href="#7-1-1-Scaling-out-and-scaling-in" class="headerlink" title="7.1.1 Scaling out and scaling in"></a>7.1.1 Scaling out and scaling in</h3><p><img src="https://i.loli.net/2020/01/30/cHXtoB9IOURiL52.png" alt="fig13.png"></p><ul><li>Auto scaling components<ul><li>launch configuration </li><li>auto scaling group <ul><li>VPC and subnets </li><li>load balancer</li><li>minimum instances </li><li>maximum instances </li><li>desired capacity </li></ul></li><li>auto scaling policy <ul><li>scheduled</li><li>on demand </li><li>scale out policy</li><li>scale in policy </li></ul></li></ul></li></ul><h3 id="7-1-2-Dynamic-auto-scaling"><a href="#7-1-2-Dynamic-auto-scaling" class="headerlink" title="7.1.2 Dynamic auto scaling"></a>7.1.2 Dynamic auto scaling</h3><p><img src="https://i.loli.net/2020/01/30/pKFL5YWvHVOtuJw.png" alt="fig14.png"></p><p>CloudWatch detect the metrics and trigger auto scaling events. </p><h1 id="8-Amazon-Elastic-Block-Store-EBS"><a href="#8-Amazon-Elastic-Block-Store-EBS" class="headerlink" title="8. Amazon Elastic Block Store(EBS)"></a>8. Amazon Elastic Block Store(EBS)</h1><p>Amazon Elastic Block Store (Amazon EBS) provides block level storage volumes for use with EC2 instances. EBS volumes are highly available and reliable storage volumes that can be attached to any running instance that is in the same Availability Zone. </p><p>Amazon EBS is recommended when data must be quickly accessible and requires long-term persistence. EBS volumes are particularly well-suited for use as the primary storage for file systems, databases, or for any applications that require fine granular updates and access to raw, unformatted, block-level storage. </p><p>you can launch your EBS volumes as encrypted volumes.</p><p>There are three types of volumes in Amazon EBS. To understand the difference, you need to know what IOPS is. <strong>“IOPS” stands for input/output operations per second or, put it simply, the maximum amount of read/write operations you are able to perform per second.</strong> To <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html" target="_blank" rel="noopener">choose the right Amazon EBS volume type</a> you need to know IOPS requirements for your application.</p><h2 id="8-1-General-Purpose-Volumes"><a href="#8-1-General-Purpose-Volumes" class="headerlink" title="8.1 General Purpose Volumes"></a>8.1 General Purpose Volumes</h2><p>Designed for a broad range of tasks, General Purpose Volumes are backed with Solid State Drive (SSD). The baseline performance of 3 IOPS/GB and a possibility to burst up to 10,000 IOPS makes them a good fit for AWS databases that need a lot of read and write operations, like PostgreSQL, MS SQL or Oracle databases.</p><h2 id="8-2-Provisioned-IOPS-SSD-Volumes"><a href="#8-2-Provisioned-IOPS-SSD-Volumes" class="headerlink" title="8.2 Provisioned IOPS (SSD) Volumes"></a>8.2 Provisioned IOPS (SSD) Volumes</h2><p>By expanding the bandwidth bottleneck, Provisioned IOPS Volumes allow buying read/write operations on demand regardless of the volume capacity. This type of EBS volumes is backed with the same SSD but designed for heavy workloads from 30 IOPS/GB up to 20,000 IOPS. Multiple Provisioned IOPS volumes can be striped thus ensuring up to 48,000 IOPS or 800 MBps of throughput.</p><h2 id="8-3-Magnetic-Volumes"><a href="#8-3-Magnetic-Volumes" class="headerlink" title="8.3 Magnetic Volumes"></a>8.3 Magnetic Volumes</h2><p>The best way to think of the Magnetic Volumes type is as of a low-cost volume that can be used with testing and development environments on Amazon EC2. It can also be used with applications that don’t require a lot of read/write operations. Instead of SSD, this type is based on magnetic HDD drives, thus the IOPS baseline is within the range of 100 up to hundreds of IOPS. Magnetic Volumes can also become a starting point in working with Amazon EC2 — once you understand your IOPS demands, you can select the type of volume that fits best.</p><h1 id="9-Amazon-Simple-Storage-Service"><a href="#9-Amazon-Simple-Storage-Service" class="headerlink" title="9. Amazon Simple Storage Service"></a>9. Amazon Simple Storage Service</h1><h2 id="9-1-Introduction"><a href="#9-1-Introduction" class="headerlink" title="9.1 Introduction"></a>9.1 Introduction</h2><p>No need to manage any infrastructure yourself. S3 help you manage your storage, it can store unlimited number of objects, access any time, from anywhere; rich security controls. </p><p>Amazon Simple Storage Service (Amazon S3) is storage for the Internet. You can use Amazon S3 to store and retrieve any amount of data at any time, from anywhere on the web. You can accomplish these tasks using the AWS Management Console, which is a simple and intuitive web interface. </p><h3 id="9-1-1-steps"><a href="#9-1-1-steps" class="headerlink" title="9.1.1 steps"></a>9.1.1 steps</h3><ol><li>create a bucket </li><li>add an object to a bucket </li><li>view an object </li><li>move an object </li><li>delete an object and bucket </li></ol><h3 id="9-1-2-bucket"><a href="#9-1-2-bucket" class="headerlink" title="9.1.2 bucket"></a>9.1.2 bucket</h3><p>S3 stores data as objects within buckets. An object consists of a file and optionally any metadata that describes the file. </p><p>To store an object in Amazon S3, you upload the file you want to store to a bucket. When you upload a file, you can <strong>set permissions</strong> on the object as well as any metadata.</p><p>Buckets are the <strong>containers</strong> for objects. You can have one or more buckets. For each bucket, you can control access to it (who can create, delete, and list objects in the bucket), view access logs for it and its objects, and choose the geographical region where Amazon S3 will store the bucket and its contents.</p><p>Need a bucket to hold the data </p><p>associate in region, will make duplicate  </p><p>disigned for seamless scaling </p><h2 id="9-2-Use-cases"><a href="#9-2-Use-cases" class="headerlink" title="9.2 Use cases"></a>9.2 Use cases</h2><ol><li>store application assets </li><li>static web hosting </li><li>backup and disaster recovery </li><li>staging area for big data </li></ol><h1 id="10-Amazon-Glacier"><a href="#10-Amazon-Glacier" class="headerlink" title="10. Amazon Glacier"></a>10. Amazon Glacier</h1><h2 id="10-1-Overview"><a href="#10-1-Overview" class="headerlink" title="10.1 Overview"></a>10.1 Overview</h2><p>Data archiving solition </p><p>long tern storage at low cost </p><p>access limited by vault polocies </p><p>for data not accessed frequently </p><p><img src="https://i.loli.net/2020/01/30/gPXGKzaIuQBSpoy.png" alt="fig15.png"></p><p>It can take a really long time to retrieve data from glacier. bulk, standard, expedited. </p><p>Amazon Simple Storage Service Glacier (Amazon S3 Glacier) is a storage service optimized for infrequently used data, or “cold data.” The service provides durable and extremely low-cost storage with security features for data archiving and backup. With Amazon S3 Glacier, you can store your data cost effectively for months, years, or even decades. Amazon S3 Glacier enables you to offload the administrative burdens of operating and scaling storage to AWS, so you don’t have to worry about capacity planning, hardware provisioning, data replication, hardware failure detection and recovery, or time-consuming hardware migrations. </p><h2 id="10-2-Details"><a href="#10-2-Details" class="headerlink" title="10.2 Details"></a>10.2 Details</h2><h3 id="10-2-1-archive"><a href="#10-2-1-archive" class="headerlink" title="10.2.1 archive"></a>10.2.1 archive</h3><p>An archive can be any data such as a photo, video, or document and is a base unit of storage in glacier. </p><h3 id="10-2-2-vault"><a href="#10-2-2-vault" class="headerlink" title="10.2.2 vault"></a>10.2.2 vault</h3><p>Container to store archive. When creating a vault, you specify a name and choose an AWS region where you want to create the vault.  Within a Region, an account must use unique vault names. An AWS account can create same-named vaults in different Regions.</p><h3 id="10-2-3-access-policy"><a href="#10-2-3-access-policy" class="headerlink" title="10.2.3 access policy"></a>10.2.3 access policy</h3><p>who can access </p><h3 id="10-2-4-Job"><a href="#10-2-4-Job" class="headerlink" title="10.2.4 Job"></a>10.2.4 Job</h3><p>Glacier jobs can perform a select query on an archive, retrieve an archive, or get an inventory of a vault. When performing a query on an archive, you initiate a job providing a SQL query and list of Glacier archive objects. Glacier Select runs the query in place and writes the output results to Amazon S3.</p><h2 id="10-3-use-cases"><a href="#10-3-use-cases" class="headerlink" title="10.3 use cases"></a>10.3 use cases</h2><ol><li>archive database snapshots and log files </li><li>low cost enables more comprehensive backups </li><li>archive older documents, audio, video </li></ol><h1 id="11-Amazon-Relational-Database-Service-Amazon-RDS"><a href="#11-Amazon-Relational-Database-Service-Amazon-RDS" class="headerlink" title="11. Amazon Relational Database Service (Amazon RDS)"></a>11. Amazon Relational Database Service (Amazon RDS)</h1><h2 id="11-1-Overview"><a href="#11-1-Overview" class="headerlink" title="11.1 Overview"></a>11.1 Overview</h2><h3 id="11-1-1-Chanllenges-of-relational-databases"><a href="#11-1-1-Chanllenges-of-relational-databases" class="headerlink" title="11.1.1 Chanllenges of relational databases"></a>11.1.1 Chanllenges of relational databases</h3><ol><li>server maintenance and energy footprint </li><li>software install and patches </li><li>database backups and high availability </li><li>limits on scalability </li><li>data security </li><li>os install and patches </li></ol><h3 id="11-1-2-RDS-intro"><a href="#11-1-2-RDS-intro" class="headerlink" title="11.1.2 RDS intro"></a>11.1.2 RDS intro</h3><p>Amazon RDS is a managed service that sets up and operates a relational database in the cloud. </p><p>AWS help you manage: </p><ul><li>OS installation and patches </li><li>database software install and patches </li><li>database backups </li><li>high availability </li><li>scaling </li><li>power and rack &amp; stack </li><li>server maintenance </li></ul><p>It support mainstream relation databases: </p><p><img src="https://i.loli.net/2020/01/30/FZlbiXEhuYKSsJD.png" alt="fig16.png"></p><h2 id="11-2-Use-cases"><a href="#11-2-Use-cases" class="headerlink" title="11.2 Use cases"></a>11.2 Use cases</h2><p><img src="https://i.loli.net/2020/01/30/k1PfHQxg7EYmyNp.png" alt="fig17.png"></p><h1 id="12-Amazon-DynamoDB"><a href="#12-Amazon-DynamoDB" class="headerlink" title="12. Amazon DynamoDB"></a>12. Amazon DynamoDB</h1><h2 id="12-1-Overview"><a href="#12-1-Overview" class="headerlink" title="12.1 Overview"></a>12.1 Overview</h2><h3 id="12-1-1-Features"><a href="#12-1-1-Features" class="headerlink" title="12.1.1 Features"></a>12.1.1 Features</h3><ul><li>NoSQL databse tables as a service </li><li>store as many items as you want </li><li>items may have differing attributes </li><li>low latency queries </li><li>scalable read/ write throughput </li></ul><h3 id="12-1-2-Partitioning"><a href="#12-1-2-Partitioning" class="headerlink" title="12.1.2 Partitioning"></a>12.1.2 Partitioning</h3><p>as table grows, table partitioned by key </p><p>query by key to find items efficiently </p><p>scan to find items by any attribute, less efficient </p><h2 id="12-2-Use-cases"><a href="#12-2-Use-cases" class="headerlink" title="12.2 Use cases"></a>12.2 Use cases</h2><ul><li>web </li><li>mobile apps </li><li>internet of things </li><li>ad tech </li></ul><h1 id="13-Redshift"><a href="#13-Redshift" class="headerlink" title="13. Redshift"></a>13. Redshift</h1><h2 id="13-1-Redshift-introduction"><a href="#13-1-Redshift-introduction" class="headerlink" title="13.1 Redshift introduction"></a>13.1 Redshift introduction</h2><ul><li>data warehouse, to analyze the data with query. </li><li>parallel processing architecture </li></ul><p><img src="https://i.loli.net/2020/01/30/BJDCT718z9gPV3Q.png" alt="fig18.png"></p><p>Amazon Redshift is a fast, fully managed, petabyte-scale data warehouse service that makes it simple and cost-effective to efficiently analyze all your data using your existing business intelligence tools. It is optimized for datasets ranging from a few hundred gigabytes to a petabyte or more and costs less than $1,000 per terabyte per year, a tenth the cost of most traditional data warehousing solutions.</p><h2 id="13-2-Overview"><a href="#13-2-Overview" class="headerlink" title="13.2 Overview"></a>13.2 Overview</h2><h3 id="13-2-1-Cluster-management"><a href="#13-2-1-Cluster-management" class="headerlink" title="13.2.1 Cluster management"></a>13.2.1 Cluster management</h3><p>A cluster is a set of nodes, which consists of a leader node and one or more compute nodes, The type and number of compute nodes that you need depends on the size of your data, the number of queries you will execute, and the query execution performance that you need.</p><h2 id="13-3-use-cases"><a href="#13-3-use-cases" class="headerlink" title="13.3 use cases"></a>13.3 use cases</h2><ol><li><p>Enterprise Data Warehouse (EDW)</p></li><li><p>Big Data </p></li><li><p>Saas </p></li></ol><ul><li>scale the data warehouse capacity as demand grows </li><li>add analytic functionality to applications </li><li>reduce hardware and software costs by an order of magnitude </li></ul><h1 id="14-Amazon-Aurora"><a href="#14-Amazon-Aurora" class="headerlink" title="14. Amazon Aurora"></a>14. Amazon Aurora</h1><h2 id="14-1-Overview"><a href="#14-1-Overview" class="headerlink" title="14.1 Overview"></a>14.1 Overview</h2><p>mysql relational database </p><p>It is designed to deliver the speed and reliability of high-end commercial databases in a simple and cost-effective manner. Aurora is designed to be compatible with MySQL 5.6 and delivers five times the throughput of standard MySQL running on the same hardware. DBAs are able to save time on planning backup storage disks, as data is continuously backed up to AWS S3 in real time, with no performance impact to the end user. </p><h2 id="14-2-benefits"><a href="#14-2-benefits" class="headerlink" title="14.2 benefits"></a>14.2 benefits</h2><p><img src="https://i.loli.net/2020/01/30/FLU3aykfVqnptX8.png" alt="fig19.png"></p><p><img src="https://i.loli.net/2020/01/30/E6pSOTLwcXixBgP.png" alt="fig20.png"></p><h2 id="15-Trused-Advisor"><a href="#15-Trused-Advisor" class="headerlink" title="15. Trused Advisor"></a>15. Trused Advisor</h2><p>Used to keep track of aws resources. – a dashboard for all the risks and warnings that you can take actions to save money </p><p>Detect your usage in four categories: </p><ol><li>cost optimization </li><li>performance </li><li>security </li><li>fault tolerance </li></ol>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS essentials(2) - Cloud Concepts</title>
      <link href="/AWS-essentials-2-Cloud-Concepts/"/>
      <url>/AWS-essentials-2-Cloud-Concepts/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Cloud-computing"><a href="#1-Cloud-computing" class="headerlink" title="1. Cloud computing"></a>1. Cloud computing</h1><p>Before cloud, bring a lot of waste. Cause you have to build your own server. </p><p>After aws, initiated within seconds; treat these as temprorary and disposable; free from the inflexibility and constraints. </p><h1 id="2-strengths-of-cloud"><a href="#2-strengths-of-cloud" class="headerlink" title="2. strengths of cloud"></a>2. strengths of cloud</h1><h2 id="2-1-Agility"><a href="#2-1-Agility" class="headerlink" title="2.1 Agility"></a>2.1 Agility</h2><h3 id="2-1-1-speed"><a href="#2-1-1-speed" class="headerlink" title="2.1.1 speed"></a>2.1.1 speed</h3><ol><li><p>Global reach </p></li><li><p>Dramatic increase in agility </p></li></ol><h3 id="2-1-2-experimentation"><a href="#2-1-2-experimentation" class="headerlink" title="2.1.2. experimentation"></a>2.1.2. experimentation</h3><ol><li><p>operations as code </p></li><li><p>safely experiment </p></li></ol><p>can spin up servers in minutes for experimenting; can return or re-purpose servers </p><ol start="3"><li>Testing using different configurations </li><li>AWS cloudFormation enables templated environments </li></ol><h3 id="2-1-3-culture-of-innovation"><a href="#2-1-3-culture-of-innovation" class="headerlink" title="2.1.3. culture of innovation"></a>2.1.3. culture of innovation</h3><ol><li>Experiment quickly with low cost/ risk </li></ol><h3 id="2-1-4-AWS-Infrastructure"><a href="#2-1-4-AWS-Infrastructure" class="headerlink" title="2.1.4 AWS Infrastructure"></a>2.1.4 AWS Infrastructure</h3><p>To realize elasticity, scalability and reliability of computing resources, aws is build around region and availability zones. </p><ul><li><p>region </p><ul><li>physical location in the world </li><li>contains multiple AZs</li></ul></li><li><p>availability zones </p><ul><li>one or more discrete data centers </li><li>redundant power/ networking/ connectivity </li><li>housed in separate facilities </li><li>fault tolerance <ul><li>applications operational during component failure </li><li>build-in redundancy of components </li></ul></li><li>High availability <ul><li>systems always functioning and accessible </li><li>downtime is minimized as much as possible </li><li>without human intervention </li></ul></li></ul></li></ul><h2 id="2-2-Elasticity-scalability-and-high-performance"><a href="#2-2-Elasticity-scalability-and-high-performance" class="headerlink" title="2.2 Elasticity, scalability and high performance"></a>2.2 Elasticity, scalability and high performance</h2><ol><li>Tools to run a wide range of applications </li><li>auto scaling and elastic load balancing, scale up/ down based on demand </li><li>deploy your system in multiple regions, low latency and better experience</li><li>innocative services and cutting-edge technology </li><li>virtually any workload </li></ol><h2 id="2-3-Security-and-Compliance"><a href="#2-3-Security-and-Compliance" class="headerlink" title="2.3 Security and Compliance"></a>2.3 Security and Compliance</h2><ol><li>Customer retains control over region where data located </li><li>Security auditing often periodic and manual </li><li>AWS cloud provides governance capabilities </li></ol><h2 id="2-4-Reliability"><a href="#2-4-Reliability" class="headerlink" title="2.4 Reliability"></a>2.4 Reliability</h2><ol><li>Ability to recover from failures </li><li>Dynamically acquire resources to meet demand and mitigate disruptions </li></ol>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Security </tag>
            
            <tag> Agility </tag>
            
            <tag> Elasticity </tag>
            
            <tag> Reliability </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS essentials(1) - introduction</title>
      <link href="/AWS-essentials-1-introduction/"/>
      <url>/AWS-essentials-1-introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="1-AWS-Cloud-Concepts"><a href="#1-AWS-Cloud-Concepts" class="headerlink" title="1. AWS Cloud Concepts"></a>1. AWS Cloud Concepts</h1><ol><li>Introduction to cloud</li><li>Introduction to the AWS Cloud</li></ol><h1 id="2-AWS-Core-Services"><a href="#2-AWS-Core-Services" class="headerlink" title="2. AWS Core Services"></a>2. AWS Core Services</h1><ol><li>Overview of Services and Categories </li><li>Introduction to the AWS Global Infrastructure </li><li>Introduction to Amazon VPC </li><li>Introduction to Security Groups </li><li>Introduction to Amazon EC2</li><li>Introduction to Amazon Elastic Block Store </li><li>Introduction to Amazon S3</li><li>Introduction to AWS Database Solutions </li></ol><h1 id="3-AWS-Security"><a href="#3-AWS-Security" class="headerlink" title="3. AWS Security"></a>3. AWS Security</h1><ol><li>Introduction to AWS Security </li><li>The AWS Shared Responsibility Model </li><li>AWS Access Control and Management </li><li>AWS Security Compliance Programs </li><li>AWS Security Resources </li></ol><h1 id="4-AWS-architecting"><a href="#4-AWS-architecting" class="headerlink" title="4. AWS architecting"></a>4. AWS architecting</h1><ol><li>Introduction to the Well-Architected Framework </li><li>Reference Architecture: Fault Tolerance and High Availability </li><li>Reference Architecture: Web Hosting </li></ol><h1 id="5-AWS-Pricing-and-Support"><a href="#5-AWS-Pricing-and-Support" class="headerlink" title="5. AWS Pricing and Support"></a>5. AWS Pricing and Support</h1><ol><li>Fundamentals of Pricing </li><li>Pricing details for EC2, S3, EBS, RDS, CloudFront </li><li>TCO calculator Overview </li><li>AWS support Plans Overview </li></ol>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECS - Elastic Container Service</title>
      <link href="/ECS-Elastic-Container-Service/"/>
      <url>/ECS-Elastic-Container-Service/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><ul><li>Highly scalable, fast, container management service that makes it easy to run, stop and maange docker containers on a cluster. </li></ul><p><img src="https://i.loli.net/2020/01/30/bgWNQv1M27fEza3.png" alt="fig1.png"></p><h1 id="2-Concepts"><a href="#2-Concepts" class="headerlink" title="2. Concepts"></a>2. Concepts</h1><ul><li><p>Containers</p><ul><li>Application components must be architected to run in containers </li><li>a standardized unit of development </li><li>contain everything application needs<ul><li>code </li><li>runtime </li><li>system tools </li><li>libraries </li></ul></li></ul></li><li><p>Images</p><ul><li>containers are created here</li><li>A read only templates</li></ul></li><li><p>Registry</p><ul><li>used to store images  </li></ul></li><li><p>Task </p><ul><li>text file in JSON </li><li>describes 1-10 containers to form your application </li></ul></li><li><p>Cluster </p><ul><li>logical group of resources  </li></ul></li><li><p>ECS Task scheduler</p><ul><li>responsible for placing tasks within cluster  <h1 id="3-Features"><a href="#3-Features" class="headerlink" title="3. Features"></a>3. Features</h1></li></ul></li><li><p>Regional service </p></li></ul><h1 id="4-Steps-for-starting-with-Fargate"><a href="#4-Steps-for-starting-with-Fargate" class="headerlink" title="4. Steps for starting with Fargate"></a>4. Steps for starting with Fargate</h1><ul><li>Create a task definition </li><li>Configure the service <ul><li>a service launches and maintains a specified number of copies of the task definition in cluster   </li></ul></li><li>configure the cluster </li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> ECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Overview</title>
      <link href="/Elasticsearch-Overview/"/>
      <url>/Elasticsearch-Overview/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><h2 id="1-1-Intro"><a href="#1-1-Intro" class="headerlink" title="1.1 Intro"></a>1.1 Intro</h2><ul><li>Full-text search</li><li>Analytics engine </li><li>Can analyze big volumes of data in near real time </li><li>used as the underlying engine/ tech that powers applications that have complex search features and requirements. </li></ul><h2 id="1-2-Use-cases"><a href="#1-2-Use-cases" class="headerlink" title="1.2 Use cases"></a>1.2 Use cases</h2><ol><li>online web store - allow customers to search for products. - use Elasticsearch to store entire product catelog and inventory. Provide search and autocomplete suggestions for them. </li><li>collect log or transaction data - mine data to look for trends, statistics, summarizations, or anomalies </li><li>price alert platform - scrape vendor prices, push them into Elasticsearch and use its reverse-search (Percolator) capability to match price movements against customer queries and eventually push the alerts out to the customer once matches are found</li><li>analytics/business-intelligence needs and want to quickly investigate, analyze, visualize, and ask ad-hoc questions on a lot of data (think millions or billions of records). In this case, you can use Elasticsearch to store data and then use Kibana to build custom dashboards that can visualize aspects of data. Additionally, you can use the Elasticsearch aggregations functionality to perform complex business intelligence queries against your data.</li></ol><h2 id="1-3-Basic-concepts"><a href="#1-3-Basic-concepts" class="headerlink" title="1.3 Basic concepts"></a>1.3 Basic concepts</h2><h3 id="1-3-1-NRT"><a href="#1-3-1-NRT" class="headerlink" title="1.3.1 NRT"></a>1.3.1 NRT</h3><p>Near Realtime: it only has a slight latency from the time you index a document until the time it becomes searchable. </p><h3 id="1-3-2-Cluster"><a href="#1-3-2-Cluster" class="headerlink" title="1.3.2 Cluster"></a>1.3.2 Cluster</h3><p>A cluster is a collection of one or more nodes <strong>(servers)</strong> that together <strong>holds your entire data</strong> and provides <strong>federated indexing and search capabilities</strong> across all nodes.</p><h3 id="1-3-3-Node"><a href="#1-3-3-Node" class="headerlink" title="1.3.3 Node"></a>1.3.3 Node</h3><p>A node is a single server that is part of your cluster, stores your data, and participates in the cluster’s indexing and search capabilities. </p><h3 id="1-3-4-Index"><a href="#1-3-4-Index" class="headerlink" title="1.3.4 Index"></a>1.3.4 Index</h3><p>An index is a collection of documents that have somewhat similar characteristics. For example, you can have an index for customer data, another index for a product catalog, and yet another index for order data. </p><p>An index is <strong>identified by a name</strong> (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it.</p><h3 id="1-3-5-Document"><a href="#1-3-5-Document" class="headerlink" title="1.3.5 Document"></a>1.3.5 Document</h3><p>A document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in JSON (JavaScript Object Notation) which is a ubiquitous internet data interchange format.</p><p>Within an index/type, you can store as many documents as you want. Note that although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index.</p><h3 id="1-3-6-Shards-amp-Replicas"><a href="#1-3-6-Shards-amp-Replicas" class="headerlink" title="1.3.6 Shards &amp; Replicas"></a>1.3.6 Shards &amp; Replicas</h3><p>An index can potentially store a large amount of data that can exceed the hardware limits of a single node. For example, a single index of a billion documents taking up 1TB of disk space may not fit on the disk of a single node or may be too slow to serve search requests from a single node alone.</p><p>To solve this problem, Elasticsearch provides the ability to <strong>subdivide your index into multiple pieces called shards.</strong> When you create an index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and independent “index” that can be hosted on any node in the cluster.</p><p>Sharding brings you several benefits: </p><ol><li>Allow you to horizontally <strong>split/ scale content volume</strong> </li><li>Allow you to <strong>distribute and parallelize</strong> operations across shards thus increasing performance/ throughput </li></ol><p>Mechanics of how a shard is distributed and how its documents are aggregated back into search reqeusts are completely managed by elasticSearch. </p><p>To summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards).</p><h1 id="2-Benefits"><a href="#2-Benefits" class="headerlink" title="2. Benefits"></a>2. Benefits</h1><ol><li>search faster compared with database </li><li>During an indexing operation, Elasticsearch converts raw data such as log files or message files into internal documents and stores them in a basic data structure similar to a JSON object. Each document is a simple set of correlating keys and values: the keys are strings, and the values are one of numerous data types—strings, numbers, dates, or lists.</li></ol><h1 id="3-Where-do-the-Files-come-from"><a href="#3-Where-do-the-Files-come-from" class="headerlink" title="3. Where do the Files come from?"></a>3. Where do the Files come from?</h1><p>Elasticsearch uses Lucene under the hood to handle the indexing and querying on the shard level, the files in the data directory are written by both Elasticsearch and Lucene. </p><p>Lucene is responsible for writing and maintaining the L<strong>ucene index files while Elasticsearch writes metadata related to features on top of Lucene</strong>, such as field mappings, index settings and other cluster metadata – end user and supporting features that do not exist in the low-level Lucene but are provided by Elasticsearch.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html</a> </li><li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a> </li><li><a href="https://www.elastic.co/blog/found-dive-into-elasticsearch-storage" target="_blank" rel="noopener">https://www.elastic.co/blog/found-dive-into-elasticsearch-storage</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elastic Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS X-Ray Intro(Java)</title>
      <link href="/AWS-X-Ray-Intro-Java/"/>
      <url>/AWS-X-Ray-Intro-Java/</url>
      
        <content type="html"><![CDATA[<p>Fancy tech! You now can trace the performance not only for request and response, also about calls that your application makes to downstream AWS resources, microservices, databases and HTTP web APIs with AWS X-ray! </p><h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><h2 id="1-1-What-does-X-ray-do"><a href="#1-1-What-does-X-ray-do" class="headerlink" title="1.1 What does X-ray do?"></a>1.1 What does X-ray do?</h2><ul><li>service that collects data about requests that your application serves</li><li>provide tools to view, filter, gain insights into that data </li><li>Can see detailed information not only about the request and response, but also about calls that your application makes to downstream AWS resources, microservices, databases and HTTP web APIs. </li></ul><h2 id="1-2-X-ray-SDK-provides"><a href="#1-2-X-ray-SDK-provides" class="headerlink" title="1.2 X-ray SDK provides"></a>1.2 X-ray SDK provides</h2><ul><li>Interceptors: add to your code to trace incoming HTTP requests </li><li>Client Handlers: instrument AWS SDK clients that your application uses to call other AWS services </li><li>An HTTP clinet to use to to instrument calls to other internal and external HTTP web services </li></ul><h2 id="1-3-Mechanism"><a href="#1-3-Mechanism" class="headerlink" title="1.3 Mechanism"></a>1.3 Mechanism</h2><p>SDK sends JSON segment documents to a daemon process listening for UDP traffic. <strong><em>The X-Ray daemon buffers segments in a queue and uploads them to X-Ray in batches</em></strong></p><p>X-Ray use the trace data to generate a detailed service graph, which shows the client, your front-end service, and backend services that your front-end service calls to process requests and persist data.</p><h1 id="2-Use-cases-and-requirement"><a href="#2-Use-cases-and-requirement" class="headerlink" title="2. Use cases and requirement"></a>2. Use cases and requirement</h1><ul><li><p>Use X-Ray SDK and AWS service integration to instrument requests to your applications that are running locally or on AWS compute services. </p></li><li><p>X-Ray SDK records data about <strong>incoming and outgoing requests</strong> and sends it to the X-Ray daemon(relays the data in batches to X-Ray)</p></li><li><p>When your application calls DDB to retrieve user information from a DDB table, the X-Ray SDK records data from both <strong>the client request and the downstream call</strong> to DynamoDB. </p></li><li><p>Service Integration </p><ul><li>Add tracing headers to incoming requests </li><li>send trace data to X-Ray </li><li>run the X-Ray daemon </li></ul></li><li><p>Java Integration </p><ul><li>Add a servlet filter </li></ul></li><li><p>Supported AWS services</p><ul><li>AWS lambda </li><li>Amazon API Gateway </li><li>Elastic Load Balancing </li><li>AWS Elastic ZBeanstalk </li></ul></li><li><p>Code and configuration changes </p><ul><li>Detailed tracing of front-end and downstream calls requires only <strong>minimal changes to build and deploy-time configuration</strong>.</li><li><strong>AWS resource configuration</strong>: Change AWS resource settings to <strong>instrument requests to a Lambda function</strong>. Run the X-Ray daemon on the instances in your Elastic Beanstalk environment by changing an option setting</li><li><strong>Build configuration</strong>: Take X-Ray SDK for Java submodules as a <strong>compile-time dependency</strong> to instrument all downstream requests to AWS services, and to resources such as Amazon DynamoDB tables, Amazon SQS queues, and Amazon S3 buckets.</li><li><strong>Application configuration</strong>: To instrument incoming HTTP requests, add a <strong>servlet filter</strong> to your Java application</li><li><strong>Class or object configuration</strong> – To instrument outgoing HTTP calls in Java, import the X-Ray SDK for Java version of HttpClientBuilder instead of the Apache.org version.</li><li><strong>Functional Changes</strong>: Add a *<em>request handler *</em>to an AWS SDK client to instrument calls that it makes to AWS services. Create subsegments to group downstream calls, and add debug information to segments with annotations and metadata.</li></ul></li></ul><h1 id="3-Concepts"><a href="#3-Concepts" class="headerlink" title="3. Concepts"></a>3. Concepts</h1><h2 id="3-1-Segments"><a href="#3-1-Segments" class="headerlink" title="3.1 Segments"></a>3.1 Segments</h2><p>The compute resources running your application logic send data about their work as <strong>segments</strong>. A segment provides the resource’s name, details about the request, and details about the work done. For example, when an HTTP request reaches your application, it can record the following data about:</p><ul><li>Host </li><li>Request </li><li>Response </li><li>Work done<ul><li>start time </li><li>end time</li><li>subsegments </li></ul></li><li>issues that occur </li></ul><h2 id="3-2-Subsegments"><a href="#3-2-Subsegments" class="headerlink" title="3.2 Subsegments"></a>3.2 Subsegments</h2><p>A segment can break down the data about the work done into subsegments. Subsegments provide more granular timing information and details about downstream calls that your application made to fulfill the original request. A subsegment can contain additional details about a call to an AWS service, an external HTTP API, or an SQL database. You can even define arbitrary subsegments to instrument specific functions or lines of code in your application.</p><h2 id="3-3-Service-Graph"><a href="#3-3-Service-Graph" class="headerlink" title="3.3 Service Graph"></a>3.3 Service Graph</h2><p>X-Ray uses the data that your application sends to generate a service graph. Each AWS resource that sends data to X-Ray appears as a service in the graph. Edges connect the services that work together to serve requests. Edges connect clients to your application, and your application to the downstream services and resources that it uses.</p><p>A service graph is <strong>a JSON document</strong> that contains information about the services and resources that make up your application. The X-Ray console uses the service graph to generate a visualization or service map.</p><h2 id="3-4-Traces"><a href="#3-4-Traces" class="headerlink" title="3.4 Traces"></a>3.4 Traces</h2><p>A trace ID <strong>tracks the path of a request through whole application</strong>. A trace collects all the segments generated by a single request. That request is typically an HTTP GET or POST request that travels through a load balancer, hits your application code, and generates downstream calls to other AWS services or external web APIs. </p><p>The <strong>first supported service</strong> that the HTTP request interacts with adds a trace ID header to the request, and propagates it downstream to track the latency, disposition, and other request data.</p><h2 id="3-5-Sampling"><a href="#3-5-Sampling" class="headerlink" title="3.5 Sampling"></a>3.5 Sampling</h2><p>To ensure efficient tracing and provide a representative sample of the requests that your application serves, the X-Ray SDK applies a sampling algorithm to determine which requests get traced. By default, the X-Ray SDK records the <strong>first request</strong> each second, and <strong>five percent</strong> of any additional requests.</p><h2 id="3-6-Tracing-Header"><a href="#3-6-Tracing-Header" class="headerlink" title="3.6 Tracing Header"></a>3.6 Tracing Header</h2><p>All requests are traced, up to a configurable minimum. After reaching that minimum, a percentage of requests are traced to avoid unnecessary cost. The sampling decision and trace ID are <strong>added to HTTP requests in tracing headers named X-Amzn-Trace-Id</strong>.</p><h1 id="4-AWS-X-Ray-Daemon"><a href="#4-AWS-X-Ray-Daemon" class="headerlink" title="4. AWS X-Ray Daemon"></a>4. AWS X-Ray Daemon</h1><p>Daemon is a software application, listening for traffic on UDP port 2000, gather <strong>raw segment data</strong>, and relays it to the AWS X-ray API. </p><p>You need give Daemon enough permissions to send data to X-Ray. </p><h1 id="5-Working-with-Java"><a href="#5-Working-with-Java" class="headerlink" title="5. Working with Java"></a>5. Working with Java</h1><p>The X-Ray SDK for Java provides a class named <strong>AWSXRay</strong> that provides the global recorder, a <strong>TracingHandler</strong> that you can use to instrument your code. You can configure the global recorder to customize the <strong>AWSXRayServletFilter</strong> that creates segments for incoming HTTP calls.</p><h2 id="5-1-Sampling-Rules"><a href="#5-1-Sampling-Rules" class="headerlink" title="5.1 Sampling Rules"></a>5.1 Sampling Rules</h2><p>SDK uses the sampling rules deined in the X-Ray console to determine which requests to record. The default rule traces the first request each second, and five percent of any additional requests across all services sending trances to X-Ray. </p><h2 id="5-2-Tracing-Incoming-requests-with-the-X-Ray-SDK"><a href="#5-2-Tracing-Incoming-requests-with-the-X-Ray-SDK" class="headerlink" title="5.2 Tracing Incoming requests with the X-Ray SDK"></a>5.2 Tracing Incoming requests with the X-Ray SDK</h2><p>Use the X-Ray SDK to *<em>trace incoming HTTP requests *</em>that your application serves on an EC2 instance in Amazon EC2, AWS Elastic Beanstalk, or Amazon ECS. </p><p>Use a <strong>Filter</strong> to instrument incoming HTTP requests. When you add the X-Ray servlet filter to your application, the X-Ray SDK for Java <strong>creates a segment for each sampled request</strong>. This segment includes timing, method, and disposition of the HTTP request. Additional instrumentation creates subsegments on this segment.</p><p>Each segment has a name that identifies your application in the service map. The segment can be named statically, or you can configure the SDK to name it dynamically based on the host header in the incoming request. Dynamic naming lets you group <strong>traces based on the domain name in the request</strong></p><p>The message handler creates a segment for each incoming request with an http block that contains the following information:</p><ul><li>HTTP method</li><li>Client address </li><li>Response code </li><li>Timing </li><li>User agent </li><li>Content length </li></ul><h2 id="5-3-Tracing-AWS-SDK-calls-with-the-X-Ray-SDK-for-Java"><a href="#5-3-Tracing-AWS-SDK-calls-with-the-X-Ray-SDK-for-Java" class="headerlink" title="5.3 Tracing AWS SDK calls with the X-Ray SDK for Java"></a>5.3 Tracing AWS SDK calls with the X-Ray SDK for Java</h2><p>When your application <strong>makes calls to AWS services to store data</strong>, write to a queue, or send notifications, the X-Ray SDK for Java <strong>tracks the calls downstream in subsegments</strong>. Traced AWS services and resources that you access within those services (for example, an Amazon S3 bucket or Amazon SQS queue), appear as downstream nodes on the service map in the X-Ray console.</p><p>The X-Ray SDK for Java <strong>automatically instruments all AWS SDK clients when you include the aws-sdk and aws-sdk-instrumentor submodules in your build</strong>. If you don’t include the Instrumentor submodule, you can choose to instrument some clients while excluding others.</p><p>E.G: instrument an AmazonDynamoDB client, pass a tracing handler to AmazonDynamoDBClientBuilder</p><pre><code>import com.amazonaws.xray.AWSXRay;import com.amazonaws.xray.handlers.TracingHandler;...public class MyModel {  private AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()        .withRegion(Regions.fromName(System.getenv(&quot;AWS_REGION&quot;)))        .withRequestHandlers(new TracingHandler(AWSXRay.getGlobalRecorder()))        .build();</code></pre><h2 id="5-4-Tracing-Calls-to-Downstream-HTTP-Web-Services-with-the-X-Ray-SDK-for-Java"><a href="#5-4-Tracing-Calls-to-Downstream-HTTP-Web-Services-with-the-X-Ray-SDK-for-Java" class="headerlink" title="5.4 Tracing Calls to Downstream HTTP Web Services with the X-Ray SDK for Java"></a>5.4 Tracing Calls to Downstream HTTP Web Services with the X-Ray SDK for Java</h2><p>When your application makes call to microservices or publis HTTP APIs, you can use the X-Ray SDK for java’s version of <strong>HTTPClient</strong> to instrument those calls and add the API to the service graph as a downstream service. ** Use the xray HttpClientBuilder **</p><h2 id="5-5-Custom-subsegments-with-the-X-Ray-SDK-for-Java"><a href="#5-5-Custom-subsegments-with-the-X-Ray-SDK-for-Java" class="headerlink" title="5.5 Custom subsegments with the X-Ray SDK for Java"></a>5.5 Custom subsegments with the X-Ray SDK for Java</h2><p>Subsegments extend a trace’s segment with details about work done in order to serve a request. Each time you make a call with an instrumented client, the X-Ray SDK records the information generated in a subsegment. You can create additional subsegments to group other subsegments, to measure the performance of a section of code, or to record annotations and metadata.</p><p>To manage subsegments, use the beginSubsegment and endSubsegment methods.</p><pre><code>import com.amazonaws.xray.AWSXRay;...  public void saveGame(Game game) throws SessionNotFoundException {    // wrap in subsegment    Subsegment subsegment = AWSXRay.beginSubsegment(&quot;Save Game&quot;);    try {      // check session      String sessionId = game.getSession();      if (sessionModel.loadSession(sessionId) == null ) {        throw new SessionNotFoundException(sessionId);      }      mapper.save(game);    } catch (Exception e) {      subsegment.addException(e);      throw e;    } finally {      AWSXRay.endSubsegment();    }  }</code></pre><h2 id="5-6-Add-Annotations-and-Metadata-to-Segments-with-the-X-Ray-SDK-for-Java"><a href="#5-6-Add-Annotations-and-Metadata-to-Segments-with-the-X-Ray-SDK-for-Java" class="headerlink" title="5.6 Add Annotations and Metadata to Segments with the X-Ray SDK for Java"></a>5.6 Add Annotations and Metadata to Segments with the X-Ray SDK for Java</h2><p> You can add annotations and metadata to the segments that the X-Ray SDK creates, or to custom subsegments that you create.</p><p> Annotations are key-value pairs with string, number, or Boolean values. Annotations are indexed for use with filter expressions. Use annotations to record data that you <strong>want to use to group traces</strong> in the console, or when calling the GetTraceSummaries API.</p><p> Metadata are key-value pairs that can have values of any type, including objects and lists, but are not indexed for use with filter expressions. <strong>Use metadata to record additional data that you want stored in the trace but don’t need to use with search</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Distributed Tracing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS-VPC</title>
      <link href="/AWS-VPC/"/>
      <url>/AWS-VPC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-What-is-a-VPC"><a href="#1-What-is-a-VPC" class="headerlink" title="1. What is a VPC?"></a>1. What is a VPC?</h1><p>A virtual private cloud (VPC) is a <strong>virtual network</strong> dedicated to your AWS account. It is logically isolated from other virtual networks in the AWS Cloud. Amazon Virtual Private Cloud (Amazon VPC) enables you to launch AWS resources into a virtual network that you’ve defined. This virtual network closely resembles a traditional network that you’d operate in your own data center, with the benefits of using the scalable infrastructure of AWS. </p><p><img src="https://i.loli.net/2020/01/30/iduxJISlrmp5h2s.jpg" alt="fig1.jpg"></p><p>It allows you to provision a <strong>logically isolated section</strong> of the AWS cloud, where you can launch AWS resources in a virtual network that you define. You have complete control over your virtual networking environment including: </p><ul><li>selection of your own IP address ranges</li><li>creation of subnets </li><li>configuration of route tables and network gateways </li><li>create a hardware Virtual Private Network(VPN) connection between your corporate datacenter and your VPC and leverage the AWS cloud as an extension of your corporate datacenter. </li></ul><p><img src="https://i.loli.net/2020/01/30/kjVFzSHfdcyUspB.jpg" alt="fig2.jpg"></p><h1 id="2-Protection-through-Security-Groups-and-Control-Lists"><a href="#2-Protection-through-Security-Groups-and-Control-Lists" class="headerlink" title="2. Protection through Security Groups and Control Lists"></a>2. Protection through Security Groups and Control Lists</h1><p>We can leverage multiple layers of security, including security groups and network access control lists, to help control access to Amazon EC2 instances in each subnet. <strong>Security groups</strong> act as a firewall for the Amazon EC2 instances controlling both inbound and outbound traffic <strong>at the instance level</strong>. <strong>Network Acess Control Lists</strong>(NACL’s) act as a firewall for associated subnets controlling both inbound and outbound traffic <strong>at the subnet level</strong>. </p><table><thead><tr><th><strong>Security Group</strong></th><th><strong>Network ACL</strong></th></tr></thead><tbody><tr><td>Operates at the instance level (first layer of defense).</td><td>Operates at the subnet level (second layer of defense)</td></tr><tr><td>Is stateful. Return traffic is automatically allowed, regardless of any rules.</td><td>Is stateless. Return traffic must be explicitly allowed by rules.</td></tr><tr><td>Applies to an instance only if someone specifies the security group when launching the instance, or associates the security group with the instance later on.</td><td>Automatically applies to all instances in the subnets associated with it (backup layer of defense, so you don’t have to rely on someone specifying the security group).</td></tr></tbody></table><h1 id="3-Primary-Components-needed-to-configure-networking-in-a-VPC"><a href="#3-Primary-Components-needed-to-configure-networking-in-a-VPC" class="headerlink" title="3. Primary Components needed to configure networking in a VPC"></a>3. Primary Components needed to configure networking in a VPC</h1><h2 id="3-1-Network-Interfaces"><a href="#3-1-Network-Interfaces" class="headerlink" title="3.1 Network Interfaces"></a>3.1 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ElasticNetworkInterfaces.html" target="_blank" rel="noopener">Network Interfaces</a></h2><p>A logical networking component in a VPC that represents a virtual network card. Includes attributes as following: </p><ul><li><p>a primary private IPv4 address</p></li><li><p>one or more secondary private IPv4 addresses</p></li><li><p>one Elastic IP address per private IPv4 address</p></li><li><p>one public IPv4 address, which can be auto-assigned to the network interface for eth0 when you launch an instance</p></li><li><p>one or more IPv6 addresses</p></li><li><p>one or more security groups</p></li><li><p>a MAC address</p></li><li><p>a source/destination check flag</p></li><li><p>a description</p></li></ul><p>You can create a network interface, attach it to an instance, detach it from an instance, and attach it to another instance. A network interface’s attributes follow it as it is attached or detached from an instance and reattached to another instance. When you move a network interface from one instance to another, network traffic is redirected to the new instance.</p><h2 id="3-2-Route-Tables"><a href="#3-2-Route-Tables" class="headerlink" title="3.2 Route Tables"></a>3.2 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html" target="_blank" rel="noopener">Route Tables</a></h2><p>A route table contains a set of rules, called routes, that are used to determine where network traffic is directed.</p><p>Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.</p><h2 id="3-3-Internet-Gateway"><a href="#3-3-Internet-Gateway" class="headerlink" title="3.3 Internet Gateway"></a>3.3 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html" target="_blank" rel="noopener">Internet Gateway</a></h2><p>A VPC component that allows communication between instances in your VPC and the Internet. In theory, it is what the traffic between your VPC and the public internet flows through.</p><h2 id="3-4-Egress-Only-Internet-Gateway"><a href="#3-4-Egress-Only-Internet-Gateway" class="headerlink" title="3.4 Egress-Only Internet Gateway"></a>3.4 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/egress-only-internet-gateway.html" target="_blank" rel="noopener">Egress-Only Internet Gateway</a></h2><p>An egress-only Internet gateway is a horizontally scaled, redundant, and highly available VPC component that allows outbound communication over IPv6 from instances in your VPC to the Internet, and prevents the Internet from initiating an IPv6 connection with your instances.</p><h2 id="3-5-DHCP-Options-Sets"><a href="#3-5-DHCP-Options-Sets" class="headerlink" title="3.5 DHCP Options Sets"></a>3.5 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html" target="_blank" rel="noopener">DHCP Options Sets</a></h2><p>Dynamoc Host Configuration Protocol provides a standard for passing configuraion information to hosts on a TCP/IP network. The options field of a DHCP message contains the configuration parameters. Some of those parameters are the domain name, domain name server, and the netbios-node-type.</p><h2 id="3-6-Domain-Name-System"><a href="#3-6-Domain-Name-System" class="headerlink" title="3.6 Domain Name System"></a>3.6 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html" target="_blank" rel="noopener">Domain Name System</a></h2><p>Domain Name System (DNS) is a standard by which names used on the Internet are resolved to their corresponding IP addresses. A DNS hostname is a name that uniquely and absolutely names a computer; it’s composed of a host name and a domain name. DNS servers resolve DNS hostnames to their corresponding IP addresses.</p><p>Public IPv4 addresses enable communication over the Internet, while private IPv4 addresses enable communication within the network of the instance (either EC2-Classic or a VPC).</p><h2 id="3-7-Elastic-IP-Addresses"><a href="#3-7-Elastic-IP-Addresses" class="headerlink" title="3.7 Elastic IP Addresses"></a>3.7 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html" target="_blank" rel="noopener">Elastic IP Addresses</a></h2><p>An Elastic IP address is a static public IPv4 address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for any VPC in your account. </p><p>With an Elastic IP address, <strong>you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.</strong> Note that the advantage of associating the Elastic IP address with the network interface instead of directly with the instance is that you can move all the attributes of the network interface from one instance to another in a single step.</p><h2 id="3-8-VPC-Endpoints"><a href="#3-8-VPC-Endpoints" class="headerlink" title="3.8 VPC Endpoints"></a>3.8 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html" target="_blank" rel="noopener">VPC Endpoints</a></h2><p>Enables private connectivity to services hosted in AWS, from within your VPC without using an Internet Gateway, VPN, Network Address Translation (NAT) devices, or firewall proxies.</p><h2 id="3-9-NAT-Gateways"><a href="#3-9-NAT-Gateways" class="headerlink" title="3.9 NAT Gateways"></a>3.9 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat.html" target="_blank" rel="noopener">NAT Gateways</a></h2><p>A highly available, managed Network Address Translation (NAT) service for your resources in a private subnet to access the Internet. A NAT device forwards traffic from the instances in the private subnet to the internet or other AWS services, and then sends the response back to the instances. When traffic goes to the internet, the source IPv4 address is replaced with the NAT device’s address and similarly, when the response traffic goes to those instances, the NAT device translates the address back to those instances’ private IPv4 addresses.</p><h2 id="3-10-VPC-Peering"><a href="#3-10-VPC-Peering" class="headerlink" title="3.10 VPC Peering"></a>3.10 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-peering.html" target="_blank" rel="noopener">VPC Peering</a></h2><p>A peering connection enables you to route traffic via private IP addresses between two peered VPCs.</p><p>A VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them privately. Instances in either VPC can communicate with each other as if they are within the same network. You can create a VPC peering connection between your own VPCs, with a VPC in another AWS account, or with a VPC in a different AWS Region.</p><h1 id="4-Securing-VPCs"><a href="#4-Securing-VPCs" class="headerlink" title="4. Securing VPCs"></a>4. Securing VPCs</h1><h2 id="4-1-Security-Groups"><a href="#4-1-Security-Groups" class="headerlink" title="4.1 Security Groups"></a>4.1 Security Groups</h2><p>A firewall for associated Amazon EC2 instances, controlling both inbound and outbound traffic at the instance level</p><h2 id="4-2-Network-Access-Control-Lists"><a href="#4-2-Network-Access-Control-Lists" class="headerlink" title="4.2 Network Access Control Lists"></a>4.2 Network Access Control Lists</h2><p>A firewall for associated subnets, controlling both inbound and outbound traffic at the subnet level.</p><h2 id="4-3-Flow-Logs"><a href="#4-3-Flow-Logs" class="headerlink" title="4.3 Flow Logs"></a>4.3 Flow Logs</h2><p>Capture information about the IP traffic going to and from network interfaces in your VPC.</p><h2 id="4-4-Route-Tables"><a href="#4-4-Route-Tables" class="headerlink" title="4.4 Route Tables"></a>4.4 Route Tables</h2><p>A set of rules, called routes, that are used to determine where network traffic is directed</p><p>The following diagram illustrates the layers of security provided by security groups and network ACLs. In this example, traffic from an Internet gateway is routed to the appropriate subnet using the routes in the routing table. The rules of the network ACL associated with the subnet control which traffic is allowed to the subnet. The rules of the security group associated with an instance control which traffic is allowed to the instance.</p><p><img src="https://i.loli.net/2020/01/30/aeb1wYkCq2c9QXr.png" alt="fig3.png"></p><h1 id="5-Default-VPC"><a href="#5-Default-VPC" class="headerlink" title="5. Default VPC"></a>5. Default VPC</h1><p>The default VPC is suitable for getting started quickly, and for launching public instances such as a blog or simple website. With a default VPC, you don’t have to deal with VPC creation and configuration. You can immediately start launching Amazon EC2 instances into your default VPC. You can also use services such as Elastic Load Balancing, Amazon RDS, and Amazon EMR in your default VPC.</p><p>You can use a default VPC as you would use any other VPC by: </p><ul><li>Adding additional non-default subnets</li><li>Modifying the main route table </li><li>Adding additional route tables </li><li>Associating additional security groups </li><li>Updating the rules of the default security group</li><li>Adding VPN connections</li><li>Adding more IPv4 CIDR blocks </li></ul><p>The following figure illustrates the key components that we set up for a default VPC. </p><p><img src="https://i.loli.net/2020/01/30/ig6ZwzSrFmqojPk.png" alt="fig4.png"></p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> VPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Lambda</title>
      <link href="/AWS-Lambda/"/>
      <url>/AWS-Lambda/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><p>A compute service that lets you run code without provisioning or managing servers. It can executes your code thousands per second. You pay for the compute time you consume.</p><p>Lambda executes your code on a high-availability compute infrastructure and performs all of the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, code monitoring and logging.</p><p>You can run AWS lambda to run your code in response to events, such as changes to data in an Amazon S3 bucket or an Amazon DynamoDB table; to run your code in response to HTTP requests using Amazon API gateway; or invoke your code using API calls made using AWS SDKs. </p><h1 id="2-Getting-started"><a href="#2-Getting-started" class="headerlink" title="2. Getting started"></a>2. Getting started</h1><h2 id="2-1-Configuration-on-console-page"><a href="#2-1-Configuration-on-console-page" class="headerlink" title="2.1 Configuration on console page"></a>2.1 Configuration on console page</h2><ul><li>environment variables: for Lambda functions enable you to dynamically pass settings to your function code and libraries, without making changes to your code.</li><li>Tags: are key-value pairs that you attach to AWS resources to better organize them. </li><li>Execution role: which allows you to administer security on your function, using defined roles and policies or creating new ones.</li><li>Basic settings: allows you to dictate the memory allocation and timeout limit for your Lambda function.</li><li>Network: allow you to select a VPC your function will access</li><li>Debugging and error handling: allow you to select a AWS <a href="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html" target="_blank" rel="noopener">Lambda Function Dead Letter Queues</a> resource to analyze failed function invocation retries. </li><li>Concurrency: allows you to allocate a specific limit of concurrent executions allowed for this function</li><li>Auditing and compliance: logs function invocations for operational and risk auditing, governance and compliance. </li></ul><h2 id="2-2-Lambda-concept"><a href="#2-2-Lambda-concept" class="headerlink" title="2.2 Lambda concept"></a>2.2 Lambda concept</h2><p>Lambda can automatically scales up the number of instances of your function to handle high number of events. </p><ul><li>Function: A script or program that runs in AWS lambda. Lambda passes invocation events to your function. The function processes an event and returns a response</li><li>Runtimes: Lambda runtimes allow functions in different languages to run in the same base execution environment, you configure your function to use a runtime that matches your programming language. The runtime sits in between the Lambda service and your function code, relaying invocation events, context information and responses between the two. </li><li>Layers: Lambda layers are a distribution mechanism for libraries, custom runtimes and other function dependencies. Layers let you manage your in-development function code independently from the unchanging code and resources that it uses. You can configure your function to use layers that you create, layers provided by AWS, or layers from other AWS customers.</li><li>Event source: An AWS service that triggers your function and executes its logic. </li><li>Downstream resources: An AWS service that your lambda function calls once it is triggered</li><li>Log streams: While Lambda automatically monitors your function invocations and reports metrics to CloudWatch, you can annotate your function code with custom logging statements that allow you to analyze the execution flow and performance of your Lambda function to ensure it’s working properly.</li></ul><h2 id="2-3-Programming-Model"><a href="#2-3-Programming-Model" class="headerlink" title="2.3 Programming Model"></a>2.3 Programming Model</h2><p>Regardless of the language you choose, there is a common pattern ti write code for a Lambda Function includes concepts as follow:</p><h3 id="2-3-1-Handler"><a href="#2-3-1-Handler" class="headerlink" title="2.3.1 Handler"></a>2.3.1 Handler</h3><p>The function AWS Lambda calls to start execution of your lambda function. When a Lambda function is invoked, Lambda starts executing your code by calling the handler function</p><h3 id="2-3-2-Context"><a href="#2-3-2-Context" class="headerlink" title="2.3.2 Context"></a>2.3.2 Context</h3><p>Lambda also passes a context object to the handler function, as the second parameter. Via this context object your code can interact with Lambda</p><h3 id="2-3-3-Logging"><a href="#2-3-3-Logging" class="headerlink" title="2.3.3 Logging"></a>2.3.3 Logging</h3><p>Function can contain logging statements, it writes these logs to cloudWatch logs. </p><h3 id="2-3-4-Exceptions"><a href="#2-3-4-Exceptions" class="headerlink" title="2.3.4 Exceptions"></a>2.3.4 Exceptions</h3><p>Function needs to communicate the result of the function execution to AWS Lambda. Many ways to end a request or to notify AWS Lambda an error occured during execution</p><h3 id="2-3-5-Concurrency"><a href="#2-3-5-Concurrency" class="headerlink" title="2.3.5 Concurrency"></a>2.3.5 Concurrency</h3><p>When your function is invoked more quickly than a single instance of your function can process events, Lambda scales by running additional instances. Each instance of your function handles only one request at a time, so you don’t need to worry about synchronizing threads or processes. You can, however, use asynchronous language features to process batches of events in parallel, and save data to the /tmp directory for use in future invocations on the same instance. </p><h1 id="3-Building-Lambda-Functions-with-Java"><a href="#3-Building-Lambda-Functions-with-Java" class="headerlink" title="3. Building Lambda Functions with Java"></a>3. Building Lambda Functions with Java</h1><h2 id="3-1-Handler-Input-Output-Types"><a href="#3-1-Handler-Input-Output-Types" class="headerlink" title="3.1 Handler Input/ Output Types"></a>3.1 Handler Input/ Output Types</h2><p>When AWS lambda executes the Lambda function, it invokes the handler. First parameter is the input to the handler which can be event data (published by an event source) or custom input you provide such as a string or any custom data object. </p><p>AWS Lambda supports the following input/ output types for a handler: </p><ul><li><p>Simple Java types (AWS Lambda supports the String, Integer, Boolean, Map and List types )</p></li><li><p>POJO</p></li><li><p>stream type </p><h3 id="3-1-1-Handler-input-output-String-Type"><a href="#3-1-1-Handler-input-output-String-Type" class="headerlink" title="3.1.1 Handler input/ output: String Type"></a>3.1.1 Handler input/ output: String Type</h3><p>  package example;</p><p>  import com.amazonaws.services.lambda.runtime.Context; </p><p>  public class Hello {</p><pre><code>public String myHandler(String name, Context context) {    return String.format(&quot;Hello %s.&quot;, name);}</code></pre><p>  }</p></li></ul><p>When you invoke a Lambda function asynchronously, any return value by your Lambda function will be ignored. Therefore you might want to <strong><em>set the return type to void</em></strong> to make this clear in your code </p><h3 id="3-1-2-Handler-Input-Output-POJO"><a href="#3-1-2-Handler-Input-Output-POJO" class="headerlink" title="3.1.2 Handler Input/ Output: POJO"></a>3.1.2 Handler Input/ Output: POJO</h3><pre><code>package example;import com.amazonaws.services.lambda.runtime.Context; public class HelloPojo {    // Define two classes/POJOs for use with Lambda function.    public static class RequestClass {      ...    }    public static class ResponseClass {      ...    }    public static ResponseClass myHandler(RequestClass request, Context context) {        String greetingString = String.format(&quot;Hello %s, %s.&quot;, request.getFirstName(), request.getLastName());        return new ResponseClass(greetingString);    }}</code></pre><p>Suppose your application events generate data that includes first name and last name as shown:</p><pre><code>{ &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Doe&quot; }  </code></pre><p>For this example, the handler receives this JSON and returns the string “Hello John Doe”.</p><pre><code>public static ResponseClass handleRequest(RequestClass request, Context context){        String greetingString = String.format(&quot;Hello %s, %s.&quot;, request.firstName, request.lastName);        return new ResponseClass(greetingString);}</code></pre><p>To create a Lambda function with this handler, you must provide implementation of the input and output types as shown in the following Java example. The HelloPojo class defines the handler method.</p><pre><code>package example;import com.amazonaws.services.lambda.runtime.Context; import com.amazonaws.services.lambda.runtime.RequestHandler;public class HelloPojo implements RequestHandler&lt;RequestClass, ResponseClass&gt;{       public ResponseClass handleRequest(RequestClass request, Context context){        String greetingString = String.format(&quot;Hello %s, %s.&quot;, request.firstName, request.lastName);        return new ResponseClass(greetingString);    }}</code></pre><p>In order to implement the input type, add the following code to a separate file and name it RequestClass.java. Place it next to the HelloPojo.java class in your directory structure:</p><pre><code>package example;     public class RequestClass {        String firstName;        String lastName;        public String getFirstName() {            return firstName;        }        public void setFirstName(String firstName) {            this.firstName = firstName;        }        public String getLastName() {            return lastName;        }        public void setLastName(String lastName) {            this.lastName = lastName;        }        public RequestClass(String firstName, String lastName) {            this.firstName = firstName;            this.lastName = lastName;        }        public RequestClass() {        }    }</code></pre><p>In order to implement the output type, add the following code to a separate file and name it ResponseClass.java. Place it next to the HelloPojo.java class in your directory structure:</p><pre><code>package example; public class ResponseClass {    String greetings;    public String getGreetings() {        return greetings;    }    public void setGreetings(String greetings) {        this.greetings = greetings;    }    public ResponseClass(String greetings) {        this.greetings = greetings;    }    public ResponseClass() {    }}</code></pre><h2 id="3-2-Context-Object-in-Java"><a href="#3-2-Context-Object-in-Java" class="headerlink" title="3.2 Context Object in Java"></a>3.2 Context Object in Java</h2><p>When Lambda runs your function, it passes a context object to the handler. The object provides methods and properties that provide information about the invocation, function and execution environment. </p><ul><li>getRemainingTimeInMillis()</li><li>getFunctionName()</li><li>getFunctionVersion()</li><li>getInvokedFunctionArn() - Returns the Amazon Resource Name(ARN) used to invoke the function. Indicates if the invoker specified a version number or alias. </li><li>getMemoryLimitInMB()</li><li>getAwsRequestId()</li><li>getLogGroupName()</li><li>getIdentity()</li><li>getClientContext()</li><li>getLogger() </li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS DynamoDBClient vs DynamoDBMapper</title>
      <link href="/AWS-DynamoDBClient-vs-DynamoDBMapper/"/>
      <url>/AWS-DynamoDBClient-vs-DynamoDBMapper/</url>
      
        <content type="html"><![CDATA[<p>Recently just did a project related with DynamoDB, use both DynamoDBClient and DynamoDBMapper in different circumstances. In this post, will compare those two, regarding with its convenience, latency, and their differences by nature. </p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>DynamoDBClient is Service client for accessing DynamoDB; while DynamoDBMapper use ORM (Object relational mapping) for converting data between incompatible type systems using object-oriented programming languages. </p><h2 id="1-1-How-to-use-DDBClient"><a href="#1-1-How-to-use-DDBClient" class="headerlink" title="1.1 How to use DDBClient"></a>1.1 How to use DDBClient</h2><pre><code>// Create POJO@Datapublic class Whitelist {    private String id;    private String content;    private String status;}// Create DDBClientAmazonDynamoDB ddbCLient = AmazonDynamoDBClientBuilder.standard()    .withCredentials(new AWSCredentialsProvider(KEY))    .withRegion(&quot;aaabbb&quot;)    .build();// Convert whitelist into MapMap&lt;String, AttributeValue&gt; whitelistMap = new HashMap&lt;&gt;();whitelistMap.put(&quot;id&quot;, &quot;123&quot;);whitelistMap.put(&quot;content&quot;, &quot;hello world&quot;);whitelistMap.put(&quot;status&quot;, &quot;onSale&quot;);// UpdateItem RequestUpdateItemRequest request = new UpdateItemRequest()    .withTableName(&quot;WhitelistTable&quot;)    .withItem(whitelistMap);// Use updateItem operationddbClient.updateItem(request);</code></pre><p>As you can see here, we need to build a String, AttributeValue map, which is a bit annoying. </p><h2 id="1-2-How-to-use-DynamoDBMapper"><a href="#1-2-How-to-use-DynamoDBMapper" class="headerlink" title="1.2 How to use DynamoDBMapper"></a>1.2 How to use DynamoDBMapper</h2><p>We can define the table schema when we define the POJO using DynamoDBMapper’s annotations. </p><pre><code>// Notice: lombok may not work well here, especially when you use GSI and LSI, it cannot retrive info correctly@DynamoDBTable(tableName = &quot;whitelistTable&quot;)public class Whitelist {    @DynamoDBHashKey    private String id;    @DynamoDBRangeKey    private String status;    @DynamoDBAttribute    private String content;}// Create DDBClientAmazonDynamoDB ddbCLient = AmazonDynamoDBClientBuilder.standard()    .withCredentials(new AWSCredentialsProvider(KEY))    .withRegion(&quot;aaabbb&quot;)    .build();//Create DDBMapperAmazonDynamoDBMapper ddbMapper = new AmazonDynamoDBMapper(ddbClient);// updateItemddbMapper.save(whitelistItem);</code></pre><p>Code looks much more succinct, isn’t it! As you can see above, you can think DDBMapper wraps DDBCLient in some way, and help you implement the String-AttributeValue map for you. </p><h1 id="2-Comparision"><a href="#2-Comparision" class="headerlink" title="2. Comparision"></a>2. Comparision</h1><ul><li>DynamoDBMapper <ul><li>Benefits<ul><li>Code look better</li><li>less dev work</li></ul></li><li>weakness<ul><li>it runs slower than using DDBClient<ul><li>E.G when using DDBClient::getItem, the average latency is about 2ms; whereas it comes to be around 8ms in DDBMapper.  </li></ul></li></ul></li></ul></li><li>DynamoDBClient<ul><li>Benefits<ul><li>As said above, run much faster</li></ul></li><li>weakness<ul><li>verbose code</li><li>easier for mistakes, typos </li></ul></li></ul></li></ul><p>So how to choose from those two – it depends. Suppose you have a daily job to put 100 millions items into one table and want to write faster, DDBClient should definitely be your choice in this situation. Otherwise, use DynamoDBMapper to save your life, lol. </p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> DynamoDB </tag>
            
            <tag> Mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Distributed Tracing</title>
      <link href="/Distributed-Tracing/"/>
      <url>/Distributed-Tracing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Why-we-need-it"><a href="#1-Why-we-need-it" class="headerlink" title="1. Why we need it?"></a>1. Why we need it?</h1><p>Short answer - due to disturbuted applications. </p><h2 id="1-1-Monolithis-software"><a href="#1-1-Monolithis-software" class="headerlink" title="1.1 Monolithis software"></a>1.1 Monolithis software</h2><p>Monolithis software is build upon a large and sprawling legacy code base that is often so tightly coupled that any changes in one small section often result in breaking one or several features that depend on it. In such app, high possibly it’ll break and we need to use tech - tracing to <strong>follw the course of a request or system event</strong> from its source to its ultimate destination. </p><p>In this way, each trace comes to be a narrative that tells the request’s story as it travels through system. </p><h2 id="2-2-Distributed-System"><a href="#2-2-Distributed-System" class="headerlink" title="2.2 Distributed System"></a>2.2 Distributed System</h2><p>Use distributed tracing to profile and monitor microservice-based apps/ architectures, locate failures, and improve performance. </p><h1 id="2-Key-Concepts"><a href="#2-Key-Concepts" class="headerlink" title="2. Key Concepts"></a>2. Key Concepts</h1><p>In general, distributed tracing start with a single request - the entity or event being traced. As the request makes its journey, it <strong>generates traces that record complete processing operations</strong> performed on it by entities within a distributed system/ network infrastructure. </p><p>Each trace is assigned with its own unique ID and passes through a segment that indicates a given activity that a host system performs on the request. Every segments represents a single step within the reqeust’s path and has a name, unique ID, and timestamp. A span(segment) can also carry additional metadata. </p><p>The idea is – specific request inflexion points mush be identified within a system and instrumented. All of the trace data mush be coordinated and collated to provide a meaningflow view of a request. </p><p>Challenge would be processing the volume of the data generated from increasingly large scale systems. </p><h1 id="3-Implementation"><a href="#3-Implementation" class="headerlink" title="3. Implementation"></a>3. Implementation</h1><p>Google created Dapper in the past as a middleware that supports using different language within the system. As said, the value of tracing is only realised through: </p><ul><li>ubiquitous deployment, and no parts of the system under observation are not instrumented </li><li>continuous monitoring <ul><li>system mush be monitoring constantly </li></ul></li></ul><h1 id="4-Why-we-need-distributed-tracing"><a href="#4-Why-we-need-distributed-tracing" class="headerlink" title="4. Why we need distributed tracing"></a>4. Why we need distributed tracing</h1><p>Greg Linden commented in 2006 that experiments ran by Amazon.com demonstrated a <a href="http://glinden.blogspot.com/2006/11/marissa-mayer-at-web-20.html" target="_blank" rel="noopener">significant drop in revenue</a> was experienced when 100ms delay to page load was added. Although understanding the flow of a web request through a system can be challenging, there can be significant commercial gains if performance bottlenecks are identified and eliminated.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://epsagon.com/blog/introduction-to-distributed-tracing/" target="_blank" rel="noopener">https://epsagon.com/blog/introduction-to-distributed-tracing/</a></li><li><a href="https://www.infoq.com/articles/distributed-tracing-microservices/" target="_blank" rel="noopener">https://www.infoq.com/articles/distributed-tracing-microservices/</a></li><li><a href="https://www.javacodegeeks.com/microservices-distributed-tracing.html" target="_blank" rel="noopener">https://www.javacodegeeks.com/microservices-distributed-tracing.html</a></li><li><a href="https://ai.google/research/pubs/pub36356" target="_blank" rel="noopener">https://ai.google/research/pubs/pub36356</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Distributed Tracing </tag>
            
            <tag> System Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DynamoDB-Advanced</title>
      <link href="/DynamoDB-Advanced/"/>
      <url>/DynamoDB-Advanced/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><h2 id="1-1-Features"><a href="#1-1-Features" class="headerlink" title="1.1 Features"></a>1.1 Features</h2><ul><li>Fully managed NoSQL database service </li><li>offer encryption at rest </li><li>on-demand backup capability <ul><li>allows you to create full backups of your tables for long-term retention and archival for regulatory compliance needs</li></ul></li><li>point-in-time recovery<ul><li>restore the table to any point in time during last 35 days  </li></ul></li><li>TTL <ul><li>delete expired items from tables automatically to reduce storage usage</li></ul></li></ul><h2 id="1-2-High-availability-and-durability"><a href="#1-2-High-availability-and-durability" class="headerlink" title="1.2 High availability and durability"></a>1.2 High availability and durability</h2><p>DynamoDB automatically spreads the data and traffic for your tables over a <strong>sufficient number of servers</strong>to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and <strong>automatically replicated across multiple Availability Zones</strong> in an AWS region, providing built-in high availability and data durability. You can use <strong>global tables to keep DynamoDB tables in sync across AWS Regions</strong>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html" target="_blank" rel="noopener">Global Tables</a>.</p><h1 id="2-How-it-works"><a href="#2-How-it-works" class="headerlink" title="2. How it works"></a>2. How it works</h1><h2 id="2-1-Core-Components"><a href="#2-1-Core-Components" class="headerlink" title="2.1 Core Components"></a>2.1 Core Components</h2><h3 id="2-1-1-Tables-Items-Attributes"><a href="#2-1-1-Tables-Items-Attributes" class="headerlink" title="2.1.1 Tables, Items, Attributes"></a>2.1.1 Tables, Items, Attributes</h3><blockquote><p>A table is a collection of items, each item is a collection of attributes.</p></blockquote><p>DynamoDB uses <strong>primary keys</strong> to uniquely identify each item in a table and <strong>secondary indexes</strong> to provide more querying flexibility. </p><p>Below is a diagram showing a table named People:</p><p><img src="https://i.loli.net/2020/01/29/jTZDz1AOoce26iq.png" alt="fig1.png"></p><p>Note about tables:</p><ul><li>Each item in the table has a unique identifier, or primary key, that distinguishes the item from all of the others in the table. In the People table, the primary key consists of one attribute (PersonID).</li><li>Other than the primary key, the People table is <strong>schemaless</strong>, which means that neither the attributes nor their data types need to be defined beforehand. Each item can have its own distinct attributes.</li><li>Some of the items have** a nested attribute **(Address). DynamoDB supports nested attributes up to 32 levels deep.</li></ul><h3 id="2-1-2-Primary-Key"><a href="#2-1-2-Primary-Key" class="headerlink" title="2.1.2 Primary Key"></a>2.1.2 Primary Key</h3><p>When creating tables, you must specify the primary key of the table. <strong><em>The primary key uniquely identifies each item in the table, so that no two items can have the same key</em></strong>. </p><p>DynamoDB supports two different kinds of primary keys: </p><ul><li>Partition Key </li></ul><p>DynamoDB uses the partition key’s value as input to an internal hash function. The output from the hash function determines the partition(Physical storage internal to DynamoDB) in which the item will be stored. </p><ul><li>Partition Key and sort key </li></ul><p>A composite primary key, composed of two attributes: partition key and sort key. </p><p>DynamoDB uses the partition key value as input to an internal hash function. The output from the hash function determines the partition (physical storage internal to DynamoDB) in which the item will be stored. All items with the same partition key value are stored together, in sorted order by sort key value.</p><p>In a table that has a partition key and a sort key, it’s possible for two items to have the same partition key value. However, those two items must have different sort key values.</p><h3 id="2-1-3-Secondary-Indexes"><a href="#2-1-3-Secondary-Indexes" class="headerlink" title="2.1.3 Secondary Indexes"></a>2.1.3 Secondary Indexes</h3><p>A secondary index lets you query the data in the table using an alternate key, in addtion to queries against the primary key. </p><p>After you create a secondary index on a table, you can read data from the index in much the same way as you do from the table. </p><ul><li>Global Secondary Index</li></ul><p>An index with a partition key and sort key that can be different from those on the table </p><ul><li>Local Secondary Index</li></ul><p>An index that has the same partition key as the table, but a different sort key </p><h2 id="2-2-Limitations"><a href="#2-2-Limitations" class="headerlink" title="2.2 Limitations"></a>2.2 Limitations</h2><h3 id="2-2-1-Capacity-unit-sizes-For-Provisioned-tables"><a href="#2-2-1-Capacity-unit-sizes-For-Provisioned-tables" class="headerlink" title="2.2.1 Capacity unit sizes(For Provisioned tables)"></a>2.2.1 Capacity unit sizes(For Provisioned tables)</h3><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html" target="_blank" rel="noopener">Link is here: </a></p><p>One read capacity unit = one strongly consistent read per second, or two eventually consistent reads per second, for items up to 4 KB in size.</p><p>One write capacity unit = one write per second, for items up to 1 KB in size.</p><p>Transactional read requests require two read capacity units to perform one read per second for items up to 4 KB.</p><p>Transactional write requests require two write capacity units to perform one write per second for items up to 1 KB.</p><h3 id="2-2-2-Request-Unit-Sizes-For-On-Demand-tables"><a href="#2-2-2-Request-Unit-Sizes-For-On-Demand-tables" class="headerlink" title="2.2.2 Request Unit Sizes(For On-Demand tables)"></a>2.2.2 Request Unit Sizes(For On-Demand tables)</h3><p>One read request unit = one strongly consistent read, or two eventually consistent reads, for items up to 4 KB in size.</p><p>One write request unit = one write, for items up to 1 KB in size.</p><p>Transactional read requests require two read request units to perform one read for items up to 4 KB.</p><p>Transactional write requests require two write request units to perform one write for items up to 1 KB.</p><h3 id="2-2-3-Throughtput-Default-Limits"><a href="#2-2-3-Throughtput-Default-Limits" class="headerlink" title="2.2.3 Throughtput Default Limits"></a>2.2.3 Throughtput Default Limits</h3><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html" target="_blank" rel="noopener">See link here:</a></p><h3 id="2-2-4-Tables"><a href="#2-2-4-Tables" class="headerlink" title="2.2.4 Tables"></a>2.2.4 Tables</h3><p>Tables are unconstrained in terms of the number of items or the number of bytes. </p><p>For any AWS account, there is an initial limit of 256 tables per region.</p><p>You can define a maximum of 5 local secondary indexes.</p><p>There is an initial limit of 20 global secondary indexes per table.</p><h3 id="2-2-5-API-specific-Limits"><a href="#2-2-5-API-specific-Limits" class="headerlink" title="2.2.5 API specific Limits"></a>2.2.5 API specific Limits</h3><ul><li>CreateTable/UpdateTable/DeleteTable</li></ul><p>In general, you can have up to 50 CreateTable, UpdateTable, and DeleteTable requests running simultaneously (in any combination). In other words, the total number of tables in the CREATING, UPDATING or DELETING state cannot exceed 50.</p><ul><li>BatchGetItem</li></ul><p>A single BatchGetItem operation can retrieve a maximum of 100 items. The total size of all the items retrieved cannot exceed 16 MB.</p><ul><li>BatchWriteItem</li></ul><p>A single BatchWriteItem operation can contain up to 25 PutItem or DeleteItem requests. The total size of all the items written cannot exceed 16 MB.</p><ul><li>DescribeLimits</li></ul><p>DescribeLimits should only be called periodically. You can expect throttling errors if you call it more than once in a minute.</p><ul><li>Query</li></ul><p>The result set from a Query is limited to 1 MB per call. You can use the LastEvaluatedKey from the query response to retrieve more results.</p><ul><li>Scan</li></ul><p>The result set from a Scan is limited to 1 MB per call. You can use the LastEvaluatedKey from the scan response to retrieve more results.</p><h2 id="2-3-The-DynamoDB-API"><a href="#2-3-The-DynamoDB-API" class="headerlink" title="2.3 The DynamoDB API"></a>2.3 The DynamoDB API</h2><p>See Instructions <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.API.html" target="_blank" rel="noopener">here</a></p><h3 id="2-3-1-Control-Plane"><a href="#2-3-1-Control-Plane" class="headerlink" title="2.3.1 Control Plane"></a>2.3.1 Control Plane</h3><ul><li>CreateTable </li><li>DescribeTable </li><li>ListTables </li><li>UpdateTable </li><li>DeleteTable </li></ul><h3 id="2-3-2-Data-Plane"><a href="#2-3-2-Data-Plane" class="headerlink" title="2.3.2 Data Plane"></a>2.3.2 Data Plane</h3><ul><li>Creating Data <ul><li>PutItem </li><li>BatchWriteItem </li></ul></li><li>Reading Data <ul><li>GetItem </li><li>BatchGetItem </li><li>Query </li><li>Scan </li></ul></li><li>Updating Data <ul><li>UpdateItem </li></ul></li><li>Deleting Data <ul><li>DeleteItem </li><li>BatchWriteItem </li></ul></li><li>DynamoDB streams <ul><li>listStreams</li><li>DescribeStream </li><li>GetShardIterator: return a shard iterator, which is a data structure that your application uses to retrieve the records from the stream. </li><li>GetRecords</li></ul></li></ul><h2 id="2-4-Consistency-and-capacity"><a href="#2-4-Consistency-and-capacity" class="headerlink" title="2.4 Consistency and capacity"></a>2.4 Consistency and capacity</h2><p>Region - Availability Zones</p><p>When your application writes data to a DynamoDB table and receives an HTTP 200 response, the write has occured and is durable. The data is eventually consistent across all storage locations, usually within one second or less. </p><p>DDB supports <strong>eventually consistent and strongly consistent reads</strong>. </p><h3 id="2-4-1-Eventually-Consistent-Reads"><a href="#2-4-1-Eventually-Consistent-Reads" class="headerlink" title="2.4.1 Eventually Consistent Reads"></a>2.4.1 Eventually Consistent Reads</h3><p>When you read data from a DynamoDB table, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If you repeat your read request after a short time, the response should return the latest data.</p><h3 id="2-4-2-Strongly-Consistent-Reads"><a href="#2-4-2-Strongly-Consistent-Reads" class="headerlink" title="2.4.2 Strongly Consistent Reads"></a>2.4.2 Strongly Consistent Reads</h3><p>When you request a strongly consistent read, DynamoDB returns a response with the most up-to-date data, reflecting the updates from all prior write operations that were successful. A strongly consistent read might not be available if there is a network delay or outage. Consistent reads are not supported on global secondary indexes (GSI).</p><h3 id="2-4-3-Read-Write-Capacity-Mode-on-demand"><a href="#2-4-3-Read-Write-Capacity-Mode-on-demand" class="headerlink" title="2.4.3 Read/ Write Capacity Mode - on demand"></a>2.4.3 Read/ Write Capacity Mode - on demand</h3><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html" target="_blank" rel="noopener">See link here</a></p><p>When you choose on-demand mode, DynamoDB instantly accommodates your workloads as they ramp up or down to any previously reached traffic level. If a workload’s traffic level hits a new peak, DynamoDB adapts rapidly to accommodate the workload. Tables that use on-demand mode deliver the same single-digit millisecond latency, service-level agreement (SLA) commitment, and security that DynamoDB already offers. You can choose on-demand for both new and existing tables and you can continue using the existing DynamoDB APIs without changing code.</p><h3 id="2-4-4-Read-Write-Capacity-Mode-provisioned"><a href="#2-4-4-Read-Write-Capacity-Mode-provisioned" class="headerlink" title="2.4.4 Read/ Write Capacity Mode - provisioned"></a>2.4.4 Read/ Write Capacity Mode - provisioned</h3><p>If you choose provisioned mode, you specify the number of reads and writes per second that you require for your application. You can use auto scaling to adjust your table’s provisioned capacity automatically in response to traffic changes. This helps you govern your DynamoDB use to stay at or below a defined request rate in order to obtain cost predictability.</p><h3 id="2-4-5-Read-Write-request-units"><a href="#2-4-5-Read-Write-request-units" class="headerlink" title="2.4.5 Read/ Write request units"></a>2.4.5 Read/ Write request units</h3><p>For on-demand mode tables, you don’t need to specify how much read and write throughput you expect your application to perform. DynamoDB charges you for the reads and writes that your application performs on your tables in terms of read request units and write request units.</p><p>One read request unit represents one strongly consistent read request, or two eventually consistent read requests, for an item up to 4 KB in size. Transactional read requests require 2 read request units to perform one read for items up to 4 KB. If you need to read an item that is larger than 4 KB, DynamoDB needs additional read request units. The total number of read request units required depends on the item size, and whether you want an eventually consistent or strongly consistent read. For example, if your item size is 8 KB, you require 2 read request units to sustain one strongly consistent read, 1 read request unit if you choose eventually consistent reads, or 4 read request units for a transactional read request.</p><p>One write request unit represents one write for an item up to 1 KB in size. If you need to write an item that is larger than 1 KB, DynamoDB needs to consume additional write request units. Transactional write requests require 2 write request units to perform one write for items up to 1 KB. The total number of write request units required depends on the item size. For example, if your item size is 2 KB, you require 2 write request units to sustain one write request or 4 read request units for a transactional write request.</p><h3 id="2-4-6-DynamoDB-Auto-Scaling"><a href="#2-4-6-DynamoDB-Auto-Scaling" class="headerlink" title="2.4.6 DynamoDB Auto Scaling"></a>2.4.6 DynamoDB Auto Scaling</h3><p>Manage throughput capacity for tables and global secondary indexes. With auto scaling, you define a range for read and write capacity units. You also define a target utilization percentage within that range. DynamoDB auto scaling seeks to maintain your target utilization, even as your application workload increases or decreases.</p><h2 id="2-5-Partitions-and-Data-Distribution"><a href="#2-5-Partitions-and-Data-Distribution" class="headerlink" title="2.5 Partitions and Data Distribution"></a>2.5 Partitions and Data Distribution</h2><p>A partition is an allocation of storage for a table, backed by solid-state drives (SSDs) and automatically replicated across multiple Availability Zones within an AWS Region. Partition management is handled entirely by DynamoDB—you never have to manage partitions yourself.</p><p>DynamoDB allocates additional partitions to a table in the following situations:</p><ul><li>If you increase the table’s provisioned throughput settings beyond what the existing partitions can support.</li><li>If an existing partition fills to capacity and more storage space is required.</li></ul><p>Choose a partition key that can have a large number of distinct values relative to the number of items in the table. </p><h1 id="3-Java-Programming-with-DanamoDB"><a href="#3-Java-Programming-with-DanamoDB" class="headerlink" title="3. Java Programming with DanamoDB"></a>3. Java Programming with DanamoDB</h1><h2 id="3-1-Work-flow-using-Java"><a href="#3-1-Work-flow-using-Java" class="headerlink" title="3.1 Work flow using Java"></a>3.1 Work flow using Java</h2><h3 id="3-1-1-Create-a-table"><a href="#3-1-1-Create-a-table" class="headerlink" title="3.1.1 Create a table"></a>3.1.1 Create a table</h3><pre><code>public class MoviesCreateTable {    public static void main(String[] args) throws Exception {        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))            .build();        DynamoDB dynamoDB = new DynamoDB(client);        String tableName = &quot;Movies&quot;;        try {            System.out.println(&quot;Attempting to create table; please wait...&quot;);            Table table = dynamoDB.createTable(tableName,                Arrays.asList(new KeySchemaElement(&quot;year&quot;, KeyType.HASH), // Partition                                                                          // key                    new KeySchemaElement(&quot;title&quot;, KeyType.RANGE)), // Sort key                Arrays.asList(new AttributeDefinition(&quot;year&quot;, ScalarAttributeType.N),                    new AttributeDefinition(&quot;title&quot;, ScalarAttributeType.S)),                new ProvisionedThroughput(10L, 10L));            table.waitForActive();            System.out.println(&quot;Success.  Table status: &quot; + table.getDescription().getTableStatus());        }        catch (Exception e) {            System.err.println(&quot;Unable to create table: &quot;);            System.err.println(e.getMessage());        }    }}</code></pre><h3 id="3-1-2-Load-data"><a href="#3-1-2-Load-data" class="headerlink" title="3.1.2 Load data"></a>3.1.2 Load data</h3><pre><code>public class MoviesLoadData {    public static void main(String[] args) throws Exception {        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))            .build();        DynamoDB dynamoDB = new DynamoDB(client);        Table table = dynamoDB.getTable(&quot;Movies&quot;);        JsonParser parser = new JsonFactory().createParser(new File(&quot;moviedata.json&quot;));        JsonNode rootNode = new ObjectMapper().readTree(parser);        Iterator&lt;JsonNode&gt; iter = rootNode.iterator();        ObjectNode currentNode;        while (iter.hasNext()) {            currentNode = (ObjectNode) iter.next();            int year = currentNode.path(&quot;year&quot;).asInt();            String title = currentNode.path(&quot;title&quot;).asText();            try {                table.putItem(new Item().withPrimaryKey(&quot;year&quot;, year, &quot;title&quot;, title).withJSON(&quot;info&quot;,                    currentNode.path(&quot;info&quot;).toString()));                System.out.println(&quot;PutItem succeeded: &quot; + year + &quot; &quot; + title);            }            catch (Exception e) {                System.err.println(&quot;Unable to add movie: &quot; + year + &quot; &quot; + title);                System.err.println(e.getMessage());                break;            }        }        parser.close();    }}</code></pre><h3 id="3-1-3-Create-a-new-item"><a href="#3-1-3-Create-a-new-item" class="headerlink" title="3.1.3 Create a new item"></a>3.1.3 Create a new item</h3><pre><code>public class MoviesItemOps01 {    public static void main(String[] args) throws Exception {        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))            .build();        DynamoDB dynamoDB = new DynamoDB(client);        Table table = dynamoDB.getTable(&quot;Movies&quot;);        int year = 2015;        String title = &quot;The Big New Movie&quot;;        final Map&lt;String, Object&gt; infoMap = new HashMap&lt;String, Object&gt;();        infoMap.put(&quot;plot&quot;, &quot;Nothing happens at all.&quot;);        infoMap.put(&quot;rating&quot;, 0);        try {            System.out.println(&quot;Adding a new item...&quot;);            PutItemOutcome outcome = table                .putItem(new Item().withPrimaryKey(&quot;year&quot;, year, &quot;title&quot;, title).withMap(&quot;info&quot;, infoMap));            System.out.println(&quot;PutItem succeeded:\n&quot; + outcome.getPutItemResult());        }        catch (Exception e) {            System.err.println(&quot;Unable to add item: &quot; + year + &quot; &quot; + title);            System.err.println(e.getMessage());        }    }}</code></pre><h3 id="3-1-4-Read-an-Item"><a href="#3-1-4-Read-an-Item" class="headerlink" title="3.1.4 Read an Item"></a>3.1.4 Read an Item</h3><pre><code>public class MoviesItemOps02 {    public static void main(String[] args) throws Exception {        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))            .build();        DynamoDB dynamoDB = new DynamoDB(client);        Table table = dynamoDB.getTable(&quot;Movies&quot;);        int year = 2015;        String title = &quot;The Big New Movie&quot;;        GetItemSpec spec = new GetItemSpec().withPrimaryKey(&quot;year&quot;, year, &quot;title&quot;, title);        try {            System.out.println(&quot;Attempting to read the item...&quot;);            Item outcome = table.getItem(spec);            System.out.println(&quot;GetItem succeeded: &quot; + outcome);        }        catch (Exception e) {            System.err.println(&quot;Unable to read item: &quot; + year + &quot; &quot; + title);            System.err.println(e.getMessage());        }    }}</code></pre><h3 id="3-1-5-Update-an-Item"><a href="#3-1-5-Update-an-Item" class="headerlink" title="3.1.5 Update an Item"></a>3.1.5 Update an Item</h3><pre><code>public class MoviesItemOps03 {    public static void main(String[] args) throws Exception {        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))            .build();        DynamoDB dynamoDB = new DynamoDB(client);        Table table = dynamoDB.getTable(&quot;Movies&quot;);        int year = 2015;        String title = &quot;The Big New Movie&quot;;        UpdateItemSpec updateItemSpec = new UpdateItemSpec().withPrimaryKey(&quot;year&quot;, year, &quot;title&quot;, title)            .withUpdateExpression(&quot;set info.rating = :r, info.plot=:p, info.actors=:a&quot;)            .withValueMap(new ValueMap().withNumber(&quot;:r&quot;, 5.5).withString(&quot;:p&quot;, &quot;Everything happens all at once.&quot;)                .withList(&quot;:a&quot;, Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;)))            .withReturnValues(ReturnValue.UPDATED_NEW);        try {            System.out.println(&quot;Updating the item...&quot;);            UpdateItemOutcome outcome = table.updateItem(updateItemSpec);            System.out.println(&quot;UpdateItem succeeded:\n&quot; + outcome.getItem().toJSONPretty());        }        catch (Exception e) {            System.err.println(&quot;Unable to update item: &quot; + year + &quot; &quot; + title);            System.err.println(e.getMessage());        }    }}</code></pre><h3 id="3-1-6-Update-an-Item-conditionally"><a href="#3-1-6-Update-an-Item-conditionally" class="headerlink" title="3.1.6 Update an Item conditionally"></a>3.1.6 Update an Item conditionally</h3><pre><code>public class MoviesItemOps05 {    public static void main(String[] args) throws Exception {        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))            .build();        DynamoDB dynamoDB = new DynamoDB(client);        Table table = dynamoDB.getTable(&quot;Movies&quot;);        int year = 2015;        String title = &quot;The Big New Movie&quot;;        UpdateItemSpec updateItemSpec = new UpdateItemSpec()            .withPrimaryKey(new PrimaryKey(&quot;year&quot;, year, &quot;title&quot;, title)).withUpdateExpression(&quot;remove info.actors[0]&quot;)            .withConditionExpression(&quot;size(info.actors) &gt; :num&quot;).withValueMap(new ValueMap().withNumber(&quot;:num&quot;, 3))            .withReturnValues(ReturnValue.UPDATED_NEW);        // Conditional update (we expect this to fail)        try {            System.out.println(&quot;Attempting a conditional update...&quot;);            UpdateItemOutcome outcome = table.updateItem(updateItemSpec);            System.out.println(&quot;UpdateItem succeeded:\n&quot; + outcome.getItem().toJSONPretty());        }        catch (Exception e) {            System.err.println(&quot;Unable to update item: &quot; + year + &quot; &quot; + title);            System.err.println(e.getMessage());        }    }}</code></pre><h3 id="3-1-7-Delete-an-Item"><a href="#3-1-7-Delete-an-Item" class="headerlink" title="3.1.7 Delete an Item"></a>3.1.7 Delete an Item</h3><pre><code>public class MoviesItemOps06 {    public static void main(String[] args) throws Exception {        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))            .build();        DynamoDB dynamoDB = new DynamoDB(client);        Table table = dynamoDB.getTable(&quot;Movies&quot;);        int year = 2015;        String title = &quot;The Big New Movie&quot;;        DeleteItemSpec deleteItemSpec = new DeleteItemSpec()            .withPrimaryKey(new PrimaryKey(&quot;year&quot;, year, &quot;title&quot;, title)).withConditionExpression(&quot;info.rating &lt;= :val&quot;)            .withValueMap(new ValueMap().withNumber(&quot;:val&quot;, 5.0));        // Conditional delete (we expect this to fail)        try {            System.out.println(&quot;Attempting a conditional delete...&quot;);            table.deleteItem(deleteItemSpec);            System.out.println(&quot;DeleteItem succeeded&quot;);        }        catch (Exception e) {            System.err.println(&quot;Unable to delete item: &quot; + year + &quot; &quot; + title);            System.err.println(e.getMessage());        }    }}</code></pre><h3 id="3-1-8-Scan"><a href="#3-1-8-Scan" class="headerlink" title="3.1.8 Scan"></a>3.1.8 Scan</h3><p>The scan method reads every item in the entire table, and returns all the data in the table, you can provide an optional filter_expression so that only the items matching your criteria are returned. However, the filter is applied only after the entire table has been scanned. </p><pre><code>    public class MoviesScan {        public static void main(String[] args) throws Exception {            AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()                .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(&quot;http://localhost:8000&quot;, &quot;us-west-2&quot;))                .build();            DynamoDB dynamoDB = new DynamoDB(client);            Table table = dynamoDB.getTable(&quot;Movies&quot;);            ScanSpec scanSpec = new ScanSpec().withProjectionExpression(&quot;#yr, title, info.rating&quot;)                .withFilterExpression(&quot;#yr between :start_yr and :end_yr&quot;).withNameMap(new NameMap().with(&quot;#yr&quot;, &quot;year&quot;))                .withValueMap(new ValueMap().withNumber(&quot;:start_yr&quot;, 1950).withNumber(&quot;:end_yr&quot;, 1959));            try {                ItemCollection&lt;ScanOutcome&gt; items = table.scan(scanSpec);                Iterator&lt;Item&gt; iter = items.iterator();                while (iter.hasNext()) {                    Item item = iter.next();                    System.out.println(item.toString());                }            }            catch (Exception e) {                System.err.println(&quot;Unable to scan the table:&quot;);                System.err.println(e.getMessage());            }        }    }</code></pre><h2 id="3-2-AWS-SDK-support"><a href="#3-2-AWS-SDK-support" class="headerlink" title="3.2 AWS SDK support"></a>3.2 AWS SDK support</h2><h3 id="3-2-1-AWS-SDK-support-workflow"><a href="#3-2-1-AWS-SDK-support-workflow" class="headerlink" title="3.2.1 AWS SDK support workflow"></a>3.2.1 AWS SDK support workflow</h3><p><img src="https://i.loli.net/2020/01/29/vTVb5WzqQkFaLYm.png" alt="fig2.png"></p><ol><li><p>You write an application using an AWS SDK for your programming language.</p></li><li><p>Each AWS SDK provides one or more programmatic interfaces for working with DynamoDB. The specific interfaces available depend on which programming language and AWS SDK you use.</p></li><li><p>The AWS SDK constructs HTTP(S) requests for use with the low-level DynamoDB API.</p></li><li><p>The AWS SDK sends the request to the DynamoDB endpoint.</p></li><li><p>DynamoDB executes the request. If the request is successful, DynamoDB returns an HTTP 200 response code (OK). If the request is unsuccessful, DynamoDB returns an HTTP error code and an error message.</p></li><li><p>The AWS SDK processes the response and propagates it back to your application.</p></li></ol><h3 id="3-2-2-Services-AWS-SDK-provides"><a href="#3-2-2-Services-AWS-SDK-provides" class="headerlink" title="3.2.2 Services AWS SDK provides"></a>3.2.2 Services AWS SDK provides</h3><ul><li>formatting HTTP(s) requests and serializing request parameters </li><li>generating a cryptographic signature for each request </li><li>forwarding request to a DynamoDB endpoint and receiving responses from DynamoDB </li><li>extracting the results from those responses </li><li>implementing basic retry logic in case of errors </li></ul><h3 id="3-2-3-Programmatic-Interfaces"><a href="#3-2-3-Programmatic-Interfaces" class="headerlink" title="3.2.3 Programmatic Interfaces"></a>3.2.3 Programmatic Interfaces</h3><ol><li>Low level interfaces<br>Need data type descriptors </li></ol><pre><code>result.getItem().getN() // get number </code></pre><ol start="2"><li>Document Interfaces</li></ol><p>Documnet interface, allowing to perform data plane operations(creat, read, update, delete) on tables and indexes. No need to specify the data type descriptors. Data types are implied by the semantics of the data itself. Also provide methods to easily convert JSON documents to and from native DDB data types. </p><ol start="3"><li>Object Persistence Interface </li></ol><p>Provid an object persistence interface where you do not directly perform data plane operations. Instead, you create objects that represent items in DynamoDB tables and indexes, and interact only with those objects. <strong><em>This allow you to write object-centric code, rather than database-centric code</em></strong>. </p><pre><code>@DynamoDBTable(tableName=&quot;Music&quot;)public class MusicItem {    private String artist;    private String songTitle;    private String albumTitle;    private int year;    @DynamoDBHashKey(attributeName=&quot;Artist&quot;)    public String getArtist() { return artist;}    public void setArtist(String artist) {this.artist = artist;}    @DynamoDBRangeKey(attributeName=&quot;SongTitle&quot;)    public String getSongTitle() { return songTitle;}    public void setSongTitle(String songTitle) {this.songTitle = songTitle;}    @DynamoDBAttribute(attributeName = &quot;AlbumTitle&quot;)    public String getAlbumTitle() { return albumTitle;}    public void setAlbumTitle(String albumTitle) {this.albumTitle = albumTitle;}    @DynamoDBAttribute(attributeName = &quot;Year&quot;)    public int getYear() { return year; }    public void setYear(int year) { this.year = year; }}</code></pre><h3 id="3-2-4-Low-level-API"><a href="#3-2-4-Low-level-API" class="headerlink" title="3.2.4 Low level API"></a>3.2.4 Low level API</h3><p>The DynamoDB low-level API is the protocol level interface for Amazon DynamoDB. At this level, every HTTP(s) request must be correctly formatted and carry a valid digital signature. </p><p>The low-level DynamoDB API uses JavaScript Object Notation (JSON) as a wire protocol format. JSON presents data in a hierarchy, so that both data values and data structure are conveyed simultaneously. Name-value pairs are defined in the format name:value. The data hierarchy is defined by nested brackets of name-value pairs.</p><p>DynamoDB uses JSON only as a transport protocol, not as a storage format. The AWS SDKs use JSON to send data to DynamoDB, and DynamoDB responds with JSON, but DynamoDB does not store data persistently in JSON format.</p><h4 id="3-2-4-1-Request-Format"><a href="#3-2-4-1-Request-Format" class="headerlink" title="3.2.4.1 Request Format"></a>3.2.4.1 Request Format</h4><p>The DynamoDB low-level API accepts HTTP(S) POST requests as input. The AWS SDKs construct these requests for you.</p><p>Suppose that you have a table named Pets, with a key schema consisting of AnimalType (partition key) and Name (sort key). Both of these attributes are of type string. To retrieve an item from Pets, the AWS SDK constructs a request as shown following:</p><pre><code>POST / HTTP/1.1Host: dynamodb.&lt;region&gt;.&lt;domain&gt;;Accept-Encoding: identityContent-Length: &lt;PayloadSizeBytes&gt;     User-Agent: &lt;UserAgentString&gt;Content-Type: application/x-amz-json-1.0Authorization: AWS4-HMAC-SHA256 Credential=&lt;Credential&gt;, SignedHeaders=&lt;Headers&gt;, Signature=&lt;Signature&gt;X-Amz-Date: &lt;Date&gt; X-Amz-Target: DynamoDB_20120810.GetItem{    &quot;TableName&quot;: &quot;Pets&quot;,    &quot;Key&quot;: {        &quot;AnimalType&quot;: {&quot;S&quot;: &quot;Dog&quot;},        &quot;Name&quot;: {&quot;S&quot;: &quot;Fido&quot;}    }}</code></pre><ul><li>The Authorization header contains information required for DynamoDB to authenticate the request.</li><li>The X-Amz-Target header contains the name of a DynamoDB operation: GetItem. (This is also accompanied by the low-level API version, in this case 20120810.)</li><li>The payload (body) of the request contains the parameters for the operation, in JSON format. For the GetItem operation, the parameters are TableName and Key.</li></ul><h4 id="3-2-4-2-Response-Format"><a href="#3-2-4-2-Response-Format" class="headerlink" title="3.2.4.2 Response Format"></a>3.2.4.2 Response Format</h4><p>Upon receipt of the request, DynamoDB processes it and returns a response. For the request shown above, the HTTP(S) response payload contains the results from the operation. </p><pre><code>HTTP/1.1 200 OKx-amzn-RequestId: &lt;RequestId&gt; x-amz-crc32: &lt;Checksum&gt;Content-Type: application/x-amz-json-1.0Content-Length: &lt;PayloadSizeBytes&gt;Date: &lt;Date&gt; {    &quot;Item&quot;: {        &quot;Age&quot;: {&quot;N&quot;: &quot;8&quot;},        &quot;Colors&quot;: {            &quot;L&quot;: [                {&quot;S&quot;: &quot;White&quot;},                {&quot;S&quot;: &quot;Brown&quot;},                {&quot;S&quot;: &quot;Black&quot;}            ]        },        &quot;Name&quot;: {&quot;S&quot;: &quot;Fido&quot;},        &quot;Vaccinations&quot;: {            &quot;M&quot;: {                &quot;Rabies&quot;: {                    &quot;L&quot;: [                        {&quot;S&quot;: &quot;2009-03-17&quot;},                        {&quot;S&quot;: &quot;2011-09-21&quot;},                        {&quot;S&quot;: &quot;2014-07-08&quot;}                    ]                },                &quot;Distemper&quot;: {&quot;S&quot;: &quot;2015-10-13&quot;}            }        },        &quot;Breed&quot;: {&quot;S&quot;: &quot;Beagle&quot;},        &quot;AnimalType&quot;: {&quot;S&quot;: &quot;Dog&quot;}    }}</code></pre><h4 id="3-2-4-3-Data-Type-Descriptors"><a href="#3-2-4-3-Data-Type-Descriptors" class="headerlink" title="3.2.4.3 Data Type Descriptors"></a>3.2.4.3 Data Type Descriptors</h4><p>The low-level DynamoDB API protocol requires each attribute to be accompanied by a data type descriptor. Data type descriptors are tokens that tell DynamoDB how to interpret each attribute.</p><p>The examples in Request Format and Response Format show examples of how data type descriptors are used. The GetItem request specifies S for the Pets key schema attributes (AnimalType and Name), which are of type string. The GetItem response contains a Pets item with attributes of type string (S), number (N), map (M), and list (L).</p><h2 id="3-3-Error-Handling"><a href="#3-3-Error-Handling" class="headerlink" title="3.3 Error Handling"></a>3.3 Error Handling</h2><h3 id="3-3-1-Error-Components"><a href="#3-3-1-Error-Components" class="headerlink" title="3.3.1 Error Components"></a>3.3.1 Error Components</h3><p>Unsuccessful: returns an error, which contains: </p><ul><li>An HTTP status code</li><li>An exception name</li><li>An error message</li></ul><p>The AWS SDK tale care of propagating errors to your application, so that you can take appropriate action. </p><h3 id="3-3-2-Error-Messages-and-Codes"><a href="#3-3-2-Error-Messages-and-Codes" class="headerlink" title="3.3.2 Error Messages and Codes"></a>3.3.2 Error Messages and Codes</h3><ul><li>HTTP status code 400<ul><li>AccessDeniedException <ul><li>The client did not correctly sign the request.</li></ul></li><li>ConditionalCheckFailedException<ul><li>You specified a condition that evaluated to false. </li></ul></li><li>IncompleteSignatureException <ul><li>The request signature did not include all of the required components.</li></ul></li><li>ItemCollectionSizeLimitExceededException<ul><li>For a table with a local secondary index, a group of items with the same partition key value has exceeded the maximum size limit of 10 GB. </li></ul></li><li>LimitExceededException<ul><li>There are too many concurrent control plane operations. The cumulative number of tables and indexes in the CREATING, DELETING, or UPDATING state cannot exceed 50.</li></ul></li><li>MissingAuthenticationTokenException<ul><li>The request did not include the required authorization header, or it was malformed. </li></ul></li><li>ProvisionedThroughputExceededException<ul><li>Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests that receive this exception. Your request is eventually successful, unless your retry queue is too large to finish. </li></ul></li><li>RequestLimitExceeded<ul><li>Throughput exceeds the current throughput limit for your account.</li></ul></li><li>ResourceInUseException<ul><li>The resource which you are attempting to change is in use.</li></ul></li></ul></li></ul><pre><code>Table table = dynamoDB.getTable(&quot;Movies&quot;);try {    Item item = table.getItem(&quot;year&quot;, 1978, &quot;title&quot;, &quot;Superman&quot;);    if (item != null) {        System.out.println(&quot;Result: &quot; + item);    } else {         //No such item exists in the table        System.out.println(&quot;Item not found&quot;);    }} catch (AmazonServiceException ase) {    System.err.println(&quot;Could not complete operation&quot;);    System.err.println(&quot;Error Message:  &quot; + ase.getMessage());    System.err.println(&quot;HTTP Status:    &quot; + ase.getStatusCode());    System.err.println(&quot;AWS Error Code: &quot; + ase.getErrorCode());    System.err.println(&quot;Error Type:     &quot; + ase.getErrorType());    System.err.println(&quot;Request ID:     &quot; + ase.getRequestId());} catch (AmazonClientException ace) {    System.err.println(&quot;Internal error occured communicating with DynamoDB&quot;);    System.out.println(&quot;Error Message:  &quot; + ace.getMessage());</code></pre><h3 id="3-3-3-Error-Retries-and-Expotential-Backoff"><a href="#3-3-3-Error-Retries-and-Expotential-Backoff" class="headerlink" title="3.3.3 Error Retries and Expotential Backoff"></a>3.3.3 Error Retries and Expotential Backoff</h3><p>Numerous components on a network, such as DNS servers, switches, load balancers, and others can generate errors anywhere in the life of a given request. The usual technique for dealing with these error responses in a networked environment is to implement retries in the client application. This technique increases the reliability of the application.</p><p>In addition to simple retries, each AWS SDK implements exponential backoff algorithm for better flow control. The concept behind exponential backoff is to use progressively longer waits between retries for consecutive error responses. For example, up to 50 milliseconds before the first retry, up to 100 milliseconds before the second, up to 200 milliseconds before third, and so on.</p><h3 id="3-3-4-Batch-Operations-and-Error-Handling"><a href="#3-3-4-Batch-Operations-and-Error-Handling" class="headerlink" title="3.3.4 Batch Operations and Error Handling"></a>3.3.4 Batch Operations and Error Handling</h3><p>The DynamoDB low-level API supports batch operations for reads and writes. BatchGetItem reads items from one or more tables, and BatchWriteItem puts or deletes items in one or more tables. These batch operations are implemented as wrappers around other non-batch DynamoDB operations. In other words, BatchGetItem invokes GetItem once for each item in the batch. Similarly,BatchWriteItem invokes DeleteItem or PutItem, as appropriate, for each item in the batch.</p><p>A batch operation can tolerate the failure of individual requests in the batch. For example, consider a BatchGetItem request to read five items. Even if some of the underlying GetItem requests fail, this does not cause the entire BatchGetItem operation to fail. On the other hand, if all of the five reads operations fail, then the entire BatchGetItem will fail.</p><p>The batch operations return information about individual requests that fail, so that you can diagnose the problem and retry the operation. For BatchGetItem, the tables and primary keys in question are returned in the UnprocessedKeys parameter of the request. For BatchWriteItem, similar information is returned in UnprocessedItems.</p><h1 id="4-High-level-programming-interfaces-for-DynamoDB-DynamoDBMapper"><a href="#4-High-level-programming-interfaces-for-DynamoDB-DynamoDBMapper" class="headerlink" title="4 High level programming interfaces for DynamoDB - DynamoDBMapper"></a>4 High level programming interfaces for DynamoDB - DynamoDBMapper</h1><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HigherLevelInterfaces.html" target="_blank" rel="noopener">DynamoDBMapper</a></p><h2 id="4-1-Mapper-class-implementation"><a href="#4-1-Mapper-class-implementation" class="headerlink" title="4.1 Mapper class implementation"></a>4.1 Mapper class implementation</h2><p>With a low level database interface, developers must write methods for reading or writing object data to database tables and vice versa. The amount of extra code required for each combination of object type and database table can seem overwhelming. </p><p>The higher-level interfaces for DynamoDB let you define the relationships between objects in your program and the database tables that store those objects’ data. After you define this mapping, you call simple object methods such as save, load, or delete, and the underlying low-level DynamoDB operations are automatically invoked on your behalf. This allows you to write object-centric code, rather than database-centric code.</p><p>AWS SDK provides a DynamoDBMapper class, allowing you to map your client side classes to DynamoDB tables. To use DynamoDBMapper, you define the relationship between items in a DynamoDB table and their corresponding object instances in your code. </p><pre><code>@DynamoDBTable(tableName=&quot;ProductCatalog&quot;)public class CatalogItem {    private Integer id;    private String title;    private String ISBN;    private Set&lt;String&gt; bookAuthors;    private String someProp;    @DynamoDBHashKey(attributeName=&quot;Id&quot;)      public Integer getId() { return id; }    public void setId(Integer id) {this.id = id; }    @DynamoDBAttribute(attributeName=&quot;Title&quot;)      public String getTitle() {return title; }    public void setTitle(String title) { this.title = title; }    @DynamoDBAttribute(attributeName=&quot;ISBN&quot;)      public String getISBN() { return ISBN; }    public void setISBN(String ISBN) { this.ISBN = ISBN; }    @DynamoDBAttribute(attributeName=&quot;Authors&quot;)    public Set&lt;String&gt; getBookAuthors() { return bookAuthors; }    public void setBookAuthors(Set&lt;String&gt; bookAuthors) { this.bookAuthors = bookAuthors; }    @DynamoDBIgnore    public String getSomeProp() { return someProp; }    public void setSomeProp(String someProp) { this.someProp = someProp; }}</code></pre><h3 id="4-1-1-DynamoDBTable"><a href="#4-1-1-DynamoDBTable" class="headerlink" title="4.1.1 @DynamoDBTable"></a>4.1.1 @DynamoDBTable</h3><p>Maps the class CatalogItem to table ProductCatalog. You can store individual class instances as items in the table.  </p><h3 id="4-1-2-DynamoDBHashKey"><a href="#4-1-2-DynamoDBHashKey" class="headerlink" title="4.1.2 @DynamoDBHashKey"></a>4.1.2 @DynamoDBHashKey</h3><p>Maps the Id property to the primary key </p><h3 id="4-1-3-DynamoDBAttribute"><a href="#4-1-3-DynamoDBAttribute" class="headerlink" title="4.1.3 @DynamoDBAttribute"></a>4.1.3 @DynamoDBAttribute</h3><p>This annotation is optional when the name of the DynamoDB attribute matches the name of the property declared in the class. When they differ, use this annotation with the attributeName() parameter to specify which DynamoDB attribute this property corresponds to. </p><h3 id="4-1-4-DynamoDBIgnore"><a href="#4-1-4-DynamoDBIgnore" class="headerlink" title="4.1.4  @DynamoDBIgnore"></a>4.1.4  @DynamoDBIgnore</h3><p>Those properties will not be mapped to any attributes in the table</p><h2 id="4-2-Use-DynamoDBMapper-Method"><a href="#4-2-Use-DynamoDBMapper-Method" class="headerlink" title="4.2 Use DynamoDBMapper Method"></a>4.2 Use DynamoDBMapper Method</h2><p>Use Mapper method to write an instance of that class to a corresponding item in the Catalog table. </p><pre><code>AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();DynamoDBMapper mapper = new DynamoDBMapper(client);CatalogItem item = new CatalogItem();item.setId(102);item.setTitle(&quot;Book 102 Title&quot;);item.setISBN(&quot;222-2222222222&quot;);item.setBookAuthors(new HashSet&lt;String&gt;(Arrays.asList(&quot;Author 1&quot;, &quot;Author 2&quot;)));item.setSomeProp(&quot;Test&quot;);mapper.save(item);          </code></pre><p>Following code shows how to retrieve the item and access some of its attributes: </p><pre><code>CatalogItem partitionKey = new CatalogItem();partitionKey.setId(102);DynamoDBQueryExpression&lt;CatalogItem&gt; queryExpression = new DynamoDBQueryExpression&lt;CatalogItem&gt;()    .withHashKeyValues(partitionKey);List&lt;CatalogItem&gt; itemList = mapper.query(CatalogItem.class, queryExpression);for (int i = 0; i &lt; itemList.size(); i++) {    System.out.println(itemList.get(i).getTitle());    System.out.println(itemList.get(i).getBookAuthors());}</code></pre><h2 id="4-3-Java-Annotations-for-DynamoDB"><a href="#4-3-Java-Annotations-for-DynamoDB" class="headerlink" title="4.3 Java Annotations for DynamoDB"></a>4.3 Java Annotations for DynamoDB</h2><h3 id="4-3-1-DynamoDBAttribute"><a href="#4-3-1-DynamoDBAttribute" class="headerlink" title="4.3.1 DynamoDBAttribute"></a>4.3.1 DynamoDBAttribute</h3><ul><li>Maps a property to a table attribute. </li></ul><pre><code>@DynamoDBAttribute(attributeName = &quot;Authors&quot;)public List&lt;String&gt; getBookAuthors() { return BookAuthors; }public void setBookAuthors(List&lt;String&gt; BookAuthors) { this.BookAuthors = BookAuthors; }</code></pre><h3 id="4-3-2-DynamoDBAutoGeneratedKey"><a href="#4-3-2-DynamoDBAutoGeneratedKey" class="headerlink" title="4.3.2 DynamoDBAutoGeneratedKey"></a>4.3.2 DynamoDBAutoGeneratedKey</h3><ul><li>Marks a partition key or sort key property as being auto-generated. DynamoDBMapper will generate a random UUID when saving these attributes. Only String properties can be marked as auto-generated keys. </li></ul><pre><code>@DynamoDBTable(tableName=&quot;AutoGeneratedKeysExample&quot;)public class AutoGeneratedKeys {     private String id;    private String payload;    @DynamoDBHashKey(attributeName = &quot;Id&quot;)    @DynamoDBAutoGeneratedKey    public String getId() { return id; }    public void setId(String id) { this.id = id; }     @DynamoDBAttribute(attributeName=&quot;payload&quot;)    public String getPayload() { return this.payload; }    public void setPayload(String payload) { this.payload = payload; }        public static void saveItem() {        AutoGeneratedKeys obj = new AutoGeneratedKeys();        obj.setPayload(&quot;abc123&quot;);        // id field is null at this point               DynamoDBMapper mapper = new DynamoDBMapper(dynamoDBClient);        mapper.save(obj);        System.out.println(&quot;Object was saved with id &quot; + obj.getId());    }}</code></pre><h3 id="4-3-3-DynamoDBDocument"><a href="#4-3-3-DynamoDBDocument" class="headerlink" title="4.3.3 DynamoDBDocument"></a>4.3.3 DynamoDBDocument</h3><ul><li>indicates that a class can be serialized as a DynamoDB document </li></ul><p>For example, suppose you wanted to map a JSON document to a DynamoDB attribute of type Map (M). The following code snippet defines an item containing a nested attribute (Pictures) of type Map.</p><pre><code>public class ProductCatalogItem {    private Integer id;  //partition key    private Pictures pictures;    /* ...other attributes omitted... */    @DynamoDBHashKey(attributeName=&quot;Id&quot;)      public Integer getId() { return id;}    public void setId(Integer id) {this.id = id;}    @DynamoDBAttribute(attributeName=&quot;Pictures&quot;)      public Pictures getPictures() { return pictures;}    public void setPictures(Pictures pictures) {this.pictures = pictures;}    // Additional properties go here.     @DynamoDBDocument    public static class Pictures {        private String frontView;        private String rearView;        private String sideView;        @DynamoDBAttribute(attributeName = &quot;FrontView&quot;)        public String getFrontView() { return frontView; }        public void setFrontView(String frontView) { this.frontView = frontView; }        @DynamoDBAttribute(attributeName = &quot;RearView&quot;)        public String getRearView() { return rearView; }        public void setRearView(String rearView) { this.rearView = rearView; }        @DynamoDBAttribute(attributeName = &quot;SideView&quot;)        public String getSideView() { return sideView; }        public void setSideView(String sideView) { this.sideView = sideView; }     }}</code></pre><p>You could then save a new ProductCatalog item, with pictures, as shown in the following snippet: </p><pre><code>ProductCatalogItem item = new ProductCatalogItem();Pictures pix = new Pictures();pix.setFrontView(&quot;http://example.com/products/123_front.jpg&quot;);pix.setRearView(&quot;http://example.com/products/123_rear.jpg&quot;);pix.setSideView(&quot;http://example.com/products/123_left_side.jpg&quot;);item.setPictures(pix);item.setId(123);mapper.save(item); </code></pre><p>The resulting ProductCalalog item would look like this: </p><pre><code>{  &quot;Id&quot; : 123  &quot;Pictures&quot; : {    &quot;SideView&quot; : &quot;http://example.com/products/123_left_side.jpg&quot;,    &quot;RearView&quot; : &quot;http://example.com/products/123_rear.jpg&quot;,    &quot;FrontView&quot; : &quot;http://example.com/products/123_front.jpg&quot;  }} </code></pre><h3 id="4-3-4-DynamoDBHashKey"><a href="#4-3-4-DynamoDBHashKey" class="headerlink" title="4.3.4 DynamoDBHashKey"></a>4.3.4 DynamoDBHashKey</h3><ul><li>Maps a class property to the partition key of the table. The property must be one of the scalar string, number or binary types; it cannot be a collection type. </li></ul><pre><code>@DynamoDBTable(tableName=&quot;ProductCatalog&quot;) public class CatalogItem {     private Integer Id;      @DynamoDBHashKey(attributeName=&quot;Id&quot;)   public Integer getId() {        return Id;   }   public void setId(Integer Id) {        this.Id = Id;   }   // Additional properties go here. }</code></pre><h3 id="4-3-5-DynamoDBIgnore"><a href="#4-3-5-DynamoDBIgnore" class="headerlink" title="4.3.5 DynamoDBIgnore"></a>4.3.5 DynamoDBIgnore</h3><ul><li>Indicates to the DynamoDBMapper instance that the associated property should be ignored. When saving data to the table, the DynamoDBMapper does not save property to the table. </li></ul><h3 id="4-3-6-DynamoDBIndexHashKey"><a href="#4-3-6-DynamoDBIndexHashKey" class="headerlink" title="4.3.6 DynamoDBIndexHashKey"></a>4.3.6 DynamoDBIndexHashKey</h3><ul><li>Maps a class property to the partition key of a global secondary index. The property must be one of the scalar string, number or binary types; it cannot be a collection type.</li><li>Use this annotation if you need to Query a global secondary index. You must specify the index name (globalSecondaryIndexName). If the name of the class property is different from the index partition key, you must also specify the name of that index attribute (attributeName).</li><li>Global Secondary Indexes <ul><li>aims to speed up queries on non-key values </li></ul></li></ul><h3 id="4-3-7-DynamoDBRangeKey"><a href="#4-3-7-DynamoDBRangeKey" class="headerlink" title="4.3.7 DynamoDBRangeKey"></a>4.3.7 DynamoDBRangeKey</h3><ul><li>Maps a class property to the sort key of the table. The property mush be one of the scalar string, number or binary types; it cannot be a collection type. </li><li>If the primary key is composite (partition key and sort key), you can use this tag to map your class field to the sort key.</li></ul><pre><code>@DynamoDBTable(tableName=&quot;Reply&quot;)public class Reply {     private Integer id;    private String replyDateTime;    @DynamoDBHashKey(attributeName=&quot;Id&quot;)    public Integer getId() { return id; }    public void setId(Integer id) { this.id = id; }     @DynamoDBRangeKey(attributeName=&quot;ReplyDateTime&quot;)    public String getReplyDateTime() { return replyDateTime; }    public void setReplyDateTime(String replyDateTime) { this.replyDateTime = replyDateTime; }    // Additional properties go here. }</code></pre><h3 id="4-3-8-DynamoDBTable"><a href="#4-3-8-DynamoDBTable" class="headerlink" title="4.3.8 DynamoDBTable"></a>4.3.8 DynamoDBTable</h3><ul><li>Identifies the target table in DynamoDB. </li><li>The @DynamoDBTable annotation can be inherited. Any new class that inherits from the Developer class also maps to the People table. For example, assume that you create a Lead class that inherits from the Developer class. Because you mapped the Developer class to the People table, the Lead class objects are also stored in the same table.</li></ul><pre><code>@DynamoDBTable(tableName=&quot;People&quot;) public class Developer { ...} </code></pre><h3 id="4-3-9-DynamoDBTypeConverted"><a href="#4-3-9-DynamoDBTypeConverted" class="headerlink" title="4.3.9 DynamoDBTypeConverted"></a>4.3.9 DynamoDBTypeConverted</h3><pre><code>+ Annotation to mark a property as using a custom type-converter. + This interface lets you map your own arbitrary data types to a data type that is natively supported by DynamoDB</code></pre><h3 id="4-3-10-DynamoDBTyped"><a href="#4-3-10-DynamoDBTyped" class="headerlink" title="4.3.10 DynamoDBTyped"></a>4.3.10 DynamoDBTyped</h3><pre><code>+ Annotation to override the standard attribute type binding. Standard types do not require the annotation if applying the default attribute binding for that type. </code></pre><h3 id="4-3-11-DynamoDBVersionAttribute"><a href="#4-3-11-DynamoDBVersionAttribute" class="headerlink" title="4.3.11 DynamoDBVersionAttribute"></a>4.3.11 DynamoDBVersionAttribute</h3><ul><li>Identifies a class property for storing an optimistic locking version number. DynamoDBMapper assigns a version number to this property when it saves a new item, and increments it each time you update the item.  </li></ul><h2 id="4-4-The-DynamoDBMapper-Class"><a href="#4-4-The-DynamoDBMapper-Class" class="headerlink" title="4.4 The DynamoDBMapper Class"></a>4.4 The DynamoDBMapper Class</h2><p>The DynamoDBMapper class is the entry point to DynamoDB. It provides access to a DynamoDB endpoint and enables you to access data in various tables, perform various CRUD operations on items, and execute queries and scans against tables. </p><h3 id="4-4-1-save"><a href="#4-4-1-save" class="headerlink" title="4.4.1 save"></a>4.4.1 save</h3><p>Saves the specified object to the table. The object that you wish to save is the only required parameter for this method. You can provide optional configuration parameters using the <strong><em>DynamoDBMapperConfig</em></strong> object. </p><p>If an item that has the same primary key does not exist, this method creates a new item in the table. If an item that has the same primary key exists, it updates the existing item. If the partition key and sort key are of type String, and annotated with @DynamoDBAutoGeneratedKey, then they are given a random universally unique identifier (UUID) if left uninitialized. Version fields annotated with @DynamoDBVersionAttribute will be incremented by one. Additionally, if a version field is updated or a key generated, the object passed in is updated as a result of the operation.</p><p>By default, only attributes corresponding to mapped class properties are updated; any additional existing attributes on an item are unaffected. However, if you specify SaveBehavior.CLOBBER, you can force the item to be completely overwritten.</p><pre><code>mapper.save(obj, new DynamoDBMapperConfig(DynamoDBMapperConfig.SaveBehavior.CLOBBER));</code></pre><h3 id="4-4-2-load"><a href="#4-4-2-load" class="headerlink" title="4.4.2 load"></a>4.4.2 load</h3><p>Retrieves an item from a table. You must provide the primary key of the item that you wish to retrieve. You can provide optional configuration parameters using the DynamoDBMapperConfig object. </p><pre><code>CatalogItem item = mapper.load(CatalogItem.class, item.getId(),                 new DynamoDBMapperConfig(DynamoDBMapperConfig.ConsistentReads.CONSISTENT)); </code></pre><h3 id="4-4-3-delete"><a href="#4-4-3-delete" class="headerlink" title="4.4.3 delete"></a>4.4.3 delete</h3><p>Deletes an item from the table, must pass in an object instance of the mapped class. </p><h3 id="4-4-4-query"><a href="#4-4-4-query" class="headerlink" title="4.4.4 query"></a>4.4.4 query</h3><p>Queries a table or a secondary index. You can query a table or an index only if it has a composite primary key (partition key and sort key). This method requires you to provide a partition key value and a query filter that is applied on the sort key. A filter expression includes a condition and a value.</p><pre><code>String forumName = &quot;DynamoDB&quot;;String forumSubject = &quot;DynamoDB Thread 1&quot;;String partitionKey = forumName + &quot;#&quot; + forumSubject;long twoWeeksAgoMilli = (new Date()).getTime() - (14L*24L*60L*60L*1000L);Date twoWeeksAgo = new Date();twoWeeksAgo.setTime(twoWeeksAgoMilli);SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&quot;);String twoWeeksAgoStr = df.format(twoWeeksAgo);Map&lt;String, AttributeValue&gt; eav = new HashMap&lt;String, AttributeValue&gt;();eav.put(&quot;:v1&quot;, new AttributeValue().withS(partitionKey));eav.put(&quot;:v2&quot;,new AttributeValue().withS(twoWeeksAgoStr.toString()));DynamoDBQueryExpression&lt;Reply&gt; queryExpression = new DynamoDBQueryExpression&lt;Reply&gt;()     .withKeyConditionExpression(&quot;Id = :v1 and ReplyDateTime &gt; :v2&quot;)    .withExpressionAttributeValues(eav);List&lt;Reply&gt; latestReplies = mapper.query(Reply.class, queryExpression);</code></pre><p>By default, the query method returns a “<strong>lazy-loaded</strong>“ collection. It initially returns only one page of results, and then makes a service call for the next page if needed. To obtain all the matching items, you only need to iterate over the latestReplies collection.</p><p>To query an index, you must first <strong><em>model the index as a mapper class</em></strong>, Suppose that the Reply table has a global secondary index named PostedBy-Message-Index. The partition key for this index is PostedBy, and the sort key is Message. The class definition for an item in the index would look like this:</p><pre><code>@DynamoDBTable(tableName=&quot;Reply&quot;)public class PostedByMessage {     private String postedBy;    private String message;    @DynamoDBIndexHashKey(globalSecondaryIndexName = &quot;PostedBy-Message-Index&quot;, attributeName = &quot;PostedBy&quot;)    public String getPostedBy() { return postedBy; }    public void setPostedBy(String postedBy) { this.postedBy = postedBy; }     @DynamoDBIndexRangeKey(globalSecondaryIndexName = &quot;PostedBy-Message-Index&quot;, attributeName = &quot;Message&quot;)    public String getMessage() { return message; }    public void setMessage(String message) { this.message = message; }    // Additional properties go here. }</code></pre><p>The @DynamoDBTable annotation indicates that this index is associated with the Reply table. The @DynamoDBIndexHashKey annotation denotes the partition key (PostedBy) of the index, and @DynamoDBIndexRangeKey denotes the sort key (Message) of the index.</p><p>Now you can use DynamoDBMapper to query the index, retrieving a subset of messages that were posted by a particular user. You must specify withIndexName so that DynamoDB knows which index to query. In the following code snippet, we are querying a global secondary index. Because global secondary indexes support eventually consistent reads, but not strongly consistent reads, we must specify withConsistentRead(false).</p><pre><code>HashMap&lt;String, AttributeValue&gt; eav = new HashMap&lt;String, AttributeValue&gt;();eav.put(&quot;:v1&quot;,  new AttributeValue().withS(&quot;User A&quot;));eav.put(&quot;:v2&quot;,  new AttributeValue().withS(&quot;DynamoDB&quot;));DynamoDBQueryExpression&lt;PostedByMessage&gt; queryExpression = new DynamoDBQueryExpression&lt;PostedByMessage&gt;()    .withIndexName(&quot;PostedBy-Message-Index&quot;)    .withConsistentRead(false)    .withKeyConditionExpression(&quot;PostedBy = :v1 and begins_with(Message, :v2)&quot;)    .withExpressionAttributeValues(eav);List&lt;PostedByMessage&gt; iList =  mapper.query(PostedByMessage.class, queryExpression);</code></pre><h2 id="4-5-Configuration-settings-for-DynamoDBMapper"><a href="#4-5-Configuration-settings-for-DynamoDBMapper" class="headerlink" title="4.5 Configuration settings for DynamoDBMapper"></a>4.5 Configuration settings for DynamoDBMapper</h2><p>When you create an instance of DynamoDBMapper, it has certain default behaviors; you can override these defaults by using the DynamoDBmapperConfig class. </p><pre><code>AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();DynamoDBMapperConfig mapperConfig = new DynamoDBMapperConfig(    DynamoDBMapperConfig.SaveBehavior.CLOBBER,    DynamoDBMapperConfig.ConsistentReads.CONSISTENT,    null, //TableNameOverride - leaving this at default setting    DynamoDBMapperConfig.PaginationLoadingStrategy.EAGER_LOADING    );DynamoDBMapper mapper = new DynamoDBMapper(client, mapperConfig, cp);</code></pre><p><a href="https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBMapperConfig.html" target="_blank" rel="noopener">API doc for DynamoDBMapperConfig</a></p><ul><li>DynamoDBMapperConfig.ConsistentReads<ul><li>EVENTUAL—the mapper instance uses an eventually consistent read request ++<strong>(default)</strong>++</li><li>CONSISTENT—the mapper instance uses a strongly consistent read request. You can use this optional setting with load, query, or scan operations. Strongly consistent reads have implications for performance and billing; see the DynamoDB product detail page for more information</li></ul></li><li>DynamoDBMapperConfig.PaginationLoadingStrategy - controls how the mapper instance processes a paginated list of data, such as results from a query or scan <ul><li>LAZY_LOADING—the mapper instance loads data when possible, and keeps all loaded results in memory ++<strong>(default)</strong>++</li><li>EAGER_LOADING—the mapper instance loads the data as soon as the list is initialized</li><li>ITERATION_ONLY—you can only use an Iterator to read from the list. During the iteration, the list will clear all the previous results before loading the next page, so that the list will keep at most one page of the loaded results in memory. This also means the list can only be iterated once. This strategy is recommended when handling large items, in order to reduce memory overhead</li></ul></li><li>DynamoDBMapperConfig.SaveBehavior enumeration value - Specifies how the mapper instance should deal with attributes during save operations<ul><li>UPDATE—during a save operation, all modeled attributes are updated, and unmodeled attributes are unaffected. Primitive number types (byte, int, long) are set to 0. Object types are set to null. ++<strong>(default)</strong>++</li><li>CLOBBER—clears and replaces all attributes, included unmodeled ones, during a save operation. This is done by deleting the item and re-creating it. Versioned field constraints are also disregarded.</li></ul></li><li>DynamoDBMapperConfig.TableNameOverride object—Instructs the mapper instance to ignore the table name specified by a class’s DynamoDBTable annotation, and instead use a different table name that you supply. This is useful when partitioning your data into multiple tables at run time.</li></ul><h2 id="4-6-Example-CRUD-Operations"><a href="#4-6-Example-CRUD-Operations" class="headerlink" title="4.6 Example: CRUD Operations"></a>4.6 Example: CRUD Operations</h2><p>The following Java code example declares a CatalogItem class that has Id, Title, ISBN and Authors properties. It uses the annotations to map these properties to the ProductCatalog table in DynamoDB. The code example then uses the DynamoDBMapper to save a book object, retrieve it, update it and delete the book item.</p><pre><code>package com.amazonaws.codesamples.datamodeling;import java.io.IOException;import java.util.Arrays;import java.util.HashSet;import java.util.Set;import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;public class DynamoDBMapperCRUDExample {    static AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();    public static void main(String[] args) throws IOException {        testCRUDOperations();        System.out.println(&quot;Example complete!&quot;);    }    @DynamoDBTable(tableName = &quot;ProductCatalog&quot;)    public static class CatalogItem {        private Integer id;        private String title;        private String ISBN;        private Set&lt;String&gt; bookAuthors;        // Partition key        @DynamoDBHashKey(attributeName = &quot;Id&quot;)        public Integer getId() {            return id;        }        public void setId(Integer id) {            this.id = id;        }        @DynamoDBAttribute(attributeName = &quot;Title&quot;)        public String getTitle() {            return title;        }        public void setTitle(String title) {            this.title = title;        }        @DynamoDBAttribute(attributeName = &quot;ISBN&quot;)        public String getISBN() {            return ISBN;        }        public void setISBN(String ISBN) {            this.ISBN = ISBN;        }        @DynamoDBAttribute(attributeName = &quot;Authors&quot;)        public Set&lt;String&gt; getBookAuthors() {            return bookAuthors;        }        public void setBookAuthors(Set&lt;String&gt; bookAuthors) {            this.bookAuthors = bookAuthors;        }        @Override        public String toString() {            return &quot;Book [ISBN=&quot; + ISBN + &quot;, bookAuthors=&quot; + bookAuthors + &quot;, id=&quot; + id + &quot;, title=&quot; + title + &quot;]&quot;;        }    }    private static void testCRUDOperations() {        CatalogItem item = new CatalogItem();        item.setId(601);        item.setTitle(&quot;Book 601&quot;);        item.setISBN(&quot;611-1111111111&quot;);        item.setBookAuthors(new HashSet&lt;String&gt;(Arrays.asList(&quot;Author1&quot;, &quot;Author2&quot;)));        // Save the item (book).        DynamoDBMapper mapper = new DynamoDBMapper(client);        mapper.save(item);        // Retrieve the item.        CatalogItem itemRetrieved = mapper.load(CatalogItem.class, 601);        System.out.println(&quot;Item retrieved:&quot;);        System.out.println(itemRetrieved);        // Update the item.        itemRetrieved.setISBN(&quot;622-2222222222&quot;);        itemRetrieved.setBookAuthors(new HashSet&lt;String&gt;(Arrays.asList(&quot;Author1&quot;, &quot;Author3&quot;)));        mapper.save(itemRetrieved);        System.out.println(&quot;Item updated:&quot;);        System.out.println(itemRetrieved);        // Retrieve the updated item.        DynamoDBMapperConfig config = new DynamoDBMapperConfig(DynamoDBMapperConfig.ConsistentReads.CONSISTENT);        CatalogItem updatedItem = mapper.load(CatalogItem.class, 601, config);        System.out.println(&quot;Retrieved the previously updated item:&quot;);        System.out.println(updatedItem);        // Delete the item.        mapper.delete(updatedItem);        // Try to retrieve deleted item.        CatalogItem deletedItem = mapper.load(CatalogItem.class, updatedItem.getId(), config);        if (deletedItem == null) {            System.out.println(&quot;Done - Sample item is deleted.&quot;);        }    }}</code></pre><h2 id="4-7-Examples-Batch-Write-Query-Scan-Optimistic-Locking-with-Version-Number"><a href="#4-7-Examples-Batch-Write-Query-Scan-Optimistic-Locking-with-Version-Number" class="headerlink" title="4.7 Examples: Batch Write + Query + Scan + Optimistic Locking with Version Number"></a>4.7 Examples: Batch Write + Query + Scan + Optimistic Locking with Version Number</h2><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.BatchWriteExample.html" target="_blank" rel="noopener">BatchWrite</a></p><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.QueryScanExample.html" target="_blank" rel="noopener">Query and Scan</a></p><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.OptimisticLocking.html" target="_blank" rel="noopener">Optimistic Locking With Version Number</a></p><h2 id="4-8-Example-Mapping-Arbitrary-Data"><a href="#4-8-Example-Mapping-Arbitrary-Data" class="headerlink" title="4.8 Example: Mapping Arbitrary Data"></a>4.8 Example: Mapping Arbitrary Data</h2><p>In addtion to the supported java types, you can use types in your application for which there is no direct mapping to the DynamoDB types. </p><blockquote><p> To map these types, you must provide an implementation that converts your complex type to a DynamoDB supported type and vice-versa, and annotate the complex type accessor method using the @DynamoDBTypeConverted annotation. </p></blockquote><p>The converter code transforms data when objects are saved or loaded. It is also used for all operations that consume complex types. Note that when comparing data during query and scan operations, the comparisons are made against the data stored in DynamoDB.</p><p>For example, consider the following CatalogItem class that defines a property, Dimension, that is of DimensionType. This property stores the item dimensions, as height, width, and thickness. Assume that you decide to store these item dimensions as a string (such as 8.5x11x.05) in DynamoDB. The following example provides converter code that converts the DimensionType object to a string and a string to the DimensionType.</p><pre><code>package com.amazonaws.codesamples.datamodeling;import java.io.IOException;import java.util.Arrays;import java.util.HashSet;import java.util.Set;import com.amazonaws.regions.Regions;import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverter;import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;public class DynamoDBMapperExample {    static AmazonDynamoDB client;    public static void main(String[] args) throws IOException {        // Set the AWS region you want to access.        Regions usWest2 = Regions.US_WEST_2;        client = AmazonDynamoDBClientBuilder.standard().withRegion(usWest2).build();        DimensionType dimType = new DimensionType();        dimType.setHeight(&quot;8.00&quot;);        dimType.setLength(&quot;11.0&quot;);        dimType.setThickness(&quot;1.0&quot;);        Book book = new Book();        book.setId(502);        book.setTitle(&quot;Book 502&quot;);        book.setISBN(&quot;555-5555555555&quot;);        book.setBookAuthors(new HashSet&lt;String&gt;(Arrays.asList(&quot;Author1&quot;, &quot;Author2&quot;)));        book.setDimensions(dimType);        DynamoDBMapper mapper = new DynamoDBMapper(client);        mapper.save(book);        Book bookRetrieved = mapper.load(Book.class, 502);        System.out.println(&quot;Book info: &quot; + &quot;\n&quot; + bookRetrieved);        bookRetrieved.getDimensions().setHeight(&quot;9.0&quot;);        bookRetrieved.getDimensions().setLength(&quot;12.0&quot;);        bookRetrieved.getDimensions().setThickness(&quot;2.0&quot;);        mapper.save(bookRetrieved);        bookRetrieved = mapper.load(Book.class, 502);        System.out.println(&quot;Updated book info: &quot; + &quot;\n&quot; + bookRetrieved);    }    @DynamoDBTable(tableName = &quot;ProductCatalog&quot;)    public static class Book {        private int id;        private String title;        private String ISBN;        private Set&lt;String&gt; bookAuthors;        private DimensionType dimensionType;        // Partition key        @DynamoDBHashKey(attributeName = &quot;Id&quot;)        public int getId() {            return id;        }        public void setId(int id) {            this.id = id;        }        @DynamoDBAttribute(attributeName = &quot;Title&quot;)        public String getTitle() {            return title;        }        public void setTitle(String title) {            this.title = title;        }        @DynamoDBAttribute(attributeName = &quot;ISBN&quot;)        public String getISBN() {            return ISBN;        }        public void setISBN(String ISBN) {            this.ISBN = ISBN;        }        @DynamoDBAttribute(attributeName = &quot;Authors&quot;)        public Set&lt;String&gt; getBookAuthors() {            return bookAuthors;        }        public void setBookAuthors(Set&lt;String&gt; bookAuthors) {            this.bookAuthors = bookAuthors;        }        @DynamoDBTypeConverted(converter = DimensionTypeConverter.class)        @DynamoDBAttribute(attributeName = &quot;Dimensions&quot;)        public DimensionType getDimensions() {            return dimensionType;        }        @DynamoDBAttribute(attributeName = &quot;Dimensions&quot;)        public void setDimensions(DimensionType dimensionType) {            this.dimensionType = dimensionType;        }        @Override        public String toString() {            return &quot;Book [ISBN=&quot; + ISBN + &quot;, bookAuthors=&quot; + bookAuthors + &quot;, dimensionType= &quot;                + dimensionType.getHeight() + &quot; X &quot; + dimensionType.getLength() + &quot; X &quot; + dimensionType.getThickness()                + &quot;, Id=&quot; + id + &quot;, Title=&quot; + title + &quot;]&quot;;        }    }    static public class DimensionType {        private String length;        private String height;        private String thickness;        public String getLength() {            return length;        }        public void setLength(String length) {            this.length = length;        }        public String getHeight() {            return height;        }        public void setHeight(String height) {            this.height = height;        }        public String getThickness() {            return thickness;        }        public void setThickness(String thickness) {            this.thickness = thickness;        }    }    // Converts the complex type DimensionType to a string and vice-versa.    static public class DimensionTypeConverter implements DynamoDBTypeConverter&lt;String, DimensionType&gt; {        @Override        public String convert(DimensionType object) {            DimensionType itemDimensions = (DimensionType) object;            String dimension = null;            try {                if (itemDimensions != null) {                    dimension = String.format(&quot;%s x %s x %s&quot;, itemDimensions.getLength(), itemDimensions.getHeight(),                        itemDimensions.getThickness());                }            }            catch (Exception e) {                e.printStackTrace();            }            return dimension;        }        @Override        public DimensionType unconvert(String s) {            DimensionType itemDimension = new DimensionType();            try {                if (s != null &amp;&amp; s.length() != 0) {                    String[] data = s.split(&quot;x&quot;);                    itemDimension.setLength(data[0].trim());                    itemDimension.setHeight(data[1].trim());                    itemDimension.setThickness(data[2].trim());                }            }            catch (Exception e) {                e.printStackTrace();            }            return itemDimension;        }    }}</code></pre><h1 id="5-Best-Practices"><a href="#5-Best-Practices" class="headerlink" title="5. Best Practices"></a>5. Best Practices</h1><h2 id="5-1-Partition-Key-Design"><a href="#5-1-Partition-Key-Design" class="headerlink" title="5.1 Partition Key Design"></a>5.1 Partition Key Design</h2><p>Generally speaking, you should design your application for <strong>uniform activity across all logical partition keys</strong> in the Table and its secondary indexes. You can determine the access patterns that your application requires, and estimate the total RCUs and WCUs that each table and secondary Index requires.</p><p>As traffic starts to flow, DynamoDB automatically supports your access patterns using the throughput you have provisioned, as long as the traffic against a given partition key does not exceed 3000 RCUs or 1000 WCUs.</p><h3 id="5-1-1-Using-Burst-Capacity-Effectively"><a href="#5-1-1-Using-Burst-Capacity-Effectively" class="headerlink" title="5.1.1 Using Burst Capacity Effectively"></a>5.1.1 Using Burst Capacity Effectively</h3><p>DynamoDB provides some flexibility in your per-partition throughput provisioning by providing burst capacity, as follows. Whenever you are not fully using a partition’s throughput, DynamoDB reserves a portion of that unused capacity for later bursts of throughput to handle usage spikes.</p><p>DynamoDB currently retains up to <strong>five minutes (300 seconds)</strong> of unused read and write capacity. During an occasional burst of read or write activity, these extra capacity units can be consumed quickly—even faster than the per-second provisioned throughput capacity that you’ve defined for your table.</p><h3 id="5-1-2-Adaptive-Capacity"><a href="#5-1-2-Adaptive-Capacity" class="headerlink" title="5.1.2 Adaptive Capacity"></a>5.1.2 Adaptive Capacity</h3><p>When data access is imbalanced, a “hot” partition can receive such a higher volume of read and write traffic compared to other partitions. In extreme cases, throttling can occur if a single partition receives more than 3,000 RCUs or 1,000 WCUs. </p><p>To better accommodate uneven access patterns, DynamoDB adaptive capacity enables your application to continue reading and writing to hot partitions without being throttled, provided that traffic does not exceed your table’s total provisioned capacity or the partition maximum capacity. Adaptive capacity works by automatically increasing throughput capacity for partitions that receive more traffic.</p><h1 id="6-Working-with-Stream"><a href="#6-Working-with-Stream" class="headerlink" title="6. Working with Stream"></a>6. Working with Stream</h1><p>DynamoDB streams captures a time-ordered sequence of item-level modifications in any DynamoDB table, and stores this information in a log for up to 24 hours. Applications can access this log and view the data items as they appeared before and after they were modified, in near real time.</p><blockquote><p>A DynamoDB stream is an ordered flow of information about changes to items in an Amazon DynamoDB table. When you enable a stream on a table, DynamoDB captures information about every modification to data items in the table. </p></blockquote><p>Whenever an application creates, updates, or deletes items in the table, DynamoDB Streams writes a stream record with the primary key attribute(s) of the items that were modified. A stream record contains information about a data modification to a single item in a DynamoDB table. You can configure the stream so that the stream records capture additional information, such as the “before” and “after” images of modified items.</p><p>DynamoDB Streams guarantees the following: </p><ul><li>Each stream record appears exactly once in the stream </li><li><strong>For each item that is modified in a DynamoDB table, the stream records appear in the same sequence as the actual modifications to the item.</strong></li></ul><p>DynamoDB Streams writes stream records in near real time, so that you can build applications that consume these streams and take action based on the contents.</p><p>Use one endpoint for accessing DynamoDB, and another endpoint within same region for accessing DynamoDB streams. </p><h2 id="6-1-Reading-and-Processing-a-Stream"><a href="#6-1-Reading-and-Processing-a-Stream" class="headerlink" title="6.1 Reading and Processing a Stream"></a>6.1 Reading and Processing a Stream</h2><p>To read and process a stream, your application will need to connect to a DynamoDB Streams endpoint and issue API requests. </p><p>A stream consists of stream records. Each stream record represents a single data modification in the DynamoDB table to which the stream belongs. Each stream record is assigned a sequence number, reflecting the order in which the record was published to the stream.</p><p>Stream records are organized into groups, or shards. Each shard acts as a container for multiple stream records, and contains information required for accessing and iterating through these records. The stream records within a shard are removed automatically after 24 hours.</p><p>Shards are ephemeral: They are created and deleted automatically, as needed. Any shard can also split into multiple new shards; this also occurs automatically. (Note that it is also possible for a parent shard to have just one child shard.) A shard might split in response to high levels of write activity on its parent table, so that applications can process records from multiple shards in parallel.</p><p>Because shards have a lineage (parent and children), an application must always process a parent shard before it processes a child shard. This will ensure that the stream records are also processed in the correct order. (If you use the DynamoDB Streams Kinesis Adapter, this is handled for you: Your application will process the shards and stream records in the correct order, and automatically handle new or expired shards, as well as shards that split while the application is running.</p><p>To access a stream and process the stream records within, you must do the following: </p><ul><li>Determine the unique Amazon Resource Name (ARN) of the stream that you want to access.</li><li>Determine which shard(s) in the stream contain the stream records that you are interested in.</li><li>Access the shard(s) and retrieve the stream records that you want</li></ul><h2 id="6-2-DynamoDB-Streams-API"><a href="#6-2-DynamoDB-Streams-API" class="headerlink" title="6.2 DynamoDB Streams API"></a>6.2 DynamoDB Streams API</h2><p><a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Operations_Amazon_DynamoDB_Streams.html" target="_blank" rel="noopener">API Instructions</a></p><h3 id="6-2-1-ListStreams"><a href="#6-2-1-ListStreams" class="headerlink" title="6.2.1 ListStreams"></a>6.2.1 ListStreams</h3><p>returns a list of stream descriptors for the current account and endpoint. You can optionally request just the stream descriptors for a particular table name.</p><h3 id="6-2-2-DescribeStream"><a href="#6-2-2-DescribeStream" class="headerlink" title="6.2.2 DescribeStream"></a>6.2.2 DescribeStream</h3><p>returns detailed information about a given stream. The output includes a list of shards associated with the stream, including the shard IDs.</p><h3 id="6-2-3-GetShardIterator"><a href="#6-2-3-GetShardIterator" class="headerlink" title="6.2.3 GetShardIterator"></a>6.2.3 GetShardIterator</h3><p>returns a shard iterator, which describes a location within a shard. You can request that the iterator provide access to the oldest point, the newest point, or a particular point in the stream.</p><h3 id="6-2-4-GetRecords"><a href="#6-2-4-GetRecords" class="headerlink" title="6.2.4 GetRecords"></a>6.2.4 GetRecords</h3><p>returns the stream records from within a given shard. </p><h2 id="6-3-Using-the-DynamoDB-Streams-Kinesis-Adapter-to-Process-Stream-Records"><a href="#6-3-Using-the-DynamoDB-Streams-Kinesis-Adapter-to-Process-Stream-Records" class="headerlink" title="6.3 Using the DynamoDB Streams Kinesis Adapter to Process Stream Records"></a>6.3 Using the DynamoDB Streams Kinesis Adapter to Process Stream Records</h2><p><a href="https://aws.amazon.com/blogs/database/how-to-perform-ordered-data-replication-between-applications-by-using-amazon-dynamodb-streams/" target="_blank" rel="noopener">How to perform ordered data replication between applications by using Amazon DynamoDB Streams</a></p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> DynamoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.11 Deploying Applications</title>
      <link href="/Developing-on-AWS-Note-11-Deploying-Applications/"/>
      <url>/Developing-on-AWS-Note-11-Deploying-Applications/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DevOps"><a href="#1-DevOps" class="headerlink" title="1. DevOps"></a>1. DevOps</h1><ul><li>Application is the application plus all of the associated infrastructure</li><li>includes<ul><li>VPCs </li><li>load balancers</li><li>auto scaling groups </li><li>Amazon RDS databases</li><li>Amazon S3 bucket </li><li>elastiCache servers</li></ul></li><li>deploying in the cloud helps break down these traditional silos. Bugs due to different environment. </li><li>practices<ul><li>microservices</li><li>CI/ CD</li><li>Infrastructure as code </li></ul></li><li>Tools <ul><li>AWS Code Services </li></ul></li><li>Under a DevOps model, development and operations are no longer siloed. </li><li>Sometimes, those two functions are merged into a single team where engineers work across the entire application lifecycle, from development and test to deployment to operations, and develop a range of skills not limited to a single function. </li><li>Quality assurance and security teams could become more tightly integrated with development and operations throughout the application lifecycle. </li></ul><h1 id="2-Release-Processes-Major-Phases"><a href="#2-Release-Processes-Major-Phases" class="headerlink" title="2. Release Processes Major Phases"></a>2. Release Processes Major Phases</h1><p>Each steps can be automated without the entire release process being automated. </p><ul><li>Source<ul><li>Check in source code such as .java files </li><li>Code review</li></ul></li><li>Build<ul><li>Compile code </li><li>style checkers</li><li>code metrics</li><li>create container images </li></ul></li><li>Test <ul><li>Integration tests with other systems</li><li>load testing</li><li>UI tests</li><li>penetration testing </li></ul></li><li>Deploy<ul><li>Deployment to production environments </li></ul></li><li>Monitor<ul><li>Monitor in production to quickly detect unusual activity or errors</li></ul></li></ul><h1 id="3-Understanding-CI-amp-CD"><a href="#3-Understanding-CI-amp-CD" class="headerlink" title="3. Understanding CI &amp; CD"></a>3. Understanding CI &amp; CD</h1><ul><li><p>Continuous Integration </p><ul><li>The practice of checking code and verifying each change with an automated build and test process</li><li>Require teams to write automated tests which can improve the quality of the software being released and reduce the time it takes to validate that the new version of software is good. </li><li>Architecture for cloud Continuous Integration<ul><li>Developer commits changes to the central repo. Pre-commit hooks should run and verify that the code meets specified requirements</li><li>A CI server pulls the changes from the central repo and builds the code</li><li>The CI server runs all required tests against the new branch or mainline change. </li><li>The CI server returns a report to developer and stops the build job if a failure occurs. </li><li>If the changes pass the required tests, the CI server builds the artifacts</li><li>The CI server pushes artifacts to the package builder</li><li>The <strong>package builder</strong> gets configuration information from the version control system </li><li>The pacakge builder uses the configuration information and the artifacts to build the specified packages </li><li>the packages are stored in a repository </li><li>the repo uses a post-receive hook to deploy specific packages to staging. </li><li>Do not fear rollbacks. Errors will happen, mistakes will be made, and the benefit of employing version control systems is that when appropriate, you can always revert to a previously working state and save yourself the time and effort of trying to debug </li></ul></li></ul></li><li><p>Continuous Delivery</p><ul><li>It extends continuous Integration to include testing out to production-like stages and running verification testing against those deployments. </li><li>CD may extend all the way to a production deployment, but they have some form of manual intervention between a code check-in and when that code is available for customers to use</li></ul></li><li><p>Continuous Deployment </p><ul><li>extends continuous delivery and is the automated release of software to customers from check in through to production without human intervention.  </li></ul></li></ul><h1 id="4-How-do-you-deploy-all-infrastructure-along-with-your-application"><a href="#4-How-do-you-deploy-all-infrastructure-along-with-your-application" class="headerlink" title="4. How do you deploy all infrastructure along with your application?"></a>4. How do you deploy all infrastructure along with your application?</h1><ul><li>Infrastructure as code <ul><li>Define your AWS environment so that it can be created in a repeatable automated fashion </li><li>stand up identical dev/ test environments on demand </li><li>use the same code to create your production environment that you used to create your other environments</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CI/ CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.10 Docker, ECS, Security</title>
      <link href="/Developing-on-AWS-Note-10-Docker-ECS-Security/"/>
      <url>/Developing-on-AWS-Note-10-Docker-ECS-Security/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Why-Containers"><a href="#1-Why-Containers" class="headerlink" title="1. Why Containers?"></a>1. Why Containers?</h1><h2 id="1-1-Benefits"><a href="#1-1-Benefits" class="headerlink" title="1.1 Benefits"></a>1.1 Benefits</h2><ul><li>software development lifecycle<ul><li>source code</li><li>code repository </li><li>build env</li><li>artifact repository </li><li>test environment</li><li>deployment env</li></ul></li><li>Containers<ul><li>a method of <strong>operating system virtualization</strong> that allow you to run an application and its dependencies in resource-isolated processes. Containers allow you to easily package an application’s code, configurations, and dependencies into easy to use building blocks that deliver <strong>environmental consistency, operational efficiency, developer productivity, and version control</strong> </li><li>help resolve problems<ul><li>different application stacks</li><li>different hardware deployment environments</li><li>run applications across different envs</li><li>migration to different envs</li></ul></li><li>benefits<ul><li>allow you to easily package an application’s code, configurations, and dependencies into easy to use building blocks that deliver environmental consistency, operational efficiency, developer productivity, and version control</li></ul></li></ul></li><li>docker containers<ul><li>decouple applications from operating systems </li></ul></li><li>Containers vs VM <ul><li>Containers can run on any Linux system with appropriate kernel feature support and the Docker daemon present. This makes them extremely portable. Your laptop, your VM, your EC2 instance, and your bare metal server are all potential hosts.</li><li>The lack of a hypervisor requirement also results in almost no noticeable performance overhead. The processes are talking directly to the kernel and are largely unaware of their container silo. Most containers boot in just a couple of seconds.</li><li>Where VMs are isolated at the operating system level, containers are isolated at the kernel level. This means that several applications can run on a single host operating system, and yet still have their own file system, storage, RAM, libraries, essentially, their own “view” of the system. </li></ul></li></ul><h2 id="1-2-When-to-use-Docker-Containers"><a href="#1-2-When-to-use-Docker-Containers" class="headerlink" title="1.2 When to use Docker Containers"></a>1.2 When to use Docker Containers</h2><ul><li>Distributed apps and microservices<ul><li>breaking up monoliths </li><li>service oriented architecture</li></ul></li><li>Batch Jobs<ul><li>short lived jobs</li><li>variety and flexibility </li><li>elastic</li></ul></li><li>CI/ CD pipelins<ul><li>packaging your code in a Docker images</li><li>test</li><li>deploy in production </li></ul></li></ul><h2 id="1-3-Microservices-architecture-with-Containers"><a href="#1-3-Microservices-architecture-with-Containers" class="headerlink" title="1.3 Microservices architecture with Containers"></a>1.3 Microservices architecture with Containers</h2><p>Using Docker, all of the different tiers of your Web application architecture could be <strong>constructed as independent Docker containers</strong>. If you are deploying a microservices architecture, you could <strong>implement each service as its own separate Docker container</strong>. Such an approach has several advantages: </p><ul><li>You can distribute running services across instances on an Amazon EC2 fleet.</li><li>You can <strong>run multiple services on a single Amazon EC2 instance within your fleet</strong>. This allows maximizing the CPU and memory usage of your existing instances.</li><li>You can <strong>run multiple different versions of a service simultaneously</strong> - even on the same machine, assuming that they bind to different ports. This allows you to release breaking changes in services while retaining backward compatibility with applications that may not have yet been modified to work against the new version.</li></ul><h2 id="1-4-Docker-Image-Registry"><a href="#1-4-Docker-Image-Registry" class="headerlink" title="1.4 Docker Image Registry"></a>1.4 Docker Image Registry</h2><ul><li>Amazon Elastic Container Registry (Amazon ECR) is a fully-managed Docker container registry that makes it easy for you to store, manage, and deploy Docker container images. </li><li>Amazon ECR can be used standalone and also has deep integration with Amazon ECS, simplifying your development to production workflow. </li><li>Amazon ECR eliminates the need to operate your own container repositories or worry about scaling the underlying infrastructure. </li><li>Amazon ECR hosts your images in a highly available and scalable architecture, allowing you to reliably deploy containers for your applications.</li></ul><h1 id="2-Amazon-Container-Services"><a href="#2-Amazon-Container-Services" class="headerlink" title="2. Amazon Container Services"></a>2. Amazon Container Services</h1><ul><li>You need a way to intelligently place your containers on the hosts that have the resources and that means you need to know the state of everything in your system.</li><li>Amazon Container Services<ul><li>management <ul><li>deploy, schedule, scale,</li><li>Elastic Container Service (ECS)</li><li>Elastic Container Service for Kubernetes (EKS)</li></ul></li><li>hosting <ul><li>Amazon EC2</li><li>AWS Fargate</li></ul></li><li>Image Registry <ul><li>Amazon Elastic Container Registry (ECR)</li></ul></li></ul></li></ul><h1 id="3-Developing-Secure-Applications"><a href="#3-Developing-Secure-Applications" class="headerlink" title="3. Developing Secure Applications"></a>3. Developing Secure Applications</h1><h2 id="3-1-AWS-Certificates-Manager"><a href="#3-1-AWS-Certificates-Manager" class="headerlink" title="3.1 AWS Certificates Manager"></a>3.1 AWS Certificates Manager</h2><ul><li>AWS Certificate Manager is a service that lets you easily provision, manage, and deploy public and private Secure Sockets Layer/ Transport Layer Security (SSL/ TLS) certificates for use with AWS services and your internal connected resources. </li><li>SSL/ TLS are used to secure network communications and establish the identity of websites over the internet as well as resources on private networks. </li><li>With ACM, you can quickly request a certificate, deploy it on ACM-integrated AWS resources, such as Elastic Load Balancing, Amazon CloudFront distributions, and APIs on API Gateway, and let ACM handle certificate renewals. </li><li>It also enables you to create private certificates for your internal resources and manage the certificate lifecycle centrally. Public and private certificates provisioned through ACM for use with ACM-integrated services are free.</li></ul><h2 id="3-2-AWS-Secrets-Manager"><a href="#3-2-AWS-Secrets-Manager" class="headerlink" title="3.2 AWS Secrets Manager"></a>3.2 AWS Secrets Manager</h2><ul><li>Rotate, manage, and retrieve databse credentials, API keys, and other secrets throughout their lifecycle. </li><li>IT administrators<ul><li>store and manage access to secrets securely and at scale</li></ul></li><li>Security administrators<ul><li>audit and monitor the use of secrets, and rotate secrets without a risk of breaking applications </li><li>offer secret rotation with build-in integration for Amazon RDS for MySQL, PostgreSQL and Amazon Aurora. </li></ul></li><li>Developers<ul><li>avoid dealing with secrets in the applications </li></ul></li></ul><h2 id="3-3-AWS-Security-Token-Service"><a href="#3-3-AWS-Security-Token-Service" class="headerlink" title="3.3 AWS Security Token Service"></a>3.3 AWS Security Token Service</h2><ul><li>provides trusted users with temporary security credentials </li><li>configurable credential lifetime</li><li>once expired, cannot be reused</li><li>use IAM policies to control the privileges </li><li>no limit on the number of temporary credentials issued </li><li>Important points<ul><li>all calls go to the global endpoint, by default</li><li>global endpoint maps to the US East region </li><li>Regional endpoints are activated by default</li><li>use AWS cloudTrail to log SRS calls</li></ul></li></ul><h2 id="3-4-Identity-Providers"><a href="#3-4-Identity-Providers" class="headerlink" title="3.4 Identity Providers"></a>3.4 Identity Providers</h2><ul><li>an alternative to create IAM users in AWS account</li><li>can manage user identities outside of AWS, and you can give these external user identities permissions to use AWS resources in account </li><li>To use an identity provider, create an IAM identity provider entity to establish trust between your AWS account and the external identity provider.</li></ul><h2 id="3-5-Security-Assetion-Markup-Language-SAML"><a href="#3-5-Security-Assetion-Markup-Language-SAML" class="headerlink" title="3.5 Security Assetion Markup Language (SAML)"></a>3.5 Security Assetion Markup Language (SAML)</h2><ul><li>Use single sign-on to sign in to all of your SAML-enbabled applications by using a single set of credentials </li><li>Manage access to your applications centrally </li></ul><h2 id="3-6-Amazon-Cognito"><a href="#3-6-Amazon-Cognito" class="headerlink" title="3.6 Amazon Cognito"></a>3.6 Amazon Cognito</h2><ul><li>Allow saving and synchronizing user data on different devices</li><li>Allow access to AWS cloud services using <ul><li>public login providers</li><li>own user identity system </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Security </tag>
            
            <tag> Docker </tag>
            
            <tag> ECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.9 Step Functions, ElasticCache</title>
      <link href="/Developing-on-AWS-Note-9-Step-Functions-ElasticCache/"/>
      <url>/Developing-on-AWS-Note-9-Step-Functions-ElasticCache/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Understanding-the-need-for-step-functions"><a href="#1-Understanding-the-need-for-step-functions" class="headerlink" title="1. Understanding the need for step functions"></a>1. Understanding the need for step functions</h1><ul><li><p>Step functions make it easy to coordinate components of distributed applications and microservices by using visual workflows. </p></li><li><p>Microservices are processes that communicate with each other over a network to complete a larger goal. </p></li><li><p>Applications built as a collections of microservices are more resilient and easier to scale. </p></li><li><p>Have cases that we begin to have more functions and they continue to grow</p></li><li><p>Need a mechanism to scale out, easily handle errors and timeouts, easily build and operate</p></li></ul><h1 id="2-Intro-to-AWS-Step-Functions"><a href="#2-Intro-to-AWS-Step-Functions" class="headerlink" title="2. Intro to AWS Step Functions"></a>2. Intro to AWS Step Functions</h1><ul><li>define a workflow called a state machine made up of states</li><li>each order is an execution through this state machine </li><li>each execution starts with an input and the states transform it</li><li>step functions keep track of the state of each execution </li><li>actually, it’s a web service that enables you to coordinate the components of distributed applications and microservices using visual workflows.</li><li>provides a reliable way to coordinate components and step through the functions of your application. </li><li>automatically triggers and tracks each step, and retries when there are errors</li><li>lifecycle<ul><li>define workflow as a series of steps and transitions between each step, also known as a state machine</li><li>step functions ingests your JSON template and turns it into a real-time graphical view , help you make sense of your state machine’s current state</li></ul></li><li>benefits <ul><li>productivity<ul><li>build applications quickly  </li></ul></li><li>agility<ul><li>scale and recover reliably </li></ul></li><li>resilience <ul><li>evolve applications easily </li></ul></li></ul></li><li>Terminology<ul><li>state machine - workflow template<ul><li>an object that has a set number of operating conditions that depend on its previous condition to determine output </li><li>AWS step functions allows you to create and automate state machines within the AWS env<ul><li>with the use of a JSON-based Amazon State Language</li><li>a collection states, that can to work (task states), determine which states to transition to next (Choicestates), stop an execution with an error</li></ul></li><li>state common features<ul><li>each state must have a type field indicating what type of state it is</li><li>each state can have an optinal comment field to hold a human readable comment about, or description of, the state</li><li>Each state (except a Succeed or Fail state) requires a Next field or, alternatively, can become a terminal state by specifying an End field.</li></ul></li><li>state types<ul><li>task </li><li>choise - adds branching logic</li><li>parallel </li><li>wait</li><li>fail</li><li>succeed </li><li>pass</li></ul></li></ul></li><li>execution - specific workflow based on template</li><li>task - lambda function or activity <ul><li>An activity consists of program code or a task that waits for <strong>an operator to perform</strong> an action or to provide input. You can host activities on Amazon EC2, on Amazon ECS, or even on mobile devices. Activities poll Step Functions using the <strong>GetActivityTask</strong> and <strong>SendTaskSuccess</strong>, <strong>SendTaskFailure</strong>, and <strong>SendTaskHeartbeat</strong> API actions. Activities represent workers (processes or threads), implemented and hosted by you, that perform a specific task.</li><li>A Lambda function is a cloud-native task that runs on AWS Lambda. You can write Lambda functions in a variety of programming languages, using the AWS Management Console or by uploading code to Lambda. Lambda functions execute a function using AWS Lambda. To specify a Lambda function, use the ARN of the Lambda function in the Resource field </li></ul></li><li>activity - handle for external compute</li><li>task token - ID for instance of activity </li><li>heartbeat - ping from task indicating that it is still running </li><li>failure </li><li>success </li></ul></li></ul><h1 id="3-Caching-for-scalibility"><a href="#3-Caching-for-scalibility" class="headerlink" title="3. Caching for scalibility"></a>3. Caching for scalibility</h1><h2 id="3-1-Caching-Overview"><a href="#3-1-Caching-Overview" class="headerlink" title="3.1 Caching Overview"></a>3.1 Caching Overview</h2><ul><li>Benefits<ul><li>Provides high throughput, low latency access to commonly accessed application data, <strong>by storing the data in memory</strong></li><li>imrpove the speed </li><li>reduce the response latency </li><li>the following types of information or applications can benefit from caching:<ul><li>results of database queries</li><li>results of intensive calculations</li><li>results of remote API calls </li></ul></li></ul></li></ul><ul><li>when to consider caching your data<ul><li>data that requires a slow and expensive query to acquire </li><li>relatively static and frequently accessed data </li><li>information that can afford to be stale for some time</li><li>data should be relatively static and frequently accessed</li><li>Cache data should always be considered and treated as stale</li></ul></li></ul><h2 id="3-2-Caching-Strategy"><a href="#3-2-Caching-Strategy" class="headerlink" title="3.2 Caching Strategy"></a>3.2 Caching Strategy</h2><h1 id="4-Amazon-ElastiCache"><a href="#4-Amazon-ElastiCache" class="headerlink" title="4. Amazon ElastiCache"></a>4. Amazon ElastiCache</h1><ul><li>a webservice that makes it easy to deploy, operate and scale an in-memory cache in the cloud</li><li>ElastiCache improves the performance of web applications by allowing you to retrieve information from fast, managed, in-memory caches, instead of relying entirely on slower disk-based databases </li><li>ElastiCache supports<ul><li>Memcached</li><li>Redis</li></ul></li></ul><h2 id="4-1-Memcached-vs-Redis"><a href="#4-1-Memcached-vs-Redis" class="headerlink" title="4.1 Memcached vs Redis"></a>4.1 Memcached vs Redis</h2><ul><li>Memcached<ul><li>multithreading </li><li>low maintenance </li><li>easy horizontal scalability with auto discovery </li><li>single AZ </li><li>lack persistence<ul><li>if you terminate node or scale it down, you lose the data stored in that cache memory  </li></ul></li></ul></li><li>Redis<ul><li>single thread </li><li>support for data structures <ul><li>strings</li><li>hashes</li><li>lists</li><li>sets</li><li>sorted sets with range queries</li><li>bitmaps</li><li>hypolog</li><li>geospatial indexes with radius queries</li></ul></li><li>persistence </li><li>atomic operations </li><li>pub/ sub messaging</li><li>read replicas/ failover</li><li>cluster mode/ sharded clusters</li><li>multiple AZ </li></ul></li></ul><h2 id="4-2-Terminology"><a href="#4-2-Terminology" class="headerlink" title="4.2 Terminology"></a>4.2 Terminology</h2><ul><li>node<ul><li>smallest building block of an ElastiCache deployment </li></ul></li><li>cluster<ul><li>a logical grouping of one or more nodes</li></ul></li><li>replication group<ul><li>a collection of Redis clusters</li><li>with one primary read-write cluster and up to five secondary, read only clusters, which are called read replicas. </li><li>each read replica maintains a copy of the data from the primary cluster</li><li>asynchronous replication mechanisms are used to keep the read-replicas synchronized with the primary cluster </li><li>applications can <strong>read from any cluster in the replication group</strong> </li><li>applications can write only to the primary cluster</li><li>read replicas enhance scalability and guard against data loss </li></ul></li></ul><h2 id="4-3-Cache-hit-amp-Cache-Miss-Scenarios"><a href="#4-3-Cache-hit-amp-Cache-Miss-Scenarios" class="headerlink" title="4.3 Cache hit &amp; Cache Miss Scenarios"></a>4.3 Cache hit &amp; Cache Miss Scenarios</h2><ul><li>cache hit occurs when the cache contains the information required</li><li>cache miss occurs when the cache does not contain the information requested</li><li>ElastiCache caches data as key-value pairs.</li><li>An application can retrieve a value corresponding to a specific key. </li><li>An application can store an item in cache by specifying a key, value, and an expiration time(TTL). </li></ul><h2 id="4-4-Cache-strategies"><a href="#4-4-Cache-strategies" class="headerlink" title="4.4 Cache strategies"></a>4.4 Cache strategies</h2><ul><li>Lazy loading<ul><li>Whenever your application requests data, it first makes the request to the ElastiCache cache. </li><li>If the data exists in the cache and is current, ElastiCache returns the data to your application. </li><li>If the data does not exist in the cache, or the data in the cache has expired, your application requests the data from your data store which returns the data to your application. </li><li>Your application then writes the data received from the store to the cache so it can be more quickly retrieved next time it is requested.</li><li>Lazy Loading is a caching strategy that loads data into the cache only when necessary. </li><li>Avoid filling up the cache with unnecessary data</li><li>advantages<ul><li>Only requested data is cached. Since most data is never requested, lazy loading avoids filling up the cache with data that isn’t requested.</li><li>Node failures are not fatal. </li><li>When a node fails and is replaced by a new, empty node the application continues to function, though with increased latency. As requests are made to the new node each cache miss results in a query of the database and adding the data copy to the cache so that subsequent requests are retrieved from the cache.</li></ul></li><li>disadvantages<ul><li>a cache miss penalty, each cache miss results in 3 trips<ul><li>initial request for data from the cache</li><li>query of the database for the data</li><li>write the data to the cache </li></ul></li><li>may receive stale data because another application may have updated the data in the database behind the scenes. </li></ul></li></ul></li><li>write through <ul><li>this strategy adds data or updates data in the cache whenever data is written to the database </li><li>advantages<ul><li>data in the cache is never stale, always current</li></ul></li><li>disadvantages<ul><li>write penalty, involve two trips<ul><li>a write to cache, and a write to the database</li><li>missing data: When a new node is created to scale up or to replace a failed node, the node does not contain all data. Data continues to be missing until it is added or updated in the database. In this scenario, you might choose to use a lazy caching approach to repopulate the cache</li><li>Unused data: Since most data is never read, there can be a lot of data in the cluster that is never read.</li><li>Cache churn: The cache may be updated often if certain records are updated repeatedly.</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Step Functions </tag>
            
            <tag> ElasticCache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.8 SQS, SNS</title>
      <link href="/Developing-on-AWS-Note-8-SQS-SNS/"/>
      <url>/Developing-on-AWS-Note-8-SQS-SNS/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Why-use-a-queuing-service"><a href="#1-Why-use-a-queuing-service" class="headerlink" title="1. Why use a queuing service?"></a>1. Why use a queuing service?</h1><p>Consider a scenario where an application produces messages that must be processed by a consumer downstream. The producer needs to know how to connect to the consumer. If the consumer fails for some reason, then messages may be lost. If new consumer instances are launched to recover from failure or to keep up with an increased workload, the producer needs to be explicitly made aware of the new consumer instances. In this scenario, the producer is tightly coupled with the consumers and the coupling is prone to brittleness.</p><p>In this way, there will be a strong interdependency between teh consumer and the producer, which is a <strong>tightly coupled system</strong>. which is not fault tolerant, if any one component in our system fails, the entire system will fail. </p><ul><li>Having a queue service decouples the producer from the consumer.<ul><li>queue is a temprary repositiory for messages that are awaiting processing. </li><li>acts as a buffer between the component producing data and the component receiving the data for processing. </li><li>A queue supports multiple producers and consumers interacting with the same queue. </li><li>A single queue can be used <strong>simultaneously</strong> by many distributed application components, with no need for those components to coordinate with each other to share the queue. A queue delivers each message at least once.</li><li>In this way, a producer can put messages on the queue regardless if they are being read by the consumer or not. </li></ul></li></ul><h1 id="2-Developing-with-Amazon-Simple-Queue-Service-Amazon-SQS"><a href="#2-Developing-with-Amazon-Simple-Queue-Service-Amazon-SQS" class="headerlink" title="2. Developing with Amazon Simple Queue Service (Amazon SQS)"></a>2. Developing with Amazon Simple Queue Service (Amazon SQS)</h1><h2 id="2-1-Types"><a href="#2-1-Types" class="headerlink" title="2.1 Types"></a>2.1 Types</h2><ul><li>Standard queues<ul><li>message ordering is not guranteed</li><li>message may be duplicated </li><li>maximum throughput </li></ul></li><li>FIFO queue<ul><li>message ordering is preserved</li><li>message only receive once</li><li>limited throughput (300 transactions per second)</li></ul></li></ul><h2 id="2-2-Used-to-solve-tightly-linked-systems"><a href="#2-2-Used-to-solve-tightly-linked-systems" class="headerlink" title="2.2 Used to solve tightly linked systems"></a>2.2 Used to solve tightly linked systems</h2><ul><li>problem to be solved<ul><li>An example of image processing: the sequential operations of uploading, storing, and encoding the image, creating a thumbnail, and copyrighting are tightly linked to each other. This tight linkage complicates the recovery operations when there has been a failure.</li></ul></li><li>queuing chain pattern<ul><li>Achieve loose coupling of systems by using queues between systems and exchanging messages that transfer jobs</li><li>This enables asynchronous linking of systems.</li><li>lets you increase the number of virtual servers that receive and process the messages in parallel. </li><li>If there is no image to process, you can configure auto scaling to terminate the servers that are in excess.</li></ul></li></ul><h2 id="2-3-Operations"><a href="#2-3-Operations" class="headerlink" title="2.3 Operations"></a>2.3 Operations</h2><h3 id="2-3-1-Client"><a href="#2-3-1-Client" class="headerlink" title="2.3.1 Client"></a>2.3.1 Client</h3><ul><li><p>sendMessage </p><ul><li>send message to a specific queue</li><li>max size: 256 KB </li><li>parameters of a sendMessage operation<ul><li>QueueUrl: specify the url of the queue that the message should be sent to</li><li>MessageBody: specify the message to send </li><li>DelaySeconds: specify the number of seconds to delay a specific message. Messages will become available for processing after the delay time is finished. </li><li>MessageAttributes <ul><li>specify structured metadata about the message<ul><li>timestamp</li><li>signature</li><li>geospatial data</li></ul></li></ul></li></ul></li></ul></li><li><p>receiveMessage</p><ul><li>specify short polling or long polling </li><li>When requesting to get a message from the queue, <strong>you cannot specify which message to get</strong>. You simply specify the maximum number of messages you want to get (up to 10), and Amazon SQS returns up to that maximum number.</li><li>parameters <ul><li>WaitTimeSeconds</li><li>MaxNumberOfMessages</li><li>VisibilityTimeout<ul><li>period of time that a message is invisible to the rest of your application after an application component gets it from the queue.</li><li>prevents multiple components from processing the same message </li><li>during the visibility time, the component that received the message usually processes it and then delete it from the queue. </li><li>this prevents multiple components from processing the same message </li></ul></li></ul></li><li>polling types<ul><li>short polling<ul><li>Amazon SQS samples a subset of the servers (based on a weighted random distribution) and returns messages from only the sampled servers</li><li>if you keep retrieving from your queues, SQS samples all the servers, and you will eventually receive all of your messages. </li><li>occurs when the WaitTimeSeconds parameter of a ReceiveMessage call is set to 0 or the queue attribute ReceiveMessageWaitTimeSeconds is 0</li></ul></li><li>long polling<ul><li>better and preferred way to retrieve messages </li><li>if your application has a single thread polling multiple queues, switching from short polling to long polling will likely not work, because the single thread will wait for the long poll timeout on any empty queues, delaying the processing of any queues which may contain messages. </li><li>Amazon SQS long polling doesn’t return a response until a message arrives in the queue or the long poll times out </li><li>inexpensive </li><li>unless the connection time out, the response to the ReceiveMessage request will contain at least one of the available messages. </li><li>Reduce the cost of using Amazon SQS by reducing the number of empty responsed and false empty responses. </li></ul></li></ul></li></ul></li></ul><ul><li>deleteMessage<ul><li>When you receive the message, you <strong>must delete it from the queue</strong> to acknowledge that you processed the message and no longer need it. </li><li>You specify which message to delete by providing the <strong>receipt handle</strong> that Amazon SQS returned when you received the message.</li></ul></li><li>deleteMessageBatch</li><li>PuregeQueue<ul><li>delete all the messages in an AmazonSQS queue without deleting the queue itself.  </li></ul></li></ul><h3 id="2-3-2-Basic-Queue-Operations"><a href="#2-3-2-Basic-Queue-Operations" class="headerlink" title="2.3.2 Basic Queue Operations"></a>2.3.2 Basic Queue Operations</h3><ul><li>CreateQueue <ul><li>attributes<ul><li>delaySeconds<ul><li>the delivery of all messages in the queue will be delayed </li><li>default 0, maximum 15 min</li></ul></li><li>maximumMessageSize<ul><li>the limit of how many bytes a message can contain before Amazon SQS rejects it </li><li>max 256 KB</li></ul></li><li>messageRetentionPeriod<ul><li>seconds SQS retains a message </li></ul></li><li>ReceiveMessageWaitTimeSeconds<ul><li>time for which a ReceiveMessage call will wait for a message to arrive </li><li>max configurable wait time is 20 seconds </li><li>default 0</li></ul></li><li>VisibilityTimeout<ul><li>period of time that a message is invisbile to the rest of your application  </li></ul></li></ul></li></ul></li><li>SetQueueAttributes</li><li>GetQueueAttributes</li><li>GetQueueUrl</li><li>ListQueues</li><li>DeleteQueue</li></ul><h2 id="2-4-Message-Lifecycle"><a href="#2-4-Message-Lifecycle" class="headerlink" title="2.4 Message Lifecycle"></a>2.4 Message Lifecycle</h2><ul><li>Immediately after a message is received, it <strong>remains in the queue</strong>. To prevent other consumers from processing the message again, Amazon SQS sets a visibility timeout, a period of time during which Amazon SQS prevents other consumers from receiving and processing the message. </li><li>The default visibility timeout for a message is 30 seconds. The maximum is 12 hours.</li><li>Or consumer could send a separate request which acknowledges that you no longer need the message because you have successfully received and processed it </li><li>Maximum message retention period<ul><li>SQS automatically deletes messages that have been in a queue for more than maximum message retension period</li><li>default is 4 days </li><li>can be set from 60 seconds to 14 days </li></ul></li></ul><h2 id="2-5-Queue-and-Message-Identifiers"><a href="#2-5-Queue-and-Message-Identifiers" class="headerlink" title="2.5 Queue and Message Identifiers"></a>2.5 Queue and Message Identifiers</h2><ul><li>Queue URL <ul><li>when creating a new queue, must provide a queue name that is unique within the scope of all your queues. </li><li>AWS assgin each queue an identifier called a <strong>queue URL</strong>, which includes the queue name and other components that Amazon SQS determines. </li></ul></li><li>Message ID<ul><li>For each message, Amazon SQS returns a system-assigned message ID in the SendMessage response. </li></ul></li><li>Receipt Handle<ul><li>Each time you receive a message from a queue, you receive a receipt handle for that message. </li><li>The handle is assoiciated with the act of receiving the message, not with the message itself. </li><li>To delete a message, you need the message’s receipt handle instead of the message ID. </li></ul></li></ul><h2 id="2-6-Dead-letter-queues"><a href="#2-6-Dead-letter-queues" class="headerlink" title="2.6 Dead letter queues"></a>2.6 Dead letter queues</h2><ul><li>A queue of messages that were not able to be processed </li><li>Use dead-letter queues with standard queues.</li><li>Dead letter queues help you troubleshoot incorrect message transmission operations </li></ul><h2 id="2-7-Sharing-a-Queue"><a href="#2-7-Sharing-a-Queue" class="headerlink" title="2.7 Sharing a Queue"></a>2.7 Sharing a Queue</h2><ul><li>Shared queues<ul><li>Queue can be shared with other AWS accounts</li><li>Queue can be shared anonymously </li><li>A permission gives access to another person to use your queue in some particular way</li><li>A policy is the actual document that contains the permissions you granted </li></ul></li></ul><h2 id="2-8-Use-cases"><a href="#2-8-Use-cases" class="headerlink" title="2.8 Use cases"></a>2.8 Use cases</h2><ul><li>Work queues<ul><li>decouple components of a distributed application that may not all process the same amount of work simultaneourly </li></ul></li><li>Buffer and batch operations<ul><li>add scalability and reliability to your architecture and smooth out temporary volume spikes without losing messages or increasing latency </li></ul></li><li>request offloading<ul><li>move slow operations off of interactive request paths by enqueuing the request</li></ul></li><li>Auto scaling<ul><li>Use queue to help determine the load on an application, and when combined with auto sclaing, you can sclae the numebr of Amazon Ec3 intances out or in, depending on the volumne of traffic </li></ul></li><li>fan out<ul><li>combine SQS with SNS to send identical copies of a message to multiple queues in parallel for simultaneous processing  </li></ul></li></ul><h1 id="3-Amazon-Simple-Notification-Service"><a href="#3-Amazon-Simple-Notification-Service" class="headerlink" title="3. Amazon Simple Notification Service"></a>3. Amazon Simple Notification Service</h1><h2 id="3-1-Introduction"><a href="#3-1-Introduction" class="headerlink" title="3.1 Introduction"></a>3.1 Introduction</h2><ul><li>A web service that makes it easy to set up, operate and send notifications from the cloud.</li><li>Follow the publish-subscribe messaging paradigm, with notifications being delivered to clients using a push mechanism that eliminates the need to periodically check or poll for new information and updates </li><li>When using Amazon SNS, you (as the owner) create a <strong>topic</strong> and <strong>control access to it by defining policies</strong> that determine which publishers and subscribers can communicate with the topic. </li><li>A publisher sends messages to topics they have created or to topics they have permission to publish to. </li><li>Instead of including a specific destination address in each message, a publisher sends a message to the topic. </li><li>Amazon SNS matches the topic to a list of subscribers who have subscribed to that topic and delivers the message to each of those subscribers. </li><li>Each topic has a <strong>unique name</strong> that identifies the Amazon SNS endpoint for <strong>publishers to post messages and subscribers to register for notifications</strong>. Subscribers receive all messages published to the topics that they subscribe to, and all subscribers to a topic receive the same messages.</li><li>Subscriber<ul><li>Web servers </li><li>email addresses</li><li>amazon sqs queues</li><li>aws lambda</li></ul></li><li>topic <ul><li>an access point for allowing recipients to dynamically subscribe for identical copies of the same notification </li></ul></li></ul><h2 id="3-2-Use-case-Fan-out"><a href="#3-2-Use-case-Fan-out" class="headerlink" title="3.2 Use case: Fan out"></a>3.2 Use case: Fan out</h2><ul><li>An Amazon SNS message is sent to a topic and then replicated and pushed to multiple Amazon SQS queues, HTTP endpoints, or email addresses. </li><li>Allow for parallel asynchronous processing</li><li>All subscribers get identical information </li></ul><h2 id="3-3-Operations"><a href="#3-3-Operations" class="headerlink" title="3.3 Operations"></a>3.3 Operations</h2><ul><li>CreateTopic<ul><li>Input: Topic name </li><li>Output: ARN of topic </li><li>creates a topic to which notifications can be published </li><li>action is idempotent, so if the requester already owns a topic with the specified name, that topic’s ARN is returned without creating a new topic </li></ul></li><li>Subscribe<ul><li>Input<ul><li>subscriber’s endpoint</li><li>protocol </li><li>ARN of topic </li></ul></li><li>prepare to subscribe an endpoint by sending the endpoint a confirmation message</li><li>to actually create a subscription, the endpoint owner must call the confirmSubscription action with the token from the confirmation message. </li><li>The ConfirmSubscription request verify an endpoint owner’s intent to receive messages by validating the token sent to the endpoint by an earlier Subscribe action. </li><li>If the token is valid, the action creates a new subscription and returns its ARN </li></ul></li><li>DeleteTopic <ul><li>Input<ul><li>ARN of topic  </li></ul></li><li>Deleting a topic might prevent some messages previously sent to the topic being delivered to subscribers</li><li>Action is idempotent, will not result in an error if the topic doesn’t exist</li></ul></li><li>Publish <ul><li>Input <ul><li>Message</li><li>Messsage attributes</li><li>Message structure : json</li><li>subject </li><li>ARN of topic </li></ul></li><li>output <ul><li>message ID </li></ul></li><li>Sends a message to all of a topic’s subscribed endpoints.</li><li>When a messageId is returned, the message has been saved and Amazon SNS will attempt to deliver it to the topic’s subscribers shortly. </li><li>The format of the outgoing message to each subscribed endpoint depends on the notification protocol selected.</li></ul></li></ul><h2 id="3-4-Best-practices"><a href="#3-4-Best-practices" class="headerlink" title="3.4 Best practices"></a>3.4 Best practices</h2><h3 id="3-4-1-Characteristics-of-Amazon-SNS"><a href="#3-4-1-Characteristics-of-Amazon-SNS" class="headerlink" title="3.4.1 Characteristics of Amazon SNS"></a>3.4.1 Characteristics of Amazon SNS</h3><ul><li>Each notification message contains a single published message</li><li>Message order is not guaranteed</li><li>A message cannot be deleted after it has been published </li><li>Amazon SNS delivery policy can be used to control retries in case of message delivery failure</li><li>Message can contain up to 256 kb of text data</li></ul><h3 id="3-4-2-Manage-Access-to-Amazon-SNS"><a href="#3-4-2-Manage-Access-to-Amazon-SNS" class="headerlink" title="3.4.2 Manage Access to Amazon SNS"></a>3.4.2 Manage Access to Amazon SNS</h3><ul><li>which endpoints</li><li>who can publish notifications</li><li>who can subscribe to notifications</li></ul><h3 id="3-4-3-SQS-vs-SNS"><a href="#3-4-3-SQS-vs-SNS" class="headerlink" title="3.4.3 SQS vs SNS"></a>3.4.3 SQS vs SNS</h3><ul><li>both messaging services within AWS</li><li>SNS<ul><li>allow applications to send time-critical messages to multiple subscribers through a push mechanism</li><li>eliminate the need to periodically check or poll for updates </li></ul></li><li>SQS <ul><li>message queue service used by distributed applications to exchange messages through a polling model, and it can be used to decouple sending and receiving components. </li><li>provides flexibility for distributed components of applications to send and receive messages without requiring each component to be concurrently available</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> SQS </tag>
            
            <tag> SNS </tag>
            
            <tag> Notification Service </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.7 API Gateway</title>
      <link href="/Developing-on-AWS-Note-7-API-Gateway/"/>
      <url>/Developing-on-AWS-Note-7-API-Gateway/</url>
      
        <content type="html"><![CDATA[<h1 id="1-What-is-Amazon-API-Gateway"><a href="#1-What-is-Amazon-API-Gateway" class="headerlink" title="1. What is Amazon API Gateway?"></a>1. What is Amazon API Gateway?</h1><h2 id="1-1-Functionalities"><a href="#1-1-Functionalities" class="headerlink" title="1.1 Functionalities"></a>1.1 Functionalities</h2><ul><li>enables developers to create, publish, maintain, monitor and secure APIs</li><li>allow you to connect your applications to AWS services and other public or private websites</li><li>provides consistent RESTFUL APIs for mobile and web applications to access AWS services and other resources hosted outside of AWS</li><li>Handles all the tasks involved in <strong>accepting and processing</strong> up to hundreds of thousands of concurrent API calls, including <strong>traffic management, authorization and access control, monitoring and API version management</strong></li></ul><h2 id="1-2-Use-cases"><a href="#1-2-Use-cases" class="headerlink" title="1.2 Use cases"></a>1.2 Use cases</h2><ul><li><p>Create a unified API frontend for multiple microservices</p></li><li><p>DDoS protection and throttling for backend </p></li><li><p>Authenticate and authorize requests to a backend</p></li><li><p>Throttle, meter, and monetize API usage by third party developers </p></li><li><p>message transformation and validation</p><ul><li><strong>models</strong> can be created to define a schema for reqeust/ response messages</li><li>A <strong>Mapping Template</strong> can then be used to transform data from one model to another</li><li>request/ response payload and header can be validated against the model</li><li>message transformation and mapping can be done using API Gateway</li><li>customers will often map request messages to a canonical format for downstream applications using API Gateway.  –&gt; <strong>transform a response body from the backend data format to the frontend data format</strong></li></ul></li><li><p>Expose backend resources</p><ul><li>allow you to create an API that acts as a front door for applications to access data, business logic or functionality from your backend service</li><li>expose<ul><li>HTTP endpoints</li><li>AWS services</li><li>AWS Lambda functions</li></ul></li></ul></li><li><p>Increase API performance : Cache</p><ul><li>eploy APIs to Regional or Edge-optimized endpoints to bring them closer to their clients. Cache API responses to the API Gateway response cache.</li><li>You can also enable API caching in Amazon API Gateway to cache your endpoint’s response. </li><li>With caching, you can reduce the number of calls made to your endpoint and also improve the latency of the requests to your API. When you enable caching for a stage, API Gateway caches responses from your endpoint for a specified time-to-live (TTL) period, in seconds. </li><li>API Gateway then responds to the request by looking up the endpoint response from the cache instead of making a request to your endpoint</li></ul></li><li><p>Control Access to APIs</p><ul><li>method level throttling </li><li>client usage throttling and quota limits sepcified in a usage plan </li><li>help prevent one customer from consuming all of your backend system’s capacity</li></ul></li><li><p>Secure API method invocations</p><ul><li>creating a resource policy <ul><li>a JSON policy document that you attach to an API to control whether a specified principal(IAM user or role) can invoke the API </li><li>You can use a resource policy to enable users from a different AWS account to securely access your API or to allow the API to be invoked only from specified source IP address ranges or Classless Inter-Domain Routing (CIDR) blocks.</li></ul></li><li>Creating IAM permission policy, can protect: <ul><li>the creation, deployment, and management of an API</li><li>the invocation of the methods in the API and refresh of its cache</li></ul></li><li>Creating a Private API endpoint that can only be accessed by a VPC client</li><li>Integrating with Amazon Cognito or Lambda authorizers to authenticate and authorize clients before accessing backend resources</li><li>Resource policy and IAM permission capabilities offer flexible and robust access controls that can be applied to an entire API set or individual methods. <h1 id="2-Best-practices"><a href="#2-Best-practices" class="headerlink" title="2. Best practices"></a>2. Best practices</h1></li></ul></li></ul><h2 id="2-1-Developing-an-API"><a href="#2-1-Developing-an-API" class="headerlink" title="2.1 Developing an API"></a>2.1 Developing an API</h2><ul><li>WHen API client requests come from the same region where the API is deployed, choose a regional API endpoint type</li><li>Test invking the API before deploying it</li><li>Use HTTP 500 error code for error handling </li><li>Cache only GET methods </li></ul><h1 id="3-Serverless-Application-Model-SAM"><a href="#3-Serverless-Application-Model-SAM" class="headerlink" title="3. Serverless Application Model (SAM)"></a>3. Serverless Application Model (SAM)</h1><p>Template driven development model for defining serverless apps</p><ul><li>supports <ul><li>Lambda</li><li>API Gateway</li><li>DynamoDB table</li><li>Any resource that AWS CloudFormation supports </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Gateway </tag>
            
            <tag> RESTFul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.6 AWS Serverless platform, Lambda</title>
      <link href="/Developing-on-AWS-Note-6-AWS-Serverless-platform-Lambda/"/>
      <url>/Developing-on-AWS-Note-6-AWS-Serverless-platform-Lambda/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Serverless-Computing"><a href="#1-Serverless-Computing" class="headerlink" title="1. Serverless Computing"></a>1. Serverless Computing</h1><h2 id="1-1-Benefits"><a href="#1-1-Benefits" class="headerlink" title="1.1 Benefits"></a>1.1 Benefits</h2><ul><li>with serverless deployment and operation, only need to<ul><li>build and deploy apps</li><li>monitor and maintain apps</li></ul></li><li>no need to provision, scale and manage any servers </li></ul><h2 id="1-2-Use-cases"><a href="#1-2-Use-cases" class="headerlink" title="1.2 Use cases"></a>1.2 Use cases</h2><ul><li>web applications <ul><li>automatically scale up and down </li><li>run in a highly available configuration across multiple data centers </li></ul></li><li>backends<ul><li>build serverless backends using AWS lambda to handle web, mobile, internet of Things(IoT), and 3rd party APR requests </li></ul></li><li>mobile backends</li><li>data processing <ul><li>execute code in response to triggers <ul><li>changes in data </li><li>shifts in system state</li><li>actions by users</li></ul></li></ul></li></ul><h1 id="2-AWS-serverless-Platform"><a href="#2-AWS-serverless-Platform" class="headerlink" title="2. AWS serverless Platform"></a>2. AWS serverless Platform</h1><ul><li>Compute<ul><li>AWS lambda</li><li>AWS Fargate</li></ul></li><li>API Proxy<ul><li>Amazon API Gateway</li><li>AWS AppSync</li></ul></li><li>Storage<ul><li>Amazon S3</li></ul></li><li>Database<ul><li>Amazon DynamoDB</li><li>Amazon Aurora</li></ul></li><li>Interprocess Messaging<ul><li>Amazon SNS</li><li>Amazon SQS</li></ul></li><li>Orchetration<ul><li>AWS Step Functions </li></ul></li><li>Analytics<ul><li>Amazon Kinesis</li><li>Amazon Athena</li></ul></li><li>Developer Tools<ul><li>Frameworks</li><li>SDKs</li><li>Libraries</li></ul></li></ul><p>Serverless applications don’t require provisioning, maintaining, and administering servers for backend components such as compute, databases, storage, stream processing, message queueing, and more. You also no longer need to worry about ensuring application fault tolerance and availability.</p><h1 id="3-AWS-Lambda"><a href="#3-AWS-Lambda" class="headerlink" title="3. AWS Lambda"></a>3. AWS Lambda</h1><h2 id="3-1-What-is-AWS-Lambda"><a href="#3-1-What-is-AWS-Lambda" class="headerlink" title="3.1 What is AWS Lambda?"></a>3.1 What is AWS Lambda?</h2><ul><li>Compute service that enables you to run code without provisioning or managing servers. </li><li>Pay only for the compute time you consume </li><li>Run code for virtually any type of application or backend service, all with zero administration. </li><li>can set up code to automatically trigger from other AWS services or call it directly from any web or mobile app</li></ul><h2 id="3-2-Concepts"><a href="#3-2-Concepts" class="headerlink" title="3.2 Concepts"></a>3.2 Concepts</h2><ul><li>Event source - what triggers the call<ul><li>Used to pass in event data to the handler </li><li>java/C# supports simple data types and stream input/ output</li><li>includes all of the data and metadata Lambda needs</li></ul></li><li>Context object<ul><li>provides handler runtime information </li><li>interact with Lambda execution environment </li><li>contain<ul><li>AWS requestId - Used to track specific invocations of a Lambda function</li><li>Remaining time - The amount of time in milliseconds that remain before your function timeout occurs</li><li>logging - Each language runtime provides the ability to stream log statements to Amazon CloudWatch Logs.</li></ul></li></ul></li><li>Language choice</li><li>Execution environment - permissions and resources</li><li>Runtime <ul><li>a program that runs a lambda function’s handler method when the function is invoked</li><li>can include a runtime in your function’s deployment package in the form of an executable file named bootstrap</li><li>responsible for running the function’s setup code</li><li>read the handler name</li><li>read invocation events from the runtime API</li><li>runtime passes the event data to the function handler, and posts response from the handler back to Lambda</li></ul></li><li>handler function<ul><li>When a Lambda function is invoked, code execution begins at what is called the handler. The handler is a specific code method (Java, C#) or function (Node.js, Python) that you’ve created and included in your package. </li></ul></li></ul><h2 id="3-3-Using-Lambda"><a href="#3-3-Using-Lambda" class="headerlink" title="3.3 Using Lambda"></a>3.3 Using Lambda</h2><ul><li>Bring own code <ul><li>bring own libraries</li><li>custom runtimes </li></ul></li><li>Simple resource model <ul><li>CPU and network allocated proportionately</li></ul></li><li>Flexible Use<ul><li>Synchronous/ Asynchronous</li><li>Integrated with other AWS services</li></ul></li><li>Flexible Authorization<ul><li>securely grant access to resources and VPCs </li><li>Fine grained control for invoking your functions </li></ul></li></ul><h2 id="3-4-How-it-works"><a href="#3-4-How-it-works" class="headerlink" title="3.4 How it works"></a>3.4 How it works</h2><p>Function can be invoked by</p><ul><li>push model<ul><li>event based invocation </li><li>event sources invoke your Lambda function </li><li>e.g<ul><li>S3, SNS, Cognito, Echo </li></ul></li></ul></li><li>request-response invocation <ul><li>causes Lambda to execute the function <strong>synchronously</strong> and returns the response immediately to the calling application. This invocation type is available for custom applications</li></ul></li><li>pull event model<ul><li>Lambda polls the event source and invokes function when it detects an event</li><li>E.G<ul><li>DynamoDB, SQS, Kinesis </li></ul></li></ul></li></ul><h2 id="3-5-Develop-and-deploy-workflow"><a href="#3-5-Develop-and-deploy-workflow" class="headerlink" title="3.5 Develop and deploy workflow"></a>3.5 Develop and deploy workflow</h2><ul><li>create a lambda handler class in code</li><li>create lambda function </li><li>allow Lambda to assume an IAM role</li><li>upload the code</li><li>invoke the AWS Lambda Function </li><li>Monitor function </li></ul><h2 id="3-6-Lambda-Layers"><a href="#3-6-Lambda-Layers" class="headerlink" title="3.6 Lambda Layers"></a>3.6 Lambda Layers</h2><ul><li><p>Centrally manage code and data that is shared across multiple functions</p><ul><li>reduce size of deployments</li><li>speed up deployment </li><li>Limits<ul><li>5 layers</li><li>250 MB</li></ul></li></ul></li><li><p>Layer</p><ul><li>ZIP archive that contain libraries, a custom runtime, or other dependencies</li><li>with layers, you can use libraries in your function without needing to include them in deployment package</li><li>extracted to the /opt directory in the function execution env </li><li>use AWS Serverless Application Model (AWS SAM) to manage layers and your function’s layer configuration</li></ul></li></ul><h2 id="3-7-Best-practices"><a href="#3-7-Best-practices" class="headerlink" title="3.7 Best practices"></a>3.7 Best practices</h2><ul><li>Function Code<ul><li>Separate the Lambda handler (entry point) from your core logic <ul><li>can make a more unit-testable function </li></ul></li><li>take advantage of Execution Context reuse<ul><li>make sure any externalized configuration or dependencies that your code retrieves are stored and referenced locally after initial execution</li><li>Limit the re-initialization of variables/objects on every invocation. Instead use static initialization/constructor, global/static variables and singletons. Keep alive and reuse connections (HTTP, database, etc.) that were established during a previous invocation.</li></ul></li><li>use environment variables</li><li>control the dependencies in your function’s deployment package</li><li>minimize the complexity of your dependencies <ul><li>Prefer simpler Java dependency injection frameworks like Dagger or Guice, over more complex ones like Spring Framework</li></ul></li><li>avoid using recursive code </li><li>share common dependencies with layers</li></ul></li><li>Function Configuration<ul><li>performance testing your Lambda function for memory<ul><li>crucial part in ensuring you pick the optimum memory size configuration</li><li>Any increase in memory size triggers an equivalent increase in CPU available to your function. </li><li>The memory usage for your function is determined per-invoke and can be viewed in AWS CloudWatch logs.</li></ul></li><li>Load test Lambda Function<ul><li>Determine an optimum timeout value</li><li>Important to analyze how long your function runs so that you can better determine any problems with a dependency service that may increase the concurrency of the function beyond what you expect</li><li>This is especially important when your Lambda function makes network calls to resources that may not handle Lambda’s scaling.</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Lambda </tag>
            
            <tag> Serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.5 DynamoDB</title>
      <link href="/Developing-on-AWS-Note-5-DynamoDB/"/>
      <url>/Developing-on-AWS-Note-5-DynamoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-AWS-Database-Options"><a href="#1-AWS-Database-Options" class="headerlink" title="1. AWS Database Options"></a>1. AWS Database Options</h1><h2 id="1-1-SQL-vs-NoSQL-database"><a href="#1-1-SQL-vs-NoSQL-database" class="headerlink" title="1.1 SQL vs NoSQL database"></a>1.1 SQL vs NoSQL database</h2><table><thead><tr><th>Attr</th><th>SQL</th><th>NoSQL</th></tr></thead><tbody><tr><td>Data Storage</td><td>rows and columns</td><td>key-value, document, wide-column, graph</td></tr><tr><td>Schemas</td><td>fixed</td><td>dynamic</td></tr><tr><td>Querying</td><td>Using SQL</td><td>Focused on collection of documents</td></tr><tr><td>Scalability</td><td>Vertical</td><td>Horizontal</td></tr><tr><td>Transactions</td><td>Supported</td><td>Support varies</td></tr><tr><td>Consistency</td><td>Strong</td><td>Eventual and strong</td></tr></tbody></table><ul><li>Relational Database supports vertical scaling which means that a single server must be made more powerful </li><li>Relational Database support ACID transactions<ul><li>atomicity</li><li>consistency</li><li>isolation </li><li>durability</li></ul></li><li>Relational databases automatically support strong data consistency due to ACID properties of transactions.</li></ul><h2 id="1-2-AWS-database-Options"><a href="#1-2-AWS-database-Options" class="headerlink" title="1.2 AWS database Options"></a>1.2 AWS database Options</h2><table><thead><tr><th>Type</th><th>SQL</th><th>NoSQL</th></tr></thead><tbody><tr><td>Transactional Databses</td><td>Amazon RDS</td><td>Amazon DynamoDB</td></tr><tr><td>Data Analytics/ Relationshiups</td><td>Amazon Redshift</td><td>Amazon Neptune</td></tr><tr><td>In-memory Data Store and Cache</td><td></td><td>Amazon ElastiCache</td></tr></tbody></table><ul><li>Amazon Relational Database Service(RDS): provides relational database services in the cloud with support for the following db engines: <ul><li>AMazon Aurora</li><li>PostgreSQL</li><li>MySQL</li><li>MariaDB</li><li>Oracle</li><li>Microsoft SQL server </li></ul></li><li>Amazon Redshift: fast, fully managed data warehouse<ul><li>includes Redshift Spectrum, allowing you to directly run SQL queries against exabytes of unstructured data in Amazon S3. </li></ul></li><li>Amazon DynamoDB: NoSQL db that supports both document and key-value store models </li><li>Amazon Neptune: fully managed graph databse service<ul><li>fully manged graoh databse service </li><li>purpose-built, high-performance <strong>graph database engine</strong> optimized for storing billions of <strong>relationships</strong> and querying the graph with milliseconds latency.</li><li>A graph database is ideal when you need to create relationships between data and quickly query these relationships. </li><li>This type of requirement is challenging to satisfy using a relational database because you would need multiple tables with multiple foreign keys. </li><li>In addition, SQL queries to navigate this data would require nested queries and complex joins that could quickly become complex and inefficient as your data size grows over time. </li><li>Neptune uses graph structures such as nodes (data entities), edges (relationships), and properties to represent and store data. </li><li>The relationships are stored as first order citizens of the data model. </li><li>This allows data in nodes to be directly linked, dramatically improving the performance of queries that navigate relationships in the data.</li></ul></li><li>Amazon ElastiCache: <strong>in-memory data cache</strong> that supports a fully managed Redis or Memcached engine<ul><li>easier to deploy, operate, and scale an in-memory data store or cache in the cloud. </li><li>improve the performance of web applications by allowing you to retrieve information from fast, managed, in memory caches</li><li>provides <ul><li>redis</li><li>memcached</li></ul></li></ul></li></ul><h1 id="2-DynamoDB"><a href="#2-DynamoDB" class="headerlink" title="2. DynamoDB"></a>2. DynamoDB</h1><h2 id="2-1-Intro"><a href="#2-1-Intro" class="headerlink" title="2.1 Intro"></a>2.1 Intro</h2><p>Amazon DynamoDB is a fast and flexible non-relational database service for all applications that need consistent, <strong>single-digit millisecond latency</strong> at any scale. It is a fully managed cloud database and supports both document and key-value store models.</p><h2 id="2-2-Components"><a href="#2-2-Components" class="headerlink" title="2.2 Components"></a>2.2 Components</h2><ul><li>Table <ul><li>data is stored in tables </li><li>contain<ul><li>item with attributes </li></ul></li></ul></li><li>Partition<ul><li>ddb can divide a table’s items into multiple partitions based on the primary key value. </li><li>an allocation of storage for a table</li><li>backed by SSDs and automatically replicated across multiple Availability Zones within an AWS region</li><li>partition key (hashkey), ddb use this to do partition </li></ul></li><li>sort key (range key) A sort key can be defined to store all of the items with the same partition key value <strong>physically close together and order them by sort key value in the partition</strong>. It represents a one-to-many relationship based on the partition key and enables querying on the sort key attribute.</li><li>Primary key - uniquely identify an Item<ul><li>types<ul><li>partition primary key</li><li>partition and sort primary key</li></ul></li></ul></li><li>item (400 KB at most)<ul><li>collection of attributes </li><li>not cosntrained by a predefined schema</li><li>items in a table can have different types of attributes </li></ul></li><li>attribute<ul><li>name</li><li>data type<ul><li>scalar<ul><li>number, string, binary, boolean, null</li></ul></li><li>multi-valued types <ul><li>string set</li><li>number set</li><li>binary set</li></ul></li><li>Document types<ul><li>List</li><li>Map</li></ul></li></ul></li><li>value</li></ul></li><li>Read/ Write Consistency<ul><li>Read<ul><li>eventually consistent</li><li>strongly consistent: return most up-to-date data</li><li>transactional: provides ACID consistency</li></ul></li><li>write<ul><li>standard</li><li>transactional </li></ul></li></ul></li><li>Read/ write Throughput<ul><li>RCU: number of strongly consistent reads per second of items up to <strong>4KB</strong> in size </li><li>WCU: number of <strong>1KB</strong> writes per second</li></ul></li><li>Secondary Indexes<ul><li>allow you to query data based on non-primary key attributes</li><li>contain<ul><li>alternate key attributes</li><li>primary key attributes</li><li>optinal subset of other attributes from the base table </li></ul></li><li>type<ul><li>GSI<ul><li>queries on this index can span all the data in a table, across all partitions</li><li>can have different partition key and sort key from original table</li><li>key values do not to be unique</li><li>can be deleted </li><li>supports eventually consistent only </li><li>its own provisioned WCU and RCU</li><li>*<em>queries only return attributes that are projected into the index *</em></li></ul></li><li>LSI<ul><li>index is located on the same table partition</li><li>sort key can be any scalar attribute </li><li>cannot be deleted </li><li>support eventually consitent and strong consistent </li><li>use table’s read and write capacity units</li></ul></li></ul></li></ul></li><li>Streams<ul><li>Ordered flow of information about changes to a table </li><li>contains changes to items in a single table </li><li>When you make an update to a table, DynamoDB first <strong>persists the data durably</strong> to the table. </li><li>It then asynchronously updates the corresponding stream with information about the changes made. </li><li>The asynchronous update is made to the stream with <strong>sub-second latency</strong>. </li><li>The update to the stream does not affect the write throughput of the table</li><li><strong>stricly in the order</strong> </li><li>each change contains exactly one stream record, available for 24 hours</li><li>streams scale by splitting data across shards </li><li>shards in detail<ul><li>A shard is created per partition in your DynamoDB table. If a partition split is required due to too many items in the same partition, the shard gets split into children as well.</li><li>DynamoDB Streams captures a time-ordered sequence of item-level modifications in your DynamoDB table. This time-ordered sequence is preserved at a per shard level. In other words, the order within a shard is established based on the order in which items were created, updated or deleted. </li></ul></li><li>configuration<ul><li>StreamEnabled: specify whether a stream is enabled or disabled </li><li>StreamViewType: specify the information that will be written to the stream whenever data in the table is modified<ul><li>KEYS_ONLY: only the key attributes </li><li>NEW_IMAGE: entire item, as it appears after modified</li><li>OLD_IMAGE: entire item, as it appears before modified</li><li>NEW_AND_OLD_IMAGES: both the new and old images of the item</li></ul></li></ul></li><li>when a stream is created, DDB assigns an ARN(Amazon Resource Name) that can be used to retrieve information about a stream. </li></ul></li><li>Global table<ul><li>A collection of one or more DynamoDB tables, all ownd by a single AWS account, identified as replica tables </li><li>A replica table (or replica, for short) is a single DynamoDB table that functions as a part of a global table. Each replica stores the same set of data items.</li><li>data replication<ul><li>Any changes made to any item in any replica table will be replicated to all of the other replicas within the same global table. </li><li>propagate within seconds </li></ul></li><li>concurrent updates <ul><li>all replicas agree on the latest update, and converge toward a state in which they all have identical data</li></ul></li><li>Read Consistency <ul><li>An application can read and write data to any replica table. </li><li>If your application only uses eventually consistent reads, and only issues reads against one AWS region, then it will work without any modification. </li><li>However, if your application requires strongly consistent reads, then it must perform all of its strongly consistent reads and writes in the same region. DynamoDB does not support strongly consistent reads across AWS regions; </li><li>therefore, if you write to one region and read from another region, the read response might include stale data that doesn’t reflect the results of recently-completed writes in the other region. </li></ul></li></ul></li><li>Backup and Restore<ul><li>on-demand backup and restore capabilities </li><li>all backups in DDB work without consuming any provisioned throughput on the table </li><li>point-in-time recovery can restore the table to any point in time during last 35 days</li></ul></li></ul><h2 id="2-3-APIs-and-operations"><a href="#2-3-APIs-and-operations" class="headerlink" title="2.3 APIs and operations"></a>2.3 APIs and operations</h2><h3 id="2-3-1-Control-operations"><a href="#2-3-1-Control-operations" class="headerlink" title="2.3.1 Control operations"></a>2.3.1 Control operations</h3><p>Create and manage DynamoDB tables. Let you work with indexes, streams, and other objects that are dependent on tables. </p><h3 id="2-3-2-Data-operations"><a href="#2-3-2-Data-operations" class="headerlink" title="2.3.2 Data operations"></a>2.3.2 Data operations</h3><p>Perform CRUD actions on data in a table. Also let you read data from a secondary index. </p><ul><li>PutItem<ul><li>create a new item or replace an existing item </li></ul></li><li>GetItem<ul><li>reads an item from a table</li></ul></li><li>UpdateItem<ul><li>edit an existing item’s attributes, or adds a new item to the table</li><li>can perform a conditional update on an existing item </li><li>can only bring some attributes instead of all comparing with putItem</li></ul></li><li>deleteItem<ul><li>can delete an item in a table using its primary key  </li></ul></li></ul><h3 id="2-3-3-Stream-operations"><a href="#2-3-3-Stream-operations" class="headerlink" title="2.3.3 Stream operations"></a>2.3.3 Stream operations</h3><p>Enable or disable a stream on a table, and allow access to the data modification records contained in a stream. </p><h3 id="2-3-4-Object-persistence-Model"><a href="#2-3-4-Object-persistence-Model" class="headerlink" title="2.3.4 Object persistence Model"></a>2.3.4 Object persistence Model</h3><ul><li>Allow you to persist client-side objects in DynamoDB<ul><li>supports the mapping of objects to tables</li></ul></li><li>Provides higher-level programming interfaces to:<ul><li>connect to DynamoDB</li><li>perform CRUD operations</li><li>execute queries</li></ul></li></ul><h3 id="2-3-5-Batch-Operations"><a href="#2-3-5-Batch-Operations" class="headerlink" title="2.3.5 Batch Operations"></a>2.3.5 Batch Operations</h3><ul><li>BatchGetItem<ul><li>Read up to 16MB of data consisting of up to 100 items from multiple tables</li></ul></li><li>BatchWriteItem<ul><li>write up to 16MB of data consisting of up to 25 put or delete requests in multiple tables </li></ul></li><li>retry <ul><li>if one request in a batch fails, the entire operation does not fail</li><li>retry with failed keys and data returned </li></ul></li></ul><h3 id="2-3-6-Transactional-Operations"><a href="#2-3-6-Transactional-Operations" class="headerlink" title="2.3.6 Transactional Operations"></a>2.3.6 Transactional Operations</h3><ul><li>TransactWriteItems<ul><li>contains a write set </li><li>includes one or more PutItem, updateItem, and DeleteItem operations across</li></ul></li><li>TransactGetItems<ul><li>contains a read set </li><li>includes one or more getItem operations across multiple tables</li></ul></li></ul><h2 id="2-4-On-demand-mode"><a href="#2-4-On-demand-mode" class="headerlink" title="2.4 On-demand mode"></a>2.4 On-demand mode</h2><p>Amazon DynamoDB on-demand is a flexible billing option capable of serving thousands of requests per second without capacity planning. DynamoDB on-demand offers pay-per-request pricing for read and write requests so that you pay only for what you use. </p><h2 id="2-5-Query-and-Scan"><a href="#2-5-Query-and-Scan" class="headerlink" title="2.5 Query and Scan"></a>2.5 Query and Scan</h2><ul><li>Query <ul><li>reads from a table or secondary index only the items that match the primary key specified in the key condition expression.  </li><li>parameters<ul><li>tableName</li><li>KeyContditionExpression<ul><li>must specify partition key name and value</li></ul></li><li>ProjectExpression </li><li>ConsistentRead</li><li>FilterExpression<ul><li>a string that contains conditions that DDB applies after the query operation, but before the data is returned to you </li><li>all other records are discarded </li></ul></li></ul></li></ul></li><li>Scan <ul><li>reads all items from the table or index </li><li>parameters <ul><li>tableName</li><li>ProjectionExpression <ul><li>a string that identify one or more attributes to retrieve from the table </li></ul></li><li>consistentRead</li><li>filterExpression </li></ul></li></ul></li></ul><h2 id="2-6-Best-Practices"><a href="#2-6-Best-Practices" class="headerlink" title="2.6 Best Practices"></a>2.6 Best Practices</h2><ul><li>Uniform workloads</li><li>One-To-Many tables<ul><li>If your table has items that store a large number of values in an attribute of set type, such as string set or number set, consider removing the set attribute from the table and splitting it as separate items in another table.</li><li>If you frequently access large items in a table but do not use the large attribute values, consider storing frequently accessed smaller attributes in a separate table</li></ul></li><li>Optimistic Locking with Version Number <ul><li>Use optimistic locking with a version number to make sure that an item has not changed since the last time you read it. </li><li>Maintain a version number to check that the item has not been updated between the last read and update </li></ul></li></ul><h2 id="2-7-DynamoDB-Accelerator-DAX"><a href="#2-7-DynamoDB-Accelerator-DAX" class="headerlink" title="2.7 DynamoDB Accelerator (DAX)"></a>2.7 DynamoDB Accelerator (DAX)</h2><ul><li>deliver fast response times for accessing eventually consistent data </li><li>DAX is a DynamoDB compatible caching service that enables you to benefit from fast in memory performance for demanding applications. It addresses three core scenarios: <ul><li>reduce the response times of eventually consistent read workloads by an order of magnitude, from single-digit milliseconds to microsends</li><li>reduce operational and application complexity by providing a managed service that is API-compatible with Amazon DynamoDB</li><li>DAX provides increased throughput and potential operational cost savings by reducing the need to over-provision read capacity units</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> DynamoDB </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.4 Storage Options, S3 in detail</title>
      <link href="/Developing-on-AWS-Note-4-Storage-Options-S3-in-detail/"/>
      <url>/Developing-on-AWS-Note-4-Storage-Options-S3-in-detail/</url>
      
        <content type="html"><![CDATA[<h1 id="1-AWS-Storage-Options"><a href="#1-AWS-Storage-Options" class="headerlink" title="1. AWS Storage Options"></a>1. AWS Storage Options</h1><ul><li>Amazon S3<ul><li>Scalable, highly durable object storage in the cloud</li></ul></li><li>Amazon Glacier<ul><li>Low-cost, highly durable <strong>archive</strong> storage in the cloud</li></ul></li><li>Amazon EFS<ul><li>Scalable network file storage for Amazon EC2 instances</li><li>network file system that can grow to petabytes </li><li>allows massively parallel access from EC2 instances to your data within a region</li><li>designed to <strong>meet the performance needs of big data and analytics</strong></li></ul></li><li>Amazon EBS<ul><li>Network attached volumes that provide durable block-level storage for Amazon EC2 instances </li></ul></li><li>AWS storage gateway<ul><li>change to hybrid later </li><li>connects an on-premises software appliance with cloud-based storage to provide seamless and secure storage integration between an organization’s on-premises IT environment and the AWS storage infrastructure like Amazon S3, Amazon Glacier and EBS.</li></ul></li></ul><h1 id="2-Amazon-S3"><a href="#2-Amazon-S3" class="headerlink" title="2. Amazon S3"></a>2. Amazon S3</h1><p>Amazon Simple Storage Service provides develipers with <strong>high secure, durable, and scalable object storage</strong>. </p><h2 id="2-1-Use-cases"><a href="#2-1-Use-cases" class="headerlink" title="2.1 Use cases"></a>2.1 Use cases</h2><ul><li>storage solution <ul><li>content storage and distribution</li></ul></li><li>backup</li><li>archiving </li><li>big data analytics</li><li>static web site hosting</li><li>disaster recovery <ul><li>cross region replication(CRR) automatically replicates every S3 object to a destination bucket located in a different AWS Region. </li></ul></li></ul><h2 id="2-2-Components"><a href="#2-2-Components" class="headerlink" title="2.2 Components"></a>2.2 Components</h2><ul><li>bucket<ul><li>global unique</li><li>use only lower case letters, numbers and hyphens</li><li>associated with a region<ul><li>choose region by considering<ul><li>latency</li><li>cost</li><li>regulatory requirements </li></ul></li></ul></li></ul></li><li>Object<ul><li>S3 refers to files as objects </li><li>you can store any number of objects inside bucket</li><li>each object is <strong>identified by a unique key</strong></li><li>object metadata</li><li>version<ul><li>each object has a version ID if you enable this feature</li><li>Object locking supported on versioned buckets<ul><li>use object lock to prevent data from being changed, overwritten, or deleted </li></ul></li></ul></li><li>URLs for S3 Objects<ul><li>Path style URL<ul><li><code>http://&lt;region-specific endpoint&gt;/&lt;bucket name&gt;/&lt;object name&gt;</code></li></ul></li><li>virtual hosted-style URL<ul><li><code>http://&lt;bucket name&gt;.s3.amazonaws.com/&lt;object key&gt;</code> </li></ul></li></ul></li></ul></li><li>Key<ul><li>unique identifier for each object in an S3 bucket </li></ul></li><li>Object Url<ul><li>specify region, bucket name, object name(key)</li></ul></li></ul><h2 id="2-3-Operations"><a href="#2-3-Operations" class="headerlink" title="2.3 Operations"></a>2.3 Operations</h2><h3 id="2-3-1-put"><a href="#2-3-1-put" class="headerlink" title="2.3.1 put"></a>2.3.1 put</h3><ul><li>upload object</li><li>copy object <ul><li>create copies of an object </li><li>rename obejcts by creating a copy and deleting the original object </li><li>move objects across S3 locations </li><li>update object metadata </li></ul></li><li>limits<ul><li>5 GB at most in a single PUT operation </li><li>recommened: use multipart upload if size &gt; 100MB<ul><li>Multipart upload allows you to upload a single object as a set of parts. </li><li>You can upload each part separately. </li><li>If one of the parts fails to upload, you can retransmit that particular part without retransmitting the remaining parts. After all the parts of your object are uploaded to the server, you must send a complete multipart upload request that indicates that multipart upload has been completed. </li><li>Amazon S3 then assembles these parts and creates the complete object. </li><li>Amazon S3 retains all parts on the server until you complete or abort the upload.</li><li>You can upload parts in parallel to improve throughput, recover quickly from network issues, pause and resume object uploads </li></ul></li></ul></li></ul><h3 id="2-3-2-Get"><a href="#2-3-2-Get" class="headerlink" title="2.3.2 Get"></a>2.3.2 Get</h3><ul><li>retrieve a complete object in a single GET request </li><li>You can also retrieve an object in parts by specifying the range of bytes needed. This is useful in scenarios where network connectivity is poor or your application can or must process only subsets of object data.</li></ul><h3 id="2-3-3-Select"><a href="#2-3-3-Select" class="headerlink" title="2.3.3 Select"></a>2.3.3 Select</h3><ul><li>Select content from Object instead of retrieving Object </li><li>filter of content handled at S3 service level <ul><li>works by providing the ability to retrieve a subset of data from an object in Amazon S3 using simple SQL expressions </li><li>simply change API from get to select </li></ul></li></ul><h3 id="2-3-4-Delete"><a href="#2-3-4-Delete" class="headerlink" title="2.3.4 Delete"></a>2.3.4 Delete</h3><ul><li>can delete a single object or delete multiple objects in a single delete request <ul><li>versioning disabled <ul><li>can permanently delete an object by specifying the key that you want to delete</li></ul></li><li>versioning enabled <ul><li>can permanently delete an object by invoking a delete request with a key and version ID</li><li>must delete each individual version to completely remove an object </li></ul></li></ul></li></ul><h3 id="2-3-5-Listing-Keys"><a href="#2-3-5-Listing-Keys" class="headerlink" title="2.3.5 Listing Keys"></a>2.3.5 Listing Keys</h3><ul><li>There is no hierarchy of objects in S3 buckets. You can use prefixes in key names to group similar items. </li><li>You can use delimiters (any string such as / or _) in key names to organize your keys and create a logical hierarchy</li></ul><h2 id="2-4-Features"><a href="#2-4-Features" class="headerlink" title="2.4 Features"></a>2.4 Features</h2><h3 id="2-4-1-Pre-Signed-URLs"><a href="#2-4-1-Pre-Signed-URLs" class="headerlink" title="2.4.1 Pre-Signed URLs"></a>2.4.1 Pre-Signed URLs</h3><ul><li>Provide access to PUT/ GET objects without opening permissions to do anything else </li><li>Use permissions of the user who creates the URL</li><li>Provide security credentials, a bucket name, an object key, HTTP method and expiration date and time </li><li>onlu valid until expiration time </li></ul><h3 id="2-4-2-Date-Encryption"><a href="#2-4-2-Date-Encryption" class="headerlink" title="2.4.2 Date Encryption"></a>2.4.2 Date Encryption</h3><ul><li>Securing data in transit <ul><li>SSL-encrypted endpoints with HTTPS</li><li>client-side encryption - via SDKs</li><li>server-side encryption<ul><li>S3 encrypts your data at the object level  </li></ul></li></ul></li><li>Securing data at rest on server<ul><li>Amazon S3 managed keys (SSE-S3)</li><li>AWS KMS-managed keys (SSE-KMS)</li><li>Customer-provided keys (SSE-C)</li></ul></li></ul><h3 id="2-4-3-Corss-Origin-Resource-Sharing-CORS"><a href="#2-4-3-Corss-Origin-Resource-Sharing-CORS" class="headerlink" title="2.4.3 Corss Origin Resource Sharing (CORS)"></a>2.4.3 Corss Origin Resource Sharing (CORS)</h3><ul><li>defines a way for client web applications that are loaded in one domain to interact with resources in a different domain.</li></ul><h2 id="2-5-Best-practices"><a href="#2-5-Best-practices" class="headerlink" title="2.5 Best practices"></a>2.5 Best practices</h2><ul><li>Avoid unnecessary requests <ul><li>handle noSuchBucket errors instead of checking for existence of fixed buckets </li><li>set the object metadata before uploading an object </li><li>avoid using the copy operation to update metadata</li><li>cache bucket and key names if your application design allows it </li></ul></li><li>Network latency<ul><li>choose the bucket region closest to latency-sensitive customers </li><li>consider compressing data stored in Amazon S3 to reduce the size of data transferred and storage used</li><li>use a CDN to distribute content </li></ul></li><li>Data integrity<ul><li>ensure the data has not been corrupted in transit</li><li>check MD5 checksum of the object retrieved from the GET and PUT operation <ul><li>AWS SDK automatically specifies MD5 checksum in a PUT operation. Amazon S3 recalculates MD5 checksum and compares it with the specified value. </li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> S3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.3  - CloudWatch, CloudTrail, server-design for fail</title>
      <link href="/Developing-on-AWS-Note-3-CloudWatch-CloudTrail-server-design-for-fail/"/>
      <url>/Developing-on-AWS-Note-3-CloudWatch-CloudTrail-server-design-for-fail/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CloudWatch"><a href="#1-CloudWatch" class="headerlink" title="1. CloudWatch"></a>1. CloudWatch</h1><h2 id="Why-use-Amazon-CloudWatch"><a href="#Why-use-Amazon-CloudWatch" class="headerlink" title="Why use Amazon CloudWatch?"></a>Why use Amazon CloudWatch?</h2><p>Need it to: </p><ul><li>monitor CPU, memory, disk I/O, network  -&gt; metrics</li><li>react to application log events and availability -&gt; logs/ event</li><li>automatically scale ec2 instance fleet -&gt; logs/ event</li><li>view operational status and identify issues -&gt; alarms, dashboard </li></ul><p>Actually, we could use Amazon CloudWatch to gain <strong>system-wide visibility</strong> into <strong>resource utilization</strong>, <strong>application performance</strong>, and <strong>operational health</strong>. You can use these insights to react and keep your application running smoothly. Amazon CloudWatch monitors your AWS Cloud resources and your cloud-powered applications. It tracks the metrics so that you can visualize and review them. You can also set alarms that will fire when a metric goes beyond a limit that you specified. CloudWatch gives you visibility into resource utilization, application performance, and operational health.</p><h1 id="2-CloudTrail"><a href="#2-CloudTrail" class="headerlink" title="2. CloudTrail"></a>2. CloudTrail</h1><p>CloudTrail is integrated with several AWS services. </p><ul><li>EC2</li><li>VPC</li><li>S3</li><li>EBS</li><li>DDB</li><li>RDS</li><li>Redshift</li><li>CloudFormation </li><li>IAM</li><li>…etc. </li></ul><p>AWS CloudTrail is an AWS service that generates logs of calls to the AWS API. AWS CloudTrail can <strong>record all activity</strong> against the services it monitors. Here are questions that you can answer using CloudTrail logs: <strong>who, when, what, which, where</strong>? While the coverage is extensive, not all services are covered in CloudTrail logs. You can use the AWS API <strong>call history produced by CloudTrail to track changes to AWS resources</strong>, including creation, modification, and deletion of AWS resources such as Amazon EC2 instances, Amazon VPC security groups, and Amazon EBS volumes.</p><p>You can use the CloudTrail console to view the last 90 days of recorded API activity and events in an AWS region. You can also download a file with that info, or a subset of info based on the filter and time range you choose</p><h1 id="3-Best-practices-of-developing-cloud-apps"><a href="#3-Best-practices-of-developing-cloud-apps" class="headerlink" title="3. Best practices of developing cloud apps"></a>3. Best practices of developing cloud apps</h1><ul><li>consider designing applications that are <strong>loosely coupled</strong>. <ul><li>think of your application as a consumer and provider of services </li><li>design and develop app as <strong>granular components</strong> that can be delivered and scaled independently. </li></ul></li><li>Architect for resilience; <ul><li>Set up your servers to scale automatically based on the number of users concurrently visiting your application.</li><li>Autoscaling would enable your application to handle a surge in volumn during a sale or propmotion and go back to normal </li><li>set up a <strong>cluster of nodes</strong> such that when one node fails, another node automatically picks up all the traffic. </li><li>Consider setting up <strong>read replicas for your database</strong>. </li></ul></li><li>design for failure<ul><li>In case of service failure, your application may log the failure and retry at a later time.</li><li>If the service is slow to respond, your application could retry by using an exponential backoff algorithm: retry after increasing amounts of time between attempts.<ul><li>This approach attempts to <strong>reach the service without overwhelming it</strong> with repeated requests and potentially aggravating the latency issue. </li></ul></li></ul></li><li>log metrics and monitor performance </li><li>implement a strong DevOps model<ul><li>Operationalize the development and deployment process for your application</li><li>Develop a <strong>modular, automated, and continuous build</strong> process. </li><li>Ensure <strong>consistency</strong> in the development, staging, and production environments. Set up scripts or use robust tools to consistently configure your environments.</li></ul></li><li>implement security in every layer <ul><li>infrastructure</li><li>application</li><li>data at transit and at rest </li><li>user authentication and authorization</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CloudWatch </tag>
            
            <tag> CloudTrail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.2  - IAM</title>
      <link href="/Developing-on-AWS-Note-2-IAM/"/>
      <url>/Developing-on-AWS-Note-2-IAM/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Why-need-IAM"><a href="#1-Why-need-IAM" class="headerlink" title="1. Why need IAM?"></a>1. Why need IAM?</h1><p>IAM: AWS Identity and Access Management</p><ul><li><p>web service that helps you securely control access to AWS resources for your users. </p></li><li><p>You use IAM to control <strong>who</strong> can use your AWS resources (<strong>authentication</strong>) and <strong>what resources</strong> they can use and in what ways (<strong>authorization</strong>).</p></li><li><p>To set up your dev env to wrok with the AWS SDK. </p><ul><li>Need an AWS acount and AWS credentials </li><li>Use an IAM user to provide access credentials to <strong><em>increase the security of your AWS account</em></strong>. </li></ul></li><li><p>grant least privilege - <strong>grant only permissions required to perform a task</strong></p></li></ul><h1 id="2-Concepts"><a href="#2-Concepts" class="headerlink" title="2. Concepts"></a>2. Concepts</h1><p><img src="https://i.loli.net/2020/01/29/TbyX6r1jtKR2VuJ.png" alt="fig1.png"></p><ul><li>User<ul><li>we can set up a user account for every developer in organization </li><li>each user has credentials that they <strong>must</strong> use to access AWS services. </li></ul></li><li>groups </li><li>roles <ul><li>trusted entities </li><li>A role has policies granting access to specific services and operations </li><li>create role like developer, and associate it with each developer user account</li><li>developer role can be configured with policies that control which services and operations that role has access to </li><li>a role does not have standard long-term credentials(pwd or access keys) associated with it</li></ul></li><li>Policy<ul><li>contain permissions which specify which actions an entity can perform and on which resources </li><li>a JSON document that defines effect, actions, resources, and optional conditions for what API calls an entity can invoke </li><li>Type<ul><li>Managed policy<ul><li>standablon policies that you can attach to multiplke users, groups and roles </li><li>reusability </li><li>central change management </li><li>version</li><li>rollback </li></ul></li><li>Inline policy<ul><li>embedded in a principal entity like a user, group, or role. </li><li>you can use the same policy across multiple entities, but those entities are not sharing the policy </li></ul></li></ul></li></ul></li><li>Resources <ul><li>The user, role, group, and policy objects that are stored in IAM</li><li>you can add, edit, and remove resources from IAM</li></ul></li><li>Identities <ul><li>The IAM resource objects that are used to identify and group. These include users, groups, and roles.</li></ul></li><li>Entities<ul><li>The IAM resource objects that AWS uses for authentication</li><li>includes users and roles </li></ul></li><li>Principles<ul><li>a person or application that uses an entity to sign in and make requests </li></ul></li><li>Authentication<ul><li>As a principal, you must be authenticated (signed in to AWS) using an IAM entity to send a request to AWS.</li><li>Must provide your access key and secret key when accessing by CLI</li></ul></li><li>Authorization <ul><li>Must be authorized to complete request </li><li>AWS uses values from the request context to check for policies that apply to the request. </li></ul></li></ul><h1 id="3-Features"><a href="#3-Features" class="headerlink" title="3. Features"></a>3. Features</h1><ul><li>management<ul><li>user, role, federated users </li></ul></li><li>Shared access to your AWS account </li><li>Granular permissions <ul><li>grant different permissions to different people for different resources</li></ul></li><li>secire access tp AWS respirces for applications that run on Amazon EC2 </li><li>multi factor authentication </li><li>eventually consistent </li><li>identity based permissions<ul><li>attached to the IAM user and indicate what the user is permitted to do.</li><li>attached to a resource and indicate what a specified user (or group of users) is permitted to do with it. <strong>Amazon S3, Amazon Simple Queue Service (Amazon SQS), Amazon Simple Notification Service (Amazon SNS), and AWS OpsWorks are the only services that support resource-based permissions</strong>.</li></ul></li><li>resource based permissions</li><li>IAM Evaluation logic (In order)<ul><li>By default, all requests are denied. (In general, requests made using the account/root credentials for resources in the account are always allowed.)</li><li>An explicit allow overrides this default.</li><li>An explicit deny overrides any allows</li></ul></li></ul><h1 id="4-IAM-best-practice"><a href="#4-IAM-best-practice" class="headerlink" title="4. IAM best practice"></a>4. IAM best practice</h1><ul><li>IAM policies are specified with JSON-formatted text.</li><li>Policies are used to control access permissions for AWS APIs and other AWS resources. </li><li>They are not used for operating system permissions or application permissions. For those, use LDAP or Active Directory/Active Directory Federation Services (AD FS).</li><li>When you create IAM policies, follow the standard security advice of granting least privilege; <ul><li>i.e., grant only the permissions required to perform a task. </li><li>Determine what users need to do, and then craft policies for them that let the users perform only those tasks. </li><li>Similarly, create policies for individual resources that identify precisely who is allowed to access the resource, and allow only the minimal permissions for those users. </li></ul></li></ul><h1 id="5-Amazon-Shared-Responsibility-Model"><a href="#5-Amazon-Shared-Responsibility-Model" class="headerlink" title="5. Amazon Shared Responsibility Model"></a>5. Amazon Shared Responsibility Model</h1><p>Customer and AWS table the responsibility together: </p><ul><li>customer<ul><li>responsible for what you implement using AWS and for the applications you connect to AWS</li></ul></li><li>AWS<ul><li>goes from the ground up to the hypervisor. </li><li>secure the hardware, software, facilities, and networks that run all of our products and services. Customers are responsible for securely configuring the services they sign up for and anything they put on those services. </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Identity and Access Management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Developing on AWS Note.1  - AWS Models, EC2, ELB, autoScaling</title>
      <link href="/Developing-on-AWS-Note-1-AWS-Models-EC2-ELB-autoScaling/"/>
      <url>/Developing-on-AWS-Note-1-AWS-Models-EC2-ELB-autoScaling/</url>
      
        <content type="html"><![CDATA[<h1 id="0-Overview"><a href="#0-Overview" class="headerlink" title="0. Overview"></a>0. Overview</h1><p>We use SDKs to interract with Application Programing Interface(API), and then connect to all AWS services. </p><h1 id="1-Cloud-computing-definition"><a href="#1-Cloud-computing-definition" class="headerlink" title="1.  Cloud computing definition"></a>1.  Cloud computing definition</h1><ul><li>enable you to stop thinking of your infrastructure as hardware, and instead think of it and use it as software. </li></ul><h1 id="2-Models-of-Cloud-Computing"><a href="#2-Models-of-Cloud-Computing" class="headerlink" title="2. Models of Cloud Computing"></a>2. Models of Cloud Computing</h1><ul><li><p>IaaS (Infrastructure as a Service)</p><ul><li>basic buiding blocks for Cloud IT <ul><li>Networking features </li><li>Computers </li><li>Data storage space </li></ul></li><li>PaaS (Platform as a Service)<ul><li>enables you to run applications without the need to manage underlying infrastructure(hardware and operating systems)</li></ul></li><li>SaaS (Software as a Service)<ul><li>A complete product that is run and managed by the service provider<h1 id="3-AWS-Service-Stack"><a href="#3-AWS-Service-Stack" class="headerlink" title="3. AWS Service Stack"></a>3. AWS Service Stack</h1></li></ul></li></ul></li><li><p>Infrastructure </p><ul><li>Regions </li><li>Availability Zones </li><li>Edge Locations </li></ul></li><li><p>Foundation Services </p><ul><li>Compute<ul><li>virtual instances </li><li>auto scaling </li><li>load balancing </li></ul></li><li>networking </li><li>storage <ul><li>object </li><li>block </li><li>archive </li></ul></li></ul></li><li><p>Platform Services </p><ul><li>Compute<ul><li>AWS Lambda</li><li>AWS Elastic Beanstalk </li><li>Amazon ECS</li><li>Amazon EKS </li></ul></li><li>database<ul><li>relational </li><li>No SQL </li><li>Caching </li><li>Products <ul><li>DynamoDB</li><li>RDS - relational database service </li><li>Elastic Cache </li><li>Redshift - data warehouse, for analysis and migration </li></ul></li></ul></li><li>Analytics <ul><li>Cluster computing </li><li>real time </li><li>data warehouse </li><li>data workflows </li><li>Products <ul><li>EMR - managed hadoop framework </li><li>Kinesis </li><li>CloudSearch </li><li>ElasticSearch </li></ul></li></ul></li><li>App services <ul><li>Queuing </li><li>Orchestration </li><li>App streaming </li><li>Transcoding </li><li>Email </li><li>Search </li><li>Products <ul><li>SQS </li><li>SNS </li><li>SES </li><li>Amazon Step Functions </li></ul></li></ul></li><li>Deployment and management <ul><li>containers </li><li>Dev/ ops tools </li><li>resource templates </li><li>usage tracking </li><li>monitoring and logs </li><li>products <ul><li>CodeCommit </li><li>CodeDeploy </li><li>CodePipeline </li><li>CodeBuild </li><li>X-Ray </li></ul></li></ul></li><li>Mobile Services <ul><li>identity </li><li>sync </li><li>mobile analytics </li><li>notifications </li><li>products <ul><li>Cognito </li><li>Pinpoint </li><li>API gateway </li></ul></li></ul></li></ul></li><li><p>Applications </p><ul><li>Virtual Desktops </li><li>Collaboration and Sharing </li></ul></li></ul><h1 id="4-Compute-services"><a href="#4-Compute-services" class="headerlink" title="4. Compute services"></a>4. Compute services</h1><h2 id="4-1-EC2"><a href="#4-1-EC2" class="headerlink" title="4.1 EC2"></a>4.1 EC2</h2><ul><li>Computers in the cloud. </li><li>Can create images of your servers at any time with a few clicks or simple API call. </li><li>different instance type for different use cases:<ul><li>low traffic websites </li><li>small database </li><li>high performance web services </li><li>high performance databases </li><li>distributed memory caches </li><li>data warehousing </li><li>log or data-processing applications </li><li>3D visualizations </li><li>Machine learning </li></ul></li><li>Pricing <ul><li>on demand </li><li>reserved instances </li><li>spot instances </li></ul></li></ul><h2 id="4-2-ELB-Elastic-Load-Balancing"><a href="#4-2-ELB-Elastic-Load-Balancing" class="headerlink" title="4.2 ELB - Elastic Load Balancing"></a>4.2 ELB - Elastic Load Balancing</h2><ul><li><p>distribute traffic across multiple EC2 instances, in multiple Availability Zones </p></li><li><p>Support health checks to detect unhealthy Amazon EC2 instances </p><ul><li>To discover the availability of instances, a ELB periodically sends pings, attempts connections or sends requests to test the EC2 instances.  </li></ul></li><li><p>Supports the routing and load balancing of traffic to Amazon EC2 instances. </p></li><li><p>when the LB determins that an instance is unhealthy, it stops routing requests to that instance. </p></li><li><p>sticky sessions</p><ul><li>enables the load balancer to bind a user’s session to a <strong>specific server instance</strong>. </li></ul></li><li><p>we should get rid of sticky sessions since: </p><ul><li>limit application’s scalability </li><li>lead to unequal load across servers </li><li>affect end-user response time since a single user’s load isn’t even spread across servers. </li></ul></li><li><p>Instead of using sticky sessions: cache </p><ul><li>manage user sessions by<ul><li>store locally to the node responding to the HTTP request </li><li>designate a layer which can store those sessions in a scalable and robust manner. </li></ul></li><li>Duration based session stickiness<ul><li>LB uses a special LB generated cookie to rack the application instance for each request. <strong>When the load balancer reveives a request, it first checks to see whether this cookie is present in the request</strong>.  If so, the reqeust is sent to the application instance specified in the cookie. If not, the LB chooses an application instance based on the existing load balancing algo. <strong>A cookie is inserted into the response for binding subsequent requests from the same user to that application instance</strong>. The stickiness policy configuration defines a cookie expiration, which establishes the duration of validity for each cookie. Cookie will be automatically updated after its duration expires. </li></ul></li><li>Application base session stickiness <ul><li>LB uses a <strong>special cookie</strong> to associate the session with the original server that handled the reqeust. But follows the lifetime of the application-generated cookie corresponding to the cookie name specified in the policy configuration. </li><li>The LB only inserts a new stickiness cookie if the application response includes a new application cookie. </li><li>The load balancer stickiness cookie does not update with each request. If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.</li><li>Application often store session data in memory, but this approach does not scale well</li></ul></li></ul></li><li><p>Methods available to manage session data without sticky sessions include: </p><ul><li>using ElasticCache to store session data </li><li>using Amazon DynamoDB to store session data </li></ul></li></ul><h2 id="4-3-Auto-Scaling"><a href="#4-3-Auto-Scaling" class="headerlink" title="4.3 Auto Scaling"></a>4.3 Auto Scaling</h2><p>Auto Scaling helps you ensure that you have the correct number of EC2 instances available to handle the load for your application. Auto Scaling is particularly well-suited for applications that experience hourly, daily, or weekly variability in usage.</p><h1 id="5-Exceptions-and-Errors-handle"><a href="#5-Exceptions-and-Errors-handle" class="headerlink" title="5. Exceptions and Errors handle"></a>5. Exceptions and Errors handle</h1><ul><li>400 series: handle error in application </li><li>500 series: retry operations </li></ul><p>Java SDK throes the following unchecked(runtime) exceptions when error occur:</p><ul><li>AmazonServiceException<ul><li>indicates that the reqeust was correctly transmitted to the service, but for some reason, the service was not able to process it, and returned an error response instead. </li></ul></li><li>AmazonClientException <ul><li>indicates that a problem occured inside the hava client code <ul><li>try to send a request to AWS </li><li>try to parse a response from AWS </li></ul></li></ul></li><li>IllegalArgumentException <ul><li>throw if you pass an illegal argument when performing an operation on a service  </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> EC2 </tag>
            
            <tag> ELB </tag>
            
            <tag> AutoScaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要合并HTTP请求?</title>
      <link href="/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%90%88%E5%B9%B6HTTP%E8%AF%B7%E6%B1%82/"/>
      <url>/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%90%88%E5%B9%B6HTTP%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>思考路径：<br>为什么要实现batch call? -&gt; 减少网络中的传输损耗 -&gt; 如何减少的? -&gt; 通过合并HTTP请求 -&gt; 合并HTTP请求是如何减少网络损耗的？ </p><p>本文将解决这个问题。一起看看单个请求携载大量信息和多个请求携载小量信息对于整个时间的影响。</p><h1 id="1-Client发出请求"><a href="#1-Client发出请求" class="headerlink" title="1. Client发出请求"></a>1. Client发出请求</h1><h2 id="1-1-HTTP-1-1"><a href="#1-1-HTTP-1-1" class="headerlink" title="1.1 HTTP 1.1"></a>1.1 HTTP 1.1</h2><p>可以保持长连接，但是每个不同的请求之间，client要向server发一个请求头</p><p>请求无法并行执行的，在一个连接里面</p><p>假设如果不合并的话需要建立N个连接，那么合并就可以省去(N-1)*RTT的时间，RTT指网络延迟（在传输介质中传输所用的时间，即从报文开始进入网络到它开始离开网络之间的时间）。</p><h2 id="1-2-TCP丢包问题"><a href="#1-2-TCP丢包问题" class="headerlink" title="1.2 TCP丢包问题"></a>1.2 TCP丢包问题</h2><p>慢启动，拥塞控制窗口</p><p>TCP报文乱序到达，合并后的文件可以允许队首丢包以后在队中补上来，但是分开资源的时候，前一个资源未加载完成后面的资源是不能加载的，会有更严重的队首阻塞问题，丢包率会严重影响Keep alive情况下多个文件的传输速率。</p><h2 id="1-3-浏览器线程数限制"><a href="#1-3-浏览器线程数限制" class="headerlink" title="1.3 浏览器线程数限制"></a>1.3 浏览器线程数限制</h2><p>多为2-6个线程，会在每个连接上串行发送若干个请求。TCP连接太多，会给服务器造成很大的压力的。</p><h2 id="1-4-DNS缓存问题"><a href="#1-4-DNS缓存问题" class="headerlink" title="1.4 DNS缓存问题"></a>1.4 DNS缓存问题</h2><p> 每次请求都需要找DNS缓存，多个请求就需要查找多次，而且缓存有可能被无故清空</p><h1 id="2-服务器处理请求"><a href="#2-服务器处理请求" class="headerlink" title="2. 服务器处理请求"></a>2. 服务器处理请求</h1><p>每个请求需要使用一个连接，建立一个线程，分配一部分CPU, 对于CPU而言，是种负担，尤其是一般来说建立了连接以后，哪怕发回了请求，这个连接还会保持一段时间才会timeout。这种时候，维持连接是对服务器资源的一种巨大的浪费。</p><h1 id="3-HTTP-2-0"><a href="#3-HTTP-2-0" class="headerlink" title="3. HTTP 2.0"></a>3. HTTP 2.0</h1><p>上面描述的所有都是基于HTTP/1.1的一些特性，或者说弊端，有长连接但是无法并行处理请求，TCP的慢启动和拥塞控制，队首阻塞问题都给整个性能带来很多弊端，因此我们有了HTTP2.0来做针对性的改进。很有意思的东西，直接看图： </p><ul><li><p>HTTP/1.1 network的请求图<br><img src="https://i.loli.net/2020/01/29/JPaxGAR2lrnKh6b.png" alt="http1-waterfall.png"></p></li><li><p>HTTP/2 network的请求图<br><img src="https://i.loli.net/2020/01/29/C64pmQAVzZrtyus.png" alt="http2-waterfall.png"></p></li></ul><p>就是这么酷炫，HTTP/2多了很多特性来解决HTTP/1.1的很多问题</p><h2 id="3-1-Fully-multiplexed"><a href="#3-1-Fully-multiplexed" class="headerlink" title="3.1 Fully multiplexed"></a>3.1 Fully multiplexed</h2><p>解决了队首阻塞的问题。对于同一个TCP连接，现在可以发送多个请求，接收多个回应了！在HTTP/1.1里面，如果在一个连接里上一个请求发生了丢包，那么后面的所有请求都必须等第一个请求补上包，收到回应以后才能继续执行。而在HTTP/2里面，可以直接并行处理。</p><h2 id="3-2-Header-Compression"><a href="#3-2-Header-Compression" class="headerlink" title="3.2 Header Compression"></a>3.2 Header Compression</h2><p>所有的HTTP request和response都有header，但是header里很可能包含缓存信息，导致他的大小会迅速增大的。但是在一个连接里大部分请求的请求头其实携带的信息都很类似，所以HTTP/2使用了索引表，存储了第一次出现的请求的请求头，然后后面的类似的请求只需要携带这个索引的数字就好了。头部压缩平均减少了30%的头部大小，加快了整体的网络中传输的速度。</p><p>这两点是和本文关系最大的，有了这两点，实质上合并HTTP请求的好处在HTTP/2的协议下，已经基本上消失了。合并不合并请求，更多的是看业务上的需求，后端的一些配置。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>It’s a trade-off. 其实最重要的是看你传输什么东西，因为合并HTTP请求实质上是减少了网络延时，但是如果你在服务器上处理的时间远远大于网络延时的时间的时候，那么合并HTTP请求并不会给你带来很多性能上的提升。而且大数据量的传输一定会降低浏览器的cache hit rate,对于缓存的利用率会降低很多。但是对于HTTP请求携带的数据量比较少的情况，合并请求带来的性能提升会是显而易见的。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.zhihu.com/question/34689035" target="_blank" rel="noopener">1. 网络延迟</a></p><p><a href="https://www.zhihu.com/question/34401250" target="_blank" rel="noopener">2.知乎:合并HTTP请求是否真的有意义？</a></p><p><a href="https://deliciousbrains.com/performance-best-practices-http2/" target="_blank" rel="noopener">3. HTTP/2 Intro</a></p><p><a href="https://www.tutorialdocs.com/article/merge-parallel-http-request.html" target="_blank" rel="noopener">4. Merge parallel htto requests</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> HTTP </tag>
            
            <tag> Batch Processing </tag>
            
            <tag> Web Development </tag>
            
            <tag> FrontEnd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Synchronized方法</title>
      <link href="/Java-Synchronized%E6%96%B9%E6%B3%95/"/>
      <url>/Java-Synchronized%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-synchronized-type"><a href="#1-synchronized-type" class="headerlink" title="1. synchronized type"></a>1. synchronized type</h1><ol><li>Synchronized methods</li><li>Synchronized statements </li></ol><h1 id="2-Synchronized-Methods"><a href="#2-Synchronized-Methods" class="headerlink" title="2. Synchronized Methods"></a>2. Synchronized Methods</h1><p>修饰实例方法，作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁。修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁。 </p><h2 id="2-1-不可插入"><a href="#2-1-不可插入" class="headerlink" title="2.1 不可插入"></a>2.1 不可插入</h2><p>It is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object.</p><p>当一个方法是同步的时候，当前线程在执行时，其他线程都会停止运行，直到线程完成工作，下一个线程继续执行。</p><h2 id="2-2-自动传递状态"><a href="#2-2-自动传递状态" class="headerlink" title="2.2 自动传递状态"></a>2.2 自动传递状态</h2><p>when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads.</p><p>保证状态可见，上个线程对对象的操作结果会作为输入给下一个线程来使用。 </p><h1 id="3-Synchronized-Statements"><a href="#3-Synchronized-Statements" class="headerlink" title="3. Synchronized Statements"></a>3. Synchronized Statements</h1><p>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</p><p>Synchronized statements must specify the object that provides the intrinsic lock. </p><pre><code>public void addName(String name) {    synchronized(this) {        lastName = name;        nameCount++;    }    nameList.add(name);}</code></pre><p>这里lastname 和namecount都要改变，是同步的。但要注意在声明里不可以调用其他对象的方法。</p><h1 id="4-底层实现原理"><a href="#4-底层实现原理" class="headerlink" title="4. 底层实现原理"></a>4. 底层实现原理</h1><p>可以锁代码块，也可以锁方法。如果锁的是类的实例对象，那么就是锁这个。如果锁的是类对象，那么尽管new多个实例对象，他们仍然属于同一个类，依然会被锁住，即线程之间保证同步关系。</p><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p>当执行 monitorenter 指令时，线程试图获取锁也就是获取 monitor(monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因) 的持有权.当计数器为0则可以成功获取，获取后将锁计数器设为1也就是加1。相应的在执行 monitorexit 指令后，将锁计数器设为0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p><p>最开始的Synchronized是调用OS的mutex lock，要完成context switch ，映射到原生操作系统里，从用户态转到内核态。现在从JVM层面做了大量的优化，减少了锁开销。</p><h1 id="5-synchronized-优化"><a href="#5-synchronized-优化" class="headerlink" title="5. synchronized 优化"></a>5. synchronized 优化</h1><p>synchronized是互斥的，我们需要找方法加快中间过程，比如传统的零售交钱排队，找零到扫码付费的转变。这里介绍轻量级锁，偏向锁。</p><h2 id="5-1-CAS操作"><a href="#5-1-CAS操作" class="headerlink" title="5.1 CAS操作"></a>5.1 CAS操作</h2><p>使用锁的时候，线程获取锁是一种悲观锁，即认为每一次执行临界区的代码都会产生冲突，所以当前线程获取锁的时候同时会堵塞其他线程获取锁。而CAS是一种乐观锁策略，<strong>假设所有线程访问共享资源的时候不会出现冲突</strong>。出现了冲突以后采取CAS(compare and swap) 策略，用来比较交换，看线程之间是否出现了冲突。</p><h3 id="5-1-1-操作过程"><a href="#5-1-1-操作过程" class="headerlink" title="5.1.1 操作过程"></a>5.1.1 操作过程</h3><p>CAS比较交换的过程可以通俗的理解为CAS(V,O,N)，包含三个值分别为：V 内存地址存放的实际值；O 预期的值（旧值）；N 更新的新值。当V和O相同时，也就是说旧值和内存中实际的值相同表明该值没有被其他线程更改过，即该旧值O就是目前来说最新的值了，自然而然可以将新值N赋值给V。反之，V和O不相同，表明该值已经被其他线程改过了则该旧值O不是最新版本的值了，所以不能将新值N赋给V，返回V即可。当多个线程使用CAS操作一个变量是，只有一个线程会成功，并成功更新，其余会失败。失败的线程会重新尝试，当然也可以选择挂起线程。</p><p>It compares the contents of a memory location with a given value and, only if they are the same, modifies the contents of that memory location to a new given value. This is done as a single atomic operation. The atomicity guarantees that the new value is calculated based on up-to-date information; if the value had been updated by another thread in the meantime, the write would fail.</p><p>非阻塞同步。</p><h3 id="5-1-2-存在的问题"><a href="#5-1-2-存在的问题" class="headerlink" title="5.1.2 存在的问题"></a>5.1.2 存在的问题</h3><ol><li>ABA问题</li></ol><p>发生了变化，但又变了回去。（加上序号来解决）</p><ol start="2"><li>自旋时间过长</li><li>只能保证一个共享变量的原子操作</li></ol><h2 id="5-2-对象头"><a href="#5-2-对象头" class="headerlink" title="5.2 对象头"></a>5.2 对象头</h2><p>对象的锁 -&gt;  对象的标记，存在java对象的对象头里面。存放有</p><ol><li>锁状态<ul><li>无锁状态</li><li>偏向锁状态</li><li>轻量级锁状态</li><li>重量级锁状态</li></ul></li><li>对象的hashcode</li><li>对象分代年龄</li><li>是否是偏向锁</li><li>锁标志位</li></ol><blockquote><p>Tips: 级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。</p></blockquote><h2 id="5-3-偏向锁"><a href="#5-3-偏向锁" class="headerlink" title="5.3 偏向锁"></a>5.3 偏向锁</h2><p>大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。</p><p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程</p><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。</p><h2 id="5-4-轻量级锁"><a href="#5-4-轻量级锁" class="headerlink" title="5.4 轻量级锁"></a>5.4 轻量级锁</h2><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</p><p>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p><h2 id="5-5-比较"><a href="#5-5-比较" class="headerlink" title="5.5 比较"></a>5.5 比较</h2><p><img src="https://i.loli.net/2020/01/29/meDvzPd6g24ITU9.png" alt="锁比较.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://en.wikipedia.org/wiki/Compare-and-swap" target="_blank" rel="noopener">1. Wiki: Compare and swap</a></p>]]></content>
      
      
      <categories>
          
          <category> BackEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
            <tag> Synchronized </tag>
            
            <tag> Lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volatile关键字</title>
      <link href="/Volatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/Volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Synchronized-vs-volatile"><a href="#1-Synchronized-vs-volatile" class="headerlink" title="1. Synchronized vs volatile"></a>1. Synchronized vs volatile</h1><p>synchronized是阻塞式同步，在线程竞争激烈的情况下会升级为重量级锁。而volatile是java虚拟机提供的最轻量级的同步机制。而针对volatile修饰的变量给java虚拟机特殊的约定，线程对volatile变量的修改会立刻被其他线程所感知，即不会出现数据脏读的现象，从而保证数据的“可见性”。</p><p><strong>被volatile修饰的变量能够保证每个线程能够获取该变量的最新值，从而避免出现数据脏读的现象。</strong></p><h1 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h1><p>生成汇编代码时会在Volatile修饰的共享变量进行写操作的时候多出lock前缀的指令：<strong>该指令会将当前处理器缓存行的数据写会系统内存；这个写回内存的操作会使得其他CPU里缓存了该内存地址的数据无效</strong></p><p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到<strong>内部缓存（L1，L2或其他</strong>）后再进行操作，但操作完不知道何时会写到内存。如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。所以，在多处理器下，为了保证各个处理器的缓存是一致的，就会实现<strong>缓存一致性协</strong>议，<strong>每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</strong>因此，经过分析我们可以得出如下结论：</p><ol><li>lock前缀的指令会引起处理器缓存写回内存</li><li>一个处理器的缓存回写到内存会导致其他处理器的缓存失效</li><li>当处理器发现本地缓存失效后，就会从内存中重读该变量数据，即可以获得当前最新值</li></ol><h1 id="3-volatile的happen-before关系"><a href="#3-volatile的happen-before关系" class="headerlink" title="3. volatile的happen before关系"></a>3. volatile的happen before关系</h1><p>写后读，线程A改本地内存的变量，同步到主内存，线程B的本地内存废弃，到主内存中拿到更新的数据。</p><h1 id="4-volatile的内存语义实现"><a href="#4-volatile的内存语义实现" class="headerlink" title="4. volatile的内存语义实现"></a>4. volatile的内存语义实现</h1><p>为了性能优化，JMM在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序，那如果想阻止重排序要怎么办了？答案是可以添加内存屏障。</p><p>内存屏障类型： </p><p><img src="https://i.loli.net/2020/01/29/kIQaATpeCf56nxs.png" alt="内存屏障.png"></p><p><img src="https://i.loli.net/2020/01/29/RKDH1XxFAJeQVjY.png" alt="重排序.png"></p><p>“NO”表示禁止重排序。为了实现volatile内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM采取了保守策略：</p><ol><li>在每个volatile写操作的前面插入一个StoreStore屏障；</li><li>在每个volatile写操作的后面插入一个StoreLoad屏障；</li><li>在每个volatile读操作的后面插入一个LoadLoad屏障；</li><li>在每个volatile读操作的后面插入一个LoadStore屏障。</li></ol><p><img src="https://i.loli.net/2020/01/29/8JCkKYZg2NfMzP5.png" alt="volatile内存屏障.png"><br><img src="https://i.loli.net/2020/01/29/uY9qUvorMLK5a1V.png" alt="volatile读插入内存屏障示意图.png"></p>]]></content>
      
      
      <categories>
          
          <category> BackEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BackEnd </tag>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发图谱</title>
      <link href="/Java%E5%B9%B6%E5%8F%91%E5%9B%BE%E8%B0%B1/"/>
      <url>/Java%E5%B9%B6%E5%8F%91%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在网上看到的描述Java并发的非常棒的知识图谱，分享/标注一波。</p></blockquote><p>包含： </p><ol><li>并发理论</li><li>并发关键字</li><li>Lock体系</li><li>并发容器</li></ol><p><img src="https://i.loli.net/2020/01/29/neDuY6XEaA2FsV9.png" alt="java-concurrency.png"></p>]]></content>
      
      
      <categories>
          
          <category> BackEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BackEnd </tag>
            
            <tag> Java </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入url以后都发生了什么</title>
      <link href="/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E4%BB%A5%E5%90%8E%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E4%BB%A5%E5%90%8E%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>从输入一个网址开始，都调用了哪些服务，经历了哪些步骤，深度解析。以输入<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 为例。</p><h1 id="1-Client端"><a href="#1-Client端" class="headerlink" title="1. Client端"></a>1. Client端</h1><p>一般来说，这里的Client指用户，即browser浏览器。这里我们以输入google.com为例。</p><h2 id="1-1-输入提示"><a href="#1-1-输入提示" class="headerlink" title="1.1 输入提示"></a>1.1 输入提示</h2><p>浏览器会根据历史访问，书签等信息给出输入建议。</p><p>还会根据默认搜索引擎的搜索记录，去匹配最近的搜索记录。</p><h2 id="1-2-url解析"><a href="#1-2-url解析" class="headerlink" title="1.2 url解析"></a>1.2 url解析</h2><p>如果是不合法的地址，会转给默认的搜索引擎,例如如果你正在使用chrome，可以在url输入框输入你想要搜索的内容，然后搜索引擎会根据关键字进行搜索。</p><p>HSTS列表 安全策略机制，强行使用https</p><h2 id="1-3-DNS解析"><a href="#1-3-DNS解析" class="headerlink" title="1.3 DNS解析"></a>1.3 DNS解析</h2><p>域名通过DNS转化为ip地址，这个转化主要是为了人机交互的友好型。没有人喜欢记一堆数字来访问一个网站。DNS做的事情就是把你输入的<a href="http://www.google.com翻译成计算机可以理解的IP地址，类似于192.188.1.1这种样子。" target="_blank" rel="noopener">www.google.com翻译成计算机可以理解的IP地址，类似于192.188.1.1这种样子。</a></p><h3 id="1-3-1查询过程"><a href="#1-3-1查询过程" class="headerlink" title="1.3.1查询过程"></a>1.3.1查询过程</h3><p>在解析的过程中，浏览器会由近及远寻找是否有缓存信息，即存没存从域名到地址的映射，整个查询过程分为如下几步，值得注意的是一旦查询到，就会立刻返回，不会再继续执行下去了。</p><ol><li>查看浏览器内部缓存</li></ol><p>浏览器内会会存有在一段时间内你曾经访问过的网站的域名地址的映射。</p><ol start="2"><li>系统缓存</li></ol><p>操作系统的缓存。浏览器会发出system call， 去询问操作系统是否存有相应的映射。</p><ol start="3"><li>路由器缓存， ISP缓存</li></ol><p>查询路由器的缓存。如果在路由器缓存中没有找到映射，就会去ISP(Internet Service Provider)处去寻找</p><ol start="4"><li><p>本地DNS服务器</p></li><li><p>域名服务器  根域服务器  -&gt; 顶级域名服务器</p></li></ol><p>寻找方式类似于一个树状结构，从最底层的子叶开始向上遍历，不停向更高级的域名服务器发出请求。这个过程会不停发送携带有请求和IP地址的数据包，会经过在client和server之间的多个网路设备直到其到达正确的DNS服务器。</p><h1 id="2-网络"><a href="#2-网络" class="headerlink" title="2 网络"></a>2 网络</h1><p>找到了正确的IP地址以后就要开始建立连接了，建立连接的过程一般会使用TCP协议，通过三次握手建立连接。</p><h2 id="2-1-TCP连接"><a href="#2-1-TCP连接" class="headerlink" title="2.1 TCP连接"></a>2.1 TCP连接</h2><p>会用TCP，建立连接。并在Client和Server之间传递数据包。</p><h3 id="2-1-1-IP封装-socket"><a href="#2-1-1-IP封装-socket" class="headerlink" title="2.1.1 IP封装  socket"></a>2.1.1 IP封装  socket</h3><h3 id="2-1-2-TCP-三次握手"><a href="#2-1-2-TCP-三次握手" class="headerlink" title="2.1.2 TCP 三次握手"></a>2.1.2 TCP 三次握手</h3><ol><li>Client 发出建立连接的请求。数据包携带有<code>SYN</code>。</li><li>如果Server有开放的端口，可以接受并建立连接，那么server会返回<code>SYN</code> + <code>ACK</code>, 告诉Client我可以接受你的请求。</li><li>Client收到Server的回应，发送<code>ACK</code>给Server。 连接建立。</li></ol><p>给一个知乎连接，<a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">为什么是三次握手，不是两次或者四次？</a>  非常有意思的例子。</p><h3 id="2-1-3-TCP-四次挥手"><a href="#2-1-3-TCP-四次挥手" class="headerlink" title="2.1.3 TCP 四次挥手"></a>2.1.3 TCP 四次挥手</h3><ol><li>Client发起中断请求，发送<code>FIN</code>到server</li><li>Server收到请求，可能数据还没有发完。这个时候不会关闭socket，而是回复<code>ACK</code>，告诉Client知道了</li><li>Client进入<code>Fin_Wait</code>状态，继续等待Server端的<code>FIN</code>报文。Server端发送完毕后，会向Client发送<code>FIN</code></li><li>Client收到后就回复<code>ACK</code>，并关闭连接</li></ol><h1 id="3-Server"><a href="#3-Server" class="headerlink" title="3 Server"></a>3 Server</h1><p>这里主要描述TCP连接建立和断开之间发生的一些事情。</p><p>TCP/IP是个协议组，是网络层和传输层的协议。Client首先建立一条与服务器的TCP连接（上文中的三次握手）。而后Client发送HTTP请求，这里为了获得页面，会发送一个GET请求给服务器。请求会包含浏览器ID，用户数据头，连接头（包含额外信息，比如是否需要保持TCP连接等），从cookie获取的数据等。</p><p>Server收到Client的Request，会将请求传递给Request Handler，去处理请求（从数据库查找数据，处理数据，构建Response）。构建完毕后会返回一个Response。值得注意的是这个Response里会含有状态信息： </p><ul><li>1xx informational message only  —— 包含信息</li><li>2xx success of some kind  ——成功信息</li><li>3xx redirects the client to another URL  ——将Client转到其他URL</li><li>4xx indicates an error on the client’s part  ——Client端错误 </li><li>5xx indicates an error on the server’s part  ——Server端错误</li></ul><h1 id="4-页面渲染"><a href="#4-页面渲染" class="headerlink" title="4 页面渲染"></a>4 页面渲染</h1><p>浏览器根据Resonse返回数据，渲染出DOM树，将返回的数据呈现在页面上。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/sunyongjian/blog/issues/34" target="_blank" rel="noopener">https://github.com/sunyongjian/blog/issues/34</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> Browser </tag>
            
            <tag> CDN </tag>
            
            <tag> network </tag>
            
            <tag> TCP/ IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React初探</title>
      <link href="/React%E5%88%9D%E6%8E%A2/"/>
      <url>/React%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>初探React,很喜欢Component这种方式，很大程度提高了复用性，如果抛除C/S的区别，感觉有点像mason，毕竟刚刚弃掉mason的坑，很有意思的React。</p><h1 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h1><p>React.Component   A component takes in parameters, called props and returns a hierarchy of views to display via the render method. </p><p>To collect data from multiple children, or to have two child components communicate with each other, you need to declare the shared state in their parent component instead. <strong>The parent component can pass the state back down to the children by using props; this keeps the child components in sync with each other and with the parent component.</strong> </p><pre><code>ReactDOM.render(    &lt;h1&gt;Hello, world!&lt;/h1&gt;,    document.getElementById(&apos;root&apos;));</code></pre><h1 id="2-JSX"><a href="#2-JSX" class="headerlink" title="2. JSX"></a>2. JSX</h1><p>jsx, 一种JavaScript的语法扩展。用来声明React当中的元素。可以任意在<strong>大括号{}</strong>里面使用<strong>JS表达式</strong>.</p><h2 id="2-1-JS表达式"><a href="#2-1-JS表达式" class="headerlink" title="2.1 JS表达式"></a>2.1 JS表达式</h2><blockquote><p>Any valid unit of code that resolves to a value. </p></blockquote><h3 id="2-1-1-分类"><a href="#2-1-1-分类" class="headerlink" title="2.1.1 分类"></a>2.1.1 分类</h3><ul><li><p>Arithmetic</p></li><li><p>String </p></li><li><p>Logical</p></li><li><p>Primary Expressions</p></li></ul><p>Basic keywords and general expressions in JS.</p><ol><li><p>this: refer to the current object.</p></li><li><p>grouping operator() : controls the precedence of evaluation in expressions. </p></li><li><p>new: to create an instance of a user-defined object type </p></li><li><p>super: call functions on an object’s parent.</p></li><li><p>spread operator: allow an expression to be expanded in places where multiple arguments or multiple elements are expected. </p><pre><code> function f(x, y, z) { }var args = [0, 1, 2];f(...args);</code></pre></li></ol><ul><li>Left hand side expressions</li></ul><h2 id="2-2-JSX-属性"><a href="#2-2-JSX-属性" class="headerlink" title="2.2 JSX 属性"></a>2.2 JSX 属性</h2><p>编译之后，会被转化为普通的JS对象。这意味着可以在if 或者for语句里使用JSX，将其赋值给变量，当做参数传入或者作为返回值都可以。</p><pre><code>// 使用引号定义以字符串为值得属性const element = &lt;div tabIndex=&quot;0&quot;&gt;&lt;/div&gt;;// 使用大括号来定义以js表达式为值得属性const element = &lt;img src={user.avatarUrl}&gt;&lt;/img&gt;;</code></pre><p>JSX代表Objects, Babel转译器会把JSX转换成一个名为React.createEliment()的方法来调用</p><h2 id="2-3-嵌套与防注入攻击"><a href="#2-3-嵌套与防注入攻击" class="headerlink" title="2.3 嵌套与防注入攻击"></a>2.3 嵌套与防注入攻击</h2><pre><code>const element = (  &lt;div&gt;    &lt;h1&gt;Hello!&lt;/h1&gt;    &lt;h2&gt;Good to see you here.&lt;/h2&gt;  &lt;/div&gt;);React DOM在渲染之前会过滤所有传入的值，可以确保应用不会被注入攻击，因为所有内容渲染之前都已经被转化为了字符串，有效防止XSS。 </code></pre><h1 id="3-元素渲染"><a href="#3-元素渲染" class="headerlink" title="3. 元素渲染"></a>3. 元素渲染</h1><p>React中的元素实际上是普通的对象，React DOM可以确保浏览器DOM的数据内容与React元素保持一致。<br>寻找React 根节点，渲染在根节点上</p><pre><code>const element = &lt;h1&gt;Hello, world&lt;/h1&gt;;ReactDOM.render(element, document.getElementById(&apos;root&apos;));</code></pre><h2 id="3-1-更新元素渲染"><a href="#3-1-更新元素渲染" class="headerlink" title="3.1 更新元素渲染"></a>3.1 更新元素渲染</h2><p>React 元素都是immutable的，更新界面的方式就是创建一个新的元素，然后将其传入<code>ReactDOM.render()</code> </p><p>React DOM 会比较元素的内容的先后的不同，而在渲染过程中只会更新改变了的部分。</p><h1 id="4-组件-amp-props"><a href="#4-组件-amp-props" class="headerlink" title="4. 组件 &amp; props"></a>4. 组件 &amp; props</h1><p>组件将UI切分成一些独立的，可复用的部件，这样就可以专注于构建每一个单独的部件。概念上像<strong>函数</strong>一样，可以接受任意的输入值(props)，并返回一个在页面上展示的React元素。</p><h2 id="4-1-函数定义组件"><a href="#4-1-函数定义组件" class="headerlink" title="4.1 函数定义组件"></a>4.1 函数定义组件</h2><pre><code>function Welcome(props) {    return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;}</code></pre><h2 id="4-2-ES6-class-定义组件"><a href="#4-2-ES6-class-定义组件" class="headerlink" title="4.2 ES6 class 定义组件"></a>4.2 ES6 class 定义组件</h2><pre><code>class Welcome extends React.Component {    render() {        return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;    }}</code></pre><h2 id="4-3-组件渲染"><a href="#4-3-组件渲染" class="headerlink" title="4.3 组件渲染"></a>4.3 组件渲染</h2><pre><code>// React 元素可以使用户自定义的组件const element = &lt;Welcome name=&quot;Sara&quot; /&gt;;</code></pre><p><strong>当React遇到的元素是用户自定义的组件，它会将JSX属性作为单个对象传递给该组件，这个对象被称为”props”</strong></p><blockquote><p>组件名称必须大写</p></blockquote><h2 id="4-4-组合组件"><a href="#4-4-组合组件" class="headerlink" title="4.4 组合组件"></a>4.4 组合组件</h2><p>组件可以在它的输出中引用其他组件，这样我们就可以用同一组件来抽象出任意层次的细节。</p><blockquote><p>一个新的React应用程序的顶部是一个App组件。但是，如果要将React集成到现有应用程序中，则可以从下而上使用像Button这样的小组件作为开始，并逐渐运用到视图层的顶部。</p></blockquote><blockquote><p>组件的返回值只能有一个根元素。这也是我们要用一个<div>来包裹所有<Welcome />元素的原因。</p></blockquote><h2 id="4-5-提取组件"><a href="#4-5-提取组件" class="headerlink" title="4.5 提取组件"></a>4.5 提取组件</h2><p>分割组件，</p><h2 id="4-6-Props的只读性"><a href="#4-6-Props的只读性" class="headerlink" title="4.6 Props的只读性"></a>4.6 Props的只读性</h2><p>所有的React组件必须像纯函数那样使用它们的props</p><h1 id="5-State-amp-生命周期"><a href="#5-State-amp-生命周期" class="headerlink" title="5. State &amp; 生命周期"></a>5. State &amp; 生命周期</h1><p>更新UI的方法： <code>ReactDOM.render()</code></p><p>还可以通过更新状态来更新UI，<strong>状态是私有的，完全受控于当前组件</strong></p><h2 id="5-1-将函数转换为类"><a href="#5-1-将函数转换为类" class="headerlink" title="5.1 将函数转换为类"></a>5.1 将函数转换为类</h2><p>定义为类的组件有状态这个特性，还有生命周期钩子。</p><p>函数转换为类的步骤： </p><ol><li>创建一个名称扩展为<code>React.Component</code>的类</li><li>创建一个<code>render()</code>空方法</li><li>将函数体移动到render()方法中</li><li>在render()方法中，使用this.props替换props</li><li>删除剩余的空函数声明</li></ol><h2 id="5-2-为类添加局部状态"><a href="#5-2-为类添加局部状态" class="headerlink" title="5.2 为类添加局部状态"></a>5.2 为类添加局部状态</h2><pre><code>Class Clock extends React.Component {    constructor(props) {        super(props);        this.state = {date: new Date()};    }    render() {        return (            &lt;div&gt;                &lt;h1&gt;Hello, world!&lt;/h1&gt;                &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;            &lt;/div&gt;        );    }}ReactDOM.render(    &lt;Clock/&gt;    document.getElementById(&apos;root&apos;));</code></pre><h2 id="5-3-添加生命周期方法到类中"><a href="#5-3-添加生命周期方法到类中" class="headerlink" title="5.3 添加生命周期方法到类中"></a>5.3 添加生命周期方法到类中</h2><p>当组件第一次加载到DOM中时，生成定时器，挂载</p><pre><code>componentDidMount() {}</code></pre><p>当Clock生成的这个DOM被移除时，清除定时器，卸载</p><pre><code>componentWillUnmount() {}</code></pre><p>一个完整的Clock的例子： </p><pre><code>class Clock extends React.Component {    constructor(props) {        super(props);        this.state = {date: new Date()};    }    // 3. Called when Clock&apos;s output is injected into DOM     componentDidMount() {        this.timerID = setInterval(            () =&gt; this.tick(),                1000        );    }    componentWillUnmount() {        clearInterval(this.timerID);    }    // 4. when setState() is being called, render() is called     tick() {        this.setState({            date: new Date()        });    }    // 2. Call render(), react know what need to be shown on screen. Update DOM     render() {        return (          &lt;div&gt;            &lt;h1&gt;Hello, world!&lt;/h1&gt;            &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;          &lt;/div&gt;        );    }}ReactDOM.render(// 1. call Clock&apos;s constructor  &lt;Clock /&gt;,  document.getElementById(&apos;root&apos;));</code></pre><h2 id="5-4-如何使用状态"><a href="#5-4-如何使用状态" class="headerlink" title="5.4 如何使用状态"></a>5.4 如何使用状态</h2><ol><li><p>不要直接更新状态</p><p> use: this.setState({comment: ‘hi’});</p></li></ol><blockquote><p>构造函数是唯一能够初始化this.state的地方</p></blockquote><ol start="2"><li>状态更新可能是异步的</li></ol><p>React可以将多个<code>setState()</code>调用合并成一个来提高性能</p><pre><code>// Wrongthis.setState({  counter: this.state.counter + this.props.increment,});// Correctthis.setState((prevState, props) =&gt; ({  counter: prevState.counter + props.increment}));// Correctthis.setState(function(prevState, props) {  return {    counter: prevState.counter + props.increment  };});</code></pre><ol start="3"><li>当调用<code>setState()</code>的时候，React会将你提供的对象合并到当前状态。可以只提供state的一部分。</li></ol><h2 id="5-5-数据流动方向：-自顶向下"><a href="#5-5-数据流动方向：-自顶向下" class="headerlink" title="5.5 数据流动方向： 自顶向下"></a>5.5 数据流动方向： 自顶向下</h2><p>父组件或子组件都不知道某个组件是否有状态，组件可以选择将其状态作为属性传递给其子组件。</p><h1 id="6-事件处理"><a href="#6-事件处理" class="headerlink" title="6. 事件处理"></a>6. 事件处理</h1><p>React事件绑定属性的命名采用驼峰式写法</p><p>采用jsx的语法你需要传入一个函数作为事件处理函数，而不是一个字符串。</p><pre><code>&lt;button onClick={activateLasers}&gt;    Activate Lasers&lt;/button&gt;</code></pre><h2 id="6-1-Toggle"><a href="#6-1-Toggle" class="headerlink" title="6.1 Toggle"></a>6.1 Toggle</h2><pre><code>class Toggle extends React.Component {    constructor(props) {    super(props);    this.state = {isToggleOn: true};    // This binding is necessary to make `this` work in the callback    this.handleClick = this.handleClick.bind(this);    }    handleClick() {        this.setState(prevState =&gt; ({            isToggleOn: !prevState.isToggleOn        }));    }    render() {        return (        // &lt;button onClick={(e) =&gt; this.handleClick(e)}&gt;         // 问题L每次渲染的时候都会创建一个不同的回调函数            &lt;button onClick={this.handleClick}&gt;                {this.state.isToggleOn ? &apos;ON&apos; : &apos;OFF&apos;}            &lt;/button&gt;        );    }}ReactDOM.render(    &lt;Toggle /&gt;,    document.getElementById(&apos;root&apos;));</code></pre><p>必须谨慎对待JSX回调函数中的this，类的方法默认不会绑定this的。如果你忘记绑定 <code>this.handleClick</code> 并把它传入 <code>onClick</code>, 当你调用这个函数的时候 <code>this</code> 的值会是 <code>undefined</code>。</p><h2 id="6-2-Todolist"><a href="#6-2-Todolist" class="headerlink" title="6.2 Todolist"></a>6.2 Todolist</h2><pre><code>class TodoApp extends React.Component {    constructor(props) {        super(props);        this.state = { items: [], text: &apos;&apos; };        this.handleChange = this.handleChange.bind(this);        this.handleSubmit = this.handleSubmit.bind(this);    }    render() {        return (            &lt;div&gt;                &lt;h3&gt;TODO&lt;/h3&gt;                &lt;TodoList items={this.state.items} /&gt;                &lt;form onSubmit={this.handleSubmit}&gt;                  &lt;input                    onChange={this.handleChange}                    value={this.state.text}                  /&gt;                  &lt;button&gt;                    Add #{this.state.items.length + 1}                  &lt;/button&gt;                &lt;/form&gt;            &lt;/div&gt;        );    }    handleChange(e) {        this.setState({ text: e.target.value });    }    handleSubmit(e) {        e.preventDefault();        if (!this.state.text.length) {            return;        }        const newItem = {            text: this.state.text,            id: Date.now()        };        this.setState(prevState =&gt; ({            items: prevState.items.concat(newItem),            text: &apos;&apos;        }));    }}class TodoList extends React.Component {    render() {        return (            &lt;ul&gt;                {this.props.items.map(item =&gt; (                  &lt;li key={item.id}&gt;{item.text}&lt;/li&gt;                ))}            &lt;/ul&gt;        );    }}ReactDOM.render(&lt;TodoApp /&gt;, mountNode);</code></pre><h2 id="6-3-向事件处理程序传递参数"><a href="#6-3-向事件处理程序传递参数" class="headerlink" title="6.3 向事件处理程序传递参数"></a>6.3 向事件处理程序传递参数</h2><pre><code>&lt;button onClick={(e) =&gt; this.deleteRow(id, e)}&gt;Delete Row&lt;/button&gt;&lt;button onClick={this.deleteRow.bind(this, id)}&gt;Delete Row&lt;/button&gt;</code></pre><p>参数 e 作为 React 事件对象将会被作为第二个参数进行传递。通过箭头函数的方式，事件对象必须显式的进行传递，但是通过 bind 的方式，事件对象以及更多的参数将会被隐式的进行传递。</p><h2 id="6-4-bind-向监听函数传参，-事件对象e需要放在最后"><a href="#6-4-bind-向监听函数传参，-事件对象e需要放在最后" class="headerlink" title="6.4 bind 向监听函数传参， 事件对象e需要放在最后"></a>6.4 bind 向监听函数传参， 事件对象e需要放在最后</h2><pre><code>class Popper extends React.Component{    constructor(){        super();        this.state = {name:&apos;Hello world!&apos;};    }    preventPop(name, e){    //事件对象e要放在最后        e.preventDefault();        alert(name);    }    render(){        return (            &lt;div&gt;                &lt;p&gt;hello&lt;/p&gt;                {/* Pass params via bind() method. */}                &lt;a href=&quot;https://reactjs.org&quot; onClick={this.preventPop.bind(this,this.state.name)}&gt;Click&lt;/a&gt;            &lt;/div&gt;        );    }}</code></pre><h1 id="7-条件渲染"><a href="#7-条件渲染" class="headerlink" title="7. 条件渲染"></a>7. 条件渲染</h1><p>可以创建不同的组件来封装各种你需要的行为。然后根据应用的状态变化只渲染其中的一部分。(if)</p><pre><code>function Greeting(props) {    const isLoggedIn = props.isLoggedIn;    if (isLoggedIn) {        return &lt;UserGreeting /&gt;;    }    return &lt;GuestGreeting /&gt;;}ReactDOM.render(  // Try changing to isLoggedIn={true}:  &lt;Greeting isLoggedIn={false} /&gt;,  document.getElementById(&apos;root&apos;));</code></pre><h2 id="7-1-与运算符-amp-amp"><a href="#7-1-与运算符-amp-amp" class="headerlink" title="7.1 与运算符 &amp;&amp;"></a>7.1 与运算符 &amp;&amp;</h2><pre><code>function Mailbox(props) {    const unreadMessages = props.unreadMessages;    return (        &lt;div&gt;          &lt;h1&gt;Hello!&lt;/h1&gt;          {unreadMessages.length &gt; 0 &amp;&amp;            &lt;h2&gt;              You have {unreadMessages.length} unread messages.            &lt;/h2&gt;          }        &lt;/div&gt;    );}const messages = [&apos;React&apos;, &apos;Re: React&apos;, &apos;Re:Re: React&apos;];ReactDOM.render(  &lt;Mailbox unreadMessages={messages} /&gt;,  document.getElementById(&apos;root&apos;));</code></pre><p><strong>在 JavaScript 中，true &amp;&amp; expression 总是返回 expression，而 false &amp;&amp; expression 总是返回 false。</strong></p><h2 id="7-2-阻止组件渲染"><a href="#7-2-阻止组件渲染" class="headerlink" title="7.2 阻止组件渲染"></a>7.2 阻止组件渲染</h2><pre><code>function WarningBanner(props) {    if (!props.warn) {        return null;    }    return (        &lt;div className=&quot;warning&quot;&gt;            Warning!        &lt;/div&gt;    );}class Page extends React.Component {    constructor(props) {        super(props);        this.state = {showWarning: true}        this.handleToggleClick = this.handleToggleClick.bind(this);    }    handleToggleClick() {        this.setState(prevState =&gt; ({            showWarning: !prevState.showWarning        }));    }    render() {        return (            &lt;div&gt;                &lt;WarningBanner warn={this.state.showWarning} /&gt;                &lt;button onClick={this.handleToggleClick}&gt;                {this.state.showWarning ? &apos;Hide&apos; : &apos;Show&apos;}                &lt;/button&gt;            &lt;/div&gt;        );    }}ReactDOM.render(  &lt;Page /&gt;,  document.getElementById(&apos;root&apos;));</code></pre><h1 id="8-列表-amp-Keys"><a href="#8-列表-amp-Keys" class="headerlink" title="8. 列表 &amp; Keys"></a>8. 列表 &amp; Keys</h1><h2 id="8-1-渲染多个组件"><a href="#8-1-渲染多个组件" class="headerlink" title="8.1 渲染多个组件"></a>8.1 渲染多个组件</h2><pre><code>const numbers = [1, 2, 3, 4, 5];const listItems = numbers.map(    (number) =&gt; &lt;li&gt;{number}&lt;/li&gt;);ReactDOM.render(    &lt;ul&gt;{listItems}&lt;/ul&gt;    documnet.getElementById(&apos;root&apos;));</code></pre><h2 id="8-2-基础列表组件"><a href="#8-2-基础列表组件" class="headerlink" title="8.2 基础列表组件"></a>8.2 基础列表组件</h2><pre><code>function NumberList(props) {    const numbers = props.numbers;    const listItems = numbers.map((number) =&gt;        &lt;li key={number.toString()}&gt;            {number}        &lt;/li&gt;    );    return (        &lt;ul&gt;{listItems}&lt;/ul&gt;    );}const numbers = [1, 2, 3, 4, 5];ReactDOM.render(  &lt;NumberList numbers={numbers} /&gt;,  document.getElementById(&apos;root&apos;));</code></pre><h2 id="8-3-Keys"><a href="#8-3-Keys" class="headerlink" title="8.3 Keys"></a>8.3 Keys</h2><p>Keys可以在DOM中的某些元素被增加或删除的时候帮助React识别哪些元素发生了变化。最好是该元素在列表中拥有的独一无二的字符串。使用来自数据的id作为元素的key</p><p>元素的key只有在它和它的兄弟节点对比时才有意义。</p><h1 id="9-表单"><a href="#9-表单" class="headerlink" title="9.表单"></a>9.表单</h1><p>HTML 表单元素与React中其他DOM元素有所不同，因为表单元素本来就保留一些内部状态了。会构造一个处理提交表单并可访问用户输入表单数据的函数。标准方法是使用受控组件。</p><h2 id="9-1-受控组件"><a href="#9-1-受控组件" class="headerlink" title="9.1 受控组件"></a>9.1 受控组件</h2><p>在HTML当中，像<code>&lt;input&gt;,&lt;textarea&gt;, 和 &lt;select&gt;</code>这类表单元素会维持自身状态，并根据用户输入进行更新。但在React中，可变的状态通常保存在组件的状态属性中，并且只能用 setState() 方法进行更新。</p><pre><code>class NameForm extends React.Component {    constructor(props) {        super(props);        this.state = {value: &apos;&apos;};        this.handleChange = this.handleChange.bind(this);        this.handleSubmit = this.handleSubmit.bind(this);    }    handleChange(event) {        this.setState({value: event.target.value});    }    handleSubmit(event) {        alert(&apos;A name was submitted: &apos; + this.state.value);        event.preventDefault();    }    render() {        return (            &lt;form onSubmit={this.handleSubmit}&gt;                &lt;label&gt;                  Name:                  &lt;input type=&quot;text&quot; value={this.state.value} onChange={this.handleChange} /&gt;                &lt;/label&gt;                &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;            &lt;/form&gt;        );    }}</code></pre><h2 id="9-2-textarea标签"><a href="#9-2-textarea标签" class="headerlink" title="9.2 textarea标签"></a>9.2 textarea标签</h2><pre><code>class EssayForm extends React.Component {    constructor(props) {        super(props);        this.state = {          value: &apos;Please write an essay about your favorite DOM element.&apos;        };        this.handleChange = this.handleChange.bind(this);        this.handleSubmit = this.handleSubmit.bind(this);    }    handleChange(event) {        this.setState({value: event.target.value});    }    handleSubmit(event) {        alert(&apos;An essay was submitted: &apos; + this.state.value);        event.preventDefault();    }    render() {        return (            &lt;form onSubmit={this.handleSubmit}&gt;                &lt;label&gt;                Name:                &lt;textarea value={this.state.value} onChange={this.handleChange} /&gt;                &lt;/label&gt;                &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;            &lt;/form&gt;        );    }}</code></pre><h2 id="9-3-select标签"><a href="#9-3-select标签" class="headerlink" title="9.3 select标签"></a>9.3 select标签</h2><p>React中，不适用selected属性表明选中项，而是在根select标签上用value属性来表示选中项。这在受控组件中更方便，因为只需要在一个地方更新组件。</p><pre><code>class FlavorForm extends React.Component {    constructor(props) {    super(props);    this.state = {value: &apos;coconut&apos;};    this.handleChange = this.handleChange.bind(this);    this.handleSubmit = this.handleSubmit.bind(this);}handleChange(event) {    this.setState({value: event.target.value});}handleSubmit(event) {    alert(&apos;Your favorite flavor is: &apos; + this.state.value);    event.preventDefault();}    render() {        return (            &lt;form onSubmit={this.handleSubmit}&gt;                &lt;label&gt;                    Pick your favorite La Croix flavor:                    &lt;select value={this.state.value} onChange={this.handleChange}&gt;                    &lt;option value=&quot;grapefruit&quot;&gt;Grapefruit&lt;/option&gt;                    &lt;option value=&quot;lime&quot;&gt;Lime&lt;/option&gt;                    &lt;option value=&quot;coconut&quot;&gt;Coconut&lt;/option&gt;                    &lt;option value=&quot;mango&quot;&gt;Mango&lt;/option&gt;                    &lt;/select&gt;                &lt;/label&gt;                &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;            &lt;/form&gt;        );    }}</code></pre><h2 id="9-4-多个输入的解决方法"><a href="#9-4-多个输入的解决方法" class="headerlink" title="9.4 多个输入的解决方法"></a>9.4 多个输入的解决方法</h2><p>通过给每个元素添加一个name属性，来让处理函数根据event.target.name的值来选择做什么</p><pre><code>class Reservation extends React.Component {    constructor(props) {        super(props);        this.state = {            isGoing: true,            numberOfGuests: 2        };        this.handleInputChange = this.handleInputChange.bind(this);    }    handleInputChange(event) {        const target = event.target;        const value = target.type === &apos;checkbox&apos; ? target.checked : target.value;        const name = target.name;        this.setState({            [name]: value        });    }    render() {        return (            &lt;form&gt;                &lt;label&gt;                    Is going:                    &lt;input                        name=&quot;isGoing&quot;                        type=&quot;checkbox&quot;                        checked={this.state.isGoing}                        onChange={this.handleInputChange} /&gt;                &lt;/label&gt;                &lt;br /&gt;                &lt;label&gt;                    Number of guests:                    &lt;input                        name=&quot;numberOfGuests&quot;                        type=&quot;number&quot;                        value={this.state.numberOfGuests}                        onChange={this.handleInputChange} /&gt;                &lt;/label&gt;            &lt;/form&gt;        );    }}</code></pre><h1 id="10-状态提升"><a href="#10-状态提升" class="headerlink" title="10. 状态提升"></a>10. 状态提升</h1><h2 id="10-1-摄氏度华氏度的例子"><a href="#10-1-摄氏度华氏度的例子" class="headerlink" title="10.1 摄氏度华氏度的例子"></a>10.1 摄氏度华氏度的例子</h2><p>状态分享是通过将state数据提升至离需要这些数据的组件最近的父组件来完成的</p><pre><code>class Calculator extends React.Component {    constructor(props) {        super(props);        this.handleCelsiusChange = this.handleCelsiusChange.bind(this);        this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);        this.state = {temperature: &apos;&apos;, scale: &apos;c&apos;};    }    handleCelsiusChange(temperature) {        this.setState({scale: &apos;c&apos;, temperature});    }    handleFahrenheitChange(temperature) {        this.setState({scale: &apos;f&apos;, temperature});    }    render() {        const scale = this.state.scale;        const temperature = this.state.temperature;        const celsius = scale === &apos;f&apos; ? tryConvert(temperature, toCelsius) : temperature;        const fahrenheit = scale === &apos;c&apos; ? tryConvert(temperature, toFahrenheit) : temperature;        return (          &lt;div&gt;            &lt;TemperatureInput              scale=&quot;c&quot;              temperature={celsius}              onTemperatureChange={this.handleCelsiusChange} /&gt;            &lt;TemperatureInput              scale=&quot;f&quot;              temperature={fahrenheit}              onTemperatureChange={this.handleFahrenheitChange} /&gt;            &lt;BoilingVerdict              celsius={parseFloat(celsius)} /&gt;          &lt;/div&gt;        );    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二战时间线</title>
      <link href="/%E4%BA%8C%E6%88%98%E6%97%B6%E9%97%B4%E7%BA%BF/"/>
      <url>/%E4%BA%8C%E6%88%98%E6%97%B6%E9%97%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<!--toc--><blockquote><p>对二战很感兴趣，依旧在不断了解中。未了解前完全没想到在不到80年前，我们这个世界因为战争在短短十多年间死去了7000万人。中间有太多的泯灭人性，亦有很多人性的光辉。不知道列宁格勒，如今的圣彼得堡的居民，在两年半的被围城中是如何活下来的，每个人，都真的是挺直了腰背，这一刻，尊严比命重要。有太多的细节可以探寻，也有很多微妙的节点，好多次盟军的胜利是因为一些不期而遇的变化，小人物的选择，天气的突然放晴。每每读到这种时候，心里总会长舒一口气，庆幸啊。（PS: 有部美剧，就特地开了脑洞，讲二战轴心国胜利以后的世界的样子… 一个真的敢拍，一个真的敢播，hhh ）Anyway，铭记历史~ </p></blockquote><h1 id="时间线（欧洲战场-and-太平洋战场）"><a href="#时间线（欧洲战场-and-太平洋战场）" class="headerlink" title="时间线（欧洲战场 and 太平洋战场）"></a>时间线（欧洲战场 and 太平洋战场）</h1><p>二战整个过程，德国东征波兰，北伐北欧、西吞法国、南并巴尔干，在欧洲大陆上大杀四方，无人可挡。但到了第二阶段，苏联以强大的力量阻遏了德国的闪电攻势，而年底日本对美国的偷袭更将可怕的敌人拉入了战争。在第三阶段，同盟国在太平洋战场、北非战场、东线战场相继赢得转折点性质的胜利。在第四阶段，扫清了北非的盟军开始进攻西欧大陆，苏联在东面的战场大举反攻。到第五阶段，轴心国崩溃，德国、日本相继投降（意大利早在上一阶段就已投降），战争结束。</p><h2 id="1939-1940"><a href="#1939-1940" class="headerlink" title="1939 - 1940"></a>1939 - 1940</h2><ul><li>1939.9 </li></ul><p>德国进攻波兰，闪电战，波兰迅速崩溃。波兰盟友英法向德国宣战，却没有采取大规模行动，形成了西线无战事的奇怪的战争。与德国签订有《德苏互不侵犯条约》的苏联更是趁机从东面入侵了波兰，一个月，战争结束，波兰被德苏两国瓜分。</p><ul><li>1930.11</li></ul><p>苏联入侵芬兰，在芬兰人的抵抗下，苏联损失惨重。两方面原因，芬兰人英勇抵抗，苏联在大清洗中洗掉了大量的优秀军官。最终苏联惨胜，签订《莫斯科和平协定》。</p><ul><li>1940.5 </li></ul><p>德国德国兵锋西指，几天内就攻陷了荷兰和比利时，驻守在<strong><em>马其诺防线</em></strong>北侧的英军、法军北上迎击，这落入了曼施坦因的圈套，德军出其不意地从<strong>阿登山区</strong>突入，“闪击战之父”古德里安率领坦克部队果断前进，切入到盟军侧背，形成围歼之势。盟军被迫在敦刻尔克乘英国的大小船只撤退到英国，这就是代号为“发电机行动”的敦刻尔克大撤退。无力抵抗的法国在德军的继续进攻下被迫投降，一部分国土被德国和意大利占领，另一部分国土则由贝当的“维希法国”管理。戴高乐在伦敦发表演说，不承认维希法国的合法性，组织自由法国继续抗争。几乎与此同时，苏联吞并了位于波罗的海的三个国家——爱沙尼亚、拉脱维亚和立陶宛。</p><ul><li>1940.8</li></ul><p>攻占法国后，希特勒开始着眼于英国，制定了“海狮计划”准备登陆英国。为了争夺登陆作战的制空权，德国空军从8月份开始对英国的空中攻势，英国军民在丘吉尔的领导下奋勇抵抗 —— 不列颠空战。1941年不列颠空战中，英国取得了最终胜利。</p><ul><li>1940.9</li></ul><p>利比亚的意大利军队入侵埃及，而后被英军击败并在12月反推至利比亚。10月，意大利入侵希腊，却迅速失败反而被希腊军队反推到阿尔巴尼亚。德国被迫卷入战争，入侵南斯拉夫和希腊。经过一系列战役后，巴尔干半岛上的战争最终以轴心国的胜利结束，整个巴尔干半岛都落入了轴心国的掌控之内。希特勒在次年又将隆美尔派往北非营救意大利。隆美尔取得了一系列胜利，赢得了“沙漠之狐”的美誉。轴心国在地中海、北非战场取得了一定进展，但德军因此推迟了入侵苏联的时间，希特勒后来为之懊恼不已。</p><h2 id="1941"><a href="#1941" class="headerlink" title="1941"></a>1941</h2><ul><li>1941.6</li></ul><p>德国巴巴罗萨行动，三路大军入侵苏联。北方集团军群攻占波罗的海三国，保卫列宁格勒，列宁格勒保卫战开始。中央集团军攻克斯摩棱斯克，直指莫斯科。南方军团在基辅大胜苏军，完成了历史上最大规模的歼灭战。</p><ul><li>1941.7</li></ul><p>英美冻结日本的资产，美国对日本实施了石油禁运政策，釜底抽薪之策啊。</p><ul><li>1941.12</li></ul><p>日本在太平洋上对英美发起了进攻。山本五十六偷袭珍珠港（12.7），美国从孤立主义转向参战。美国总统罗斯福对日本宣战，半年内日军依旧在太平洋战场占据优势。德军潜艇部队在邓尼茨的指挥下，运用狼群战术，对盟军航运船只造成了巨大的伤害。 </p><h2 id="1942"><a href="#1942" class="headerlink" title="1942"></a>1942</h2><ul><li>1942.5 </li></ul><p>太平洋珊瑚海，日军对抗盟军航母，日军航母祥凤号被击沉，翔鹤号受到重创，瑞鹤号飞机损耗严重。美军航母列星顿号沉没，约克城号受伤。这是日本在太平洋战场上的扩张势头第一次受到阻遏，盟军保住了美国到澳大利亚间的交通线。</p><ul><li>1942.6 </li></ul><p>中途岛海战爆发。酷炫的圈套和反圈套作战，最终日军四艘航母全沉没了。此战后，日军在太平洋战场上的优势不复存在。</p><ul><li>1942.5-6</li></ul><p>北非战场，“沙漠之狐”隆美尔率领轴心国军队在加查拉战役中战胜了奥金莱克指挥的盟军，盟军向东退守阿拉曼防线。7月，隆美尔进攻阿拉曼防线，奥金莱克率军抵抗，两军打成了消耗战。8月，奥金莱克的指挥职务被蒙哥马利取代。10月，第二次阿拉曼战役打响，在拥有制空权和后勤方面的优势条件下，蒙哥马利击败了隆美尔，一路追到了突尼斯。</p><ul><li>1942.7</li></ul><p>斯大林格勒战役打响，德军攻入了斯大林格勒，但是与苏军展开巷战，遭到英勇抵抗。11月，天王星计划，完成了反包围。德军在整个战争过程中第一个大规模失败，被俘90，000余人。转折点，盟军进入战略反攻阶段。</p><h2 id="1943"><a href="#1943" class="headerlink" title="1943"></a>1943</h2><ul><li>1942.11 </li></ul><p>北非火炬行动，在阿尔及利亚和摩洛哥登陆后，向突尼斯的轴心国军队进攻。到1943年5月，在实力雄厚的盟军的两面夹击之下，轴心国的部队完全失败，除了一部分逃走外，全部向盟军投降。至此盟军取得了在北非战场上的全面胜利，他们可以把目光投向地中海对面的意大利了。</p><ul><li>1943.7 </li></ul><p>盟军进攻西西里岛，取得胜利。</p><p>东线，德军元帅曼施坦因对阵苏军元帅朱可夫。曼施坦因想用钳形攻势攻击突出的库尔斯克地区，却被朱可夫抵挡住。战争发展成了历史上规模最大的坦克大会战，苏联人的损失比德国更大，但他们能承受这些。最后，由于盟军在西西里岛的入侵，希特勒急需从东线抽调兵力，曼施坦因被迫撤退。从此苏联人开始大规模收复失地，德国人节节败退。</p><ul><li>1943.9</li></ul><p>盟军入侵意大利本土，墨索里尼下台，意大利政府投降。</p><ul><li>1943.11</li></ul><p>开罗会议 - 英美中</p><p>德黑兰会议 - 苏美英  商讨进攻轴心国的战略和战后的安排</p><h1 id="1944-1945"><a href="#1944-1945" class="headerlink" title="1944 - 1945"></a>1944 - 1945</h1><ul><li>1944.1 </li></ul><p>长达两年四个月的列宁格勒围城战终于结束了。苏联法功十次斯大林突进。到年底，收回了全部领土，更控制了东欧大部分国家。</p><ul><li>1944.6</li></ul><p>盟军霸王行动，诺曼底登陆，三百万士兵横渡英吉利海峡。巴顿将军率部横扫法兰西。8月，法国解放。</p><ul><li>1944.12</li></ul><p>12月，德国进行最后的挣扎，在阿登地区向盟军发动攻势，莫德尔成功地在布莱德利的防线上打出了一个“突出部”，所以这场战役被称为突出部战役。德军将小股盟军包围在巴斯托尼。在守军即将崩溃的时候，天气放晴，盟军的空军优势得以发挥，他们对德军进行了猛烈的轰炸，并将物资空投到巴斯托尼。巴顿的援军迅速北上，德军大势已去。希特勒终于同意了莫德尔的撤军请求，他的孤注一掷失败了。</p><ul><li>1945.2 </li></ul><p>雅尔塔会议 —— 苏美英</p><ul><li>1945.4</li></ul><p>朱可夫率领苏军攻占柏林，占领国会大厦，希特勒自杀。</p><p>太平洋战场，盟军在麦克阿瑟的率领下，用蛙跳式跃岛战术。冲绳岛作战。</p><ul><li>1945.7 </li></ul><p>波茨坦会议 —— 苏美英，商讨战后欧洲问题及对日本作战的问题</p><ul><li>1945.8 </li></ul><p>广岛长崎原子弹</p><p>苏联红军攻进中国东北，击溃关东军。</p><p>日本宣布接收《波茨坦公告》公告，无条件投降。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> world war </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读懂财报</title>
      <link href="/%E8%AF%BB%E6%87%82%E8%B4%A2%E6%8A%A5/"/>
      <url>/%E8%AF%BB%E6%87%82%E8%B4%A2%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-资产负债表"><a href="#1-资产负债表" class="headerlink" title="1 资产负债表"></a>1 资产负债表</h1><h2 id="1-1-资产负债表-分类"><a href="#1-1-资产负债表-分类" class="headerlink" title="1.1 资产负债表 分类"></a>1.1 资产负债表 分类</h2><p>企业需要做三张报表，分别是</p><ul><li>资产负债表</li><li>利润表</li><li>现金流</li></ul><h2 id="1-2-财务报表是用来做什么的？"><a href="#1-2-财务报表是用来做什么的？" class="headerlink" title="1.2 财务报表是用来做什么的？"></a>1.2 财务报表是用来做什么的？</h2><p>企业从事的经营活动的种类有：</p><ul><li>经营活动</li></ul><p>比如一个企业需要生产产品、销售产品、回收货款等等</p><ul><li>投资活动</li></ul><p>如果一个企业想要到一个新的地区去开展业务，想进入一个新的业务领域，或者想设计生产一个新的产品</p><ul><li>融资活动</li></ul><p>在经营和投资的过程中，当缺钱了的时候，需要去银行借钱，或者找别人来投资自己</p><p>可以这样子说，企业一辈子只做这三件事，经营，投资以及融资。在这整个过程中，无论其处在什么发展阶段，其日常经济活动都可以抽象成这样一个过程，从现金开始，转了一圈再搞到现金的过程。</p><h2 id="1-3-资产负债表详解"><a href="#1-3-资产负债表详解" class="headerlink" title="1.3 资产负债表详解"></a>1.3 资产负债表详解</h2><p>分为如下几个部分： </p><ul><li>资产 - 流动资产</li><li>资产 - 非流动资产</li><li>负债 - 流动负债</li><li>负债 - 非流动负债</li><li>股东权益</li></ul><h3 id="1-3-1-流动资产"><a href="#1-3-1-流动资产" class="headerlink" title="1.3.1 流动资产"></a>1.3.1 流动资产</h3><ul><li>货币资金</li></ul><p>放在银行里面或者放在公司里面的钱。包括库存现金，银行贷款，和其他货币资金三个项目的期末余额。</p><ul><li>应收账款</li></ul><p>销售产品的时候，发生的卖掉产品但是收不到钱的情况。<br>即需要核算的企业因为销售商品、提供劳务等经营活动应收取的款项。</p><ul><li>其他应收款</li></ul><p>企业除了存出保证金（租房子时交付的未来将退回的保证金、押金等）、买入返售的金融资产、应收票据、应收账款、预付账款、应收股利、应收利息、应收代位追偿款、应收分保账款、应收分包合同准备金、长期应收款等以外的其他各种应收及暂付款项。</p><ul><li>预付账款</li></ul><p>基本发生在货品很紧缺，带了一种向卖方收款的权利。预付账款也是一种资产。</p><ul><li>存货</li></ul><p>生产产品所需的原材料，生产出来的产成品，以及尚且处在生产过程中的没有完成的在产品</p><ul><li>待摊费用</li></ul><p>资产 vs 费用。 如果这笔钱可以换来对将来有用的东西，就是资产。如果画完就完了，就是费用。</p><p>各项流动资产在资产负债表中是按照<strong>各自转换为现金的速度</strong>来排序的。</p><h3 id="1-3-2-非流动资产"><a href="#1-3-2-非流动资产" class="headerlink" title="1.3.2 非流动资产"></a>1.3.2 非流动资产</h3><p>返回现金的时间长度，无法在一个循环内完成的。</p><ul><li>长期投资</li></ul><p>指不满足短期投资条件的投资，即不准备在一年或长于一年的经营周期之内转变为现金的投资。可以分为长期股票投资，长期债券投资，其他长期投资</p><ul><li>固定资产</li></ul><p>指同时具有以下特征的有形资产： （1）为生产商品、提供劳务、出租或经营管理而持有的； （2）使用寿命超过了一个会计年度</p><ul><li>无形资产</li></ul><p>专利权，版权等，还有土地使用权</p><p>指企业拥有或者控制的没有实物形态的可辨认的非货币性的资产。包括专利权、非专利技术、商标权、著作权、土地使用权等。</p><h3 id="1-3-3-资产-gt-企业"><a href="#1-3-3-资产-gt-企业" class="headerlink" title="1.3.3 资产 -&gt; 企业"></a>1.3.3 资产 -&gt; 企业</h3><p> 固定资产多，应收账款多，可能是有经营压力的传统企业</p><p> 生物资产，指有生命的动物和植物，生物资产分为消耗性生物资产，生产性生物资产和公益性生物资产。</p><p> 资产的结构会告诉你这家公司是什么样子的。 </p><h3 id="1-3-4-资产如何计价？"><a href="#1-3-4-资产如何计价？" class="headerlink" title="1.3.4 资产如何计价？"></a>1.3.4 资产如何计价？</h3><p> 会计们会用原来购买的资产价格当做这个资产的价值。</p><blockquote><p>历史成本</p></blockquote><blockquote><p>资产在其取得时为其所支付的现金或现金等价物的金额。负债在正常经营活动中为交换而收到或为偿付将要支付的现金或现金等价物的金额。</p></blockquote><blockquote><p>Bug: 历史成本无法体现出资产的变化。故解决方案为： 如果资产价值减小了，就把减值记下来。因为资产计价体系是一个历史成本的体系，一定要在历史成本的基础上扣除这个资产的减值。 </p></blockquote><ul><li>历史成本的含义</li></ul><ol><li>只有花了的钱才能记在账上。</li><li>在历史成本的计价体系下，增加资产价值的唯一途径是发生一个新的交易。</li></ol><h3 id="1-3-5-负债"><a href="#1-3-5-负债" class="headerlink" title="1.3.5 负债"></a>1.3.5 负债</h3><blockquote><p>负债：由于过去的交易或事务所引起的公司企业的现有债务，这种债务需要企业在将来以转移资产或提供劳务加以清偿，从而引起未来经济利益的流出。<br>其他：是为了简化，欠员工的工资，因为是月底发钱； 欠税务局的钱。这些都是流动负债。非流动负债： 应付债券。</p></blockquote><blockquote><p>应付债券：企业为了筹集资金而对外发行的期限在一年以上的长期借款性质的书面证明，约定在一定期限内还本付息的一种书面承诺。</p></blockquote><h3 id="1-3-6-股东权益"><a href="#1-3-6-股东权益" class="headerlink" title="1.3.6 股东权益"></a>1.3.6 股东权益</h3><blockquote><p>股东权益： 公司总资产中扣除负债剩余的部分，也成为净资产，反映了公司的自有资本。</p></blockquote><blockquote><p>股本： 股本金额相当于公司的注册资本。股本的总额体现了这个公司对外承担法律责任的上限。股本的组成则确定了多个股东之间的权利义务关系。</p></blockquote><blockquote><p>资本公积： 企业收到的投资者的超出其在企业注册资本所占份额，以及直接计入所有者权益的利得和损失等。</p></blockquote><blockquote><p>股东权益 + 负债 = 资产</p></blockquote><p>注意资产负债表是一个时间点的概念，是状态，不是过程。</p><h1 id="2-利润表"><a href="#2-利润表" class="headerlink" title="2. 利润表"></a>2. 利润表</h1><p>资产负债表： 可以看到投入的本金是否得到保障。利润表，则能得知投入的本金有没有赚钱。</p><p>毛利 = 营业收入 - 营业成本</p><h2 id="2-1-税种"><a href="#2-1-税种" class="headerlink" title="2.1 税种"></a>2.1 税种</h2><ul><li>营业税</li></ul><p>国家对工商营利事业按照营业额征收的税</p><ul><li>营业税金及附加</li></ul><p>企业经营活动应负担的相关税费，包括营业税、消费税、城市维护建设税、资源税、教育费附加等。不是所得税，是流转税，只要是有业务的企业就得缴纳流转税。</p><ul><li>常见的流转税： 营业税（价内税） + 增值税（价外税）</li><li>价内税： 税金包含在商品价值或价格之内</li><li>价外税： 税款不包括在价格内</li><li>增值税： 一种销售税，是消费者承担的税费，属于累退税，是基于商品或服务的增值而增税的一种间接税</li></ul><h2 id="2-2-其他项目"><a href="#2-2-其他项目" class="headerlink" title="2.2 其他项目"></a>2.2 其他项目</h2><ul><li>补贴收入<br>中国特色： 政府为一些企业提供的补贴。</li></ul><h2 id="2-3-利润表的分析"><a href="#2-3-利润表的分析" class="headerlink" title="2.3 利润表的分析"></a>2.3 利润表的分析</h2><p>告诉了是否赚钱，在哪些方面赚钱的基本信息。同时因为将可持续的和不可持续的营业收入分开，就可以帮助企业推断出自己未来一段时间以内的收益。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
            <tag> finance </tag>
            
            <tag> stock </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
