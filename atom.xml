<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leilei&#39;s Blog | 磊磊的博客</title>
  
  <subtitle>Because it&#39;s there</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.llchen60.com/"/>
  <updated>2021-06-25T01:21:30.603Z</updated>
  <id>https://www.llchen60.com/</id>
  
  <author>
    <name>Leilei Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01背包问题</title>
    <link href="https://www.llchen60.com/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://www.llchen60.com/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-25T01:20:17.000Z</published>
    <updated>2021-06-25T01:21:30.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h1><p>Created: Jun 23, 2021 8:02 PM</p><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>背包问题 即有N件物品，和一个最多能装重量W的背包，第i件物品的重量是weight[i], 得到的价值是value[i], 每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。</p><h1 id="2-暴力破解方法"><a href="#2-暴力破解方法" class="headerlink" title="2. 暴力破解方法"></a>2. 暴力破解方法</h1><ul><li>每件物品只有选和不选两种途径，可以使用回溯法搜索出所有的情况，然后取最大的值</li><li>这样写非常慢，因为遍历了每个物品的取和不取的所有情况，时间复杂度为O(2^n)</li></ul><pre><code class="jsx">class Solution {    int result = 0;  int cur = 0;    public maxValue(int[] value, int[] weight, int w) {        backTracking(value, weight, w, 0);        return result;    }    private void backTracking(int[] value, int[] weight, int w, int startIndex) {        if (startIndex &gt; value.length - 1 || w &lt; 0) {            return;        }        for (int i = startIndex; i &lt; value.length; i++) {            cur += value[i];            w -= weight[i];                        result = Math.max(result, cur);            backTracking(value, weight, w, i + 1);            cur -= value[i];            w += weight[i];        }    }}</code></pre><h1 id="3-二维dp数组01背包"><a href="#3-二维dp数组01背包" class="headerlink" title="3. 二维dp数组01背包"></a>3. 二维dp数组01背包</h1><p>因为每一步都是依托于上一步你的物品的取放的选择的，是一个可以用dp来做的类型题目~ </p><p>我们需要做以下几步来思考整个逻辑</p><h2 id="3-1-确定dp数组和下标的含义"><a href="#3-1-确定dp数组和下标的含义" class="headerlink" title="3.1 确定dp数组和下标的含义"></a>3.1 确定dp数组和下标的含义</h2><ul><li>在二维数组里面，我们希望用dp[i][j] 表示我在做了对于前i个产品的选择，在容量为j的时候能够获得的最大的价值</li><li>在这个定义下，那么最终我需要的值就是dp[n][W], 这就是我在做了n个关于这些产品的选取放弃的决定，在满足重量不超过W的限定条件下能取得的最大价值了</li></ul><h2 id="3-2-确定递推公式"><a href="#3-2-确定递推公式" class="headerlink" title="3.2 确定递推公式"></a>3.2 确定递推公式</h2><pre><code class="jsx">// 不选i这件产品，容量为j的值; 还有选了i这件产品，那么i-1件产品的总重量需要满足 j - weight[i], 这个时候再加上i这件产品的价值，  这两个dp数组位置的最大值就是dp[i][j]需要取的值了dp[i][j] = Math.max(dp[i-1][j], dp[i-1][j - weight[i]] + value[i])</code></pre><h2 id="3-3-如何初始化这个数组"><a href="#3-3-如何初始化这个数组" class="headerlink" title="3.3 如何初始化这个数组"></a>3.3 如何初始化这个数组</h2><ul><li>对于第一列  j = 0 意味着现在背包允许的重量为0，所以不管是哪个产品，有的价值都为0</li><li>对于第一行 i = 0, 此时我们只能选择物品0，而且题目中说了只能最多拿一件产品，所以可以将这一行都声明为weight[0]</li></ul><h2 id="3-4-确定遍历顺序"><a href="#3-4-确定遍历顺序" class="headerlink" title="3.4 确定遍历顺序"></a>3.4 确定遍历顺序</h2><p>先遍历物品，再遍历背包重量  其实均可</p><pre><code class="jsx">// weight数组的大小 就是物品个数for(int i = 1; i &lt; weight.size(); i++) { // 遍历物品    for(int j = 0; j &lt;= bagWeight; j++) { // 遍历背包容量        if (j &lt; weight[i]) dp[i][j] = dp[i - 1][j]; // 这个是为了展现dp数组里元素的变化        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);    }}</code></pre><h2 id="3-5-代码"><a href="#3-5-代码" class="headerlink" title="3.5 代码"></a>3.5 代码</h2><pre><code class="jsx">public int WeightBagProblem(int[] weight, int[] value, int bagSize){        int wLen = weight.length, value0 = 0;        //定义dp数组：dp[i][j]表示背包容量为j时，前i个物品能获得的最大价值        int[][] dp = new int[wLen + 1][bagSize + 1];        //初始化：背包容量为0时，能获得的价值都为0        for (int i = 0; i &lt;= wLen; i++){            dp[i][0] = value0;        }        //遍历顺序：先遍历物品，再遍历背包容量        for (int i = 1; i &lt;= wLen; i++){            for (int j = 1; j &lt;= bagSize; j++){                if (j &lt; weight[i - 1]){                    dp[i][j] = dp[i - 1][j];                }else{                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i - 1]] + value[i - 1]);                }            }        }                return dp[wLen][bagSize];    }</code></pre><h1 id="4-数组降维-—-利用滚动数组解决01背包问题"><a href="#4-数组降维-—-利用滚动数组解决01背包问题" class="headerlink" title="4. 数组降维 — 利用滚动数组解决01背包问题"></a>4. 数组降维 — 利用滚动数组解决01背包问题</h1><ul><li>在第三部分当中，我们的递归公式推导出来是：</li></ul><pre><code class="jsx">dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]] + value[i])</code></pre><ul><li>如果在这里 我们将dp[i-1][]那一层的东西拷贝到dp[i]这一层，那么我们是可以使用一个一维数组来解决这个问题的</li></ul><h2 id="4-1-确定dp数组的定义"><a href="#4-1-确定dp数组的定义" class="headerlink" title="4.1 确定dp数组的定义"></a>4.1 确定dp数组的定义</h2><p>在一维dp数组当中, dp[j]表示容量为j的背包所背的物品价值可以最大为dp[j] </p><h2 id="4-2-一维数组递推公式"><a href="#4-2-一维数组递推公式" class="headerlink" title="4.2 一维数组递推公式"></a>4.2 一维数组递推公式</h2><pre><code class="jsx">dp[j] = max(dp[j], dp[j-weight[i]] + value[i])</code></pre><h2 id="4-3-一维数组初始化"><a href="#4-3-一维数组初始化" class="headerlink" title="4.3 一维数组初始化"></a>4.3 一维数组初始化</h2><ul><li>首先确定背包容量为0所背的物品的最大价值也为0</li><li>假设所有产品价值非负，那么我们就不用初始化数组其他位置的值为负无穷了，保持为0即可</li></ul><h2 id="4-4-一维数组遍历顺序"><a href="#4-4-一维数组遍历顺序" class="headerlink" title="4.4 一维数组遍历顺序"></a>4.4 一维数组遍历顺序</h2><pre><code class="jsx">or(int i = 0; i &lt; weight.size(); i++) { // 遍历物品    for(int j = bagWeight; j &gt;= weight[i]; j--) { // 遍历背包容量        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);    }}</code></pre><ul><li>不能正序遍历，因为正序的话物品会被重复加入很多次<ul><li>因为在遍历后一个的时候实际上已经用了前一个的结果</li><li>譬如<ul><li>dp[1] = dp[1 - weight[0]] + value[0]</li><li>dp[2] = dp[2 - weight[0]] + value[0]</li><li>dp[2] 会用到dp[1] (当weight[0] = 1的时候)  这个时候相当于我们把0号产品用了两次了 这是不能够的</li></ul></li></ul></li></ul><pre><code class="jsx">public static void main(String[] args) {        int[] weight = {1, 3, 4};        int[] value = {15, 20, 30};        int bagWight = 4;        testWeightBagProblem(weight, value, bagWight);    }    public static void testWeightBagProblem(int[] weight, int[] value, int bagWeight){        int wLen = weight.length;        //定义dp数组：dp[j]表示背包容量为j时，能获得的最大价值        int[] dp = new int[bagWeight + 1];        //遍历顺序：先遍历物品，再遍历背包容量        for (int i = 0; i &lt; wLen; i++){            for (int j = bagWeight; j &gt;= weight[i]; j--){                dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);            }        }        //打印dp数组        for (int j = 0; j &lt;= bagWeight; j++){            System.out.print(dp[j] + &quot; &quot;);        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;01背包问题&quot;&gt;&lt;a href=&quot;#01背包问题&quot; class=&quot;headerlink&quot; title=&quot;01背包问题&quot;&gt;&lt;/a&gt;01背包问题&lt;/h1&gt;&lt;p&gt;Created: Jun 23, 2021 8:02 PM&lt;/p&gt;
&lt;h1 id=&quot;1-问题描述&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://www.llchen60.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="01背包" scheme="https://www.llchen60.com/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机基本原理</title>
    <link href="https://www.llchen60.com/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>https://www.llchen60.com/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</id>
    <published>2021-06-23T04:21:43.000Z</published>
    <updated>2021-06-24T03:01:17.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机基本原理"><a href="#Java虚拟机基本原理" class="headerlink" title="Java虚拟机基本原理"></a>Java虚拟机基本原理</h1><h1 id="1-Java-代码运行方式"><a href="#1-Java-代码运行方式" class="headerlink" title="1. Java 代码运行方式"></a>1. Java 代码运行方式</h1><h2 id="1-1-为什么需要虚拟机"><a href="#1-1-为什么需要虚拟机" class="headerlink" title="1.1 为什么需要虚拟机"></a>1.1 为什么需要虚拟机</h2><ul><li>设计一个面向Java语言特性的虚拟机<ul><li>做这个的原因是为了能够在各种机器上来实现对Java的支持</li><li>通过编译器将Java程序转换成该虚拟机所能识别的指令序列，又被称为Java字节码<ul><li>叫做Java字节码的原因是字节码指令的操作码opcode被定义成了一个字节</li></ul></li></ul></li><li>Java的虚拟机是可以由硬件实现的，也可以在各个平台上(Windows/ Linux) 提供软件的实现<ul><li>好处1： 一旦一个程序被转换成了Java字节码，那么便可以在不同平台上的虚拟机里来运行</li><li>好处2： 带来了托管环境，这个托管环境能够代替我们处理一些代码当中冗长而且容易出错的部分<ul><li>自动内存管理</li><li>垃圾回收</li><li>诸如数组越界，动态类型，安全权限等等的动态检测功能</li></ul></li></ul></li></ul><h2 id="1-2-如何运行Java字节码的？"><a href="#1-2-如何运行Java字节码的？" class="headerlink" title="1.2 如何运行Java字节码的？"></a>1.2 如何运行Java字节码的？</h2><ul><li>从虚拟机视角来看<ul><li>首先将其编译成的class文件加载到Java虚拟机当中</li><li>加载后的Java类会被存放于方法区里 Method Area</li><li>实际执行的时候，执行方法区的代码</li><li>空间分配<ul><li>线程共享的<ul><li>方法区</li><li>堆</li></ul></li><li>线程私有<ul><li>PC寄存器</li><li>Java方法栈<ul><li>当调用一个Java方法的时候，会在当前线程生成一个栈帧，用来存放局部变量以及字节码的操作数</li><li>栈帧大小是已经计算好了的，栈帧不需要连续分布</li></ul></li><li>本地方法栈</li></ul></li></ul></li></ul></li><li>从硬件视角来看<ul><li>需要虚拟机将字节码翻译成机器码</li><li>翻译方式<ul><li>解释执行<ul><li>逐条将字节码翻译成机器码并且执行</li><li>优势<ul><li>无需等待编译</li></ul></li></ul></li><li>即时编译 Just In Time Compilation<ul><li>将一个方法中包含的所有字节码编译成机器码以后再执行</li><li>优势<ul><li>实际执行速度会更快</li></ul></li></ul></li></ul></li><li>hotpot的翻译方式<ul><li>先解释执行字节码</li><li>而后将反复执行的热点代码按照方法来作为基本单元进行JIT 即时编译</li></ul></li></ul></li></ul><h2 id="1-3-Java虚拟机执行效率"><a href="#1-3-Java虚拟机执行效率" class="headerlink" title="1.3 Java虚拟机执行效率"></a>1.3 Java虚拟机执行效率</h2><ul><li>优化方式<ul><li>即时编译<ul><li>底层逻辑 — 二八定律<ul><li>认为20%代码会占据80%的计算资源</li></ul></li><li>编译器类别 — tradeoff 编译时间 vs 执行效率<ul><li>C1<ul><li>Client编译器</li><li>面向对启动性能有要求的客户端GUI程序</li></ul></li><li>C2<ul><li>Server编译器</li><li>面向对峰值性能有要求的服务器端程序</li><li>采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的效率比较高</li></ul></li><li>Graal</li></ul></li></ul></li></ul></li><li>Hotpot对于各种编译器的采用方式<ul><li>分层编译<ul><li>热点方法先被C1 编译</li><li>热点方法里的热点会进一步被C2 编译器编译</li></ul></li><li>会影响应用的正常进行么？<ul><li>即时编译是在额外的编译线程当中进行的</li><li>会根据CPU的数量设置编译线程的数目，并且按照1:2的比例配置给C1 及C2 编译器</li></ul></li></ul></li></ul><h1 id="2-基本类型在虚拟机当中的实现"><a href="#2-基本类型在虚拟机当中的实现" class="headerlink" title="2. 基本类型在虚拟机当中的实现"></a>2. 基本类型在虚拟机当中的实现</h1><ul><li>为什么要引入基本类型而不是全都使用对象呢？<ul><li>基本类型更靠近底层，在执行效率和内存使用方面都能够提升软件的性能</li></ul></li><li>boolean 类型<ul><li>映射成int类型<ul><li>true被映射为整数1</li><li>false被映射为整数0</li></ul></li></ul></li></ul><p><img src="https://i.loli.net/2021/06/24/6o39J4QcZEHOA8d.png" alt="Java基本类型"></p><ul><li>Java虚拟机在调用Java方法的时候，会创建出一个栈帧，对于其中的解释栈帧来说，有两个主要组成部分<ul><li>局部变量区<ul><li>局部变量</li><li>this指针</li><li>方法接收的参数</li><li>各个基本类型在局部变量区的表现<ul><li>局部变量区等价于一个数组<ul><li>long double需要两个数组单元存储</li><li>其他基本类型和引用类型的值均占用一个数组单元</li></ul></li></ul></li></ul></li><li>字节码的操作数栈</li></ul></li><li>存储操作<ul><li>如果我们将一个int类型的值放到char short 等里面，相当于做了一次掩码  只会保留低位了</li></ul></li><li>加载<ul><li>算数运算完全依赖于操作数栈</li><li>堆当中的boolean, byte, char, short 加载到操作数栈当中，而后将栈上的值当成int类型来运算</li></ul></li></ul><h1 id="3-类的加载"><a href="#3-类的加载" class="headerlink" title="3. 类的加载"></a>3. 类的加载</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java虚拟机基本原理&quot;&gt;&lt;a href=&quot;#Java虚拟机基本原理&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机基本原理&quot;&gt;&lt;/a&gt;Java虚拟机基本原理&lt;/h1&gt;&lt;h1 id=&quot;1-Java-代码运行方式&quot;&gt;&lt;a href=&quot;#1-Ja
      
    
    </summary>
    
    
      <category term="BackEnd" scheme="https://www.llchen60.com/categories/BackEnd/"/>
    
    
      <category term="Java" scheme="https://www.llchen60.com/tags/Java/"/>
    
      <category term="JVM" scheme="https://www.llchen60.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Log4j 是如何工作的？ </title>
    <link href="https://www.llchen60.com/Log4j-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F/"/>
    <id>https://www.llchen60.com/Log4j-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F/</id>
    <published>2021-04-25T01:15:48.000Z</published>
    <updated>2021-04-25T01:16:48.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Log4j-是如何工作的？"><a href="#Log4j-是如何工作的？" class="headerlink" title="Log4j 是如何工作的？"></a>Log4j 是如何工作的？</h1><p>Created: Apr 24, 2021 5:02 PM<br>Tags: backend, tech<br>status: In Progress</p><h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><ul><li>组件化设计的日志系统</li></ul><pre><code>log.info(&quot;User signed in.&quot;); │ │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐ ├──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│ Console  │ │   └──────────┘    └──────────┘    └──────────┘    └──────────┘ │ │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐ ├──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│   File   │ │   └──────────┘    └──────────┘    └──────────┘    └──────────┘ │ │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐ └──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│  Socket  │     └──────────┘    └──────────┘    └──────────┘    └──────────┘</code></pre><ul><li>通过appender将同一条日志输出到不同的目的地</li></ul><h2 id="1-1-Logger组件"><a href="#1-1-Logger组件" class="headerlink" title="1.1 Logger组件"></a>1.1 Logger组件</h2><ul><li>负责产生日志，</li><li>级别<ul><li>DEBUG</li><li>INFO</li><li>WARN</li><li>ERROR</li><li>FATAL</li></ul></li></ul><h2 id="1-2-Appenders-组件"><a href="#1-2-Appenders-组件" class="headerlink" title="1.2 Appenders 组件"></a>1.2 Appenders 组件</h2><ul><li>负责将日志输出到不同的地方<ul><li>控制台 Console</li><li>文件 Files<ul><li>根据天数或者文件大小来产生新的文件</li></ul></li></ul></li></ul><h2 id="1-3-Layout"><a href="#1-3-Layout" class="headerlink" title="1.3 Layout"></a>1.3 Layout</h2><ul><li>完整文档<ul><li><a href="https://logging.apache.org/log4j/2.x/manual/layouts.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/manual/layouts.html</a></li></ul></li><li>说明你的日志要以何种格式来进行输出</li></ul><pre><code class="jsx">－X号: X信息输出时左对齐；%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}输出类似：2002年10月18日 22：10：28，921%r: 输出自应用启动到输出该log信息耗费的毫秒数%c: 输出日志信息所属的类目，通常就是所在类的全名%t: 输出产生该日志事件的线程名%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。%%: 输出一个&quot;%&quot;字符%F: 输出日志消息产生时所在的文件名称%L: 输出代码中的行号%m: 输出代码中指定的消息,产生的日志具体信息%n: 输出一个回车换行符，Windows平台为&quot;/r/n&quot;，Unix平台为&quot;/n&quot;输出日志信息换行</code></pre><h1 id="2-XML-配置文件格式"><a href="#2-XML-配置文件格式" class="headerlink" title="2. XML 配置文件格式"></a>2. XML 配置文件格式</h1><ul><li>通过Filter来过滤哪些需要输出，哪些不需要</li><li>通过Layout来格式化日志信息</li></ul><pre><code class="jsx">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Configuration&gt;    &lt;Properties&gt;        &lt;!-- 定义日志格式 --&gt;        &lt;Property name=&quot;log.pattern&quot;&gt;%d{MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36}%n%msg%n%n&lt;/Property&gt;        &lt;!-- 定义文件名变量 --&gt;        &lt;Property name=&quot;file.err.filename&quot;&gt;log/err.log&lt;/Property&gt;        &lt;Property name=&quot;file.err.pattern&quot;&gt;log/err.%i.log.gz&lt;/Property&gt;    &lt;/Properties&gt;    &lt;!-- 定义Appender，即目的地 --&gt;    &lt;Appenders&gt;        &lt;!-- 定义输出到屏幕 --&gt;        &lt;Console name=&quot;console&quot; target=&quot;SYSTEM_OUT&quot;&gt;            &lt;!-- 日志格式引用上面定义的log.pattern --&gt;            &lt;PatternLayout pattern=&quot;${log.pattern}&quot; /&gt;        &lt;/Console&gt;        &lt;!-- 定义输出到文件,文件名引用上面定义的file.err.filename --&gt;        &lt;RollingFile name=&quot;err&quot; bufferedIO=&quot;true&quot; fileName=&quot;${file.err.filename}&quot; filePattern=&quot;${file.err.pattern}&quot;&gt;            &lt;PatternLayout pattern=&quot;${log.pattern}&quot; /&gt;            &lt;Policies&gt;                &lt;!-- 根据文件大小自动切割日志 --&gt;                &lt;SizeBasedTriggeringPolicy size=&quot;1 MB&quot; /&gt;            &lt;/Policies&gt;            &lt;!-- 保留最近10份 --&gt;            &lt;DefaultRolloverStrategy max=&quot;10&quot; /&gt;        &lt;/RollingFile&gt;    &lt;/Appenders&gt;    &lt;Loggers&gt;        &lt;Root level=&quot;info&quot;&gt;            &lt;!-- 对info级别的日志，输出到console --&gt;            &lt;AppenderRef ref=&quot;console&quot; level=&quot;info&quot; /&gt;            &lt;!-- 对error级别的日志，输出到err，即上面定义的RollingFile --&gt;            &lt;AppenderRef ref=&quot;err&quot; level=&quot;error&quot; /&gt;        &lt;/Root&gt;    &lt;/Loggers&gt;&lt;/Configuration&gt;</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264739436350112" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1252599548343744/1264739436350112</a> </li><li><a href="https://blog.csdn.net/Mos_wen/article/details/50598967" target="_blank" rel="noopener">https://blog.csdn.net/Mos_wen/article/details/50598967</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Log4j-是如何工作的？&quot;&gt;&lt;a href=&quot;#Log4j-是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;Log4j 是如何工作的？&quot;&gt;&lt;/a&gt;Log4j 是如何工作的？&lt;/h1&gt;&lt;p&gt;Created: Apr 24, 2021 5:02
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://www.llchen60.com/categories/Backend/"/>
    
    
      <category term="log" scheme="https://www.llchen60.com/tags/log/"/>
    
      <category term="log4j" scheme="https://www.llchen60.com/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>Route53</title>
    <link href="https://www.llchen60.com/Route53/"/>
    <id>https://www.llchen60.com/Route53/</id>
    <published>2021-03-20T20:10:21.000Z</published>
    <updated>2021-03-20T20:11:01.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Route-53"><a href="#Route-53" class="headerlink" title="Route 53"></a>Route 53</h1><h1 id="1-How-Route53-works"><a href="#1-How-Route53-works" class="headerlink" title="1. How Route53 works?"></a>1. How Route53 works?</h1><ul><li>Intro<ul><li>DNS webservice</li><li>functionalities<ul><li>domain registration</li><li>DNS routing</li><li>health checking</li></ul></li></ul></li><li>Domain Registration<ul><li>You choose a domain name and confirm that it’s available</li><li>You provide names and contact information for the domain owner and other contacts</li><li>Route 53 automatically makes itself the DNS service for the domain by doing:<ul><li>create a hosted zone that has the same name as your domain</li><li>Assigns a set of <strong>four name servers to the hosted zone</strong>. When someone uses a browser to access your website, such as <a href="http://www.example.com/" target="_blank" rel="noopener">www.example.com</a>, these name servers tell the browser where to find your resources, such as a web server or an Amazon S3 bucket.</li><li>Gets the name servers from the hosted zone and adds them to the domain.</li></ul></li></ul></li></ul><h1 id="2-Concepts"><a href="#2-Concepts" class="headerlink" title="2. Concepts"></a>2. Concepts</h1><ul><li>Hosted Zone<ul><li>A container for records<ul><li>include info about how you want to route traffic for a domain and all of its subdomains</li><li>It has the same name as domain</li><li></li></ul></li></ul></li><li>Records<ul><li>Created in your hosted zone</li><li>For routing traffic to your resources</li><li>Each record includes information about how you want to route traffic for your domain<ul><li>Name</li><li>Type</li><li>Value</li></ul></li></ul></li><li>Name server<ul><li>Route53 will assign a set of 4 name servers to the hosted zone</li><li>name server tell the accessor (browser) where to find your resources</li></ul></li><li>Domain Name System Concepts<ul><li>Alias Record<ul><li>Record you create to route traffic to AWS resources</li></ul></li><li>subdomain<ul><li>A domain name that has one or more labels prepended to the registered domain name. For example, if you register the domain name <a href="http://example.com/" target="_blank" rel="noopener">example.com</a>, then <a href="http://www.example.com/" target="_blank" rel="noopener">www.example.com</a> is a subdomain. If you create the hosted zone <a href="http://accounting.example.com/" target="_blank" rel="noopener">accounting.example.com</a> for the <a href="http://example.com/" target="_blank" rel="noopener">example.com</a> domain, then <a href="http://seattle.accounting.example.com/" target="_blank" rel="noopener">seattle.accounting.example.com</a> is a subdomain.</li></ul></li></ul></li></ul><h1 id="3-Working-with-Hosted-Zones"><a href="#3-Working-with-Hosted-Zones" class="headerlink" title="3. Working with Hosted Zones"></a>3. Working with Hosted Zones</h1><p><a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html</a> </p><h1 id="4-Routing-Traffic-for-subdomains"><a href="#4-Routing-Traffic-for-subdomains" class="headerlink" title="4. Routing Traffic for subdomains"></a>4. Routing Traffic for subdomains</h1><p><a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-routing-traffic-for-subdomains.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-routing-traffic-for-subdomains.html</a> </p><ul><li>Option 1:<ul><li>Create records in the hosted zone for the doamin</li><li>we could create a record named <a href="http://test.example.com" target="_blank" rel="noopener">test.example.com</a> in the example.com hosted zone</li></ul></li><li>Option 2:<ul><li>Create a hosted zone for the subdomain, and create records in the new hosted zone</li></ul></li></ul><h1 id="5-Routing-Traffic-to-AWS-Resources"><a href="#5-Routing-Traffic-to-AWS-Resources" class="headerlink" title="5. Routing Traffic to AWS Resources"></a>5. Routing Traffic to AWS Resources</h1><p><a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-aws-resources.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-aws-resources.html</a> </p><ul><li>The logic is to leverage on AWS PrivateLink for cross vpc connection, create the interface endpoint in your service, and build connection between your VPC and Route53</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Route-53&quot;&gt;&lt;a href=&quot;#Route-53&quot; class=&quot;headerlink&quot; title=&quot;Route 53&quot;&gt;&lt;/a&gt;Route 53&lt;/h1&gt;&lt;h1 id=&quot;1-How-Route53-works&quot;&gt;&lt;a href=&quot;#1-How-Rout
      
    
    </summary>
    
    
      <category term="Cloud" scheme="https://www.llchen60.com/categories/Cloud/"/>
    
    
      <category term="DNS" scheme="https://www.llchen60.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Load Balancing </title>
    <link href="https://www.llchen60.com/Elastic-Load-Balancing/"/>
    <id>https://www.llchen60.com/Elastic-Load-Balancing/</id>
    <published>2021-03-09T04:59:23.000Z</published>
    <updated>2021-03-09T05:00:46.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elastic-Load-Balancing"><a href="#Elastic-Load-Balancing" class="headerlink" title="Elastic Load Balancing"></a>Elastic Load Balancing</h1><h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><ul><li><p>What is ELB?</p><ul><li>ELB distributes your incoming traffic across multiple targets, such as EC2 instances, containers, and IP addresses, in one or more AZs</li><li>It monitors the health of its registered targets, and routes traffic to the healthy targets</li><li>Elastic Load Balancing help scale your load balancer as your incoming traffic change over time — automatically scale to the vast majority of workloads</li></ul></li><li><p>Benefits</p><ul><li>Increase the availability and fault tolerance</li><li>You could configure health checks, thus ELB monitor the health of the compute resources, LB only send requests to the healthy ones</li></ul></li><li><p>How it works</p><ul><li>Listener<ul><li>configure your LB to accept incoming traffic by specifying one or more listeners</li><li>a process that checks for connection requests<ul><li>with a protocol</li><li>port number</li></ul></li></ul></li><li>cross zone load balancing<ul><li>we should enable it cause it could make sure traffic is well distributed</li><li>when client send request, it will first go through route 53, and route 53 will distribute traffic thus each lb node receives 50% of traffic (2 LB nodes in total )</li></ul></li><li>request routing<ul><li>client — amazon dns service — return IP address to client side — client use the ip address to make call to LB</li><li>dns entry specify the TTL to 60 seconds, this ensure that the IP addresses can be remapped quickly in response to changing traffic</li></ul></li></ul></li></ul><h1 id="2-ELB-Types"><a href="#2-ELB-Types" class="headerlink" title="2. ELB Types"></a>2. ELB Types</h1><p><a href="https://aws.amazon.com/elasticloadbalancing/features/#Product_comparisons" target="_blank" rel="noopener">https://aws.amazon.com/elasticloadbalancing/features/#Product_comparisons</a>  </p><h1 id="3-Network-Load-Balancer"><a href="#3-Network-Load-Balancer" class="headerlink" title="3. Network Load Balancer"></a>3. Network Load Balancer</h1><h2 id="3-1-NLB-Overview"><a href="#3-1-NLB-Overview" class="headerlink" title="3.1 NLB Overview"></a>3.1 NLB Overview</h2><ul><li>Similar to ELB overview, NLB has listener<ul><li>a listener checks for connection requests from clients, using the protocol and port number you configure, and then forwards requests to a target group</li></ul></li><li>you can configure your health checks on a per target group basis</li><li>Health checks are performed on all targets registered to a target group that is specified in a listener rule for your load balancer.</li><li>functions at 4th layer of OSI, capable of handling millions of requests per second<ul><li>when receives a connection request, it <strong>selects a target from the target group</strong> for the default rule</li><li>attempts to <strong>open a TCP connection</strong> to the selected target <strong>on the port specified</strong> in the listener configuration</li></ul></li></ul><h2 id="3-2-How-to-create-one-NLB-via-Console"><a href="#3-2-How-to-create-one-NLB-via-Console" class="headerlink" title="3.2 How to create one NLB via Console?"></a>3.2 How to create one NLB via Console?</h2><ul><li>Create a target group<ul><li>set target type, name, protocol, port number, health check method</li></ul></li><li>Configure load balancer and listener<ul><li>Network mapping<ul><li>select the VPC that you used for your EC2 instances</li><li>select AZ and then select public subnet for the AZ</li></ul></li></ul></li></ul><h2 id="3-3-Concepts"><a href="#3-3-Concepts" class="headerlink" title="3.3 Concepts"></a>3.3 Concepts</h2><ul><li>Listener<ul><li>A listener is a process that checks for connection requests, using the protocol and port that you configure. The rules that you define for a listener determine how the load balancer routes requests to the targets in one or more target groups.</li></ul></li><li>Target Groups<ul><li>Each target group is used to route requests to one or more registered targets. When you create a listener, you specify a target group for its default action. Traffic is forwarded to the target group specified in the listener rule. You can create different target groups for different types of requests</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elastic-Load-Balancing&quot;&gt;&lt;a href=&quot;#Elastic-Load-Balancing&quot; class=&quot;headerlink&quot; title=&quot;Elastic Load Balancing&quot;&gt;&lt;/a&gt;Elastic Load Balanci
      
    
    </summary>
    
    
      <category term="Cloud" scheme="https://www.llchen60.com/categories/Cloud/"/>
    
    
      <category term="Load Balancer" scheme="https://www.llchen60.com/tags/Load-Balancer/"/>
    
  </entry>
  
  <entry>
    <title>VPC General</title>
    <link href="https://www.llchen60.com/VPC-General/"/>
    <id>https://www.llchen60.com/VPC-General/</id>
    <published>2021-03-03T04:42:42.000Z</published>
    <updated>2021-03-03T04:47:10.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VPC-General"><a href="#VPC-General" class="headerlink" title="VPC General"></a>VPC General</h1><h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><ul><li>Enable you to launch AWS resources into a virtual network that you’ve defined</li><li>VPC helps you to resemble a traditional network that you’d operate in your own data center</li></ul><h2 id="1-1-Concepts"><a href="#1-1-Concepts" class="headerlink" title="1.1 Concepts"></a>1.1 Concepts</h2><ul><li>VPC</li><li>Subnet<ul><li>A range of IP addresses in the VPC</li></ul></li><li>Route Table<ul><li>A set of rules, called routes, used to determine where network traffic is directed</li></ul></li><li>Internet Gateway<ul><li>A gateway that you attach to your VPC to enable communication between resources in your VPC and the internet</li></ul></li><li>VPC endpoint<ul><li>Enable you to privately connect your VPC to supported AWS services and VPC endpoint services powered by PrivateLink without requiring an internet gateway , NAT device, VPN connection, or AWS Direct Connect Connenction</li></ul></li><li>CIDR block<ul><li>classless inter domain routing</li></ul></li></ul><h1 id="2-How-Amazon-VPC-Work"><a href="#2-How-Amazon-VPC-Work" class="headerlink" title="2. How Amazon VPC Work?"></a>2. How Amazon VPC Work?</h1><h2 id="2-1-VPC-and-Subnets"><a href="#2-1-VPC-and-Subnets" class="headerlink" title="2.1 VPC and Subnets"></a>2.1 VPC and Subnets</h2><ul><li>Use public subnet for resources that must be connected to the internet</li><li>Use private subnet for resources that won’t be connected to the internet</li><li>To protect the AWS resources in each subnet<ul><li>you could use Security groups, network access control lists</li></ul></li></ul><h2 id="2-2-Accessing-the-internet"><a href="#2-2-Accessing-the-internet" class="headerlink" title="2.2 Accessing the internet"></a>2.2 Accessing the internet</h2><ul><li>Both subnets are public, they have both private and public IP address</li><li>They could access internet via Internet gateway</li></ul><p><img src="https://i.loli.net/2021/03/03/zdUi1WXuODGofjK.png" alt="1.png"></p><ul><li>NAT Device vs Internet Gateway<ul><li>When using NAT, it’s another layer of protection, but ultimately, you still need to use Internet Gateway</li><li>NAT  — network address translation device<ul><li>Allow instance in your VPC to instantiate outbound connections to the internet but prevent unsolicited inbound connections from the internet</li><li>It maps multiple private IPv4 addresses to a single public IPv4 address</li><li>A NAT device has an Elastic IP address and is connected to the internet through an internet gateway</li><li>You can connect an instance in a private subnet to the internet through the NAT device, which <strong>routes traffic from the instance to the internet gateway</strong>, and routes any responses to the instance.</li></ul></li></ul></li></ul><h2 id="2-3-Accessing-services-through-AWS-PrivateLink"><a href="#2-3-Accessing-services-through-AWS-PrivateLink" class="headerlink" title="2.3 Accessing services through AWS PrivateLink"></a>2.3 Accessing services through AWS PrivateLink</h2><ul><li><p>AWS PrivateLink enables you to privately connect your VPC to supported AWS services, services hosted by other AWS accounts (VPC endpoint services), and supported AWS Marketplace partner services.</p></li><li><p>To use AWS PrivateLink, create a VPC endpoint for a service in your VPC</p><ul><li><p>this creates an elastic network interface in your subnet with a private IP address that serves as an entry point for the traffic destined to the service</p><p>  <img src="https://i.loli.net/2021/03/03/KdQbqJLR2Or1DnB.png" alt="2.png"></p></li></ul></li></ul><h1 id="3-Getting-Started"><a href="#3-Getting-Started" class="headerlink" title="3. Getting Started"></a>3. Getting Started</h1><ul><li>Create a VPC with a /16 CIDR block<ul><li>has 65,536 private IP addresses</li></ul></li><li>attach an internet gateway to the VPC</li><li>for instances in public subnet, you need to assign an Elastic IP address to the instance</li><li>create a size /24 subnet in the VPC</li><li>create a custom route table, associate it with subnet<ul><li>to flow traffic between the subnet and the internet gateway</li></ul></li></ul><h2 id="3-1-EG-VPC-with-a-single-public-subnet"><a href="#3-1-EG-VPC-with-a-single-public-subnet" class="headerlink" title="3.1 EG - VPC with a single public subnet"></a>3.1 EG - VPC with a single public subnet</h2><h3 id="3-1-1-Basic-Setting"><a href="#3-1-1-Basic-Setting" class="headerlink" title="3.1.1 Basic Setting"></a>3.1.1 Basic Setting</h3><ul><li><p>VPC with/16 CIDR</p></li><li><p>subnet with /24 CIDR</p></li><li><p>internet gateway</p><ul><li>help connect the VPC to the internet and to other AWS services</li></ul></li><li><p>custom route table</p><ul><li><p>enable instances in the subnet to use IPV4 to communicate with other instances in the VPC</p><p><img src="https://i.loli.net/2021/03/03/PulS8ZxvFVXQtcJ.png" alt="3.png"></p></li></ul></li></ul><h3 id="3-1-2-Security"><a href="#3-1-2-Security" class="headerlink" title="3.1.2 Security"></a>3.1.2 Security</h3><ul><li>Security Groups<ul><li>control inbound and outbound traffic for your instances</li></ul></li><li>Network ACLs<ul><li>control inbound and outbound traffic for your subnets</li></ul></li></ul><p>See the recommended Security Group Setting and Network ACLs setting <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario1.html" target="_blank" rel="noopener">here</a> </p><h2 id="3-2-EG-VPC-with-Public-and-Private-subnets-NAT"><a href="#3-2-EG-VPC-with-Public-and-Private-subnets-NAT" class="headerlink" title="3.2 EG - VPC with Public and Private subnets (NAT)"></a>3.2 EG - VPC with Public and Private subnets (NAT)</h2><h3 id="3-2-1-Overview"><a href="#3-2-1-Overview" class="headerlink" title="3.2.1 Overview"></a>3.2.1 Overview</h3><ul><li><p>Scenario</p><ul><li>A public facing web application<ul><li>maintain back end servers that are not publicly accessible</li><li>database server in private subnet while the webserver in a public subnet</li></ul></li></ul></li><li><p>Public subnet vs private subnet</p><ul><li><p>instances in the public subnet can send outbound traffic directly to the internet, whereas the instances in the private subnet can’t</p></li><li><p>the instances in the private subnet can access the Internet by using a network address translation (NAT) gateway that resides in the public subnet</p></li><li><p>The database servers can connect to the Internet for software updates using the NAT gateway, but the Internet cannot establish connections to the database servers</p><p><img src="https://i.loli.net/2021/03/03/cb6tYu79jkWyMOH.png" alt="4.png"></p><h3 id="3-2-2-Security-Setting"><a href="#3-2-2-Security-Setting" class="headerlink" title="3.2.2 Security Setting"></a>3.2.2 Security Setting</h3><p><a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario2.html" target="_blank" rel="noopener">VPC with public and private subnets (NAT)</a></p><h2 id="3-3-Sharing-Public-Subnets-and-Private-Subnets"><a href="#3-3-Sharing-Public-Subnets-and-Private-Subnets" class="headerlink" title="3.3 Sharing Public Subnets and Private Subnets"></a>3.3 Sharing Public Subnets and Private Subnets</h2></li><li><p>still need to leverage on PrivateLinks, VPC Peering, etc.</p><p><a href="https://docs.aws.amazon.com/vpc/latest/userguide/example-vpc-share.html" target="_blank" rel="noopener">Example: Sharing public subnets and private subnets</a></p></li><li><p>Consider this scenario where you want an account to be responsible for the infrastructure, including subnets, route tables, gateways, and CIDR ranges and other accounts that are in the same AWS Organization to use the subnets. A VPC owner (Account A) creates the routing infrastructure, including the VPCs, subnets, route tables, gateways, and network ACLs. Account D wants to create public facing applications. Account B and Account C want to create private applications that do not need to connect to the internet and should reside in private subnets. Account A can use AWS Resource Access Manager to create a Resource Share for the subnets and then share the subnets. Account A shares the public subnet with Account D and the private subnet with Account B, and Account C. Account B, Account C, and Account D can create resources in the subnets. Each account can only see the subnets that are shared with them, for example, Account D can only see the public subnet. Each of the accounts can control their resources, including instances, and security groups.</p><p><a href="https://aws.amazon.com/cn/blogs/networking-and-content-delivery/vpc-sharing-a-new-approach-to-multiple-accounts-and-vpc-management/" target="_blank" rel="noopener">VPC sharing: A new approach to multiple accounts and VPC management | Amazon Web Services</a></p><h2 id="3-4-Service-using-AWS-PrivateLink-and-VPC-Peering"><a href="#3-4-Service-using-AWS-PrivateLink-and-VPC-Peering" class="headerlink" title="3.4 Service using AWS PrivateLink and VPC Peering"></a>3.4 Service using AWS PrivateLink and VPC Peering</h2><p><a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-peer-region-example.html" target="_blank" rel="noopener">Examples: Services using AWS PrivateLink and VPC peering</a></p><p><a href="https://www.notion.so/PrivateLinks-e8e5f6802544401299fc3be21b10ed06" target="_blank" rel="noopener">PrivateLinks</a></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VPC-General&quot;&gt;&lt;a href=&quot;#VPC-General&quot; class=&quot;headerlink&quot; title=&quot;VPC General&quot;&gt;&lt;/a&gt;VPC General&lt;/h1&gt;&lt;h1 id=&quot;1-Overview&quot;&gt;&lt;a href=&quot;#1-Overv
      
    
    </summary>
    
    
      <category term="Cloud" scheme="https://www.llchen60.com/categories/Cloud/"/>
    
    
      <category term="VPC" scheme="https://www.llchen60.com/tags/VPC/"/>
    
  </entry>
  
  <entry>
    <title>互联网广告竞价策略</title>
    <link href="https://www.llchen60.com/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%BF%E5%91%8A%E7%AB%9E%E4%BB%B7%E7%AD%96%E7%95%A5/"/>
    <id>https://www.llchen60.com/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%BF%E5%91%8A%E7%AB%9E%E4%BB%B7%E7%AD%96%E7%95%A5/</id>
    <published>2021-02-12T19:13:08.000Z</published>
    <updated>2021-02-12T19:14:14.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网广告竞价策略"><a href="#互联网广告竞价策略" class="headerlink" title="互联网广告竞价策略"></a>互联网广告竞价策略</h1><h1 id="1-传统竞价策略"><a href="#1-传统竞价策略" class="headerlink" title="1. 传统竞价策略"></a>1. 传统竞价策略</h1><h2 id="1-1-英式拍卖-公开增价拍卖OAB"><a href="#1-1-英式拍卖-公开增价拍卖OAB" class="headerlink" title="1.1 英式拍卖/ 公开增价拍卖OAB"></a>1.1 英式拍卖/ 公开增价拍卖OAB</h2><ul><li>OAB<ul><li>Open Ascending Bid</li></ul></li><li>卖家提供物品，在物品拍卖过程中，买家按照竞价阶梯由低至高喊价，出价最高者成为竞买的赢家</li><li>一般会为竞价设定一个终止时间</li></ul><h2 id="1-2-荷兰式拍卖-Sealed-Bid-Auction"><a href="#1-2-荷兰式拍卖-Sealed-Bid-Auction" class="headerlink" title="1.2 荷兰式拍卖 Sealed Bid Auction"></a>1.2 荷兰式拍卖 Sealed Bid Auction</h2><ul><li>竞价由高到低</li><li>递减直到第一个买家应价成交</li></ul><h2 id="1-3-第一价格密封拍卖-FPSB"><a href="#1-3-第一价格密封拍卖-FPSB" class="headerlink" title="1.3 第一价格密封拍卖 FPSB"></a>1.3 第一价格密封拍卖 FPSB</h2><ul><li>FPSB<ul><li>The first price sealed auction</li></ul></li><li>买方将自己的出价写在一个信封里面，众多买方进行投标，同一时间揭晓信封价格，出价最高者竞价成功</li></ul><h2 id="1-4-第二价格密封拍卖-SPSB"><a href="#1-4-第二价格密封拍卖-SPSB" class="headerlink" title="1.4 第二价格密封拍卖 SPSB"></a>1.4 第二价格密封拍卖 SPSB</h2><ul><li>SPSB<ul><li>The Second Price Sealed Auction</li></ul></li><li>买方将自己的出价写在一个信封里面，众多买方进行投标，同一时间揭晓信封价格，呦出价最高的买家获得物品，但他只需要支付<strong>所有投标者中的第二高价</strong></li></ul><h1 id="2-互联网广告竞价策略"><a href="#2-互联网广告竞价策略" class="headerlink" title="2. 互联网广告竞价策略"></a>2. 互联网广告竞价策略</h1><h2 id="2-1-广义第一价格GFP-Generalized-First-Price"><a href="#2-1-广义第一价格GFP-Generalized-First-Price" class="headerlink" title="2.1 广义第一价格GFP - Generalized First Price"></a>2.1 广义第一价格GFP - Generalized First Price</h2><ul><li>出价高者得，需要支付自己提出的报价</li><li>搜索广告竞价往往按照这种形式，缺点是<ul><li>平台方收益不稳定</li><li>竞价效率不高</li></ul></li><li>只考虑到出价没考虑到点击率，</li><li>价格上会因为相互广告商之间的比较，在一定范围内形成波动</li></ul><h2 id="2-2-广义第二价格GSP-Generalized-Second-Price"><a href="#2-2-广义第二价格GSP-Generalized-Second-Price" class="headerlink" title="2.2 广义第二价格GSP - Generalized Second Price"></a>2.2 广义第二价格GSP - Generalized Second Price</h2><ul><li>出价高者得到广告位，需要支付的是第二高者提出的报价加上一个最小值</li><li>不足之处在于不是一种鼓励讲真话的方式，大家有可能都会写一个很大的数字，认为会用到其他人标识的价格，所以整个解不一定是全局最优化的</li><li>这里的排序可以通过广告的出价排序，也可以通过期望收益最大来排序，即CTR x bid</li></ul><h2 id="2-3-VCG-Vickrey-Clarke-Groves"><a href="#2-3-VCG-Vickrey-Clarke-Groves" class="headerlink" title="2.3 VCG - Vickrey Clarke Groves"></a>2.3 VCG - Vickrey Clarke Groves</h2><ul><li>广告主为网民的一次点击支付他对其他广告主造成的效用损失</li><li>但是这种效用损失在实际场景中会非常难以计算</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.geek-share.com/detail/2606975685.html" target="_blank" rel="noopener">https://www.geek-share.com/detail/2606975685.html</a> </li><li><a href="https://www.wandouip.com/t5i229763/" target="_blank" rel="noopener">https://www.wandouip.com/t5i229763/</a></li><li><a href="https://en.wikipedia.org/wiki/Vickrey%E2%80%93Clarke%E2%80%93Groves_auction" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Vickrey–Clarke–Groves_auction</a>  </li><li><a href="https://en.wikipedia.org/wiki/Vickrey%E2%80%93Clarke%E2%80%93Groves_auction" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Vickrey–Clarke–Groves_auction</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网广告竞价策略&quot;&gt;&lt;a href=&quot;#互联网广告竞价策略&quot; class=&quot;headerlink&quot; title=&quot;互联网广告竞价策略&quot;&gt;&lt;/a&gt;互联网广告竞价策略&lt;/h1&gt;&lt;h1 id=&quot;1-传统竞价策略&quot;&gt;&lt;a href=&quot;#1-传统竞价策略&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Notes" scheme="https://www.llchen60.com/categories/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis 数据结构使用</title>
    <link href="https://www.llchen60.com/Redis-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.llchen60.com/Redis-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-09T04:30:04.000Z</published>
    <updated>2021-03-02T04:46:14.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-数据结构使用"><a href="#Redis-数据结构使用" class="headerlink" title="Redis 数据结构使用"></a>Redis 数据结构使用</h1><h1 id="1-String的内存空间消耗问题"><a href="#1-String的内存空间消耗问题" class="headerlink" title="1. String的内存空间消耗问题"></a>1. String的内存空间消耗问题</h1><h2 id="1-1-String在保存数据时内存空间消耗较多"><a href="#1-1-String在保存数据时内存空间消耗较多" class="headerlink" title="1.1 String在保存数据时内存空间消耗较多"></a>1.1 String在保存数据时内存空间消耗较多</h2><ul><li>String类型除了实际记录的数据，还需要额外的内存空间记录数据长度，空间使用等信息，这些信息被称为元数据</li><li>当实际保存的数据比较小的时候，元数据的空间开销就会比较大</li><li>当保存64位有符号整数的时候<ul><li>String类型会将其保存为一个8字节的Long类型整数</li><li>int编码方式</li></ul></li><li>当保存的数据中包含字符的时候<ul><li>String 用简单动态字符串 Simple Dynamic String ， 共有三部分组成<ul><li>buf<ul><li>字节数组，保存实际数据</li><li>为了表示字节数组的结束，会在数组最后加一个\0. 这里会额外占用一个字节的开销</li></ul></li><li>len<ul><li>占四个字节，表示buf的已用长度</li></ul></li><li>alloc<ul><li>占四个字节，表示buf的实际分配长度，一般来说会大于len</li></ul></li></ul></li><li>故而在上述的分析当中，len 和alloc就是元数据，带来了一部分的额外开销</li></ul></li></ul><h2 id="1-2-RedisObject-的结构"><a href="#1-2-RedisObject-的结构" class="headerlink" title="1.2 RedisObject 的结构"></a>1.2 RedisObject 的结构</h2><ul><li><p>Redis本身支持多种数据类型，而不同数据类型都会有一些相同的元数据需要记录</p><ul><li>最后一次访问的时间</li><li>被引用的次数等</li></ul></li><li><p>因此Redis会用一个RedisObject结构体来统一记录这些元数据，同时指向实际数据</p></li><li><p>另外出于节省内存空间的考虑</p><ul><li><p>当保存的是Long类型整数时，RedisObject中的指针就直接赋值为整数数据了，这样就不用额外的指针再指向整数，节省了指针的空间开销</p></li><li><p>当保存的是字符串数据，并且字符串小于等于44个字节，RedisObject中的元数据，指针的SDS是一块连续的内存区域，来避免内存碎片</p></li><li><p>当保存的数据量大于44字节的时候，SDS的数据量就会变多，Redis就不再把SDS和RedisObject布局在一起了，会给SDS分配独立的空间，并且用指针指向SDS结构</p><p><img src="https://i.loli.net/2021/02/09/JoY9Hi8NqIElBDW.png" alt="Redis Object"></p></li></ul></li><li><p>在计算总共消耗的内存的时候，值得注意的是除了使用RedisObject本身，Redis还维护了一个全局哈希表来保存所有键值对，这个结构体有三个8字节的指针，共24字节。Redis使用的是jemalloc内存分配库，会根据申请的字节数N，找一个比N大，但是最接近N的2的幂次数作为分配的空间，来减少频繁分配的次数</p></li></ul><p><img src="https://i.loli.net/2021/02/09/xO2vECGYoRdl4jB.png" alt="RedisObject Entity"></p><h1 id="2-压缩列表"><a href="#2-压缩列表" class="headerlink" title="2. 压缩列表"></a>2. 压缩列表</h1><ul><li><p>压缩列表的构成</p><p>  <img src="https://i.loli.net/2021/02/18/ALm8GYT2r7cRXqW.png" alt="压缩列表构成"></p><ul><li><p>表头</p><ul><li>zlbytes — 列表长度</li><li>zltail — 列表尾</li><li>zllen — 列表entry个数</li></ul></li><li><p>表尾</p><ul><li>zlend — 列表结束</li></ul></li><li><p>表entry</p><ul><li>是连续的entry<ul><li>因为是挨着来进行放置的，所以不需要再使用额外的指针进行连接，就可以节省指针所占用的空间了</li></ul></li><li>包括以下几部分：<ul><li>prev_len — 前一个entry的长度</li><li>len — 自身长度  4字节</li><li>encoding — 编码方式 1字节</li><li>content — 保存实际数据</li></ul></li></ul></li><li><p>Redis Hash类型底层有两种实现结构</p><ul><li>压缩列表</li><li>哈希表</li></ul></li><li><p>通过阈值确定应该使用哪一种来保存数据</p><ul><li>hash-max-ziplist-entries：表示用压缩列表保存时哈希集合中的最大元素个数。</li><li>hash-max-ziplist-value：表示用压缩列表保存时哈希集合中单个元素的最大长度。</li></ul></li></ul></li></ul><h1 id="3-集合的使用"><a href="#3-集合的使用" class="headerlink" title="3. 集合的使用"></a>3. 集合的使用</h1><ul><li>使用场景<ul><li>一个key对应一个数据集合<ul><li>比如手机app的用户登录信息 — 一天对应一系列用户ID或者移动设备ID</li><li>电商商品用户评价列表 — 一个商品对应一系列评论</li></ul></li><li>在这样子的场景当中，除了记录信息，我们还需要对集合当中的数据进行统计，而我们选用的数据类型必须能够高效的统计这些数据</li></ul></li></ul><h2 id="3-1-聚合统计"><a href="#3-1-聚合统计" class="headerlink" title="3.1 聚合统计"></a>3.1 聚合统计</h2><ul><li><p>定义</p><ul><li>指统计多个集合元素的聚合结果</li></ul></li><li><p>例子</p><ul><li>统计多个集合的共有元素</li><li>将两个集合相比，统计其中一个集合独有的元素</li><li>统计多个集合的所有元素</li></ul></li><li><p>当你需要对多个集合进行聚合计算时，Set 类型会是一个非常不错的选择。</p></li><li><p>这里有一个潜在的风险。Set 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致 Redis 实例阻塞。</p><ul><li>你可以从主从集群中选择一个从库，让它专门负责聚合计算</li><li>或者是把数据读取到客户端，在客户端来完成聚合统计，这样就可以规避阻塞主库实例和其他从库实例的风险了。</li></ul></li></ul><h2 id="3-2-排序统计"><a href="#3-2-排序统计" class="headerlink" title="3.2 排序统计"></a>3.2 排序统计</h2><ul><li>E.G<ul><li>电商网站提供最新评论列表，需要使得集合当中的元素可以按序排列<ul><li>List和Sorted Set属于有序集合</li><li>List按照元素进入List的顺序进行排序，而Sorted Set根据元素的权重来排序</li></ul></li></ul></li><li>使用list来做排序的问题在于是通过元素在List当中的位置来排序，新元素插入会改变原有的顺序，都会顺次后移</li><li>Sorted Set相对应的是根据元素的实际权重来排序和获取数据<ul><li>Sorted Set 的 ZRANGEBYSCORE 命令就可以按权重排序后返回元素。这样的话，即使集合中的元素频繁更新，Sorted Set 也能通过 ZRANGEBYSCORE 命令准确地获取到按序排列的数据。</li></ul></li></ul><h2 id="3-3-二值状态统计"><a href="#3-3-二值状态统计" class="headerlink" title="3.3 二值状态统计"></a>3.3 二值状态统计</h2><ul><li>集合元素的取值只有0和1两种<ul><li>可以对于数据结构进行优化，使用Bitmap</li><li>Bitmap本身是使用String类型作为底层数据结构来实现的一种统计二值状态的数据类型，可以将其理解为一个bit数组</li></ul></li><li>查看签到情况的基本操作</li></ul><pre><code class="jsx">// 记录8.3 签到SETBIT uid:sign:3000:202008 2 1// 查询8.3是否签到GETBIT uid:sign:3000:202008 2// 统计该用户20年8月份的签到次数BITCOUNT uid:sign:3000:202008</code></pre><ul><li>统计应用当中10天连续签到的用户数量<ul><li>Bitmap支持使用BITOP命令来对多个Bitmap按位做与，或，异或，的操作，操作结果会保存到一个新的bitmap当中</li><li>在统计 1 亿个用户连续 10 天的签到情况时，你可以把每天的日期作为 key，每个 key 对应一个 1 亿位的 Bitmap，每一个 bit 对应一个用户当天的签到情况。接下来，我们对 10 个 Bitmap 做“与”操作，得到的结果也是一个 Bitmap。在这个 Bitmap 中，只有 10 天都签到的用户对应的 bit 位上的值才会是 1。最后，我们可以用 BITCOUNT 统计下 Bitmap 中的 1 的个数，这就是连续签到 10 天的用户总数了。</li></ul></li></ul><h2 id="3-4-基数统计"><a href="#3-4-基数统计" class="headerlink" title="3.4 基数统计"></a>3.4 基数统计</h2><ul><li>统计一个集合中不重复的元素个数 — 统计网页的UV<ul><li>需要去重 — 一个用户一天内的多次访问只能算一次</li><li>使用set 或者hash的话都会需要将不同的id记录下来，最后看整个数据结构内元素的数量，会很大程度上占用内存</li></ul></li><li>HyperLogLog<ul><li>用于统计基数的数据集合<ul><li>当集合元素数量非常多的时候，计算基数所需的空间是固定的，而且比较小</li><li>有一点需要你注意一下，HyperLogLog 的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误算率是 0.81%。这也就意味着，你使用 HyperLogLog 统计的 UV 是 100 万，但实际的 UV 可能是 101 万。虽然误差率不算大，但是，如果你需要精确统计结果的话，最好还是继续用 Set 或 Hash 类型。</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis-数据结构使用&quot;&gt;&lt;a href=&quot;#Redis-数据结构使用&quot; class=&quot;headerlink&quot; title=&quot;Redis 数据结构使用&quot;&gt;&lt;/a&gt;Redis 数据结构使用&lt;/h1&gt;&lt;h1 id=&quot;1-String的内存空间消耗问题&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="数据存储" scheme="https://www.llchen60.com/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis集群</title>
    <link href="https://www.llchen60.com/Redis%E9%9B%86%E7%BE%A4/"/>
    <id>https://www.llchen60.com/Redis%E9%9B%86%E7%BE%A4/</id>
    <published>2021-02-02T04:36:06.000Z</published>
    <updated>2021-02-02T04:38:23.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-切片集群"><a href="#Redis-切片集群" class="headerlink" title="Redis 切片集群"></a>Redis 切片集群</h1><h1 id="1-实际场景"><a href="#1-实际场景" class="headerlink" title="1. 实际场景"></a>1. 实际场景</h1><ul><li>用Redis保存5000万个键值对，每个键值对约为512B</li><li>当我们选用32GB内存的主机来进行部署的时候，发现会很慢 （数据大小应当在25GB左右）</li><li>这和Redis的持久化机制有关<ul><li>在使用RDB进行持久化的时候，Redis会fork子进程来完成，fork操作的用时和Redis的数据量是呈正相关的，fork在执行时会阻塞主线程</li><li>数据量越大，fork操作造成的主线程阻塞的时间也会越长</li><li>于是当使用RDB对25GB的数据进行持久化的时候，数据量比较大，后台运行的子进程在fork创建时阻塞了主线程，于是就导致Redis响应比较慢了</li></ul></li></ul><h1 id="2-分片集群"><a href="#2-分片集群" class="headerlink" title="2. 分片集群"></a>2. 分片集群</h1><ul><li><p>指启动多个Redis实例组成一个集群，然后按照一定的规则，将收集到的数据划分成多份，每一份用一个实例来保存</p><p>  <img src="https://i.loli.net/2021/02/02/A4IUmfapqlx3ZyD.png" alt="单实例 vs 集群"></p></li></ul><h2 id="2-1-如何处理数据在多实例之间的分布？"><a href="#2-1-如何处理数据在多实例之间的分布？" class="headerlink" title="2.1 如何处理数据在多实例之间的分布？"></a>2.1 如何处理数据在多实例之间的分布？</h2><p>实际上，切片集群是一种保存大量数据的通用机制，这个机制可以有不同的实现方案。在 Redis 3.0 之前，官方并没有针对切片集群提供具体的方案。从 3.0 开始，官方提供了一个名为 Redis Cluster 的方案，用于实现切片集群。<strong>Redis Cluster 方案中就规定了数据和实例的对应规则</strong>。</p><ul><li>Redis Cluster<ul><li>采用哈希槽 Hash Slot 来处理数据和实例之间的映射关系</li><li>每个键值对都会根据它的key，被映射到一个哈希槽当中</li></ul></li><li>映射过程<ul><li>根据键值对的key，按照CRC16算法计算一个16bit的值</li><li>再用这个16bit的值对16384取模，得到模数，每个数字都代表一个相应编号的哈希槽</li></ul></li><li>在创建Redis Cluster的方案的时候，在创建集群的时候Redis会自动将这些槽平均分布在集群实例上</li></ul><h2 id="2-2-客户端如何确定想要访问的数据在哪个实例上？"><a href="#2-2-客户端如何确定想要访问的数据在哪个实例上？" class="headerlink" title="2.2 客户端如何确定想要访问的数据在哪个实例上？"></a>2.2 客户端如何确定想要访问的数据在哪个实例上？</h2><ul><li><p>定位键值对数据的时候，还是有两步</p><ul><li>关于所在哈希槽，是可以通过计算得到的，可以在客户端发送请求的时候执行</li><li>进一步定位到实例，就需要知道哈希槽的分布了</li></ul></li><li><p>客户端如何定位数据？</p><ul><li>客户端和集群实例建立连接之后，实例就会将哈希槽的信息发给客户端</li><li>当客户端收到了哈希槽的信息后，就会将哈希槽信息缓存在本地</li><li>当客户端请求键值对的时候，会先计算键所对应的哈希槽，然后给相对应的实例发送请求</li></ul></li><li><p>实例和哈希槽对应关系的变更</p><ul><li><p>Redis Cluster 重定向机制 — MOVED指令</p><ul><li><p>就是指，客户端给一个实例发送数据读写操作时，这个实例上并没有相应的数据，客户端要再给一个新实例发送操作命令。</p></li><li><p>因为实例之间发生了数据的转移，而客户端这个时候还不知道，访问到了没有这个数据的实例</p></li><li><p>因为实例是共享和哈希槽对应关系的信息表的，就可以返回给Client端正确的包含所需信息的实例的地址</p></li><li><p>client可以根据地址继续去访问</p><p><img src="https://i.loli.net/2021/02/02/qm6zospHEfcPULS.png" alt="MOVED 过程"></p></li></ul></li></ul></li><li><p>ASK指令 — 访问到了正在迁移的实例</p><pre><code class="java">  GET hello:key  (error) ASK 13320 172.16.19.5:6379</code></pre><ul><li>ASK表示客户端请求的键值对在13320这个哈希槽当中，在172.16.19.5这个实例上，但是这个哈希槽正在迁移</li><li>客户端需要先给 172.16.19.5 这个实例发送一个 ASKING 命令。这个命令的意思是，让这个实例允许执行客户端接下来发送的命令。</li><li>然后，客户端再向这个实例发送 GET 命令，以读取数据</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis-切片集群&quot;&gt;&lt;a href=&quot;#Redis-切片集群&quot; class=&quot;headerlink&quot; title=&quot;Redis 切片集群&quot;&gt;&lt;/a&gt;Redis 切片集群&lt;/h1&gt;&lt;h1 id=&quot;1-实际场景&quot;&gt;&lt;a href=&quot;#1-实际场景&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>lsof/ ulimit/ ps</title>
    <link href="https://www.llchen60.com/lsof-ulimit-ps/"/>
    <id>https://www.llchen60.com/lsof-ulimit-ps/</id>
    <published>2021-01-24T18:15:47.000Z</published>
    <updated>2021-01-24T18:18:34.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-lsof"><a href="#1-lsof" class="headerlink" title="1. lsof"></a>1. lsof</h1><h1 id="1-1-File-Descriptor-in-Linux"><a href="#1-1-File-Descriptor-in-Linux" class="headerlink" title="1.1 File Descriptor in Linux"></a>1.1 File Descriptor in Linux</h1><ul><li>Linux consider everything as a file<ul><li>pipes, sockets, directories, devices, etc</li></ul></li></ul><h1 id="1-2-What-does-lsof-do"><a href="#1-2-What-does-lsof-do" class="headerlink" title="1.2 What does lsof do?"></a>1.2 What does lsof do?</h1><ul><li>lsof means — List Open Files</li><li>some columns need to understand<ul><li>FD<ul><li>stands for file descriptor</li><li>possible values<ul><li>cwd — current working directory</li><li>rtd — root directory</li><li>txt — program text</li><li>mem — memory mapped file</li><li>(number)(parameter)<ul><li>r for read acccess</li><li>w for write</li><li>u for both read and write</li></ul></li></ul></li></ul></li><li>TYPE<ul><li>DIR — directory</li><li>REG — Regular file</li><li>CHR — Character special file</li><li>FIFO — First In First Out</li></ul></li></ul></li></ul><pre><code class="jsx">// show long listing of open files, show cols like Command, PID, USER, FD, TYPE# lsof // display the list of all opened file of uder leilei# lsof -u leilei// find process running on specific port# lsof -i TCP:22// list only IPv4 &amp; IPv6 Open Files # lsof -i 4# lsof -i 6// list open files of TCP port ranges from 11 - 1023# lsof -i TCP:1-1023// exclude user with ^# lsof -i -u^leilei// list all network connections # lsof -i// search by PID # lsof -p PID // kill all activities of particular user # kill -9 `lsof -t -u leilei`</code></pre><h1 id="2-ulimit"><a href="#2-ulimit" class="headerlink" title="2. ulimit"></a>2. ulimit</h1><h1 id="2-1-Overview"><a href="#2-1-Overview" class="headerlink" title="2.1 Overview"></a>2.1 Overview</h1><ul><li>Set or report the resource limit of the current user.</li><li>Use with ulimit requires admin access, it only work on systems that allow control through the shell</li><li>Types of resource limitation<ul><li>hard limit<ul><li>define the physical limit that the user can reach</li></ul></li><li>soft limit<ul><li>manageable by the user, its value can go up to the hard limit</li></ul></li></ul></li><li>system resources are defined in a configuration file located at <code>/etc/security/limits.conf</code></li></ul><h1 id="2-2-Common-Commands"><a href="#2-2-Common-Commands" class="headerlink" title="2.2 Common Commands"></a>2.2 Common Commands</h1><pre><code class="jsx">// print all the resource limits for the current user # ulimit -a// check the value of max core file size # ulimit -c // check the max data seg size# ulimit -d// check the max stack size of current user # ulimit -s// check the max number of user processes # ulimit -u// check the max number of threads # ulimit -T // check the size of virtual memory # ulimit -v // check time each process is allowed to run for # ulimit -t // check how many file descriptors a process can have # ulimit -n </code></pre><h1 id="3-ps"><a href="#3-ps" class="headerlink" title="3. ps"></a>3. ps</h1><h1 id="3-1-Overview"><a href="#3-1-Overview" class="headerlink" title="3.1 Overview"></a>3.1 Overview</h1><ul><li><p>Linux is a multi-tasking and multi-user system</p></li><li><p>so it allows multiple processes to operate simultaneously without interfering with each other</p></li><li><p>A process is an executing instance of a program and carry out different tasks within the operating system</p></li><li><p>PS command help us to review information related with the processes on a system</p><ul><li>used to list the currently running processes and their PIDs along with some other information depends on different options</li></ul></li></ul><h1 id="3-2-Some-common-commands"><a href="#3-2-Some-common-commands" class="headerlink" title="3.2 Some common commands"></a>3.2 Some common commands</h1><ul><li>Some common columns you should know what it means<ul><li>PID - the unique process ID</li><li>TTY - terminal type that the user is logged into</li><li>TIME - amount of CPU in minutes and seconds that the process has been running<ul><li>sometimes you see TIME as 00:00:00, merely means the total accumulated CPU utilization time for any process currently is 0</li></ul></li><li>CMD - name of the command that launched the process</li><li>C - the CPU utilization in percentage</li><li>STIME - the start time of the process</li></ul></li></ul><pre><code class="java"># ps PID TTY          TIME CMD12330 pts/0    00:00:00 bash21621 pts/0    00:00:00 ps// view all the running processes # ps -A # ps -e// view all processes associated with the terminal # ps -T // view all the running processes # ps -r // view all the processes owned by you # ps -x // print all the processes within the system # ps -e// More detailed output by using -f option # ps -e -f // Search for a particular process # ps -C systemd</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.geeksforgeeks.org/lsof-command-in-linux-with-examples/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/lsof-command-in-linux-with-examples/</a>  </p><p><a href="https://www.tecmint.com/10-lsof-command-examples-in-linux/" target="_blank" rel="noopener">https://www.tecmint.com/10-lsof-command-examples-in-linux/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-lsof&quot;&gt;&lt;a href=&quot;#1-lsof&quot; class=&quot;headerlink&quot; title=&quot;1. lsof&quot;&gt;&lt;/a&gt;1. lsof&lt;/h1&gt;&lt;h1 id=&quot;1-1-File-Descriptor-in-Linux&quot;&gt;&lt;a href=&quot;#1-1-Fil
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Distributed Locks with the DynamoDB Lock Client </title>
    <link href="https://www.llchen60.com/Distributed-Locks-with-the-DynamoDB-Lock-Client/"/>
    <id>https://www.llchen60.com/Distributed-Locks-with-the-DynamoDB-Lock-Client/</id>
    <published>2021-01-15T03:51:14.000Z</published>
    <updated>2021-01-15T03:53:09.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Distributed-Locks-with-the-DynamoDB-Lock-Client"><a href="#Distributed-Locks-with-the-DynamoDB-Lock-Client" class="headerlink" title="Distributed Locks with the DynamoDB Lock Client"></a>Distributed Locks with the DynamoDB Lock Client</h1><h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><ul><li><p>DynamoDB Lock Client</p><ul><li>enable you to solve distributed computing problems like leader election and distributed locking with client only code and a DDB table</li></ul></li><li><p>Why we need it</p><ul><li>Distributed Locking is complicated<ul><li>you need to <strong>atomically ensure</strong> only one actor is modifying a <strong>stateful resource</strong> at any given time</li></ul></li></ul></li></ul><h1 id="2-Practical-Example"><a href="#2-Practical-Example" class="headerlink" title="2. Practical Example"></a>2. Practical Example</h1><ul><li>Background<ul><li>A retail bank that want to ensure at most one customer service representative change customer details at a time</li><li>solution<ul><li>temporarily lock customer records during an update</li><li>suppose there are bunch different tables to contain all customer information, as the tables are independent, so we cannot just wrap the changes we need in a relational transaction</li><li>we need to lock customer id at a high level</li><li>You’d do so with a locking API action for a certain duration in your application before making any changes.</li></ul></li></ul></li></ul><h2 id="2-1-Locking-Protocol"><a href="#2-1-Locking-Protocol" class="headerlink" title="2.1 Locking Protocol"></a>2.1 Locking Protocol</h2><ul><li>For a new lock, the lock clients store a lock item in the lock table<ul><li>it stores<ul><li>the host name of the owner</li><li>the lease duration in milliseconds</li><li>a UUID unique to the host</li><li>the host system clock time when the lock was initially created</li></ul></li></ul></li></ul><p><img src="https://i.loli.net/2021/01/15/gk6qico4zUw1YXK.png" alt="Whole Workflow"></p><ol><li>Host A acquires a lock on Moe by writing an item to the lock table on the condition that no item keyed at “Moe” exists yet. Host A<br>acquires the lock with a revision version number (RVN) of UUID.</li><li>Host B tries to get a lock on Moe with a RVN UUID.</li><li>Host B checks to see if a lock already exists with a GetItem call.</li><li>In this case, host B finds that host A holds a lock on Moe with a record version number (RVN) of UUID. The same application runs on hosts A and B. That being so, host B<br>expects host A to heartbeat and renew the lock on Moe in less than 10 seconds, if host A intends to keep the lock on Moe. Host A heartbeats once, and uses a conditional update on the lock keyed at Moe to update the RVN of the lock to UUID.</li><li>Host B checks 10 seconds after the first AcquireLock call to see if the RVN in A’s lock on Moe changed with a conditional UpdateItem call and a RVN of UUID.</li><li>Host A successfully updates the lock. Thus, host B finds the new RVN equal to UUID and waited 10 more seconds. Host A died after the first heartbeat, so it never changes the RVN past UUID. When host B calls tries to acquire a lock on Moe for the third time, it finds that the RVN was still UUID, the same RVN retrieved on the second lock attempt.</li><li>In this case, hosts A and B run the same application. Because host B expects host A to heartbeat if host A is healthy and intends to keep the lock, host B considers the lock on Moe expired. Host B’s conditional update to acquire the lock on Moe succeeds, and your application makes progress!</li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://aws.amazon.com/blogs/database/building-distributed-locks-with-the-dynamodb-lock-client/" target="_blank" rel="noopener">https://aws.amazon.com/blogs/database/building-distributed-locks-with-the-dynamodb-lock-client/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Distributed-Locks-with-the-DynamoDB-Lock-Client&quot;&gt;&lt;a href=&quot;#Distributed-Locks-with-the-DynamoDB-Lock-Client&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="Cloud" scheme="https://www.llchen60.com/categories/Cloud/"/>
    
    
  </entry>
  
  <entry>
    <title>序列化和反序列化</title>
    <link href="https://www.llchen60.com/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://www.llchen60.com/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-01-14T06:03:10.000Z</published>
    <updated>2021-01-14T06:04:54.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><ul><li><p>序列化</p><ul><li>将对象转化为可传输的字节序列的过程<ul><li>是属于TCP/ IP协议应用层的一部分</li><li>常用的你可能看到的名字<ul><li>serialization</li><li>marshalling</li><li>flatteing</li></ul></li></ul></li><li>常见序列化方式<ul><li>JSON</li><li>XML</li></ul></li></ul></li><li><p>反序列化</p><ul><li>将字节序列还原为对象的过程称为反序列化</li></ul></li><li><p>二进制串</p><ul><li>二进制串：序列化所生成的二进制串指的是存储在内存中的一块数据。</li><li>C++语言具有内存操作符，所以二进制串的概念容易理解，例如，C++语言的字符串可以直接被传输层使用，因为其本质上就是以’\0’结尾的存储在内存中的二进制串。</li><li>在Java语言里面，二进制串的概念容易和String混淆。实际上String 是Java的一等公民，是一种特殊对象（Object）。对于跨语言间的通讯，序列化后的数据当然不能是某种语言的特殊数据类型。二进制串在Java里面所指的是<strong>byte[]</strong>，byte是Java的8中原生数据类型之一（Primitive data types）</li></ul></li></ul><h1 id="2-为什么要序列化"><a href="#2-为什么要序列化" class="headerlink" title="2. 为什么要序列化"></a>2. 为什么要序列化</h1><ul><li>为了使得对象可以跨平台进行存储，进行网络传输</li><li>本质上存储和网络传输都需要将一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象的信息</li><li>而且序列化后可以存在文件当中，永久性的存到硬盘上</li></ul><h1 id="3-序列化技术选择的metrics"><a href="#3-序列化技术选择的metrics" class="headerlink" title="3. 序列化技术选择的metrics"></a>3. 序列化技术选择的metrics</h1><h2 id="3-1-跨平台-amp-跨语言"><a href="#3-1-跨平台-amp-跨语言" class="headerlink" title="3.1 跨平台 &amp; 跨语言"></a>3.1 跨平台 &amp; 跨语言</h2><p>是否需要支持多种语言，应该选择没有语言局限性的序列化协议</p><ul><li>Json会是一个很好的选择，因为Json表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输</li><li>JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面当中读取</li></ul><h2 id="3-2-性能"><a href="#3-2-性能" class="headerlink" title="3.2 性能"></a>3.2 性能</h2><h3 id="3-2-1-速度"><a href="#3-2-1-速度" class="headerlink" title="3.2.1 速度"></a>3.2.1 速度</h3><p>如果序列化的频率非常高，那么选择序列化速度快的协议会为你的系统性能提升不少</p><h3 id="3-2-3-序列化后的大小"><a href="#3-2-3-序列化后的大小" class="headerlink" title="3.2.3 序列化后的大小"></a>3.2.3 序列化后的大小</h3><p>数据量小对于网络的压力小，传输也会快，能够提升整体的性能</p><p>序列化需要在原有的数据上加上描述字段，以为反序列化解析之用。如果序列化过程引入的额外开销过高，可能会导致过大的网络，磁盘等各方面的压力。对于海量分布式存储系统，数据量往往以TB为单位，巨大的的额外空间开销意味着高昂的成本。</p><h2 id="3-3-鲁棒性"><a href="#3-3-鲁棒性" class="headerlink" title="3.3 鲁棒性"></a>3.3 鲁棒性</h2><p>从两方面来进行考虑</p><ul><li>成熟度<ul><li>一个协议从制定，实施到成熟是一个很漫长的阶段。协议的强健性依赖于大量而全面的测试。对于致力于提供高质量服务的系统，采用处于测试阶段的序列化协议会带来很高的风险。</li></ul></li><li>语言/ 平台的公平性<ul><li>当所支持的语言或者平台之间存在难以调和的特性的时候，协议制定者需要做权衡<ul><li>做支持更多人使用的语言/平台  vs 为了支持更多的语言/ 平台而放弃某个特性</li></ul></li></ul></li></ul><h2 id="3-4-可调试性-可读性"><a href="#3-4-可调试性-可读性" class="headerlink" title="3.4 可调试性/ 可读性"></a>3.4 可调试性/ 可读性</h2><ul><li>序列化和反序列化的数据正确性和业务正确性的调试往往需要很长的时间，良好的调试机制会大大提高开发效率。</li><li>序列化后的二进制串往往不具备人眼可读性，为了验证序列化结果的正确性，写入方不得同时撰写反序列化程序，或提供一个查询平台–这比较费时；</li><li>另一方面，如果读取方未能成功实现反序列化，这将给问题查找带来了很大的挑战–难以定位是由于自身的反序列化程序的bug所导致还是由于写入方序列化后的错误数据所导致</li></ul><h2 id="3-5-可扩展性-兼容性"><a href="#3-5-可扩展性-兼容性" class="headerlink" title="3.5 可扩展性/ 兼容性"></a>3.5 可扩展性/ 兼容性</h2><p>移动互联时代，业务系统需求的更新周期变得更快，新的需求不断涌现，而老的系统还是需要继续维护。如果序列化协议具有良好的可扩展性，支持自动增加新的业务字段，而不影响老的服务，这将大大提供系统的灵活度</p><h2 id="3-6-安全性-访问限制"><a href="#3-6-安全性-访问限制" class="headerlink" title="3.6 安全性/ 访问限制"></a>3.6 安全性/ 访问限制</h2><p>在序列化选型的过程中，安全性的考虑往往发生在<strong>跨局域网访问的场景</strong>。当通讯发生在公司之间或者跨机房的时候，出于安全的考虑，对于跨局域网的访问往往被限制为基于HTTP/HTTPS的80和443端口。如果使用的序列化协议没有兼容成熟的HTTP传输层框架支持，可能会导致以下三种结果之一：</p><p>第一、因为访问限制而降低服务可用性。<br>第二、被迫重新实现安全协议而导致实施成本大大提高。<br>第三、开放更多的防火墙端口和协议访问，而牺牲安全性。</p><h1 id="4-序列化和反序列化的组件"><a href="#4-序列化和反序列化的组件" class="headerlink" title="4. 序列化和反序列化的组件"></a>4. 序列化和反序列化的组件</h1><h2 id="4-1-IDL-—-Interface-Description-Language"><a href="#4-1-IDL-—-Interface-Description-Language" class="headerlink" title="4.1 IDL — Interface Description Language"></a>4.1 IDL — Interface Description Language</h2><ul><li>参与通讯的各方需要对通讯的内容做相关的约定 — specifications</li><li>这个约定需要和语言以及平台无关</li><li>被称为接口描述语言</li></ul><h2 id="4-2-IDL-Compiler"><a href="#4-2-IDL-Compiler" class="headerlink" title="4.2 IDL Compiler"></a>4.2 IDL Compiler</h2><ul><li>IDL文件中约定的内容为了在各个语言和平台可见，需要有一个编译器，将IDL文件转换成各个语言对应的动态库</li></ul><h2 id="4-3-Stub-Skeleton-Lib"><a href="#4-3-Stub-Skeleton-Lib" class="headerlink" title="4.3 Stub/ Skeleton Lib"></a>4.3 Stub/ Skeleton Lib</h2><ul><li>负责序列化和反序列化的工作代码</li><li>Stub是一段部署在分布式系统客户端的代码，一方面接收应用层的参数，并对其序列化后通过底层协议栈发送到服务端，另一方面接收服务端序列化后的结果数据，反序列化后交给客户端应用层；</li><li>Skeleton部署在服务端，其功能与Stub相反，从传输层接收序列化参数，反序列化后交给服务端应用层，并将应用层的执行结果序列化后最终传送给客户端Stub。</li></ul><p><img src="https://i.loli.net/2021/01/14/l1jSYEnHLxdzD92.png" alt="序列化反序列化过程"></p><h1 id="5-常见的序列化和反序列化协议"><a href="#5-常见的序列化和反序列化协议" class="headerlink" title="5. 常见的序列化和反序列化协议"></a>5. 常见的序列化和反序列化协议</h1><p>下面以这两个类的序列化反序列化为例</p><pre><code class="java">class Address{    private String city;    private String postcode;    private String street;}public class UserInfo{    private Integer userid;    private String name;    private List&lt;Address&gt; address;}</code></pre><h2 id="5-1-XML-amp-SOAP"><a href="#5-1-XML-amp-SOAP" class="headerlink" title="5.1 XML &amp; SOAP"></a>5.1 XML &amp; SOAP</h2><h3 id="5-1-1-XML"><a href="#5-1-1-XML" class="headerlink" title="5.1.1 XML"></a>5.1.1 XML</h3><ul><li>特点<ul><li>描述语言，self-describing</li><li>XML自身可以被用于XML序列化的IDL</li><li>标准的XML描述格式有<ul><li>DTD - Document Type Definition</li><li>XSD - XML Schema Definition</li></ul></li></ul></li><li>优点<ul><li>跨机器，跨语言</li><li>可读性<ul><li>因为其最初的目标是对互联网文档Document进行标记，所以其设计理念当中就包含了对于人和机器都具备可读性</li></ul></li></ul></li><li>缺点<ul><li>冗长，复杂</li></ul></li></ul><h3 id="5-1-2-SOAP-Simple-Object-Access-Protocol"><a href="#5-1-2-SOAP-Simple-Object-Access-Protocol" class="headerlink" title="5.1.2 SOAP - Simple Object Access Protocol"></a>5.1.2 SOAP - Simple Object Access Protocol</h3><ul><li><p>概念</p><ul><li>基于XML为序列化和反序列化协议的结构化的消息传递协议</li><li>SOAP支持多种传输层协议，最常见的使用方式是XML + HTTP</li></ul></li><li><p>IDL</p><ul><li>SOAP协议的主要接口描述语言IDL是WSDL — Web Service Description Language</li></ul></li><li><p>SOAP具有安全、可扩展、跨语言、跨平台并支持多种传输层协议。如果不考虑跨平台和跨语言的需求，XML的在某些语言里面具有非常简单易用的序列化使用方法，无需IDL文件和第三方编译器， 例如Java＋XStream</p></li><li><p>自我描述和递归</p><ul><li><p>SOAP是一种采用XML进行序列化和反序列化的协议，它的IDL是WSDL. 而WSDL的描述文件是XSD，而XSD自身是一种XML文件。 这里产生了一种有趣的在数学上称之为“递归”的问题，这种现象往往发生在一些具有自我属性（Self-description）的事物上</p><pre><code class="java">&lt;xsd:complexType name=&#39;Address&#39;&gt;   &lt;xsd:attribute name=&#39;city&#39; type=&#39;xsd:string&#39; /&gt;   &lt;xsd:attribute name=&#39;postcode&#39; type=&#39;xsd:string&#39; /&gt;   &lt;xsd:attribute name=&#39;street&#39; type=&#39;xsd:string&#39; /&gt;&lt;/xsd:complexType&gt;&lt;xsd:complexType name=&#39;UserInfo&#39;&gt;   &lt;xsd:sequence&gt;   &lt;xsd:element name=&#39;address&#39; type=&#39;tns:Address&#39;/&gt;   &lt;xsd:element name=&#39;address1&#39; type=&#39;tns:Address&#39;/&gt;    &lt;/xsd:sequence&gt;   &lt;xsd:attribute name=&#39;userid&#39; type=&#39;xsd:int&#39; /&gt;   &lt;xsd:attribute name=&#39;name&#39; type=&#39;xsd:string&#39; /&gt; &lt;/xsd:complexType&gt;</code></pre></li></ul></li><li><p>优点</p><ul><li>安全性</li><li>XML肉眼可读，可调试性好</li></ul></li><li><p>缺点</p><ul><li>XML空间开销会大很多，序列化后的数据量剧增，这意味着巨大的内存和磁盘开销</li></ul></li><li><p>适用场景</p><ul><li>对于公司之间传输数据量小或者实时性要求相对低的服务是一个很好的选择</li></ul></li></ul><h2 id="5-2-JSON-Javascript-Object-Notation"><a href="#5-2-JSON-Javascript-Object-Notation" class="headerlink" title="5.2 JSON - Javascript Object Notation"></a>5.2 JSON - Javascript Object Notation</h2><ul><li><p>概念</p><ul><li>出自Javascript，产生来自于Associative array的概念，本质是采用Attribute-value的方法来描述对象</li></ul></li><li><p>优点</p><ul><li>这种Associative array格式非常符合工程师对对象的理解。</li><li>它保持了XML的人眼可读（Human-readable）的优点。</li><li>相对于XML而言，序列化后的数据更加简洁。 来自于的以下链接的研究表明：XML所产生序列化之后文件的大小接近JSON的两倍。<a href="http://www.codeproject.com/Articles/604720/JSON-vs-XML-Some-hard-numbers-about-verbosity" target="_blank" rel="noopener">http://www.codeproject.com/Articles/604720/JSON-vs-XML-Some-hard-numbers-about-verbosity</a></li><li>它具备Javascript的先天性支持，所以被广泛应用于Web browser的应用常景中，是Ajax的事实标准协议。</li><li>与XML相比，其协议比较简单，解析速度比较快。</li><li>松散的Associative array使得其具有良好的可扩展性和兼容性。</li></ul></li><li><p>应用场景</p><ul><li>公司之间传输数据量<strong>相对小</strong>，实时性要求相对低（<strong>例如秒级别）</strong>的服务。</li><li>基于Web browser的Ajax请求。</li><li>由于JSON具有非常强的前后兼容性，对于接口经常发生变化，并对可调式性要求高的场景，例如Mobile app与服务端的通讯。</li><li>由于JSON的典型应用场景是JSON＋HTTP，适合跨防火墙访问</li></ul></li><li><p>缺点</p><ul><li>采用JSON进行序列化的额外空间开销比较大，对于大数据量服务或持久化，这意味着巨大的内存和磁盘开销，这种场景不适合。</li><li>没有统一可用的IDL降低了对参与方的约束，实际操作中往往只能<strong>采用文档方式来进行约定</strong>，这可能会给调试带来一些不便，延长开发周期。</li><li>由于JSON在一些语言中的序列化和反序列化需要采用反射机制，所以在性能要求为ms级别，不建议使用</li></ul></li></ul><pre><code class="java">{&quot;userid&quot;:1,&quot;name&quot;:&quot;messi&quot;,&quot;address&quot;:[{&quot;city&quot;:&quot;北京&quot;,&quot;postcode&quot;:&quot;1000000&quot;,&quot;street&quot;:&quot;wangjingdonglu&quot;}]}</code></pre><h2 id="5-3-Thrift"><a href="#5-3-Thrift" class="headerlink" title="5.3 Thrift"></a>5.3 Thrift</h2><ul><li>简介<ul><li>FB开源的一个高性能轻量级的RPC框架</li><li>为了满足当前大数据量、分布式、跨语言、跨平台数据通讯的需求</li><li>，Thrift并不仅仅是序列化协议，而是一个RPC框架。相对于JSON和XML而言，Thrift在空间开销和解析性能上有了比较大的提升，对于对性能要求比较高的分布式系统，它是一个优秀的RPC解决方案；但是由于Thrift的序列化被嵌入到Thrift框架里面，Thrift框架本身并没有透出序列化和反序列化接口，这导致其很难和其他传输层协议共同使用</li></ul></li></ul><pre><code class="java">// IDL wenstruct Address{     1: required string city;    2: optional string postcode;    3: optional string street;} struct UserInfo{     1: required string userid;    2: required i32 name;    3: optional list&lt;Address&gt; address;}</code></pre><h2 id="5-4-Protobuf"><a href="#5-4-Protobuf" class="headerlink" title="5.4 Protobuf"></a>5.4 Protobuf</h2><ul><li>特征<ul><li>标准的IDL和IDL编译器，这使得其对工程师非常友好。</li><li>序列化数据非常简洁，紧凑，与XML相比，其序列化之后的数据量约为1/3到1/10。</li><li>解析速度非常快，比对应的XML快约20-100倍。</li><li>提供了非常友好的动态库，使用非常简介，反序列化只需要一行代码。</li><li>Protobuf是一个纯粹的展示层协议，可以和各种传输层协议一起使用；Protobuf的文档也非常完善。 但是由于Protobuf产生于Google，所以目前其仅仅支持Java、C++、Python三种语言。另外Protobuf支持的数据类型相对较少，不支持常量类型。由于其设计的理念是纯粹的展现层协议（Presentation Layer），目前并没有一个专门支持Protobuf的RPC框架</li></ul></li><li>应用场景<ul><li>Protobuf具有广泛的用户基础，空间开销小以及高解析性能是其亮点，非常适合于公司内部的对性能要求高的RPC调用。</li><li>由于Protobuf提供了标<strong>准的IDL以及对应的编译器，其IDL文件是参与各方的非常强的业务约束</strong>，</li><li>另外，Protobuf与传输层无关，采用HTTP具有良好的跨防火墙的访问属性，所以Protobuf也适用于公司间对性能要求比较高的场景</li><li>由于其解析性能高，序列化后数据量相对少，非常适合应用层对象的持久化场景。</li></ul></li></ul><pre><code class="java">// IDL File E.Gmessage Address{    required string city=1;        optional string postcode=2;        optional string street=3;}message UserInfo{    required string userid=1;    required string name=2;    repeated Address address=3;}</code></pre><h2 id="5-5-Avro"><a href="#5-5-Avro" class="headerlink" title="5.5 Avro"></a>5.5 Avro</h2><ul><li>介绍<ul><li>Apache Hadoop的子项目</li><li>提供两种序列化方式<ul><li>Json<ul><li>为了方便测试的调试过程</li></ul></li><li>Binary<ul><li>空间开销和解析性能可以和Protobuf媲美</li></ul></li></ul></li></ul></li><li>优点<ul><li>Avro支持JSON格式的IDL和类似于Thrift和Protobuf的IDL（实验阶段），这两者之间可以互转。</li><li>Schema可以在传输数据的同时发送，加上JSON的自我描述属性，这使得Avro非常适合动态类型语言。</li><li>Avro在做文件持久化的时候，一般会和Schema一起存储，所以Avro序列化文件自身具有自我描述属性，所以非常适合于做Hive、Pig和MapReduce的持久化数据格式。</li><li>对于不同版本的Schema，在进行RPC调用的时候，服务端和客户端可以在握手阶段对Schema进行互相确认，大大提高了最终的数据解析速度。</li></ul></li></ul><h1 id="6-Benchmark"><a href="#6-Benchmark" class="headerlink" title="6. Benchmark"></a>6. Benchmark</h1><ul><li>通过下面链接可以发现Protobuf和Avro在两个方面都表现很优越</li></ul><p><a href="https://code.google.com/archive/p/thrift-protobuf-compare/wikis/Benchmarking.wiki" target="_blank" rel="noopener">https://code.google.com/archive/p/thrift-protobuf-compare/wikis/Benchmarking.wiki</a> </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/40462507" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/40462507</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017624706151424" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017624706151424</a> </li><li><a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html" target="_blank" rel="noopener">https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序列化和反序列化&quot;&gt;&lt;a href=&quot;#序列化和反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化和反序列化&quot;&gt;&lt;/a&gt;序列化和反序列化&lt;/h1&gt;&lt;h1 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Web" scheme="https://www.llchen60.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis哨兵机制</title>
    <link href="https://www.llchen60.com/Redis%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.llchen60.com/Redis%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/</id>
    <published>2021-01-07T04:07:59.000Z</published>
    <updated>2021-01-10T18:04:18.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h1><p>主从库的集群模式使得当从库发生故障以后，客户端可以继续向主库或者其他从库发送请求，进行相关的操作；但是如果主库发生了故障，那会直接影响到从库的同步。无论是写中断还是从库无法进行数据同步都是Redis所不能接受的。因此我们需要一些机制，来能够将一个从库切换为主库，这就涉及到了Redis的哨兵机制。</p><h1 id="1-哨兵机制的基本流程"><a href="#1-哨兵机制的基本流程" class="headerlink" title="1. 哨兵机制的基本流程"></a>1. 哨兵机制的基本流程</h1><ul><li>哨兵可以理解为一个运行在特殊模式下的Redis进程，其在主从库实例运行的同时也在运行</li><li>哨兵主要的三个任务为：<ul><li>监控 — 决策：判断主库是否处于下线状态<ul><li>周期性的ping主库，检测其是否仍然在线运行</li><li>如果从库没有在规定时间内响应哨兵的Ping命令，哨兵就会将其标记为下线状态</li><li>对主库来说同理，在判定主库下线以后会开始一个自动切换主库的流程</li></ul></li><li>选主 — 决策：决定选择哪个从库实例作为主库<ul><li>主库挂了以后，哨兵就需要从很多歌从库里按照一定的规则选择一个从库实例，将其作为新的主库</li></ul></li><li>通知<ul><li>将新主库的连接信息发给其他从库，让它们执行replicaof命令，与新主库建立连接，并进行数据复制</li><li>哨兵会将新主库的连接信息通知给客户端，让它们将请求操作发到新主库当中</li></ul></li></ul></li></ul><p><img src="https://i.loli.net/2021/01/07/z7o6Kkdfp2IaPsx.png" alt="哨兵三大任务"></p><h1 id="2-判断主库的下线状态"><a href="#2-判断主库的下线状态" class="headerlink" title="2. 判断主库的下线状态"></a>2. 判断主库的下线状态</h1><h2 id="2-1-哨兵集群使用原因"><a href="#2-1-哨兵集群使用原因" class="headerlink" title="2.1 哨兵集群使用原因"></a>2.1 哨兵集群使用原因</h2><h3 id="2-1-1-为什么需要哨兵集群？"><a href="#2-1-1-为什么需要哨兵集群？" class="headerlink" title="2.1.1 为什么需要哨兵集群？"></a>2.1.1 为什么需要哨兵集群？</h3><ul><li>如果哨兵发生误判，后续的选主和通知操作都会带来额外的计算和通信的开销</li><li>误判通常发生在<ul><li>集群网络压力较大</li><li>网络拥塞</li><li>主库本身压力较大的情况</li></ul></li><li>哨兵机制也是类似的，它通常会采用多实例组成的集群模式进行部署，这也被称为哨兵集群。引入多个哨兵实例一起来判断，就可以避免单个哨兵因为自身网络状况不好，而误判主库下线的情况。同时，多个哨兵的网络同时不稳定的概率较小，由它们一起做决策，误判率也能降低。</li></ul><h3 id="2-1-2-如何使用哨兵集群？"><a href="#2-1-2-如何使用哨兵集群？" class="headerlink" title="2.1.2 如何使用哨兵集群？"></a>2.1.2 如何使用哨兵集群？</h3><ul><li>简单来说，“客观下线”的标准就是，当有 N 个哨兵实例时，最好要有 N/2 + 1 个实例判断主库为“主观下线”，才能最终判定主库为“客观下线”。这样一来，就可以减少误判的概率，也能避免误判带来的无谓的主从库切换。（当然，有多少个实例做出“主观下线”的判断才可以，可以由 Redis 管理员自行设定）。</li></ul><h2 id="2-2-哨兵集群原理-—-基于PubSub机制"><a href="#2-2-哨兵集群原理-—-基于PubSub机制" class="headerlink" title="2.2 哨兵集群原理 — 基于PubSub机制"></a>2.2 哨兵集群原理 — 基于PubSub机制</h2><h3 id="2-2-1-pubsub机制"><a href="#2-2-1-pubsub机制" class="headerlink" title="2.2.1  pubsub机制"></a>2.2.1  pubsub机制</h3><p>哨兵实例之间的相互发现是基于Redis提供的pubsub机制的，哨兵只要和主库建立起连接，就可以在主库上发布消息了</p><ul><li>可以选择发布自己的连接信息到主库上</li><li>也可以从主库上订阅消息，获得其他哨兵发布的连接信息</li><li>当多个哨兵实例都在主库上做了发布和订阅操作之后，他们之间就能知道彼此的IP地址和端口</li></ul><h3 id="2-2-2-频道"><a href="#2-2-2-频道" class="headerlink" title="2.2.2 频道"></a>2.2.2 频道</h3><ul><li>Redis通过频道来区分不同应用的消息，对这些消息进行分门别类的管理。频道就是指消息的类别，当消息类别相同时，就会属于同一个频道，否则属于不同的频道。</li><li>只有订阅了同一个频道的应用，才能通过发布的消息进行信息交换</li></ul><p><img src="https://i.loli.net/2021/01/11/LIhj62iuDBbPEve.png" alt="频道订阅机制"></p><ul><li>哨兵1 想频道hello发送信息，因为哨兵2 哨兵3 subscribe了hello频道，他们就能从这个频道获取到哨兵1的IP地址和端口号信息</li></ul><h3 id="2-2-3-哨兵和从库的连接沟通"><a href="#2-2-3-哨兵和从库的连接沟通" class="headerlink" title="2.2.3 哨兵和从库的连接沟通"></a>2.2.3 哨兵和从库的连接沟通</h3><ul><li><p>哨兵向主库发出INFO命令</p></li><li><p>主库收到命令后，就会将从库列表返回给哨兵</p></li><li><p>接着哨兵就可以根据从库列表中的信息，和每个从库建立连接，并在这个连接上持续对从库进行监控</p><p>  <img src="https://i.loli.net/2021/01/11/sPTRS1mkhU2lLQn.png" alt="哨兵和从库的连接"></p></li><li><p>哨兵除了上述的和主库之间的连接，获取从库列表，并和从库们建立连接之外，还承担着在发生主库更换以后，将新主库的信息告诉客户端这个任务</p></li></ul><h2 id="2-3-客户端事件通知机制"><a href="#2-3-客户端事件通知机制" class="headerlink" title="2.3 客户端事件通知机制"></a>2.3 客户端事件通知机制</h2><ul><li><p>哨兵是一个运行在特定模式下的Redis实例，只是它不服务请求操作，只是完成监控，选主和通知的任务</p></li><li><p>因此每个哨兵实例也提供pubsub机制，客户端可以从哨兵订阅消息</p><ul><li><p>哨兵提供了很多的消息订阅频道，不同频道包含了主从库切换过程中的不同关键事件</p><p>  <img src="https://i.loli.net/2021/01/11/RAaq7KZr2LSUdVx.png" alt="常用的关键时间列表"></p></li><li><p>客户端可以执行订阅命令，来订阅不同的频道，然后来获取不同的事件信息</p></li></ul></li></ul><h1 id="3-如何选定新主库？"><a href="#3-如何选定新主库？" class="headerlink" title="3. 如何选定新主库？"></a>3. 如何选定新主库？</h1><ul><li>筛选<ul><li>确保从库仍然在线运行</li><li>判断其之前的网络状态 看该从库和主库之间是否经常断联，出现网络相关的问题</li></ul></li><li>打分 — 只要有得分最高的，那么就在当前轮停止并且认定其为主库<ul><li>从库优先级<ul><li>用户可以通过slave-priority配置项，给不同的从库设置不同的优先级<ul><li>譬如：两个从库内存大小不一样，我们就可以手动给内存大的实例设置一个高优先级</li></ul></li></ul></li><li>从库复制进度<ul><li>选择和旧主库同步最为接近的那个从库作为主库</li><li>如何判断从库和旧主库的同步进度？<ul><li>主从库之间命令传播机制里面的master_repl_offset 和slave_repl_offset</li><li>看二者的接近程度</li></ul></li></ul></li><li>从库ID号<ul><li>当优先级和复制进度都相同的情况下，ID号最小的从库得分最高，被选为新主库</li></ul></li></ul></li></ul><h1 id="4-由哪个哨兵来执行主从切换？"><a href="#4-由哪个哨兵来执行主从切换？" class="headerlink" title="4. 由哪个哨兵来执行主从切换？"></a>4. 由哪个哨兵来执行主从切换？</h1><ul><li><h2 id="任何一个实例只要自身判断主库主观下线之后，就会给其他势力发送is-master-down-by-addr命令。接着其他实例会根据自己和主库的连接情况，做出Y或N的响应"><a href="#任何一个实例只要自身判断主库主观下线之后，就会给其他势力发送is-master-down-by-addr命令。接着其他实例会根据自己和主库的连接情况，做出Y或N的响应" class="headerlink" title="任何一个实例只要自身判断主库主观下线之后，就会给其他势力发送is-master-down-by-addr命令。接着其他实例会根据自己和主库的连接情况，做出Y或N的响应"></a>任何一个实例只要自身判断主库主观下线之后，就会给其他势力发送is-master-down-by-addr命令。接着其他实例会根据自己和主库的连接情况，做出Y或N的响应</h2><pre><code>  ![is master down by addr](https://i.loli.net/2021/01/11/HpT5MAdKX9fmo2S.png)</code></pre><ul><li><p>一个哨兵获得了仲裁所需的赞成票数后，就可以标记主库为客观下线</p><ul><li>这个所需的赞成票数是通过哨兵配置文件中的quorum配置项设定的</li></ul></li><li><p>当获得了所需赞成票数以后，这个哨兵会再给其他哨兵发送命令，希望由自己来执行主从切换，并让所有其他哨兵进行投票，这个过程称为Leader选举。</p></li><li><p>在投票过程中，任何一个想成为 Leader 的哨兵，要满足两个条件：第一，拿到半数以上的赞成票；第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。以 3 个哨兵为例，假设此时的 quorum 设置为 2，那么，任何一个想成为 Leader 的哨兵只要拿到 2 张赞成票，就可以了。</p></li><li><p><img src="https://i.loli.net/2021/01/11/RAaq7KZr2LSUdVx.png" alt="票选执行主从切换哨兵的过程"></p></li></ul><ol><li>在 T1 时刻，S1 判断主库为“客观下线”，它想成为 Leader，就先给自己投一张赞成票，然后分别向 S2 和 S3 发送命令，表示要成为 Leader。</li><li>在 T2 时刻，S3 判断主库为“客观下线”，它也想成为 Leader，所以也先给自己投一张赞成票，再分别向 S1 和 S2 发送命令，表示要成为 Leader。</li><li>在 T3 时刻，S1 收到了 S3 的 Leader 投票请求。<strong>因为 S1 已经给自己投了一票 Y，所以它不能再给其他哨兵投赞成票了，所以 S1 回复 N 表示不同意</strong>。同时，S2 收到了 T2 时 S3 发送的 Leader 投票请求。因为 S2 之前没有投过票，它会给第一个向它发送投票请求的哨兵回复 Y，给后续再发送投票请求的哨兵回复 N，所以，在 T3 时，S2 回复 S3，同意 S3 成为 Leader。</li><li>在 T4 时刻，S2 才收到 T1 时 S1 发送的投票命令。因为 S2 已经在 T3 时同意了 S3 的投票请求，此时，S2 给 S1 回复 N，表示不同意 S1 成为 Leader。发生这种情况，是因为 S3 和 S2 之间的网络传输正常，而 S1 和 S2 之间的网络传输可能正好拥塞了，导致投票请求传输慢了。</li><li>在 T5 时刻，S1 得到的票数是来自它自己的一票 Y 和来自 S2 的一票 N。而 S3 除了自己的赞成票 Y 以外，还收到了来自 S2 的一票 Y。此时，S3 不仅获得了半数以上的 Leader 赞成票，也达到预设的 quorum 值（quorum 为 2），所以它最终成为了 Leader。接着，S3 会开始执行选主操作，而且在选定新主库后，会给其他从库和客户端通知新主库的信息。</li></ol><ul><li>如果 S3 没有拿到 2 票 Y，那么这轮投票就不会产生 Leader。<strong>哨兵集群会等待一段时间（也就是哨兵故障转移超时时间的 2 倍）</strong>，再重新选举。这是因为，哨兵集群能够进行成功投票，很大程度上依赖于选举命令的正常网络传播。<strong>如果网络压力较大或有短时堵塞，就可能导致没有一个哨兵能拿到半数以上的赞成票</strong>。所以，等到网络拥塞好转之后，再进行投票选举，成功的概率就会增加。需要注意的是，如果哨兵集群只有 2 个实例，此时，一个哨兵要想成为 Leader，必须获得 2 票，而不是 1 票。所以，如果有个哨兵挂掉了，那么，此时的集群是无法进行主从库切换的。因此，通常我们至少会配置 3 个哨兵实例。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;哨兵机制&quot;&gt;&lt;a href=&quot;#哨兵机制&quot; class=&quot;headerlink&quot; title=&quot;哨兵机制&quot;&gt;&lt;/a&gt;哨兵机制&lt;/h1&gt;&lt;p&gt;主从库的集群模式使得当从库发生故障以后，客户端可以继续向主库或者其他从库发送请求，进行相关的操作；但是如果主库发生了故障，那
      
    
    </summary>
    
    
      <category term="数据存储" scheme="https://www.llchen60.com/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis数据同步</title>
    <link href="https://www.llchen60.com/Redis%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    <id>https://www.llchen60.com/Redis%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</id>
    <published>2021-01-04T03:09:48.000Z</published>
    <updated>2021-01-04T03:18:02.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis数据同步"><a href="#Redis数据同步" class="headerlink" title="Redis数据同步"></a>Redis数据同步</h1><h1 id="1-Redis的高可靠性"><a href="#1-Redis的高可靠性" class="headerlink" title="1. Redis的高可靠性"></a>1. Redis的高可靠性</h1><p>Redis的高可靠性体现在两个方面： </p><ul><li>数据尽量少丢失<ul><li>AOF</li><li>RDB</li></ul></li><li>服务尽量少中断<ul><li>增加副本冗余量 — 将一份数据同时保存在多个实例上</li></ul></li></ul><h1 id="2-数据同步-—-主从库模式"><a href="#2-数据同步-—-主从库模式" class="headerlink" title="2. 数据同步 — 主从库模式"></a>2. 数据同步 — 主从库模式</h1><ul><li><p>主从库之间采用的是读写分离的方式</p><ul><li><p>读操作</p><ul><li>主库，从库都可以接收</li></ul></li><li><p>写操作</p><ul><li><p>首先到主库执行</p></li><li><p>然后主库将写操作同步给从库</p><p>  <img src="https://i.loli.net/2021/01/04/8wE4dPDgFxqRX6r.png" alt="主从读写分离"></p></li></ul></li></ul></li><li><p>主从库的好处是修改操作都只会在一个库实现</p><ul><li>可以减少加锁，实例间协商这类开销</li></ul></li></ul><h2 id="2-1-主从库之间如何进行第一个同步？"><a href="#2-1-主从库之间如何进行第一个同步？" class="headerlink" title="2.1 主从库之间如何进行第一个同步？"></a>2.1 主从库之间如何进行第一个同步？</h2><ul><li><p>多个Redis实例之间通过replicaof命令形成主库和从库的关系，然后按照三个阶段完成数据的第一次同步：</p><p>  <img src="https://i.loli.net/2021/01/04/KZemoVB6CFjNlJI.png" alt="主从首次同步过程"></p></li><li><p>第一阶段</p><ul><li>主从库之间建立连接，协商同步</li><li>为全量复制做准备</li><li>从库和主库建立起连接，并告诉主库即将进行同步，主库确认回复以后，主从库间就可以开始同步了<ul><li>从库给主库发送psync命令，表示要进行数据同步</li><li>主库根据这个命令的参数来启动复制<ul><li>psync命令包含主库的runId和复制进度的offset两个参数<ul><li>runID — Redis实例启动的时候自动随机生成的ID，用来唯一标识当前实例</li><li>offset 此时设为-1，表示第一次复制</li></ul></li></ul></li><li>主库收到psync命令后，使用FULLRESYNC响应命令，包括了主库的runID还有主库目前的复制进度offset，返回给从库<ul><li>从库记录下两个参数</li></ul></li><li>FULLRESYNC表示第一次复制使用的是全量复制</li></ul></li></ul></li><li><p>第二阶段</p><ul><li>主库将所有数据同步给从库</li><li>从库收到数据后，在本地完成数据加载 — 依赖于内存快照生成的RDB文件<ul><li>主库执行 bgsave 命令，生成 RDB 文件，接着将文件发给从库。</li><li>从库接收到 RDB 文件后，会先清空当前数据库，然后加载 RDB 文件。<ul><li>这是因为从库在通过 replicaof 命令开始和主库同步前，可能保存了其他数据。为了避免之前数据的影响，从库需要先把当前数据库清空</li></ul></li></ul></li><li>在做数据同步的过程中，主库不会被阻塞。对于这个过程中接收到的正常请求，写操作会记录在主库的Replication Buffer当中</li></ul></li><li><p>第三阶段</p><ul><li>主库会将第二阶段新收到的修改命令，再发给从库</li><li>当主库完成 RDB 文件发送后，就会把此时 replication buffer 中的修改操作发给从库，从库再重新执行这些操作。这样一来，主从库就实现同步了</li></ul></li></ul><h2 id="2-2-主从级联方式分担全量复制时的主库压力"><a href="#2-2-主从级联方式分担全量复制时的主库压力" class="headerlink" title="2.2 主从级联方式分担全量复制时的主库压力"></a>2.2 主从级联方式分担全量复制时的主库压力</h2><ul><li><p>现状/ 问题</p><ul><li>一次全量复制主库需要完成两个耗时操作<ul><li>生成RDB文件和传输RDB文件</li></ul></li><li>如果从库数量很多，而且都要和主库进行全量复制的话，就会导致主库忙于 fork 子进程生成 RDB 文件，进行数据全量同步。fork 这个操作会阻塞主线程处理正常请求，从而导致主库响应应用程序的请求速度变慢。</li><li>传输 RDB 文件也会占用主库的网络带宽，同样会给主库的资源使用带来压力</li></ul></li><li><p>解决方案 — 主从从模式</p><ul><li><p>我们在部署主从集群的时候，可以手动选择一个从库（比如选择内存资源配置较高的从库），用于级联其他的从库。然后，我们可以再选择一些从库（例如三分之一的从库），在这些从库上执行如下命令，让它们和刚才所选的从库，建立起主从关系。replicaof 所选从库的IP 6379</p><p><img src="https://i.loli.net/2021/01/04/eihQpmN6FJdRxLy.png" alt="级联主从库"></p></li></ul></li></ul><h2 id="2-3-突发情况下的增量复制"><a href="#2-3-突发情况下的增量复制" class="headerlink" title="2.3 突发情况下的增量复制"></a>2.3 突发情况下的增量复制</h2><ul><li><p>网络断了以后我们需要一种开销相对合理的复制方式，即增量复制</p><ul><li>将主从库断联期间主库收到的命令，同步给从库</li></ul></li><li><p>增量复制的时候，主从库之间依靠repl_backlog_buffer这个缓冲区来做同步</p></li><li><p>整个过程如下：</p><ul><li><p>当主从库断连后，主库会把断连期间收到的写操作命令，写入 replication buffer，同时也会把这些操作命令也写入 repl_backlog_buffer 这个缓冲区。</p></li><li><p>repl_backlog_buffer 是一个环形缓冲区，主库会记录自己写到的位置，从库则会记录自己已经读到的位置。</p></li><li><p>刚开始的时候，主库和从库的写读位置在一起，这算是它们的起始位置。随着主库不断接收新的写操作，它在缓冲区中的写位置会逐步偏离起始位置，我们通常用偏移量来衡量这个偏移距离的大小，对主库来说，对应的偏移量就是 master_repl_offset。主库接收的新写操作越多，这个值就会越大。</p></li><li><p>同样，从库在复制完写操作命令后，它在缓冲区中的读位置也开始逐步偏移刚才的起始位置，此时，从库已复制的偏移量 slave_repl_offset 也在不断增加。正常情况下，这两个偏移量基本相等。</p></li><li><p>主从库的连接恢复之后，从库首先会给主库发送 psync 命令，并把自己当前的 slave_repl_offset 发给主库，主库会判断自己的 master_repl_offset 和 slave_repl_offset 之间的差距</p></li><li><p>在网络断连阶段，主库可能会收到新的写操作命令，所以，一般来说，master_repl_offset 会大于 slave_repl_offset。此时，主库只用把 master_repl_offset 和 slave_repl_offset 之间的命令操作同步给从库就行。就像刚刚示意图的中间部分，主库和从库之间相差了 put d e 和 put d f 两个操作，在增量复制时，主库只需要把它们同步给从库，就行了。</p><p><img src="https://i.loli.net/2021/01/04/w3TLhzRgOH2A65d.png" alt="增量复制过程"></p></li></ul></li></ul><blockquote><p>因为 repl_backlog_buffer 是一个环形缓冲区，所以在缓冲区写满后，主库会继续写入，此时，就会覆盖掉之前写入的操作。如果从库的读取速度比较慢，就有可能导致从库还未读取的操作被主库新写的操作覆盖了，这会导致主从库间的数据不一致。</p></blockquote><p>我们要想办法避免这一情况，一般而言，我们可以调整 repl_backlog_size 这个参数。这个参数和所需的缓冲空间大小有关。缓冲空间的计算公式是：<strong>缓冲空间大小 = 主库写入命令速度 * 操作大小 - 主从库间网络传输命令速度 * 操作大小</strong>。在实际应用中，考虑到可能存在一些突发的请求压力，我们通常需要把这个缓冲空间扩大一倍，即 repl_backlog_size = 缓冲空间大小 * 2，这也就是 repl_backlog_size 的最终值</p><ul><li>repl_backlog_buffer<ul><li>是为了从库断开之后，如何找到主从差异数据而设计的环形缓冲区，从而避免全量同步带来的性能开销</li><li>如果从库断开时间太久，repl_backlog_buffer环形缓冲区被主库的写命令覆盖了，那么从库连上主库后只能乖乖地进行一次全量同步，所以repl_backlog_buffer配置尽量大一些，可以降低主从断开后全量同步的概率</li><li>而在repl_backlog_buffer中找主从差异的数据后，如何发给从库呢？这就用到了replication buffer</li></ul></li><li>replication_buffer<ul><li>Redis和客户端通信也好，和从库通信也好，Redis都需要给分配一个 内存buffer进行数据交互</li><li>客户端是一个client，从库也是一个client，我们每个client连上Redis后，Redis都会分配一个client buffer，所有数据交互都是通过这个buffer进行的</li><li>Redis先把数据写到这个buffer中，然后再把buffer中的数据发到client socket中再通过网络发送出去，这样就完成了数据交互。</li><li>所以主从在增量同步时，从库作为一个client，也会分配一个buffer，只不过这个buffer专门用来传播用户的写命令到从库，保证主从数据一致，我们通常把它叫做replication buffer</li><li>这个buffer需要做大小的限制<ul><li>如果主从在传播命令时，因为某些原因从库处理得非常慢，那么主库上的这个buffer就会持续增长，消耗大量的内存资源，甚至OOM</li><li>所以Redis提供了<strong>client-output-buffer-limit</strong>参数限制这个buffer的大小，如果超过限制，主库会强制断开这个client的连接，也就是说从库处理慢导致主库内存buffer的积压达到限制后，主库会强制断开从库的连接，此时主从复制会中断，中断后如果从库再次发起复制请求，那么此时可能会导致恶性循环，引发复制风暴，这种情况需要格外注意。</li></ul></li></ul></li></ul><h2 id="2-4-主从全量同步-RDB-vs-AOF"><a href="#2-4-主从全量同步-RDB-vs-AOF" class="headerlink" title="2.4 主从全量同步 RDB vs AOF"></a>2.4 主从全量同步 RDB vs AOF</h2><p>1、RDB文件内容是<strong>经过压缩的二进制数据（不同数据类型数据做了针对性优化）</strong>，文件很小。而AOF文件记录的是每一次写操作的命令，写操作越多文件会变得很大，其中还包括很多对同一个key的多次冗余操作。在主从全量数据同步时，传输RDB文件可以尽量降低对主库机器网络带宽的消耗，从库在加载RDB文件时，一是文件小，读取整个文件的速度会很快，二是因为<strong>RDB文件存储的都是二进制数据</strong>，从库直接按照RDB协议解析还原数据即可，速度会非常快，而AOF需要依次重放每个写命令，这个过程会经历冗长的处理逻辑，恢复速度相比RDB会慢得多，所以使用RDB进行主从全量同步的成本最低。</p><p>2、假设要使用AOF做全量同步，意味着必须打开AOF功能，打开AOF就要选择文件刷盘的策略，选择不当会严重影响Redis性能。而RDB只有在需要定时备份和主从全量同步数据时才会触发生成一次快照。而在很多丢失数据不敏感的业务场景，其实是不需要开启AOF的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis数据同步&quot;&gt;&lt;a href=&quot;#Redis数据同步&quot; class=&quot;headerlink&quot; title=&quot;Redis数据同步&quot;&gt;&lt;/a&gt;Redis数据同步&lt;/h1&gt;&lt;h1 id=&quot;1-Redis的高可靠性&quot;&gt;&lt;a href=&quot;#1-Redis的高可靠性&quot;
      
    
    </summary>
    
    
      <category term="数据存储" scheme="https://www.llchen60.com/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis内存快照</title>
    <link href="https://www.llchen60.com/Redis%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7/"/>
    <id>https://www.llchen60.com/Redis%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7/</id>
    <published>2021-01-02T21:27:09.000Z</published>
    <updated>2021-01-02T21:29:47.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis内存快照"><a href="#Redis内存快照" class="headerlink" title="Redis内存快照"></a>Redis内存快照</h1><h1 id="1-AOF数据恢复存在的问题"><a href="#1-AOF数据恢复存在的问题" class="headerlink" title="1. AOF数据恢复存在的问题"></a>1. AOF数据恢复存在的问题</h1><ul><li>AOF方法每次执行记录的是操作命令，需要持久化的数据量不大</li><li>但是也因为记录的是操作命令，而不是实际数据，所以用AOF方法进行故障恢复的时候，需要逐一把操作日志都执行一遍<ul><li>如果操作日志很多，Redis的恢复就会很缓慢，可能影响到正常</li></ul></li></ul><h1 id="2-内存快照Overview"><a href="#2-内存快照Overview" class="headerlink" title="2. 内存快照Overview"></a>2. 内存快照Overview</h1><ul><li><p>内存快照可以解决上述的问题</p><ul><li>内存快照指的是记录下内存中的数据在某一时刻的状态</li><li>将某一时刻的状态以文件的形式写到磁盘上  这样即使宕机，快照文件也不会丢失，数据的可靠性也就有了保证</li><li>快照文件成为RDB文件，RDB — Redis DataBase</li></ul></li><li><p>RDB特征</p><ul><li>记录的是某一个时刻的数据，并不是操作</li><li>因此在数据恢复的时候，我们可以将RDB文件直接读入内存，很快完成恢复</li></ul></li></ul><h2 id="2-1-给哪些数据做快照？"><a href="#2-1-给哪些数据做快照？" class="headerlink" title="2.1 给哪些数据做快照？"></a>2.1 给哪些数据做快照？</h2><ul><li>Redis的数据都在内存当中，为了提供所有数据的可靠性保证，其执行的是<strong>全量快照</strong><ul><li>即将内存中的所有数据都记录到磁盘当中</li><li>与之一起来的问题就是，当需要对内存的全量数据做快照的时候，将其全部写入磁盘会花费很多时间</li><li>而且全量数据越多，RDB文件就越大，往磁盘上写数据的时间开销就越大</li><li>而Redis的单线程模型决定了我们要尽量避免阻塞主线程的操作</li></ul></li><li>Redis生成RDB文件的命令<ul><li>save<ul><li>在主线程中执行，会导致阻塞</li></ul></li><li>bgsave<ul><li>创建一个子进程，专门用于写入RDB文件，可以避免对于主线程的阻塞</li></ul></li></ul></li></ul><h2 id="2-2-做快照的时候数据是否能够被增删改？"><a href="#2-2-做快照的时候数据是否能够被增删改？" class="headerlink" title="2.2 做快照的时候数据是否能够被增删改？"></a>2.2 做快照的时候数据是否能够被增删改？</h2><ul><li><p>我们需要使系统在进行快照的时候仍然能够接受修改请求，要不然会严重影响系统的执行效率</p></li><li><p>Redis会借助操作系统提供的写时复制技术 — copy on write，在执行快照的同时，正常处理写操作</p><ul><li><p>copy on write</p><ul><li><p>copy operation is deferred until the first write,</p></li><li><p>could significantly reduce the resource consumption of unmodified copies, while adding a small overhead to resource-modifying operations</p><p><a href="https://en.wikipedia.org/wiki/Copy-on-write" target="_blank" rel="noopener">Copy-on-write</a></p><p><img src="https://i.loli.net/2021/01/03/I8kwNqF41KlezWL.png" alt="Copy on Write实现"></p></li></ul></li></ul></li></ul><h2 id="2-3-多久做一次快照？"><a href="#2-3-多久做一次快照？" class="headerlink" title="2.3 多久做一次快照？"></a>2.3 多久做一次快照？</h2><ul><li>尽管bgsave执行时不阻塞主线程，但是频繁的执行全量快照，会带来两方面的开销<ul><li>磁盘带宽压力<ul><li>频繁将全量数据写入磁盘，会给磁盘带来很大的压力</li><li>多个快照竞争有限的磁盘贷款，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环</li></ul></li><li>fork操作的阻塞<ul><li>bgsave子进程需要通过fork操作从主线程创建出来</li><li>fork创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间就越长</li></ul></li></ul></li></ul><h1 id="3-AOF和RDB混用模式"><a href="#3-AOF和RDB混用模式" class="headerlink" title="3.  AOF和RDB混用模式"></a>3.  AOF和RDB混用模式</h1><ul><li>为什么要混用<ul><li>AOF执行速度会比较慢</li><li>RDB的全量复制频率难以把控，太低，会容易丢失数据；太高，系统开销会很大</li></ul></li><li>如何实现的<ul><li>RDB以一定的频率来执行</li><li>在两次快照之间，使用AOF日志记录这期间所有的命令操作</li></ul></li></ul><p><img src="https://i.loli.net/2021/01/03/C98RNZ7PanDWyUr.png" alt="AOF &amp; RDB Mix"></p><ul><li>如上图所示，到了第二次做全量快照的时候，就可以清空AOF日志，因为所有的操作都已经保存到了第二次的全量快照当中了</li></ul><h1 id="4-实际场景探究"><a href="#4-实际场景探究" class="headerlink" title="4. 实际场景探究"></a>4. 实际场景探究</h1><blockquote><p>我们使用一个 2 核 CPU、4GB 内存、500GB 磁盘的云主机运行 Redis，Redis 数据库的数据量大小差不多是 2GB，我们使用了 RDB 做持久化保证。当时 Redis 的运行负载以修改操作为主，写读比例差不多在 8:2 左右，也就是说，如果有 100 个请求，80 个请求执行的是修改操作。你觉得，在这个场景下，用 RDB 做持久化有什么风险吗？</p></blockquote><ul><li><p>内存资源风险</p><ul><li><p>Redis fork子进程做RDB持久化，由于写的比例为80%，那么在持久化过程中，“写实复制”会重新分配整个实例80%的内存副本，大约需要重新分配1.6GB内存空间，这样整个系统的内存使用接近饱和，</p></li><li><p>如果此时父进程又有大量新key写入，很快机器内存就会被吃光，如果机器开启了Swap机制，那么Redis会有一部分数据被换到磁盘上，当Redis访问这部分在磁盘上的数据时，性能会急剧下降，已经达不到高性能的标准（可以理解为武功被废）。如果机器没有开启Swap，会直接触发OOM，父子进程会面临被系统kill掉的风险。</p><ul><li><p>swap 机制</p><ul><li><p>将一块磁盘或者一个本地文件当做内存来使用</p><ul><li><p>换入</p><ul><li>当进程再次访问内存的时候，从磁盘读取数据到内存当中</li></ul></li><li><p>换出</p><ul><li><p>将进程暂时不用的内存数据保存到磁盘上，再释放内存给其他进程使用</p></li><li><p>当进程再次访问内存的时候，从磁盘读取数据到内存中</p><p><a href="https://blog.csdn.net/qq_24436765/article/details/103822548" target="_blank" rel="noopener">Linux系统的swap机制_囚牢-峰子的博客-CSDN博客</a></p></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>CPU资源风险</p><ul><li>虽然子进程在做RDB持久化，但生成RDB快照过程会消耗大量的CPU资源，</li><li>虽然Redis处理处理请求是单线程的，但Redis Server还有其他线程在后台工作，例如AOF每秒刷盘、异步关闭文件描述符这些操作。</li><li>由于机器只有2核CPU，这也就意味着父进程占用了超过一半的CPU资源，此时子进程做RDB持久化，可能会产生CPU竞争，导致的结果就是父进程处理请求延迟增大，子进程生成RDB快照的时间也会变长，整个Redis Server性能下降。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis内存快照&quot;&gt;&lt;a href=&quot;#Redis内存快照&quot; class=&quot;headerlink&quot; title=&quot;Redis内存快照&quot;&gt;&lt;/a&gt;Redis内存快照&lt;/h1&gt;&lt;h1 id=&quot;1-AOF数据恢复存在的问题&quot;&gt;&lt;a href=&quot;#1-AOF数据恢复存在
      
    
    </summary>
    
    
      <category term="数据存储" scheme="https://www.llchen60.com/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis AOF 日志</title>
    <link href="https://www.llchen60.com/Redis-AOF-%E6%97%A5%E5%BF%97/"/>
    <id>https://www.llchen60.com/Redis-AOF-%E6%97%A5%E5%BF%97/</id>
    <published>2020-12-28T18:32:59.000Z</published>
    <updated>2021-01-02T23:08:05.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-AOF-日志"><a href="#Redis-AOF-日志" class="headerlink" title="Redis AOF 日志"></a>Redis AOF 日志</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>Redis很大的一个应用场景就是缓存，因为速度很快，通过将后端数据库中的数据存储在内存当中，然后直接从内存中读取数据。</p><p>但是这样做的一个问题，是如果服务器宕机，内存中的数据将会全部丢失掉。对于恢复数据，我们可能的解决方案是：</p><ul><li>从后端数据库访问<ul><li>对数据库的频繁访问会给数据库造成巨大的压力</li><li>会导致应用程序响应速度变慢</li></ul></li><li>理念 - 不从后端数据库读取，实现数据的持久化<ul><li>AOF 日志</li><li>RDB快照</li></ul></li></ul><h1 id="2-AOF日志的实现"><a href="#2-AOF日志的实现" class="headerlink" title="2. AOF日志的实现"></a>2. AOF日志的实现</h1><h2 id="2-1-什么是AOF"><a href="#2-1-什么是AOF" class="headerlink" title="2.1 什么是AOF"></a>2.1 什么是AOF</h2><ul><li><p>AOF - Append Only File</p></li><li><p>写后日志</p><ul><li><p>Redis先执行命令，将数据写入内存，然后才记录日志</p><p>  ![写后日志]](<a href="https://i.loli.net/2020/12/29/bNUOftoVI19G8Wj.png" target="_blank" rel="noopener">https://i.loli.net/2020/12/29/bNUOftoVI19G8Wj.png</a>)</p></li></ul></li></ul><h2 id="2-2-AOF记录了什么"><a href="#2-2-AOF记录了什么" class="headerlink" title="2.2 AOF记录了什么"></a>2.2 AOF记录了什么</h2><ul><li><p>传统数据库日志</p><ul><li>记录修改后的数据</li></ul></li><li><p>AOF</p><ul><li><p>写后日志</p></li><li><p>记录Redis收到的每一条指令，这些命令以文本形式保存</p></li><li><p>AOF记录日志的时候，不会进行语法检查的！ 因此，如果先记录日志，再做执行的话，日志当中就有可能记录错误的命令，在使用日志恢复数据的时候，就有可能出错</p><p>  <img src="https://i.loli.net/2020/12/29/qn9adxRcv2ZSJiD.png" alt="AOF日志范例"></p></li><li><p>写后日志可以避免出现记录错误命令的情况</p></li><li><p>而且因为是在命令执行后才记录日志，所以不会阻塞当前的写操作</p></li></ul></li></ul><h3 id="2-2-1-写后日志的风险"><a href="#2-2-1-写后日志的风险" class="headerlink" title="2.2.1 写后日志的风险"></a>2.2.1 写后日志的风险</h3><ul><li>如果刚执行完一个命令，还没有记录日志就宕机了，那么命令和相应的数据都有丢失的风险。</li><li>AOF虽然避免了对当前命令的阻塞，但是可能会给下一个操作带来阻塞风险<ul><li>因为AOF日志也是在主线程中执行，如果将日志文件写入磁盘的时候，磁盘写压力大，会导致写盘非常慢</li></ul></li></ul><p>解决方案： 需要控制写命令执行完成后AOF日志写回磁盘的时机</p><h1 id="3-单点研究"><a href="#3-单点研究" class="headerlink" title="3. 单点研究"></a>3. 单点研究</h1><h2 id="3-1-写回策略"><a href="#3-1-写回策略" class="headerlink" title="3.1 写回策略"></a>3.1 写回策略</h2><ul><li><p>可用的写回策略 - AOF当中的appendfsync的三个可选值</p><ul><li><p>Always 同步写回</p><ul><li>每个写命令执行完，立刻同步将日志写回磁盘</li></ul></li><li><p>EverySec 每秒写回</p><ul><li>每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒将缓冲区中的内容写入磁盘</li></ul></li><li><p>No 操作系统控制的写回</p><ul><li>每个写命令执行完，只是将日志写到AOF文件的缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</li></ul><p><img src="https://i.loli.net/2020/12/29/RkfhClbVDv5JKzp.png" alt="写回策略对比"></p></li></ul></li><li><p>写回策略的选择 — 根据对于性能和可靠性的要求，来选择选用哪一种写回策略</p><ul><li>想要获得高性能，选用No策略</li><li>想要高可靠性的保证，选用Always策略</li><li>如果允许数据有一点丢失，又希望性能不受太大的影响，选用EverySec策略</li></ul></li></ul><h2 id="3-2-如何处理过大的日志文件-—-AOF重写机制"><a href="#3-2-如何处理过大的日志文件-—-AOF重写机制" class="headerlink" title="3.2 如何处理过大的日志文件 — AOF重写机制"></a>3.2 如何处理过大的日志文件 — AOF重写机制</h2><p>日志过大会产生性能问题，主要在以下三个方面：</p><ol><li>文件系统本身对文件大小的限制，无法保存过大的文件</li><li>如果文件太大，再向里面追加命令记录，效率会降低</li><li>如果发生宕机，AOF中记录的命令要一个个被重新执行，用于故障恢复，如果日志文件太大，整个恢复过程会非常缓慢，这就会影响到Redis的正常使用</li></ol><h3 id="3-2-1-重写可以优化日志大小的原理"><a href="#3-2-1-重写可以优化日志大小的原理" class="headerlink" title="3.2.1 重写可以优化日志大小的原理"></a>3.2.1 重写可以优化日志大小的原理</h3><ul><li><p>AOF重写机制</p><ul><li><p>重写的时候，根据数据库现状创建一个新的AOF文件</p><ul><li>读取数据库所有的键值对</li><li>针对每一个键值对用一条命令记录它的写入</li><li>读取了键值对testkey:testvalue之后，重写机制就会记录set testkey testvalue这条命令</li><li>需要回复的时候，直接执行这条命令</li></ul></li><li><p>重写可以使得日志文件变小，因为可以压缩多条指令到一条</p><ul><li><p>即AOF日志是用来做恢复的，我不需要记录每一步的中间状态，只要知道最终对应的key的value是多少就好</p><p>  <img src="https://i.loli.net/2020/12/29/R7fgD2tVBvZUk8z.png" alt="重写原理"></p></li></ul></li></ul></li></ul><h3 id="3-2-2-重写如何避免阻塞？"><a href="#3-2-2-重写如何避免阻塞？" class="headerlink" title="3.2.2  重写如何避免阻塞？"></a>3.2.2  重写如何避免阻塞？</h3><ul><li><p>AOF日志由主线程写回，而重写过程是由后台子进程bgrewriteaof来完成的，是为了避免阻塞主线程，导致数据库性能的下降</p></li><li><p>重写的整个流程</p><ul><li><p>一处拷贝</p><ul><li>每次执行重写的时候，主线程fork到bgrewriteaof子进程</li><li>主线程的内存会被拷贝一份到bgrewriteaof子进程当中，其中会包含数据库的最新数据</li><li>然后该子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志</li></ul></li><li><p>两处日志</p><ul><li><p>主线程当中的AOF日志</p><ul><li>但有新的操作进入，Redis会将该操作写到AOF日志缓冲区</li><li>这样即使宕机，AOF日志的操作仍齐全，可以用来做恢复</li></ul></li><li><p>AOF重写日志</p><ul><li><p>该操作同时也会被写入到重写日志的缓冲区</p></li><li><p>等到拷贝数据的所有操作记录重写完成后，重写日志记录的这些最新操作也会写入新的 AOF 文件，以保证数据库最新状态的记录。此时，我们就可以<strong>用新的 AOF 文件替代旧文件</strong>了。</p><p><img src="https://i.loli.net/2020/12/29/6vco3pLJNDBwU52.png" alt="重写流程"></p></li></ul></li></ul></li></ul></li></ul><h2 id="3-3-AOF-日志重写过程当中的阻塞风险"><a href="#3-3-AOF-日志重写过程当中的阻塞风险" class="headerlink" title="3.3 AOF 日志重写过程当中的阻塞风险"></a>3.3 AOF 日志重写过程当中的阻塞风险</h2><ul><li>Fork子进程的过程<ul><li>fork并不会一次性拷贝所有内存数据给子进程，采用的是操作系统提供的copy on write机制<ul><li>copy on write机制就是为了避免一次性拷贝大量内存数据给子进程造成的长时间阻塞的问题</li></ul></li><li>fork子进程需要先拷贝进程必要的数据结构<ul><li>拷贝内存页表 — 即虚拟内存和物理内存的映射索引表</li><li>这个拷贝过程会消耗大量的CPU资源，并且拷贝完成之前整个进程是会阻塞的</li><li>阻塞时间取决于整个实例的内存大小<ul><li>实例越大，内存页表也越大，fork阻塞时间就会越久</li></ul></li></ul></li><li>在完成了拷贝内存页表之后，子进程和父进程指向的是相同的内存地址空间<ul><li>这个时候虽然产生了子进程，但是并没有申请和父进程相同的内存大小</li><li>真正的内存分离是<strong>在写发生的时候，这个时候才会真正拷贝内存的数据</strong></li></ul></li></ul></li><li>AOF重写过程中父进程产生写入的过程<ul><li>Fork出的子进程当前状态是指向了和父进程相同的内存地址空间，这个时候子进程就可以执行AOF重写，将内存中的所有数据写入到AOF文件里</li><li>但是同时父进程仍然会有流量写入<ul><li>如果父进程操作的是一个已经存在的key，那么这个时候父进程就会真正拷贝这个key对应的内存数据，申请新的内存空间，这样逐渐地，父子进程内存数据开始分离</li><li>父子进程逐渐拥有各自独立的内存空间。因为内存分配是以页为单位进行分配的，默认4k，如果父进程此时操作的是一个bigkey，重新申请大块内存耗时会变长，可能会产阻塞风险</li><li>如果操作系统开启了内存大页机制(Huge Page，页面大小2M)，那么父进程申请内存时阻塞的概率将会大大提高，所以在Redis机器上需要关闭Huge Page机制。Redis每次fork生成RDB或AOF重写完成后，都可以在Redis log中看到父进程重新申请了多大的内存空间</li></ul></li></ul></li></ul><h2 id="3-4-AOF重写日志为什么不共享AOF本身的日志？"><a href="#3-4-AOF重写日志为什么不共享AOF本身的日志？" class="headerlink" title="3.4 AOF重写日志为什么不共享AOF本身的日志？"></a>3.4 AOF重写日志为什么不共享AOF本身的日志？</h2><p>AOF重写不复用AOF本身的日志，一个原因是父子进程写同一个文件必然会产生竞争问题，控制竞争就意味着会影响父进程的性能。二是如果AOF重写过程中失败了，那么原本的AOF文件相当于被污染了，无法做恢复使用。所以Redis AOF重写一个新文件，重写失败的话，直接删除这个文件就好了，不会对原先的AOF文件产生影响。等重写完成之后，直接替换旧文件即可</p><h2 id="3-5-如何触发AOF重写？"><a href="#3-5-如何触发AOF重写？" class="headerlink" title="3.5 如何触发AOF重写？"></a>3.5 如何触发AOF重写？</h2><p>有两个配置项在控制AOF重写的触发时机：</p><ol><li><p>auto-aof-rewrite-min-size: 表示运行AOF重写时文件的最小大小，默认为64MB</p></li><li><p>auto-aof-rewrite-percentage: 这个值的计算方法是：当前AOF文件大小和上一次重写后AOF文件大小的差值，再除以上一次重写后AOF文件大小。也就是当前AOF文件比上一次重写后AOF文件的增量大小，和上一次重写后AOF文件大小的比值。</p></li></ol><p>AOF文件大小同时超出上面这两个配置项时，会触发AOF重写。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://time.geekbang.org/column/article/271754" target="_blank" rel="noopener">https://time.geekbang.org/column/article/271754</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis-AOF-日志&quot;&gt;&lt;a href=&quot;#Redis-AOF-日志&quot; class=&quot;headerlink&quot; title=&quot;Redis AOF 日志&quot;&gt;&lt;/a&gt;Redis AOF 日志&lt;/h1&gt;&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; cla
      
    
    </summary>
    
    
      <category term="数据存储" scheme="https://www.llchen60.com/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>使用AWS EC2搭建Halo博客</title>
    <link href="https://www.llchen60.com/%E4%BD%BF%E7%94%A8AWS-EC2%E6%90%AD%E5%BB%BAHalo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.llchen60.com/%E4%BD%BF%E7%94%A8AWS-EC2%E6%90%AD%E5%BB%BAHalo%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-12-26T17:45:40.000Z</published>
    <updated>2020-12-28T18:54:52.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-EC2-设置"><a href="#1-EC2-设置" class="headerlink" title="1. EC2 设置"></a>1. EC2 设置</h1><p>在完成了AWS注册之后，登录后台，在EC2的看板左侧点击Instances，选择Launch Instances，这时候会带你进入到选择AMI的界面，按照Halo的推荐是选择CentOS比较合适，不过亲测了下RHEL，CentOS都没有什么问题，按照自己的需要 (如果新账号的话，会有eligible free tier)，可以免费使用一年，使用其即可。</p><p>对于运行的EC2实例，我们还需要对VPC, Security Group. Elastic IP做配置，目的是为了能够在VPC之外(公网)能够访问HTTP, HTTPS端口，一般来说就是80,还有443. 这里的整个过程(troubleshooting)可以根据这篇官方博客来做。</p><p><a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/ec2-connect-internet-gateway/" target="_blank" rel="noopener">排查 EC2 实例的互联网网关连接问题</a></p><h1 id="2-Halo基本设置"><a href="#2-Halo基本设置" class="headerlink" title="2. Halo基本设置"></a>2. Halo基本设置</h1><p>在根据第一部分的说明设置好服务器之后，我们可以ssh上服务器，然后开始做Halo的基本设置</p><p>详情可以看Halo安装的官方教程 — <a href="https://halo.run/archives/install-with-linux.html" target="_blank" rel="noopener">在Linux服务器部署Hal</a>o</p><ul><li>几个值得注意的地方<ul><li>JVM启动内存的分配</li><li>halo版本的更新</li><li>端口的设置</li></ul></li></ul><h1 id="3-反向代理"><a href="#3-反向代理" class="headerlink" title="3. 反向代理"></a>3. 反向代理</h1><p>使用Catty或者Nginx来做反向代理，完成https证书的申请，在你自己域名的服务商下设置dns，开始访问你自己的博客。</p><p>Halo域名的配置与访问</p><h1 id="4-Troubleshooting"><a href="#4-Troubleshooting" class="headerlink" title="4. Troubleshooting"></a>4. Troubleshooting</h1><ol><li>服务器上启动了服务，port开了但是Public Ip还是无法访问到</li></ol><p>这的错误很可能不在开启的服务(halo) 方面，而在于EC2防火墙 VPC等的配置，检查下端口是否都正常开启，根据第一部分的排查EC2互联网网关连接问题的文章一步步排查，基本上可以解决。</p><ol start="2"><li>在服务器上查看开启的端口，发现服务只开在IPV6上而没有在IPV4上开启</li></ol><p>发现这个问题是发现在使用telnet -tlnp 指令的时候，发现Halo的进程确实开启了，但是是监听在tcp6 下，在Ipv4下没有端口监听。查询资料发现Java 网络模块现在是默认先检察当前操作系统是否支持IPv6， 如果支持，就会直接使用IPv6， 否则才会使用ipv4. <a href="https://stackoverflow.com/questions/44718174/spring-boot-application-listens-over-ipv6-without-djava-net-preferipv4stack-tru" target="_blank" rel="noopener">StackOverflow 上的问答</a> 如果想要设置先监听ipv4的话，我们可以在指令上加上</p><pre><code class="jsx">-Djava.net.preferIPv4Stack=true-Djava.net.preferIPv4Addresses// 整个语句如下所示 (是在/etc/systemd/system/halo.service这个文件里做配置) ExecStart=/usr/bin/java -server -Xms256m -Xmx256m -jar YOUR_JAR_PATH -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses</code></pre><p><a href="https://aws.amazon.com/premiumsupport/knowledge-center/connect-http-https-ec2/" target="_blank" rel="noopener">Connect to an Amazon EC2 instance on HTTP or HTTPS ports</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-EC2-设置&quot;&gt;&lt;a href=&quot;#1-EC2-设置&quot; class=&quot;headerlink&quot; title=&quot;1. EC2 设置&quot;&gt;&lt;/a&gt;1. EC2 设置&lt;/h1&gt;&lt;p&gt;在完成了AWS注册之后，登录后台，在EC2的看板左侧点击Instances，选择Laun
      
    
    </summary>
    
    
      <category term="Web" scheme="https://www.llchen60.com/categories/Web/"/>
    
    
      <category term="AWS" scheme="https://www.llchen60.com/tags/AWS/"/>
    
      <category term="EC2" scheme="https://www.llchen60.com/tags/EC2/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="https://www.llchen60.com/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>https://www.llchen60.com/Redis%E5%9F%BA%E7%A1%80/</id>
    <published>2020-12-20T19:39:32.000Z</published>
    <updated>2021-01-02T23:07:46.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><ul><li><p>为什么需要Redis</p><ul><li>key value内存数据库</li><li>支持丰富的数据结构，</li><li>性能非常高，可以支持很高的TPS</li></ul></li><li><p>在使用Redis过程中可能遇到的一些问题</p><ul><li>CPU使用方面的问题<ul><li>数据结构的复杂度</li><li>跨CPU核的访问</li></ul></li><li>内存使用方面<ul><li>主从同步和AOF的内存竞争</li></ul></li><li>存储持久化方面<ul><li>SSD上做快照的性能抖动</li></ul></li><li>网络通信方面<ul><li>多实例时的异常网络丢包</li></ul></li></ul></li><li><p>如何进行学习 — 需要系统化</p><ul><li><p>从应用维度和系统维度进行研究</p></li><li><p>分别看其在以下三个方面的表现</p><ul><li><p>高性能</p><ul><li>线程模型</li><li>数据结构</li><li>持久化</li><li>网络框架</li></ul></li><li><p>高可靠</p><ul><li>主从复制</li><li>哨兵机制</li></ul></li><li><p>高可扩展性</p><ul><li><p>数据分片</p></li><li><p>负载均衡</p><p>  <img src="https://i.loli.net/2020/12/20/vKdkl934yUw7pOe.png" alt="Redis框架"></p></li></ul></li></ul></li></ul></li></ul><h1 id="2-Redis数据结构"><a href="#2-Redis数据结构" class="headerlink" title="2. Redis数据结构"></a>2. Redis数据结构</h1><h2 id="2-1-如何构建一个键值数据库"><a href="#2-1-如何构建一个键值数据库" class="headerlink" title="2.1 如何构建一个键值数据库"></a>2.1 如何构建一个键值数据库</h2><ul><li>目标<ul><li>创建一个叫做SimpleKV的数据库</li></ul></li><li>几个需要思考的问题<ul><li>问题<ul><li>里面会存什么样的数据 (数据模型)</li><li>需要对数据做什么样的操作 (操作接口)</li></ul></li><li>为什么需要思考这种问题？<ul><li>这影响到你认为这个数据库到底能做什么</li><li>譬如如果支持集合，那么对于存储用户信息的一个关系型数据库，我们也可以将用户Id作为Key，剩余信息作为一个集合存储到我们的键值数据库当中</li><li>接口的定义确定了我们希望使用这个数据库做什么，是简单的get, put操作，还是说相对复杂的聚合型的操作</li></ul></li></ul></li></ul><hr><h3 id="2-1-1-可以存哪些数据？"><a href="#2-1-1-可以存哪些数据？" class="headerlink" title="2.1.1 可以存哪些数据？"></a>2.1.1 可以存哪些数据？</h3><ul><li>基本数据类型 Key - Value</li><li>希望Value能够支持复杂类型<ul><li>memcache只支持String</li><li>Redis支持String, HashMap, 列表，集合等<ul><li>值得注意的点是不同的数据结构在实际使用的时候会有在性能，空间效率等方面的差异，从而导致不同的value操作之间也会存在差异</li></ul></li></ul></li></ul><h3 id="2-1-2-可以对数据做什么操作？"><a href="#2-1-2-可以对数据做什么操作？" class="headerlink" title="2.1.2 可以对数据做什么操作？"></a>2.1.2 可以对数据做什么操作？</h3><ul><li>PUT/ SET<ul><li>新写入或者更新一个KV对</li></ul></li><li>GET<ul><li>根据KEY读取相应的VALUE值</li></ul></li><li>DELETE<ul><li>根据KEY删除整个KV对</li></ul></li><li>SCAN<ul><li>根据一段Key的范围返回相应的value值</li></ul></li><li>Tips<ul><li>当一个键值数据库的value类型多样的时候，也需要包含相应的操作接口的</li></ul></li></ul><h3 id="2-1-3-数据库存储位置"><a href="#2-1-3-数据库存储位置" class="headerlink" title="2.1.3 数据库存储位置"></a>2.1.3 数据库存储位置</h3><ul><li>可选方案<ul><li>内存<ul><li>读写非常快</li><li>访问速度在百ns级别</li><li>潜在风险是一旦断电，所有的数据都会丢失</li></ul></li><li>外存<ul><li>可以避免数据的丢失，但是受限于磁盘的慢速读写（几个ms）键值数据库的整体性能会被拉低</li></ul></li></ul></li><li>考量的因素<ul><li>主要应用场景<ul><li>缓存场景<ul><li>需要能够快速访问但允许丢失 — 可以采用内存保存键值数据</li><li>memcache 和Redis都属于内存键值数据库</li></ul></li></ul></li></ul></li></ul><h3 id="2-1-4-数据库基本组件"><a href="#2-1-4-数据库基本组件" class="headerlink" title="2.1.4 数据库基本组件"></a>2.1.4 数据库基本组件</h3><ul><li>一个基本的内部结构需要包括<ul><li>访问框架<ul><li>动态库访问</li><li>网络访问框架</li></ul></li><li>操作模块<ul><li>上述的一系列操作 DELETE/PUT/SCAN etc</li></ul></li><li>索引模块</li><li>存储模块</li></ul></li></ul><p><img src="https://i.loli.net/2020/12/20/ILR4uFc73ZVmevP.png" alt="SimpleKV 内部架构"></p><ul><li><p>采用什么访问模式？</p><ul><li>通过函数库调用的方式供外部应用使用<ul><li>比如图片当中的<code>libsimplekv.so</code> 就是通过动态链接库的形式链接到我们的程序当中，来提供键值存储功能</li></ul></li><li>通过网络框架以Socket通信的形式对外提供键值对操作<ul><li>系统设计上的问题 — 单线程，多线程还是多个进程来进行交互？<strong>IO模型的选择</strong><ul><li>网络连接的处理</li><li>网络请求的解析</li><li>数据存取的处理</li></ul></li></ul></li></ul></li><li><p>如何定位键值对的位置？</p><ul><li>需要依赖于键值数据库的索引模块<ul><li>让键值数据库能够根据key找到相应value的存储位置，进而执行操作<ul><li>索引类型<ul><li>哈希表</li><li>B+树</li><li>字典树</li></ul></li><li>Redis选用的是哈希表，是因为保存在内存中，内存的高性能随机访问特性可以很好地与哈希表O(1)的操作复杂度匹配<ul><li>关于Redis值得注意的是它的value支持多种类型，当我们通过索引找到一个key对应的value后，仍然需要从value的复杂结构中进一步找到我们实际需要的数据</li><li>Redis采用一些高效索引结构作为某些value类型的底层数据结构，可以为Redis实现高性能访问提供良好的支撑</li></ul></li></ul></li></ul></li></ul></li><li><p>不同操作的具体逻辑是？</p><ul><li>对于GET/SCAN 操作而言，根据value的存储位置返回value的值即可</li><li>对于PUT操作，需要为新的键值对分配内存空间</li><li>对于DELETE操作，需要删除键值对，并释放相应的内存空间，这个过程由分配器完成</li></ul></li><li><p>如何实现重启后快速提供服务？</p><ul><li>采用内存分配器glibc的malloc和free<ul><li>但是键值对因为通常大小不一，glibc分配器在处理随机大小的内存块分配时表现会不太好。一旦保存的键值对数据规模过大，就可能造成较为严重的内存碎片的问题</li></ul></li><li>持久化功能<ul><li>采用文件形式，将键值数据通过调用本地文件系统的操作接口保存在磁盘上<ul><li>需要考虑什么时候，什么间隔来做从内存到文件的键值数据的保存工作</li></ul></li><li>也可以每一个键值对都进行持久化<ul><li>坏处是因为每次都要写到磁盘里面，性能会受到很大影响</li></ul></li><li>可以周期性的将内存中的键值数据保存到文件当中，这样就可以避免频繁写盘操作的性能影响<ul><li>潜在的风险就是数据仍然有可能丢失</li></ul></li></ul></li></ul></li></ul><p><img src="https://i.loli.net/2020/12/20/52Hgk6apwXFtzSU.png" alt="SimpleKV vs Redis"></p><ul><li>SimpleKV和Redis的对比<ul><li>Redis通过网络访问，可以作为一个基础性的网络服务来进行访问</li><li>value类型丰富，就带来了更多的操作接口<ul><li>面向列表的LPush/ LPop</li><li>面向集合的SADD</li></ul></li><li>Redis持久化模块支持日志(AOF)和快照(RDB)两种模式</li><li>Redis支持高可靠集群和高可扩展集群</li></ul></li></ul><h2 id="2-2-Redis的慢操作们"><a href="#2-2-Redis的慢操作们" class="headerlink" title="2.2 Redis的慢操作们"></a>2.2 Redis的慢操作们</h2><ul><li>Redis的快<ul><li>Redis在接收到一个键值对操作后，能够以微秒级别的速度找到数据，并且快速完成操作</li><li>快速的原因<ul><li>内存数据库<ul><li>所有操作都在内存上完成</li><li>内存本身访问速度非常快</li></ul></li><li>数据结构<ul><li>键值对是按照一定的数据结构来组织的</li><li>这是Redis实现高速的基础</li></ul></li></ul></li></ul></li></ul><h3 id="2-2-1-Redis数据类型和底层数据结构"><a href="#2-2-1-Redis数据类型和底层数据结构" class="headerlink" title="2.2.1 Redis数据类型和底层数据结构"></a>2.2.1 Redis数据类型和底层数据结构</h3><ul><li>Redis 键值对中值的数据类型以及对应的底层实现<ul><li>String<ul><li>简单动态字符串</li></ul></li><li>List<ul><li>双向链表</li><li>压缩列表</li></ul></li><li>Hash<ul><li>压缩列表</li><li>哈希表</li></ul></li><li>Set<ul><li>整数数组</li><li>压缩列表</li></ul></li><li>Sorted Set<ul><li>压缩列表</li><li>跳表</li></ul></li></ul></li></ul><h3 id="2-2-2-键和值用什么结构来组织？"><a href="#2-2-2-键和值用什么结构来组织？" class="headerlink" title="2.2.2 键和值用什么结构来组织？"></a>2.2.2 键和值用什么结构来组织？</h3><ul><li>使用一个哈希表来保存所有的键值对</li><li>一个哈希表即为一个数组</li><li>数组的每个元素称为一个哈希桶</li><li>每个哈希桶中保存了键值对的数据</li><li>哈希桶中的元素保存的并不是值本身，而是指向具体值的指针</li><li>哈希表的好处是我们可以用O(1)的时间复杂度来快速查找键值对<ul><li>只需要计算键的哈希值，就可以知道它所对应的哈希桶的位置，然后就可以访问相应的entry原色</li><li>而且查找过程主要依赖于哈希计算，和数据量的多少并没有直接关系</li></ul></li></ul><h3 id="2-2-3-哈希表操作会变慢？"><a href="#2-2-3-哈希表操作会变慢？" class="headerlink" title="2.2.3 哈希表操作会变慢？"></a>2.2.3 哈希表操作会变慢？</h3><ul><li><p>因为哈希表的冲突问题和rehash可能带来的操作阻塞</p></li><li><p>哈希冲突在写入了大量数据之后，是不可避免的</p><ul><li>两个key的哈希值和哈希桶计算对应关系的时候，正好落到了同一个哈希桶当中</li></ul></li><li><p>Redis的解决方案</p><ul><li><p>链式哈希</p><ul><li><p>同一个哈希桶的多个元素用一个链表来保存，它们之间依次使用指针连接</p><p>  <img src="https://i.loli.net/2020/12/20/vWzTF9AUehcsyiQ.png" alt="哈希冲突的解决"></p></li><li><p>存在的问题</p><ul><li>哈希冲突链上的元素只能通过指针逐一查找再操作</li><li>如果冲突链太长，会导致这个链上的元素查找耗时变长，效率降低</li></ul></li><li><p>解决方案</p><ul><li>对哈希表做rehash操作<ul><li>增加现有的哈希桶数量</li><li>让逐渐增多的entry元素能在更多的桶之间分散保存</li><li>减少单个桶的元素数量</li><li>从而减少单个桶中的冲突</li></ul></li></ul></li><li><p>解决方案的具体实施</p><ul><li><p>Redis默认使用两个全局哈希表(原理)</p><ul><li>刚插入数据的时候，默认使用哈希表1</li><li>随着数据增多，触发并开始执行rehash<ul><li>给哈希表2分配更大的空间，一般为当前哈希表1的两倍大小</li><li>将哈希表1中的数据重新映射并拷贝到哈希表2当中</li><li>释放哈希表1的空间</li></ul></li></ul></li><li><p>渐进式rehash</p><ul><li><p>原因</p><ul><li>上述的表之间数据的重新映射会涉及到大量的数据拷贝</li><li>一次性将哈希表1中的数据都迁移完，会造成Redis线程阻塞，无法服务其他请求</li></ul></li><li><p>具体方式 — 渐进式rehash</p><ul><li><p>在进行拷贝数据的时候，仍然正常处理客户端请求</p></li><li><p>每处理一个请求，就从哈希表1中的第一个索引位置开始，将这个索引位置上的所有entries拷贝到哈希表2当中</p></li><li><p>同理，处理下一个请求的时候，再顺带着拷贝哈希表1中的下一个索引位置的entries</p></li><li><p>渐进式哈希</p><p><img src="https://i.loli.net/2020/12/20/UYCiuyTthdRDOVB.png" alt="渐进式哈希"></p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="2-2-4-集合数据的操作效率"><a href="#2-2-4-集合数据的操作效率" class="headerlink" title="2.2.4 集合数据的操作效率"></a>2.2.4 集合数据的操作效率</h3><ul><li><p>和String类型不同，一个集合类型的值，第一步是通过全局哈希表找到对应的哈希桶位置，第二步是在集合当中再做增删改查</p></li><li><p>底层数据结构的分析</p><ul><li><p>哈希表</p></li><li><p>整数数组</p><ul><li>插入删除效率比较低 O(N)</li><li>访问效率高 O(1)</li></ul></li><li><p>双向链表</p><ul><li>插入删除O(1)</li><li>访问O(N)</li></ul></li><li><p>压缩列表</p><ul><li>类似一个数组<ul><li>每一个元素保存一个数据</li><li>表头有三个字段<ul><li>zlbytes<ul><li>列表长度</li></ul></li><li>zltail<ul><li>列表尾的偏移量</li></ul></li><li>zllen<ul><li>列表中entry的个数</li></ul></li></ul></li><li>表尾<ul><li>zlend<ul><li>表示列表的结束</li></ul></li></ul></li></ul></li></ul></li><li><p>跳表</p><ul><li><p>在链表上加多级索引来加快查询速度</p><p>  <img src="https://i.loli.net/2020/12/20/gziY58rpVRQUZnw.png" alt="跳表"></p></li><li></li></ul></li></ul></li></ul><h1 id="3-Redis的IO模型"><a href="#3-Redis的IO模型" class="headerlink" title="3. Redis的IO模型"></a>3. Redis的IO模型</h1><p><strong>为什么单线程的Redis那么快？</strong></p><p>这里的单线程主要指Redis的网络IO和键值对读写是由一个线程来完成的，而Redis的其他功能，比如持久化，异步删除，集群数据同步等，是由额外的线程执行的。</p><h2 id="3-1-为什么要使用单线程？"><a href="#3-1-为什么要使用单线程？" class="headerlink" title="3.1 为什么要使用单线程？"></a>3.1 为什么要使用单线程？</h2><ul><li><p>使用多线程的开销</p><ul><li><p>使用多线程，一定程度上可以增加系统的吞吐率/ 拓展性</p></li><li><p>但是值得注意的是多线程本身有开销，并不是线程增多吞吐率会线性增长的。达到了某个线程数之后，系统吞吐率的增长就会开始迟缓了，有时甚至会出现下降的情况</p><p><img src="https://i.loli.net/2020/12/24/UNVLxyIRokWmjTQ.png" alt="吞吐率随着线程数增长的变化"></p></li><li><p>出现这种情况的原因在于</p><ul><li>系统中通常会存在被多线程同时访问的共享资源 — 比如一个共享的数据结构</li><li>当有多个线程要修改这个共享资源的时候，为了保证共享资源的正确性，就需要有额外的机制进行保证。这会带来额外的开销</li></ul></li></ul></li><li><p>Redis采用多线程就是希望能够避免这种共享资源，放锁的情况</p><ul><li>而且CPU往往不是Redis的瓶颈，瓶颈很可能是机器内存或者网络带宽</li></ul></li></ul><h2 id="3-2-单线程Redis快的原因"><a href="#3-2-单线程Redis快的原因" class="headerlink" title="3.2 单线程Redis快的原因"></a>3.2 单线程Redis快的原因</h2><h3 id="3-2-1-基本IO模型和阻塞点"><a href="#3-2-1-基本IO模型和阻塞点" class="headerlink" title="3.2.1 基本IO模型和阻塞点"></a>3.2.1 基本IO模型和阻塞点</h3><p>以前面的SimpleKV为例，为了处理一个Get请求，数据库需要：</p><ol><li>监听客户端请求(bind/ listen) </li><li>和客户端建立连接 (accept)</li><li>从socket中读取请求(recv)</li><li>解析客户端发送请求(parse)</li><li>根据请求类型读取键值数据(get)</li><li>从客户端返回结果，即向socket中写回数据(send)</li></ol><p><img src="https://i.loli.net/2020/12/24/1pFsDaMO452fGkQ.png" alt="Get请求处理示意图"></p><p>在上述的整个过程当中，如果Redis监听到客户端请求，但没有成功建立连接的时候，会阻塞在accept函数上，导致其他的客户端无法建立连接。这种基本IO模型效率会非常低，因为是阻塞式的，任何一个请求出现了任何一个问题，都会导致其他的请求无法成功完成。</p><h3 id="3-2-2-非阻塞模式"><a href="#3-2-2-非阻塞模式" class="headerlink" title="3.2.2 非阻塞模式"></a>3.2.2 非阻塞模式</h3><p>Socket网络模型的非阻塞模式体现在不同操作调用后会返回不同的套接字类型。socket() 方法会返回主动套接字，然后调用 listen() 方法，将主动套接字转化为监听套接字，此时，可以监听来自客户端的连接请求。最后，调用 accept() 方法接收到达的客户端连接，并返回已连接套接字。</p><p>这样子可以实现非阻塞，值得注意的是我们需要一些机制来监听套接字，有数据到达的时候再通知数据库线程</p><h3 id="3-2-3-基于多路复用的高性能I-O模型"><a href="#3-2-3-基于多路复用的高性能I-O模型" class="headerlink" title="3.2.3 基于多路复用的高性能I/O模型"></a>3.2.3 基于多路复用的高性能I/O模型</h3><ul><li><p>为什么使用I/O多路复用这种技术</p><ul><li>解决单线程下阻塞操作的问题</li></ul></li><li><p>如何实现的</p><ul><li><p>select epoll方法同时监控多个文件描述符FD的读写情况，当某些FD可读/ 可写的时候，该方法就会返回可读/ 写的FD个数</p><ul><li><p>将用户Socket对应的FD注册进epoll，然后epoll告诉那些需要进行读写操作的socket，只处理那些活跃的，有变化的socket FD</p><p><a href="https://cloud.tencent.com/developer/article/1639569" target="_blank" rel="noopener">IO多路复用：Redis中经典的Reactor设计模式</a></p></li></ul></li></ul></li></ul><p><a href="https://draveness.me/redis-io-multiplexing/" target="_blank" rel="noopener">https://draveness.me/redis-io-multiplexing/</a>  </p><p><a href="https://cloud.tencent.com/developer/article/1639569" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1639569</a></p><p><a href="https://blog.csdn.net/u014590757/article/details/79860766" target="_blank" rel="noopener">https://blog.csdn.net/u014590757/article/details/79860766</a></p><ul><li><p>一个线程处理多个IO流 — select / epoll机制</p><p>  <img src="https://i.loli.net/2020/12/24/QUKfj9ExTgy4tMN.png" alt="epoll机制"></p><ul><li><p>允许内核中，同时存在多个监听套接字和已连接套接字</p></li><li><p>内核会一直监听这些套接字上的连接请求或数据请求</p></li><li><p>一旦有请求到达，就会交给Redis线程处理</p><p><img src="https://i.loli.net/2020/12/24/4Cp7TQMZ3csAUIm.png" alt="多路复用全程"></p></li></ul></li><li><p>select/ epoll 一旦检测到FD上有请求到达，就会触发相应的事件</p><ul><li>事件会被放到一个事件队列，Redis单线程对该事件队列不断进行处理</li></ul></li></ul><h2 id="3-3-单线程处理的性能瓶颈"><a href="#3-3-单线程处理的性能瓶颈" class="headerlink" title="3.3 单线程处理的性能瓶颈"></a>3.3 单线程处理的性能瓶颈</h2><p>1、任意一个请求在server中一旦发生耗时，都会影响整个server的性能，也就是说后面的请求都要等前面这个耗时请求处理完成，自己才能被处理到。耗时的操作包括以下几种：</p><p>a、操作bigkey：写入一个bigkey在分配内存时需要消耗更多的时间，同样，删除bigkey释放内存同样会产生耗时；</p><p>b、使用复杂度过高的命令：例如SORT/SUNION/ZUNIONSTORE，或者O(N)命令，但是N很大，例如lrange key 0 -1一次查询全量数据；</p><p>c、大量key集中过期：Redis的过期机制也是在主线程中执行的，大量key集中过期会导致处理一个请求时，耗时都在删除过期key，耗时变长；</p><p>d、淘汰策略：淘汰策略也是在主线程执行的，当内存超过Redis内存上限后，每次写入都需要淘汰一些key，也会造成耗时变长；</p><p>e、AOF刷盘开启always机制：每次写入都需要把这个操作刷到磁盘，写磁盘的速度远比写内存慢，会拖慢Redis的性能；</p><p>f、主从全量同步生成RDB：虽然采用fork子进程生成数据快照，但fork这一瞬间也是会阻塞整个线程的，实例越大，阻塞时间越久；</p><p>2、并发量非常大时，单线程读写客户端IO数据存在性能瓶颈，虽然采用IO多路复用机制，但是读写客户端数据依旧是同步IO，只能单线程依次读取客户端的数据，无法利用到CPU多核。</p><p>针对问题1，一方面需要业务人员去规避，一方面Redis在4.0推出了lazy-free机制，把bigkey释放内存的耗时操作放在了异步线程中执行，降低对主线程的影响。</p><p>针对问题2，Redis在6.0推出了多线程，可以在高并发场景下利用CPU多核多线程读写客户端数据，进一步提升server性能，当然，只是针对客户端的读写是并行的，每个命令的真正操作依旧是单线程的。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.usenix.org/conference/atc17/technical-sessions/presentation/xia" target="_blank" rel="noopener">HiKV: A Hybrid Index Key-Value Store for DRAM-NVM Memory Systems</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis基础&quot;&gt;&lt;a href=&quot;#Redis基础&quot; class=&quot;headerlink&quot; title=&quot;Redis基础&quot;&gt;&lt;/a&gt;Redis基础&lt;/h1&gt;&lt;h1 id=&quot;1-Overview&quot;&gt;&lt;a href=&quot;#1-Overview&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="数据存储" scheme="https://www.llchen60.com/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>API Rate Limiter Design</title>
    <link href="https://www.llchen60.com/API-Rate-Limiter-Design/"/>
    <id>https://www.llchen60.com/API-Rate-Limiter-Design/</id>
    <published>2020-12-07T21:35:04.000Z</published>
    <updated>2020-12-07T21:35:30.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><ul><li><p>What is a rate limiter? </p><ul><li>due to limited resources, also get rid of some abusive action, we need some kind of throttling or rate limiting mechanism thus only a certain number of requests will go to our service, and we are able to respond all of them </li><li>a rate limiter limits the number of events an entity can perform in a particular time window, then block requests once the cap is reached </li></ul></li><li><p>why we need to do rate limiting? </p><ul><li><p>Protect services against abusive behaviors targeting the application layer like </p><ul><li>DOS attacks </li><li>Brute Force credit card transactions </li></ul></li><li><p>why we need such protection?</p><ul><li>these attacks are a barrage of HTTP/S requests which may look like they are coming from real users, but are actually generated by machines </li><li>thus such attachs are harder to detect and can more easily bring down a service, application or an API </li></ul></li><li><p>could make a service and APIs more reliable</p><ul><li><p>misbehaving clients/ scripts </p></li><li><p>security </p><ul><li>second factor attempts </li></ul></li><li><p>prevent abusive behavior and bad design practices </p></li><li><p>keep costs and resource usage under control </p></li><li><p>revenue </p><ul><li>revenue model based on rate limiting </li></ul></li><li><p>eliminate spikiness in traffic </p></li></ul></li></ul></li></ul><h1 id="2-Requirement-and-Goal"><a href="#2-Requirement-and-Goal" class="headerlink" title="2. Requirement and Goal"></a>2. Requirement and Goal</h1><ul><li>functional <ul><li>limit the number of requests an entity can send to an API within a time window </li><li>APIs are accessible through a cluster, so the rate limit should be considered across different servers <ul><li>users should get an error message whenever the defined threshold is crossed within a single server or across a combination of servers </li></ul></li></ul></li></ul><h1 id="3-Thoughts"><a href="#3-Thoughts" class="headerlink" title="3. Thoughts"></a>3. Thoughts</h1><ul><li><p>table to store the request information, </p><ul><li><p>every entry will look like </p><ul><li>userId</li><li>api name </li><li>accessTime</li><li>api parameters</li></ul></li><li><p>and then we could query and sort by the accesstime to get related info </p></li></ul></li><li><p>there should have a caching layer to store the related info, most important one is for a specific user and specific api, based on the throttle limit(suppose n), what’s the time when they made the recent nth request, thus we could take a notes on this info </p></li></ul><h1 id="4-Design"><a href="#4-Design" class="headerlink" title="4. Design"></a>4. Design</h1><h2 id="4-1-High-Level"><a href="#4-1-High-Level" class="headerlink" title="4.1 High Level"></a>4.1 High Level</h2><ul><li>Clients make call to our web server </li><li>when request come, first sync with rate limiter server to decide if it will be served or throttled</li><li>web server then sync with API servers if rate limiter says it should not be blocked </li></ul><h2 id="4-2-Basic-System-Design-and-Algo"><a href="#4-2-Basic-System-Design-and-Algo" class="headerlink" title="4.2 Basic System Design and Algo"></a>4.2 Basic System Design and Algo</h2><ul><li><p>target </p><ul><li>limit the number of requests per user <ul><li>keep a count representing how many requestss the user has made </li><li>a timestamp when we started counting the requests </li></ul></li></ul></li><li><p>use a hashtable to store the info</p><ul><li>key - userId</li><li>value - count + startTime <ul><li>count would be enough if we don’t need detail about the metrics or we say there are some other stuff controlling it </li><li>so based on the count and requirement, we could either increase the count, reset the count, or reset the start time. </li></ul></li><li>one issue for only store the starttime is it’s possible to allow twice the configured number during a period. End of the previous window, with full capacity; and start at the next window, with full capacity. </li></ul></li></ul><ul><li>then we need to store timestamp of each request thus we could keep a sliding window <ul><li>use redis sorted set </li><li>steps when new request comes in<ul><li>remove all timestamps from the sorted set that are older than currentTime - 1 min (suppose that’s the configured window)</li><li>count the total number of elements in the sorted set </li><li>reject the request if count is greater than throttling limit </li><li>insert the current time in the sorted set and accept the reuqest </li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Overview&quot;&gt;&lt;a href=&quot;#1-Overview&quot; class=&quot;headerlink&quot; title=&quot;1. Overview&quot;&gt;&lt;/a&gt;1. Overview&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is a rate limiter? &lt;/p
      
    
    </summary>
    
    
      <category term="SystemDesign" scheme="https://www.llchen60.com/categories/SystemDesign/"/>
    
    
      <category term="rate limiter" scheme="https://www.llchen60.com/tags/rate-limiter/"/>
    
  </entry>
  
  <entry>
    <title>Dropbox Design Scratch</title>
    <link href="https://www.llchen60.com/Dropbox-Design-Scratch/"/>
    <id>https://www.llchen60.com/Dropbox-Design-Scratch/</id>
    <published>2020-12-01T02:54:17.000Z</published>
    <updated>2020-12-01T02:54:37.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Intro-and-requirement"><a href="#1-Intro-and-requirement" class="headerlink" title="1. Intro and requirement"></a>1. Intro and requirement</h1><ul><li><p>cloud file storage services </p><ul><li>simplify the storage and exchange of digital resources among multiple devices </li><li>benefits <ul><li>availability </li><li>reliability and durability </li><li>scalability </li></ul></li></ul></li><li><p>requirements and goals </p><ul><li>users should be able to upload and download their files/ photos from any device </li><li>users should be able to share files or folders with other users </li><li>service should support automatic synchronization between devices </li><li>support storing large files </li><li>ACID support </li><li>Offline editing, CURD offline, and get synced when online </li><li>snapshotting of the data </li></ul></li></ul><h1 id="2-Thoughts"><a href="#2-Thoughts" class="headerlink" title="2. Thoughts"></a>2. Thoughts</h1><ul><li><p>size, limit , pattern </p><ul><li>read heavy </li><li>write huge file </li></ul></li><li><p>synchronize among different devices</p><ul><li>all devices make call to backend to grab newest status </li></ul></li><li><p>file/ folder share </p><ul><li>permission management </li></ul></li><li><p>Offline editing </p><ul><li>Use queue to store the data locally? </li></ul></li></ul><h1 id="3-Design"><a href="#3-Design" class="headerlink" title="3. Design"></a>3. Design</h1><h2 id="3-1-considerations"><a href="#3-1-considerations" class="headerlink" title="3.1  considerations"></a>3.1  considerations</h2><pre><code>+ huge read and write volumes    + read write almost equal + files can be stored in &lt;u&gt;**small parts or chunks (4MB)**&lt;/u&gt;, when fails, only the failed chunk should be retried + reduce the amount of data exchange by transfering updated chunks only + keep a local copy of metadata (file name, size, etc.) with the client can save us a lot of round trips to the server </code></pre><ul><li>high level design <ul><li>need to store files and metadata information like File name, file size, directory, who this file is shared with </li><li>need some servers that can help the clients to upload/ download files to cloud storage and some servers that can facilitate updating metadata about files and users</li><li>need some mechanism to notify all clients whenever an updates happens so they can synchronize their files </li></ul></li></ul><h2 id="3-2-high-level-design"><a href="#3-2-high-level-design" class="headerlink" title="3.2 high level design"></a>3.2 high level design</h2><pre><code>+ user specify folder as the workspace on the device     + file in the folder will be uploaded to the cloud     + updater/ delete will be reflected in the same way + modification on one device should be freely synced across others + systems we need based on requirements     + a storage server to store all real files     + a metadata service store file metadata, thus we could quickly get info about it     + a synchronizer service, to notify all clients whenever an update happens so they can synchronize files </code></pre><h2 id="3-3-Component-Design"><a href="#3-3-Component-Design" class="headerlink" title="3.3 Component Design"></a>3.3 Component Design</h2><h3 id="3-3-1-Client"><a href="#3-3-1-Client" class="headerlink" title="3.3.1 Client"></a>3.3.1 Client</h3><ul><li><p>responsibility </p><ul><li>need to monitor the workspace folder on user’s machine </li><li>sync files/ folders with remote cloud storage </li><li>interact with the remote synchronization service to handle file metadata updates </li></ul></li><li><p>how to handle file transfer efficiently</p><ul><li><p>break each file into smaller chunks so that we transfer only those chunks that are modified and not the whole file </p></li><li><p>calculate chunk size based on:</p><ul><li>storage devices we use in the cloud </li><li>network bandwidth </li><li>average file size in the storage </li></ul></li><li><p>need to keep a record of each file and the chunks in metadata </p></li></ul></li><li><p>shall we keep a copy of metadata with client? </p><ul><li>yes, it then allows us to do offline updates </li></ul></li><li><p>how can clients efficiently listen to changes happening with other clients? </p><ul><li><p>Solution 1</p><ul><li>clients periodically check with the server if there are any changes </li><li>issues <ul><li>have a delay in reflecting changes locally as clients will be checking for changes periodically compared to server notifying whever there is some change </li></ul></li></ul></li><li><p>Solution 2</p><ul><li>HTTP long polling </li><li>client requests information from the server with the expectation that the server may not respond immediately </li><li>servers hold the request open and waits for response information to become available </li></ul></li></ul></li><li><p>components </p><ul><li><p>inernal metadata db </p><ul><li>keep track of all the files, chunks, versions and location </li></ul></li><li><p>chunker </p><ul><li>split files into smaller pieces </li><li>reconstruct a file from its chunks </li></ul></li><li><p>watcher </p><ul><li>monitor the local workspace folders and notify the indexer of any action performed by the users </li></ul></li><li><p>indexer </p><ul><li>process the events received from the watcher and update the internal metadata database with information about the chunks of the modified files </li><li>once confirm chunks are successfully uploaded to the cloud storage, the indexer will communicate with the remote synchronization service to broadcast changes to other clients and update remote metadata database </li></ul></li></ul></li><li><p>for phone users, probably should sync on demand to save bandwidth and capacity </p></li></ul><h3 id="3-3-2-Metadata-Database"><a href="#3-3-2-Metadata-Database" class="headerlink" title="3.3.2 Metadata Database"></a>3.3.2 Metadata Database</h3><ul><li>responsible for maintaing the versioning and metadata information about files/ chunks, users and workspaces </li><li>store info like <ul><li>chunks </li><li>files </li><li>users</li><li>devices</li><li>workspace </li></ul></li></ul><h3 id="3-3-3-Synchronization-Service"><a href="#3-3-3-Synchronization-Service" class="headerlink" title="3.3.3 Synchronization Service"></a>3.3.3 Synchronization Service</h3><ul><li><p>component that processes file updates made by a client and apply these changes to other subscribed clients </p></li><li><p>also synchronizes clients local databases with the information stored in the remote metadata db </p></li><li><p>Implement a differenciation algo to reduce the amount of the data that needs to be synchronized </p><ul><li>just transmit the difference between two versions instead of the whole file </li></ul></li><li><p>to support a scalable synchronization protocol</p><ul><li>use a communication middleware </li><li>messaging system <ul><li>push or pull strategies </li></ul></li></ul></li></ul><h3 id="3-3-4-Message-Queuing-Service"><a href="#3-3-4-Message-Queuing-Service" class="headerlink" title="3.3.4 Message Queuing Service"></a>3.3.4 Message Queuing Service</h3><ul><li>Message queue service <ul><li>supports asynchronous message based communication between clients and the synchronization service </li></ul></li></ul><h3 id="3-3-5-Cloud-Storage"><a href="#3-3-5-Cloud-Storage" class="headerlink" title="3.3.5 Cloud Storage"></a>3.3.5 Cloud Storage</h3><p>Cloud/Block Storage stores chunks of files uploaded by the users. Clients directly interact with the storage to send and receive objects from it. Separation of the metadata from storage enables us to use any storage either in the cloud or in-house.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.educative.io/courses/grokking-the-system-design-interview/m22Gymjp4mG" target="_blank" rel="noopener">Grokking the system design</a></li><li><a href="https://www.youtube.com/watch?v=U0xTu6E2CT8&t=9s&ab_channel=TechDummiesNarendraL" target="_blank" rel="noopener">Tech Dummies</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Intro-and-requirement&quot;&gt;&lt;a href=&quot;#1-Intro-and-requirement&quot; class=&quot;headerlink&quot; title=&quot;1. Intro and requirement&quot;&gt;&lt;/a&gt;1. Intro and req
      
    
    </summary>
    
    
      <category term="SystemDesign" scheme="https://www.llchen60.com/categories/SystemDesign/"/>
    
    
  </entry>
  
</feed>
